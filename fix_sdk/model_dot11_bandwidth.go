/*
Mist API

> Version: **2406.1.7** > > Date: **June 27, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.7
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// Dot11Bandwidth channel width for the band, 20 / 40 / 80 / 160 `80` is only applicable for band_5 and band_6 `160` is only for band_6
type Dot11Bandwidth int32

// List of dot11_bandwidth
const (
	DOT11BANDWIDTH__20 Dot11Bandwidth = 20
	DOT11BANDWIDTH__40 Dot11Bandwidth = 40
	DOT11BANDWIDTH__80 Dot11Bandwidth = 80
	DOT11BANDWIDTH__160 Dot11Bandwidth = 160
)

// All allowed values of Dot11Bandwidth enum
var AllowedDot11BandwidthEnumValues = []Dot11Bandwidth{
	20,
	40,
	80,
	160,
}

func (v *Dot11Bandwidth) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Dot11Bandwidth(value)
	for _, existing := range AllowedDot11BandwidthEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Dot11Bandwidth", value)
}

// NewDot11BandwidthFromValue returns a pointer to a valid Dot11Bandwidth
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDot11BandwidthFromValue(v int32) (*Dot11Bandwidth, error) {
	ev := Dot11Bandwidth(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Dot11Bandwidth: valid values are %v", v, AllowedDot11BandwidthEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Dot11Bandwidth) IsValid() bool {
	for _, existing := range AllowedDot11BandwidthEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dot11_bandwidth value
func (v Dot11Bandwidth) Ptr() *Dot11Bandwidth {
	return &v
}

type NullableDot11Bandwidth struct {
	value *Dot11Bandwidth
	isSet bool
}

func (v NullableDot11Bandwidth) Get() *Dot11Bandwidth {
	return v.value
}

func (v *NullableDot11Bandwidth) Set(val *Dot11Bandwidth) {
	v.value = val
	v.isSet = true
}

func (v NullableDot11Bandwidth) IsSet() bool {
	return v.isSet
}

func (v *NullableDot11Bandwidth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDot11Bandwidth(val *Dot11Bandwidth) *NullableDot11Bandwidth {
	return &NullableDot11Bandwidth{value: val, isSet: true}
}

func (v NullableDot11Bandwidth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDot11Bandwidth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

