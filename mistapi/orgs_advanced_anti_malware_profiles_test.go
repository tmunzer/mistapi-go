// Package mistapi
// Copyright \xA9 2024 Juniper Networks, Inc. All rights reserved
package mistapi

import (
    "context"
    "encoding/json"
    "github.com/apimatic/go-core-runtime/testHelper"
    "github.com/google/uuid"
    "github.com/tmunzer/mistapi-go/mistapi/models"
    "testing"
)

// TestOrgsAdvancedAntiMalwareProfilesTestListOrgAAMWProfiles tests the behavior of the OrgsAdvancedAntiMalwareProfiles
func TestOrgsAdvancedAntiMalwareProfilesTestListOrgAAMWProfiles(t *testing.T) {
    ctx := context.Background()
    orgId, errUUID := uuid.Parse("000000ab-00ab-00ab-00ab-0000000000ab")
    if errUUID != nil {
        t.Error(errUUID)
    }
    apiResponse, err := orgsAdvancedAntiMalwareProfiles.ListOrgAAMWProfiles(ctx, orgId)
    if err != nil {
        t.Errorf("Endpoint call failed: %v", err)
    }
    testHelper.CheckResponseStatusCode(t, apiResponse.Response.StatusCode, 200)
    expectedHeaders:= []testHelper.TestHeader{
        testHelper.NewTestHeader(true,"Content-Type","application/json"),
    }
    testHelper.CheckResponseHeaders(t, apiResponse.Response.Header, expectedHeaders, true)
    expected := `[{"categories":[{"category":"executable","hash_lookup_only":false}],"fallback_action":"block","file_action":"block","name":"aamw-custom","verdict_threshold":8}]`
    testHelper.KeysBodyMatcher(t, expected, apiResponse.Response.Body, false, false)
}

// TestOrgsAdvancedAntiMalwareProfilesTestListOrgAAMWProfiles1 tests the behavior of the OrgsAdvancedAntiMalwareProfiles
func TestOrgsAdvancedAntiMalwareProfilesTestListOrgAAMWProfiles1(t *testing.T) {
    ctx := context.Background()
    orgId, errUUID := uuid.Parse("000000ab-00ab-00ab-00ab-0000000000ab")
    if errUUID != nil {
        t.Error(errUUID)
    }
    apiResponse, err := orgsAdvancedAntiMalwareProfiles.ListOrgAAMWProfiles(ctx, orgId)
    if err != nil {
        t.Errorf("Endpoint call failed: %v", err)
    }
    testHelper.CheckResponseStatusCode(t, apiResponse.Response.StatusCode, 200)
    expectedHeaders:= []testHelper.TestHeader{
        testHelper.NewTestHeader(true,"Content-Type","application/vnd.api+json"),
    }
    testHelper.CheckResponseHeaders(t, apiResponse.Response.Header, expectedHeaders, true)
    expected := `[{"categories":[{"category":"executable","hash_lookup_only":false}],"fallback_action":"block","file_action":"block","name":"aamw-custom","verdict_threshold":8}]`
    testHelper.KeysBodyMatcher(t, expected, apiResponse.Response.Body, false, false)
}

// TestOrgsAdvancedAntiMalwareProfilesTestCreateOrgAAMWProfile tests the behavior of the OrgsAdvancedAntiMalwareProfiles
func TestOrgsAdvancedAntiMalwareProfilesTestCreateOrgAAMWProfile(t *testing.T) {
    ctx := context.Background()
    orgId, errUUID := uuid.Parse("000000ab-00ab-00ab-00ab-0000000000ab")
    if errUUID != nil {
        t.Error(errUUID)
    }
    var body models.AamwProfile
    errBody := json.Unmarshal([]byte(`{"categories":[{"category":"executable","hash_lookup_only":false}],"fallback_action":"block","file_action":"block","name":"aamw-custom","verdict_threshold":8}`), &body)
    if errBody != nil {
        t.Errorf("Cannot parse the model object.")
    }
    apiResponse, err := orgsAdvancedAntiMalwareProfiles.CreateOrgAAMWProfile(ctx, orgId, &body)
    if err != nil {
        t.Errorf("Endpoint call failed: %v", err)
    }
    testHelper.CheckResponseStatusCode(t, apiResponse.Response.StatusCode, 200)
    expectedHeaders:= []testHelper.TestHeader{
        testHelper.NewTestHeader(true,"Content-Type","application/json"),
    }
    testHelper.CheckResponseHeaders(t, apiResponse.Response.Header, expectedHeaders, true)
    expected := `{"categories":[{"category":"executable","hash_lookup_only":false}],"fallback_action":"block","file_action":"block","name":"aamw-custom","verdict_threshold":8}`
    testHelper.KeysBodyMatcher(t, expected, apiResponse.Response.Body, false, false)
}

// TestOrgsAdvancedAntiMalwareProfilesTestCreateOrgAAMWProfile1 tests the behavior of the OrgsAdvancedAntiMalwareProfiles
func TestOrgsAdvancedAntiMalwareProfilesTestCreateOrgAAMWProfile1(t *testing.T) {
    ctx := context.Background()
    orgId, errUUID := uuid.Parse("000000ab-00ab-00ab-00ab-0000000000ab")
    if errUUID != nil {
        t.Error(errUUID)
    }
    var body models.AamwProfile
    errBody := json.Unmarshal([]byte(`{"categories":[{"category":"executable","hash_lookup_only":false}],"fallback_action":"block","file_action":"block","name":"aamw-custom","verdict_threshold":8}`), &body)
    if errBody != nil {
        t.Errorf("Cannot parse the model object.")
    }
    apiResponse, err := orgsAdvancedAntiMalwareProfiles.CreateOrgAAMWProfile(ctx, orgId, &body)
    if err != nil {
        t.Errorf("Endpoint call failed: %v", err)
    }
    testHelper.CheckResponseStatusCode(t, apiResponse.Response.StatusCode, 200)
    expectedHeaders:= []testHelper.TestHeader{
        testHelper.NewTestHeader(true,"Content-Type","application/vnd.api+json"),
    }
    testHelper.CheckResponseHeaders(t, apiResponse.Response.Header, expectedHeaders, true)
    expected := `{"categories":[{"category":"executable","hash_lookup_only":false}],"fallback_action":"block","file_action":"block","name":"aamw-custom","verdict_threshold":8}`
    testHelper.KeysBodyMatcher(t, expected, apiResponse.Response.Body, false, false)
}

// TestOrgsAdvancedAntiMalwareProfilesTestCreateOrgAAMWProfile2 tests the behavior of the OrgsAdvancedAntiMalwareProfiles
func TestOrgsAdvancedAntiMalwareProfilesTestCreateOrgAAMWProfile2(t *testing.T) {
    ctx := context.Background()
    orgId, errUUID := uuid.Parse("000000ab-00ab-00ab-00ab-0000000000ab")
    if errUUID != nil {
        t.Error(errUUID)
    }
    var body models.AamwProfile
    errBody := json.Unmarshal([]byte(`{"categories":[{"category":"executable","hash_lookup_only":false}],"fallback_action":"block","file_action":"block","name":"aamw-custom","verdict_threshold":8}`), &body)
    if errBody != nil {
        t.Errorf("Cannot parse the model object.")
    }
    apiResponse, err := orgsAdvancedAntiMalwareProfiles.CreateOrgAAMWProfile(ctx, orgId, &body)
    if err != nil {
        t.Errorf("Endpoint call failed: %v", err)
    }
    testHelper.CheckResponseStatusCode(t, apiResponse.Response.StatusCode, 200)
    expectedHeaders:= []testHelper.TestHeader{
        testHelper.NewTestHeader(true,"Content-Type","application/vnd.json+api"),
    }
    testHelper.CheckResponseHeaders(t, apiResponse.Response.Header, expectedHeaders, true)
    expected := `{"aamwprofile_id":"000000ab-00ab-00ab-00ab-0000000000ab","account_id":"iojzXIJWEuiD73ZvydOfg","admin_id":"000000ab-00ab-00ab-00ab-0000000000ab","created_at":"2023-01-01T12:00:00Z","description":"Example AAMW Profile Description","name":"Example AAMW Profile","updated_at":"2023-01-01T12:00:00Z"}`
    testHelper.KeysBodyMatcher(t, expected, apiResponse.Response.Body, false, false)
}

// TestOrgsAdvancedAntiMalwareProfilesTestDeleteOrgAAMWProfile tests the behavior of the OrgsAdvancedAntiMalwareProfiles
func TestOrgsAdvancedAntiMalwareProfilesTestDeleteOrgAAMWProfile(t *testing.T) {
    ctx := context.Background()
    orgId, errUUID := uuid.Parse("000000ab-00ab-00ab-00ab-0000000000ab")
    if errUUID != nil {
        t.Error(errUUID)
    }
    aamwprofileId, errUUID := uuid.Parse("000000ab-00ab-00ab-00ab-0000000000ab")
    if errUUID != nil {
        t.Error(errUUID)
    }
    resp, err := orgsAdvancedAntiMalwareProfiles.DeleteOrgAAMWProfile(ctx, orgId, aamwprofileId)
    if err != nil {
        t.Errorf("Endpoint call failed: %v", err)
    }
    testHelper.CheckResponseStatusCode(t, resp.StatusCode, 200)
}

// TestOrgsAdvancedAntiMalwareProfilesTestGetOrgAAMWProfile tests the behavior of the OrgsAdvancedAntiMalwareProfiles
func TestOrgsAdvancedAntiMalwareProfilesTestGetOrgAAMWProfile(t *testing.T) {
    ctx := context.Background()
    orgId, errUUID := uuid.Parse("000000ab-00ab-00ab-00ab-0000000000ab")
    if errUUID != nil {
        t.Error(errUUID)
    }
    aamwprofileId, errUUID := uuid.Parse("000000ab-00ab-00ab-00ab-0000000000ab")
    if errUUID != nil {
        t.Error(errUUID)
    }
    apiResponse, err := orgsAdvancedAntiMalwareProfiles.GetOrgAAMWProfile(ctx, orgId, aamwprofileId)
    if err != nil {
        t.Errorf("Endpoint call failed: %v", err)
    }
    testHelper.CheckResponseStatusCode(t, apiResponse.Response.StatusCode, 200)
    expectedHeaders:= []testHelper.TestHeader{
        testHelper.NewTestHeader(true,"Content-Type","application/json"),
    }
    testHelper.CheckResponseHeaders(t, apiResponse.Response.Header, expectedHeaders, true)
    expected := `{"categories":[{"category":"executable","hash_lookup_only":false}],"fallback_action":"block","file_action":"block","name":"aamw-custom","verdict_threshold":8}`
    testHelper.KeysBodyMatcher(t, expected, apiResponse.Response.Body, false, false)
}

// TestOrgsAdvancedAntiMalwareProfilesTestGetOrgAAMWProfile1 tests the behavior of the OrgsAdvancedAntiMalwareProfiles
func TestOrgsAdvancedAntiMalwareProfilesTestGetOrgAAMWProfile1(t *testing.T) {
    ctx := context.Background()
    orgId, errUUID := uuid.Parse("000000ab-00ab-00ab-00ab-0000000000ab")
    if errUUID != nil {
        t.Error(errUUID)
    }
    aamwprofileId, errUUID := uuid.Parse("000000ab-00ab-00ab-00ab-0000000000ab")
    if errUUID != nil {
        t.Error(errUUID)
    }
    apiResponse, err := orgsAdvancedAntiMalwareProfiles.GetOrgAAMWProfile(ctx, orgId, aamwprofileId)
    if err != nil {
        t.Errorf("Endpoint call failed: %v", err)
    }
    testHelper.CheckResponseStatusCode(t, apiResponse.Response.StatusCode, 200)
    expectedHeaders:= []testHelper.TestHeader{
        testHelper.NewTestHeader(true,"Content-Type","application/vnd.api+json"),
    }
    testHelper.CheckResponseHeaders(t, apiResponse.Response.Header, expectedHeaders, true)
    expected := `{"categories":[{"category":"executable","hash_lookup_only":false}],"fallback_action":"block","file_action":"block","name":"aamw-custom","verdict_threshold":8}`
    testHelper.KeysBodyMatcher(t, expected, apiResponse.Response.Body, false, false)
}

// TestOrgsAdvancedAntiMalwareProfilesTestGetOrgAAMWProfile2 tests the behavior of the OrgsAdvancedAntiMalwareProfiles
func TestOrgsAdvancedAntiMalwareProfilesTestGetOrgAAMWProfile2(t *testing.T) {
    ctx := context.Background()
    orgId, errUUID := uuid.Parse("000000ab-00ab-00ab-00ab-0000000000ab")
    if errUUID != nil {
        t.Error(errUUID)
    }
    aamwprofileId, errUUID := uuid.Parse("000000ab-00ab-00ab-00ab-0000000000ab")
    if errUUID != nil {
        t.Error(errUUID)
    }
    apiResponse, err := orgsAdvancedAntiMalwareProfiles.GetOrgAAMWProfile(ctx, orgId, aamwprofileId)
    if err != nil {
        t.Errorf("Endpoint call failed: %v", err)
    }
    testHelper.CheckResponseStatusCode(t, apiResponse.Response.StatusCode, 200)
    expectedHeaders:= []testHelper.TestHeader{
        testHelper.NewTestHeader(true,"Content-Type","application/vnd.json+api"),
    }
    testHelper.CheckResponseHeaders(t, apiResponse.Response.Header, expectedHeaders, true)
    expected := `{"aamwprofile_id":"000000ab-00ab-00ab-00ab-0000000000ab","account_id":"iojzXIJWEuiD73ZvydOfg","admin_id":"000000ab-00ab-00ab-00ab-0000000000ab","created_at":"2023-01-01T12:00:00Z","description":"Example AAMW Profile Description","name":"Example AAMW Profile","updated_at":"2023-01-01T12:00:00Z"}`
    testHelper.KeysBodyMatcher(t, expected, apiResponse.Response.Body, false, false)
}

// TestOrgsAdvancedAntiMalwareProfilesTestUpdateOrgAAMWProfile tests the behavior of the OrgsAdvancedAntiMalwareProfiles
func TestOrgsAdvancedAntiMalwareProfilesTestUpdateOrgAAMWProfile(t *testing.T) {
    ctx := context.Background()
    orgId, errUUID := uuid.Parse("000000ab-00ab-00ab-00ab-0000000000ab")
    if errUUID != nil {
        t.Error(errUUID)
    }
    aamwprofileId, errUUID := uuid.Parse("000000ab-00ab-00ab-00ab-0000000000ab")
    if errUUID != nil {
        t.Error(errUUID)
    }
    var body models.AamwProfile
    errBody := json.Unmarshal([]byte(`{"categories":[{"category":"executable","hash_lookup_only":false}],"fallback_action":"block","file_action":"block","name":"aamw-custom","verdict_threshold":8}`), &body)
    if errBody != nil {
        t.Errorf("Cannot parse the model object.")
    }
    apiResponse, err := orgsAdvancedAntiMalwareProfiles.UpdateOrgAAMWProfile(ctx, orgId, aamwprofileId, &body)
    if err != nil {
        t.Errorf("Endpoint call failed: %v", err)
    }
    testHelper.CheckResponseStatusCode(t, apiResponse.Response.StatusCode, 200)
    expectedHeaders:= []testHelper.TestHeader{
        testHelper.NewTestHeader(true,"Content-Type","application/json"),
    }
    testHelper.CheckResponseHeaders(t, apiResponse.Response.Header, expectedHeaders, true)
    expected := `{"categories":[{"category":"executable","hash_lookup_only":false}],"fallback_action":"block","file_action":"block","name":"aamw-custom","verdict_threshold":8}`
    testHelper.KeysBodyMatcher(t, expected, apiResponse.Response.Body, false, false)
}

// TestOrgsAdvancedAntiMalwareProfilesTestUpdateOrgAAMWProfile1 tests the behavior of the OrgsAdvancedAntiMalwareProfiles
func TestOrgsAdvancedAntiMalwareProfilesTestUpdateOrgAAMWProfile1(t *testing.T) {
    ctx := context.Background()
    orgId, errUUID := uuid.Parse("000000ab-00ab-00ab-00ab-0000000000ab")
    if errUUID != nil {
        t.Error(errUUID)
    }
    aamwprofileId, errUUID := uuid.Parse("000000ab-00ab-00ab-00ab-0000000000ab")
    if errUUID != nil {
        t.Error(errUUID)
    }
    var body models.AamwProfile
    errBody := json.Unmarshal([]byte(`{"categories":[{"category":"executable","hash_lookup_only":false}],"fallback_action":"block","file_action":"block","name":"aamw-custom","verdict_threshold":8}`), &body)
    if errBody != nil {
        t.Errorf("Cannot parse the model object.")
    }
    apiResponse, err := orgsAdvancedAntiMalwareProfiles.UpdateOrgAAMWProfile(ctx, orgId, aamwprofileId, &body)
    if err != nil {
        t.Errorf("Endpoint call failed: %v", err)
    }
    testHelper.CheckResponseStatusCode(t, apiResponse.Response.StatusCode, 200)
    expectedHeaders:= []testHelper.TestHeader{
        testHelper.NewTestHeader(true,"Content-Type","application/vnd.api+json"),
    }
    testHelper.CheckResponseHeaders(t, apiResponse.Response.Header, expectedHeaders, true)
    expected := `{"categories":[{"category":"executable","hash_lookup_only":false}],"fallback_action":"block","file_action":"block","name":"aamw-custom","verdict_threshold":8}`
    testHelper.KeysBodyMatcher(t, expected, apiResponse.Response.Body, false, false)
}

// TestOrgsAdvancedAntiMalwareProfilesTestUpdateOrgAAMWProfile2 tests the behavior of the OrgsAdvancedAntiMalwareProfiles
func TestOrgsAdvancedAntiMalwareProfilesTestUpdateOrgAAMWProfile2(t *testing.T) {
    ctx := context.Background()
    orgId, errUUID := uuid.Parse("000000ab-00ab-00ab-00ab-0000000000ab")
    if errUUID != nil {
        t.Error(errUUID)
    }
    aamwprofileId, errUUID := uuid.Parse("000000ab-00ab-00ab-00ab-0000000000ab")
    if errUUID != nil {
        t.Error(errUUID)
    }
    var body models.AamwProfile
    errBody := json.Unmarshal([]byte(`{"categories":[{"category":"executable","hash_lookup_only":false}],"fallback_action":"block","file_action":"block","name":"aamw-custom","verdict_threshold":8}`), &body)
    if errBody != nil {
        t.Errorf("Cannot parse the model object.")
    }
    apiResponse, err := orgsAdvancedAntiMalwareProfiles.UpdateOrgAAMWProfile(ctx, orgId, aamwprofileId, &body)
    if err != nil {
        t.Errorf("Endpoint call failed: %v", err)
    }
    testHelper.CheckResponseStatusCode(t, apiResponse.Response.StatusCode, 200)
    expectedHeaders:= []testHelper.TestHeader{
        testHelper.NewTestHeader(true,"Content-Type","application/vnd.json+api"),
    }
    testHelper.CheckResponseHeaders(t, apiResponse.Response.Header, expectedHeaders, true)
    expected := `{"aamwprofile_id":"000000ab-00ab-00ab-00ab-0000000000ab","account_id":"iojzXIJWEuiD73ZvydOfg","admin_id":"000000ab-00ab-00ab-00ab-0000000000ab","created_at":"2023-01-01T12:00:00Z","description":"Example AAMW Profile Description","name":"Example AAMW Profile","updated_at":"2023-01-01T12:00:00Z"}`
    testHelper.KeysBodyMatcher(t, expected, apiResponse.Response.Body, false, false)
}
