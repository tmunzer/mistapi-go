// Package mistapi
// Copyright \xA9 2024 Juniper Networks, Inc. All rights reserved
package models

import (
    "encoding/json"
    "fmt"
    "github.com/google/uuid"
)

// SiteSettingSwitch represents a SiteSettingSwitch struct.
type SiteSettingSwitch struct {
    AclPolicies           []AclPolicy                            `json:"acl_policies,omitempty"`
    // ACL Tags to identify traffic source or destination. Key name is the tag name
    AclTags               map[string]AclTag                      `json:"acl_tags,omitempty"`
    // additional CLI commands to append to the generated Junos config. **Note**: no check is done
    AdditionalConfigCmds  []string                               `json:"additional_config_cmds,omitempty"`
    // When the object has been created, in epoch
    CreatedTime           *float64                               `json:"created_time,omitempty"`
    DhcpSnooping          *DhcpSnooping                          `json:"dhcp_snooping,omitempty"`
    // Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
    DnsServers            []string                               `json:"dns_servers,omitempty"`
    // Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
    DnsSuffix             []string                               `json:"dns_suffix,omitempty"`
    // Property key is the destination CIDR (e.g. "10.0.0.0/8")
    ExtraRoutes           map[string]ExtraRoute                  `json:"extra_routes,omitempty"`
    // Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
    ExtraRoutes6          map[string]ExtraRoute6                 `json:"extra_routes6,omitempty"`
    // Unique ID of the object instance in the Mist Organization
    Id                    *uuid.UUID                             `json:"id,omitempty"`
    // Org Networks that we'd like to import
    ImportOrgNetworks     []string                               `json:"import_org_networks,omitempty"`
    // Enable mist_nac to use RadSec
    MistNac               *SwitchMistNac                         `json:"mist_nac,omitempty"`
    // When the object has been modified for the last time, in epoch
    ModifiedTime          *float64                               `json:"modified_time,omitempty"`
    Name                  *string                                `json:"name,omitempty"`
    // Property key is network name
    Networks              map[string]SwitchNetwork               `json:"networks,omitempty"`
    // List of NTP servers specific to this device. By default, those in Site Settings will be used
    NtpServers            []string                               `json:"ntp_servers,omitempty"`
    OrgId                 *uuid.UUID                             `json:"org_id,omitempty"`
    // Junos OSPF areas. Property key is the OSPF Area (Area should be a number (0-255) / IP address)
    OspfAreas             map[string]OspfArea                    `json:"ospf_areas,omitempty"`
    // Property key is the port mirroring instance name. `port_mirroring` can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output. A maximum 4 mirroring ports is allowed
    PortMirroring         map[string]SwitchPortMirroringProperty `json:"port_mirroring,omitempty"`
    // Property key is the port usage name. Defines the profiles of port configuration configured on the switch
    PortUsages            map[string]SwitchPortUsage             `json:"port_usages,omitempty"`
    // Junos Radius config
    RadiusConfig          *SwitchRadiusConfig                    `json:"radius_config,omitempty"`
    RemoteSyslog          *RemoteSyslog                          `json:"remote_syslog,omitempty"`
    // By default, only the configuration generated by Mist is cleaned up during the configuration process. If `true`, all the existing configuration will be removed.
    RemoveExistingConfigs *bool                                  `json:"remove_existing_configs,omitempty"`
    SnmpConfig            *SnmpConfig                            `json:"snmp_config,omitempty"`
    // Defines custom switch configuration based on different criteria
    SwitchMatching        *SwitchMatching                        `json:"switch_matching,omitempty"`
    // Switch settings
    SwitchMgmt            *SwitchMgmt                            `json:"switch_mgmt,omitempty"`
    VrfConfig             *VrfConfig                             `json:"vrf_config,omitempty"`
    // Property key is the network name
    VrfInstances          map[string]SwitchVrfInstance           `json:"vrf_instances,omitempty"`
    AutoUpgrade           *SwitchAutoUpgrade                     `json:"auto_upgrade,omitempty"`
    AdditionalProperties  map[string]interface{}                 `json:"_"`
}

// String implements the fmt.Stringer interface for SiteSettingSwitch,
// providing a human-readable string representation useful for logging, debugging or displaying information.
func (s SiteSettingSwitch) String() string {
    return fmt.Sprintf(
    	"SiteSettingSwitch[AclPolicies=%v, AclTags=%v, AdditionalConfigCmds=%v, CreatedTime=%v, DhcpSnooping=%v, DnsServers=%v, DnsSuffix=%v, ExtraRoutes=%v, ExtraRoutes6=%v, Id=%v, ImportOrgNetworks=%v, MistNac=%v, ModifiedTime=%v, Name=%v, Networks=%v, NtpServers=%v, OrgId=%v, OspfAreas=%v, PortMirroring=%v, PortUsages=%v, RadiusConfig=%v, RemoteSyslog=%v, RemoveExistingConfigs=%v, SnmpConfig=%v, SwitchMatching=%v, SwitchMgmt=%v, VrfConfig=%v, VrfInstances=%v, AutoUpgrade=%v, AdditionalProperties=%v]",
    	s.AclPolicies, s.AclTags, s.AdditionalConfigCmds, s.CreatedTime, s.DhcpSnooping, s.DnsServers, s.DnsSuffix, s.ExtraRoutes, s.ExtraRoutes6, s.Id, s.ImportOrgNetworks, s.MistNac, s.ModifiedTime, s.Name, s.Networks, s.NtpServers, s.OrgId, s.OspfAreas, s.PortMirroring, s.PortUsages, s.RadiusConfig, s.RemoteSyslog, s.RemoveExistingConfigs, s.SnmpConfig, s.SwitchMatching, s.SwitchMgmt, s.VrfConfig, s.VrfInstances, s.AutoUpgrade, s.AdditionalProperties)
}

// MarshalJSON implements the json.Marshaler interface for SiteSettingSwitch.
// It customizes the JSON marshaling process for SiteSettingSwitch objects.
func (s SiteSettingSwitch) MarshalJSON() (
    []byte,
    error) {
    if err := DetectConflictingProperties(s.AdditionalProperties,
        "acl_policies", "acl_tags", "additional_config_cmds", "created_time", "dhcp_snooping", "dns_servers", "dns_suffix", "extra_routes", "extra_routes6", "id", "import_org_networks", "mist_nac", "modified_time", "name", "networks", "ntp_servers", "org_id", "ospf_areas", "port_mirroring", "port_usages", "radius_config", "remote_syslog", "remove_existing_configs", "snmp_config", "switch_matching", "switch_mgmt", "vrf_config", "vrf_instances", "auto_upgrade"); err != nil {
        return []byte{}, err
    }
    return json.Marshal(s.toMap())
}

// toMap converts the SiteSettingSwitch object to a map representation for JSON marshaling.
func (s SiteSettingSwitch) toMap() map[string]any {
    structMap := make(map[string]any)
    MergeAdditionalProperties(structMap, s.AdditionalProperties)
    if s.AclPolicies != nil {
        structMap["acl_policies"] = s.AclPolicies
    }
    if s.AclTags != nil {
        structMap["acl_tags"] = s.AclTags
    }
    if s.AdditionalConfigCmds != nil {
        structMap["additional_config_cmds"] = s.AdditionalConfigCmds
    }
    if s.CreatedTime != nil {
        structMap["created_time"] = s.CreatedTime
    }
    if s.DhcpSnooping != nil {
        structMap["dhcp_snooping"] = s.DhcpSnooping.toMap()
    }
    if s.DnsServers != nil {
        structMap["dns_servers"] = s.DnsServers
    }
    if s.DnsSuffix != nil {
        structMap["dns_suffix"] = s.DnsSuffix
    }
    if s.ExtraRoutes != nil {
        structMap["extra_routes"] = s.ExtraRoutes
    }
    if s.ExtraRoutes6 != nil {
        structMap["extra_routes6"] = s.ExtraRoutes6
    }
    if s.Id != nil {
        structMap["id"] = s.Id
    }
    if s.ImportOrgNetworks != nil {
        structMap["import_org_networks"] = s.ImportOrgNetworks
    }
    if s.MistNac != nil {
        structMap["mist_nac"] = s.MistNac.toMap()
    }
    if s.ModifiedTime != nil {
        structMap["modified_time"] = s.ModifiedTime
    }
    if s.Name != nil {
        structMap["name"] = s.Name
    }
    if s.Networks != nil {
        structMap["networks"] = s.Networks
    }
    if s.NtpServers != nil {
        structMap["ntp_servers"] = s.NtpServers
    }
    if s.OrgId != nil {
        structMap["org_id"] = s.OrgId
    }
    if s.OspfAreas != nil {
        structMap["ospf_areas"] = s.OspfAreas
    }
    if s.PortMirroring != nil {
        structMap["port_mirroring"] = s.PortMirroring
    }
    if s.PortUsages != nil {
        structMap["port_usages"] = s.PortUsages
    }
    if s.RadiusConfig != nil {
        structMap["radius_config"] = s.RadiusConfig.toMap()
    }
    if s.RemoteSyslog != nil {
        structMap["remote_syslog"] = s.RemoteSyslog.toMap()
    }
    if s.RemoveExistingConfigs != nil {
        structMap["remove_existing_configs"] = s.RemoveExistingConfigs
    }
    if s.SnmpConfig != nil {
        structMap["snmp_config"] = s.SnmpConfig.toMap()
    }
    if s.SwitchMatching != nil {
        structMap["switch_matching"] = s.SwitchMatching.toMap()
    }
    if s.SwitchMgmt != nil {
        structMap["switch_mgmt"] = s.SwitchMgmt.toMap()
    }
    if s.VrfConfig != nil {
        structMap["vrf_config"] = s.VrfConfig.toMap()
    }
    if s.VrfInstances != nil {
        structMap["vrf_instances"] = s.VrfInstances
    }
    if s.AutoUpgrade != nil {
        structMap["auto_upgrade"] = s.AutoUpgrade.toMap()
    }
    return structMap
}

// UnmarshalJSON implements the json.Unmarshaler interface for SiteSettingSwitch.
// It customizes the JSON unmarshaling process for SiteSettingSwitch objects.
func (s *SiteSettingSwitch) UnmarshalJSON(input []byte) error {
    var temp tempSiteSettingSwitch
    err := json.Unmarshal(input, &temp)
    if err != nil {
    	return err
    }
    additionalProperties, err := ExtractAdditionalProperties[interface{}](input, "acl_policies", "acl_tags", "additional_config_cmds", "created_time", "dhcp_snooping", "dns_servers", "dns_suffix", "extra_routes", "extra_routes6", "id", "import_org_networks", "mist_nac", "modified_time", "name", "networks", "ntp_servers", "org_id", "ospf_areas", "port_mirroring", "port_usages", "radius_config", "remote_syslog", "remove_existing_configs", "snmp_config", "switch_matching", "switch_mgmt", "vrf_config", "vrf_instances", "auto_upgrade")
    if err != nil {
    	return err
    }
    s.AdditionalProperties = additionalProperties
    
    s.AclPolicies = temp.AclPolicies
    s.AclTags = temp.AclTags
    s.AdditionalConfigCmds = temp.AdditionalConfigCmds
    s.CreatedTime = temp.CreatedTime
    s.DhcpSnooping = temp.DhcpSnooping
    s.DnsServers = temp.DnsServers
    s.DnsSuffix = temp.DnsSuffix
    s.ExtraRoutes = temp.ExtraRoutes
    s.ExtraRoutes6 = temp.ExtraRoutes6
    s.Id = temp.Id
    s.ImportOrgNetworks = temp.ImportOrgNetworks
    s.MistNac = temp.MistNac
    s.ModifiedTime = temp.ModifiedTime
    s.Name = temp.Name
    s.Networks = temp.Networks
    s.NtpServers = temp.NtpServers
    s.OrgId = temp.OrgId
    s.OspfAreas = temp.OspfAreas
    s.PortMirroring = temp.PortMirroring
    s.PortUsages = temp.PortUsages
    s.RadiusConfig = temp.RadiusConfig
    s.RemoteSyslog = temp.RemoteSyslog
    s.RemoveExistingConfigs = temp.RemoveExistingConfigs
    s.SnmpConfig = temp.SnmpConfig
    s.SwitchMatching = temp.SwitchMatching
    s.SwitchMgmt = temp.SwitchMgmt
    s.VrfConfig = temp.VrfConfig
    s.VrfInstances = temp.VrfInstances
    s.AutoUpgrade = temp.AutoUpgrade
    return nil
}

// tempSiteSettingSwitch is a temporary struct used for validating the fields of SiteSettingSwitch.
type tempSiteSettingSwitch  struct {
    AclPolicies           []AclPolicy                            `json:"acl_policies,omitempty"`
    AclTags               map[string]AclTag                      `json:"acl_tags,omitempty"`
    AdditionalConfigCmds  []string                               `json:"additional_config_cmds,omitempty"`
    CreatedTime           *float64                               `json:"created_time,omitempty"`
    DhcpSnooping          *DhcpSnooping                          `json:"dhcp_snooping,omitempty"`
    DnsServers            []string                               `json:"dns_servers,omitempty"`
    DnsSuffix             []string                               `json:"dns_suffix,omitempty"`
    ExtraRoutes           map[string]ExtraRoute                  `json:"extra_routes,omitempty"`
    ExtraRoutes6          map[string]ExtraRoute6                 `json:"extra_routes6,omitempty"`
    Id                    *uuid.UUID                             `json:"id,omitempty"`
    ImportOrgNetworks     []string                               `json:"import_org_networks,omitempty"`
    MistNac               *SwitchMistNac                         `json:"mist_nac,omitempty"`
    ModifiedTime          *float64                               `json:"modified_time,omitempty"`
    Name                  *string                                `json:"name,omitempty"`
    Networks              map[string]SwitchNetwork               `json:"networks,omitempty"`
    NtpServers            []string                               `json:"ntp_servers,omitempty"`
    OrgId                 *uuid.UUID                             `json:"org_id,omitempty"`
    OspfAreas             map[string]OspfArea                    `json:"ospf_areas,omitempty"`
    PortMirroring         map[string]SwitchPortMirroringProperty `json:"port_mirroring,omitempty"`
    PortUsages            map[string]SwitchPortUsage             `json:"port_usages,omitempty"`
    RadiusConfig          *SwitchRadiusConfig                    `json:"radius_config,omitempty"`
    RemoteSyslog          *RemoteSyslog                          `json:"remote_syslog,omitempty"`
    RemoveExistingConfigs *bool                                  `json:"remove_existing_configs,omitempty"`
    SnmpConfig            *SnmpConfig                            `json:"snmp_config,omitempty"`
    SwitchMatching        *SwitchMatching                        `json:"switch_matching,omitempty"`
    SwitchMgmt            *SwitchMgmt                            `json:"switch_mgmt,omitempty"`
    VrfConfig             *VrfConfig                             `json:"vrf_config,omitempty"`
    VrfInstances          map[string]SwitchVrfInstance           `json:"vrf_instances,omitempty"`
    AutoUpgrade           *SwitchAutoUpgrade                     `json:"auto_upgrade,omitempty"`
}
