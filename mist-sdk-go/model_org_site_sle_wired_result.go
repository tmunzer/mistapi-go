/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the OrgSiteSleWiredResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrgSiteSleWiredResult{}

// OrgSiteSleWiredResult struct for OrgSiteSleWiredResult
type OrgSiteSleWiredResult struct {
	NumClients *float32 `json:"num_clients,omitempty"`
	NumSwitches *float32 `json:"num_switches,omitempty"`
	SiteId string `json:"site_id"`
	SwitchHealth *float32 `json:"switch_health,omitempty"`
	SwitchStc *float32 `json:"switch_stc,omitempty"`
	SwitchThroughput *float32 `json:"switch_throughput,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrgSiteSleWiredResult OrgSiteSleWiredResult

// NewOrgSiteSleWiredResult instantiates a new OrgSiteSleWiredResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgSiteSleWiredResult(siteId string) *OrgSiteSleWiredResult {
	this := OrgSiteSleWiredResult{}
	this.SiteId = siteId
	return &this
}

// NewOrgSiteSleWiredResultWithDefaults instantiates a new OrgSiteSleWiredResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgSiteSleWiredResultWithDefaults() *OrgSiteSleWiredResult {
	this := OrgSiteSleWiredResult{}
	return &this
}

// GetNumClients returns the NumClients field value if set, zero value otherwise.
func (o *OrgSiteSleWiredResult) GetNumClients() float32 {
	if o == nil || IsNil(o.NumClients) {
		var ret float32
		return ret
	}
	return *o.NumClients
}

// GetNumClientsOk returns a tuple with the NumClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSiteSleWiredResult) GetNumClientsOk() (*float32, bool) {
	if o == nil || IsNil(o.NumClients) {
		return nil, false
	}
	return o.NumClients, true
}

// HasNumClients returns a boolean if a field has been set.
func (o *OrgSiteSleWiredResult) HasNumClients() bool {
	if o != nil && !IsNil(o.NumClients) {
		return true
	}

	return false
}

// SetNumClients gets a reference to the given float32 and assigns it to the NumClients field.
func (o *OrgSiteSleWiredResult) SetNumClients(v float32) {
	o.NumClients = &v
}

// GetNumSwitches returns the NumSwitches field value if set, zero value otherwise.
func (o *OrgSiteSleWiredResult) GetNumSwitches() float32 {
	if o == nil || IsNil(o.NumSwitches) {
		var ret float32
		return ret
	}
	return *o.NumSwitches
}

// GetNumSwitchesOk returns a tuple with the NumSwitches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSiteSleWiredResult) GetNumSwitchesOk() (*float32, bool) {
	if o == nil || IsNil(o.NumSwitches) {
		return nil, false
	}
	return o.NumSwitches, true
}

// HasNumSwitches returns a boolean if a field has been set.
func (o *OrgSiteSleWiredResult) HasNumSwitches() bool {
	if o != nil && !IsNil(o.NumSwitches) {
		return true
	}

	return false
}

// SetNumSwitches gets a reference to the given float32 and assigns it to the NumSwitches field.
func (o *OrgSiteSleWiredResult) SetNumSwitches(v float32) {
	o.NumSwitches = &v
}

// GetSiteId returns the SiteId field value
func (o *OrgSiteSleWiredResult) GetSiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *OrgSiteSleWiredResult) GetSiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *OrgSiteSleWiredResult) SetSiteId(v string) {
	o.SiteId = v
}

// GetSwitchHealth returns the SwitchHealth field value if set, zero value otherwise.
func (o *OrgSiteSleWiredResult) GetSwitchHealth() float32 {
	if o == nil || IsNil(o.SwitchHealth) {
		var ret float32
		return ret
	}
	return *o.SwitchHealth
}

// GetSwitchHealthOk returns a tuple with the SwitchHealth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSiteSleWiredResult) GetSwitchHealthOk() (*float32, bool) {
	if o == nil || IsNil(o.SwitchHealth) {
		return nil, false
	}
	return o.SwitchHealth, true
}

// HasSwitchHealth returns a boolean if a field has been set.
func (o *OrgSiteSleWiredResult) HasSwitchHealth() bool {
	if o != nil && !IsNil(o.SwitchHealth) {
		return true
	}

	return false
}

// SetSwitchHealth gets a reference to the given float32 and assigns it to the SwitchHealth field.
func (o *OrgSiteSleWiredResult) SetSwitchHealth(v float32) {
	o.SwitchHealth = &v
}

// GetSwitchStc returns the SwitchStc field value if set, zero value otherwise.
func (o *OrgSiteSleWiredResult) GetSwitchStc() float32 {
	if o == nil || IsNil(o.SwitchStc) {
		var ret float32
		return ret
	}
	return *o.SwitchStc
}

// GetSwitchStcOk returns a tuple with the SwitchStc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSiteSleWiredResult) GetSwitchStcOk() (*float32, bool) {
	if o == nil || IsNil(o.SwitchStc) {
		return nil, false
	}
	return o.SwitchStc, true
}

// HasSwitchStc returns a boolean if a field has been set.
func (o *OrgSiteSleWiredResult) HasSwitchStc() bool {
	if o != nil && !IsNil(o.SwitchStc) {
		return true
	}

	return false
}

// SetSwitchStc gets a reference to the given float32 and assigns it to the SwitchStc field.
func (o *OrgSiteSleWiredResult) SetSwitchStc(v float32) {
	o.SwitchStc = &v
}

// GetSwitchThroughput returns the SwitchThroughput field value if set, zero value otherwise.
func (o *OrgSiteSleWiredResult) GetSwitchThroughput() float32 {
	if o == nil || IsNil(o.SwitchThroughput) {
		var ret float32
		return ret
	}
	return *o.SwitchThroughput
}

// GetSwitchThroughputOk returns a tuple with the SwitchThroughput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSiteSleWiredResult) GetSwitchThroughputOk() (*float32, bool) {
	if o == nil || IsNil(o.SwitchThroughput) {
		return nil, false
	}
	return o.SwitchThroughput, true
}

// HasSwitchThroughput returns a boolean if a field has been set.
func (o *OrgSiteSleWiredResult) HasSwitchThroughput() bool {
	if o != nil && !IsNil(o.SwitchThroughput) {
		return true
	}

	return false
}

// SetSwitchThroughput gets a reference to the given float32 and assigns it to the SwitchThroughput field.
func (o *OrgSiteSleWiredResult) SetSwitchThroughput(v float32) {
	o.SwitchThroughput = &v
}

func (o OrgSiteSleWiredResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrgSiteSleWiredResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NumClients) {
		toSerialize["num_clients"] = o.NumClients
	}
	if !IsNil(o.NumSwitches) {
		toSerialize["num_switches"] = o.NumSwitches
	}
	toSerialize["site_id"] = o.SiteId
	if !IsNil(o.SwitchHealth) {
		toSerialize["switch_health"] = o.SwitchHealth
	}
	if !IsNil(o.SwitchStc) {
		toSerialize["switch_stc"] = o.SwitchStc
	}
	if !IsNil(o.SwitchThroughput) {
		toSerialize["switch_throughput"] = o.SwitchThroughput
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrgSiteSleWiredResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"site_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrgSiteSleWiredResult := _OrgSiteSleWiredResult{}

	err = json.Unmarshal(data, &varOrgSiteSleWiredResult)

	if err != nil {
		return err
	}

	*o = OrgSiteSleWiredResult(varOrgSiteSleWiredResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "num_clients")
		delete(additionalProperties, "num_switches")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "switch_health")
		delete(additionalProperties, "switch_stc")
		delete(additionalProperties, "switch_throughput")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrgSiteSleWiredResult struct {
	value *OrgSiteSleWiredResult
	isSet bool
}

func (v NullableOrgSiteSleWiredResult) Get() *OrgSiteSleWiredResult {
	return v.value
}

func (v *NullableOrgSiteSleWiredResult) Set(val *OrgSiteSleWiredResult) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgSiteSleWiredResult) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgSiteSleWiredResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgSiteSleWiredResult(val *OrgSiteSleWiredResult) *NullableOrgSiteSleWiredResult {
	return &NullableOrgSiteSleWiredResult{value: val, isSet: true}
}

func (v NullableOrgSiteSleWiredResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgSiteSleWiredResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


