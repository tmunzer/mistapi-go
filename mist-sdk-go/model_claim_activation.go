/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the ClaimActivation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClaimActivation{}

// ClaimActivation struct for ClaimActivation
type ClaimActivation struct {
	// activation code
	Code string `json:"code"`
	DeviceType *DeviceType `json:"device_type,omitempty"`
	Type ClaimType `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _ClaimActivation ClaimActivation

// NewClaimActivation instantiates a new ClaimActivation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClaimActivation(code string, type_ ClaimType) *ClaimActivation {
	this := ClaimActivation{}
	this.Code = code
	var deviceType DeviceType = DEVICETYPE_AP
	this.DeviceType = &deviceType
	this.Type = type_
	return &this
}

// NewClaimActivationWithDefaults instantiates a new ClaimActivation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClaimActivationWithDefaults() *ClaimActivation {
	this := ClaimActivation{}
	var deviceType DeviceType = DEVICETYPE_AP
	this.DeviceType = &deviceType
	var type_ ClaimType = CLAIMTYPE_ALL
	this.Type = type_
	return &this
}

// GetCode returns the Code field value
func (o *ClaimActivation) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *ClaimActivation) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *ClaimActivation) SetCode(v string) {
	o.Code = v
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *ClaimActivation) GetDeviceType() DeviceType {
	if o == nil || IsNil(o.DeviceType) {
		var ret DeviceType
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimActivation) GetDeviceTypeOk() (*DeviceType, bool) {
	if o == nil || IsNil(o.DeviceType) {
		return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *ClaimActivation) HasDeviceType() bool {
	if o != nil && !IsNil(o.DeviceType) {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given DeviceType and assigns it to the DeviceType field.
func (o *ClaimActivation) SetDeviceType(v DeviceType) {
	o.DeviceType = &v
}

// GetType returns the Type field value
func (o *ClaimActivation) GetType() ClaimType {
	if o == nil {
		var ret ClaimType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ClaimActivation) GetTypeOk() (*ClaimType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ClaimActivation) SetType(v ClaimType) {
	o.Type = v
}

func (o ClaimActivation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClaimActivation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	if !IsNil(o.DeviceType) {
		toSerialize["device_type"] = o.DeviceType
	}
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClaimActivation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClaimActivation := _ClaimActivation{}

	err = json.Unmarshal(data, &varClaimActivation)

	if err != nil {
		return err
	}

	*o = ClaimActivation(varClaimActivation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "device_type")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClaimActivation struct {
	value *ClaimActivation
	isSet bool
}

func (v NullableClaimActivation) Get() *ClaimActivation {
	return v.value
}

func (v *NullableClaimActivation) Set(val *ClaimActivation) {
	v.value = val
	v.isSet = true
}

func (v NullableClaimActivation) IsSet() bool {
	return v.isSet
}

func (v *NullableClaimActivation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClaimActivation(val *ClaimActivation) *NullableClaimActivation {
	return &NullableClaimActivation{value: val, isSet: true}
}

func (v NullableClaimActivation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClaimActivation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


