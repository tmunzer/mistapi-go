/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the RemoteSyslogServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoteSyslogServer{}

// RemoteSyslogServer struct for RemoteSyslogServer
type RemoteSyslogServer struct {
	Contents []RemoteSyslogContent `json:"contents,omitempty"`
	ExplicitPriority *bool `json:"explicit_priority,omitempty"`
	Facility *RemoteSyslogFacility `json:"facility,omitempty"`
	Host *string `json:"host,omitempty"`
	Match *string `json:"match,omitempty"`
	Port *int32 `json:"port,omitempty"`
	Protocol *RemoteSyslogServerProtocol `json:"protocol,omitempty"`
	RoutingInstance *string `json:"routing_instance,omitempty"`
	Severity *RemoteSyslogSeverity `json:"severity,omitempty"`
	// if source_address is configured, will use the vlan firstly otherwise use source_ip
	SourceAddress *string `json:"source_address,omitempty"`
	StructuredData *bool `json:"structured_data,omitempty"`
	Tag *string `json:"tag,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RemoteSyslogServer RemoteSyslogServer

// NewRemoteSyslogServer instantiates a new RemoteSyslogServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteSyslogServer() *RemoteSyslogServer {
	this := RemoteSyslogServer{}
	var facility RemoteSyslogFacility = REMOTESYSLOGFACILITY_ANY
	this.Facility = &facility
	var port int32 = 514
	this.Port = &port
	var protocol RemoteSyslogServerProtocol = REMOTESYSLOGSERVERPROTOCOL_UDP
	this.Protocol = &protocol
	var severity RemoteSyslogSeverity = REMOTESYSLOGSEVERITY_ANY
	this.Severity = &severity
	return &this
}

// NewRemoteSyslogServerWithDefaults instantiates a new RemoteSyslogServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteSyslogServerWithDefaults() *RemoteSyslogServer {
	this := RemoteSyslogServer{}
	var facility RemoteSyslogFacility = REMOTESYSLOGFACILITY_ANY
	this.Facility = &facility
	var port int32 = 514
	this.Port = &port
	var protocol RemoteSyslogServerProtocol = REMOTESYSLOGSERVERPROTOCOL_UDP
	this.Protocol = &protocol
	var severity RemoteSyslogSeverity = REMOTESYSLOGSEVERITY_ANY
	this.Severity = &severity
	return &this
}

// GetContents returns the Contents field value if set, zero value otherwise.
func (o *RemoteSyslogServer) GetContents() []RemoteSyslogContent {
	if o == nil || IsNil(o.Contents) {
		var ret []RemoteSyslogContent
		return ret
	}
	return o.Contents
}

// GetContentsOk returns a tuple with the Contents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslogServer) GetContentsOk() ([]RemoteSyslogContent, bool) {
	if o == nil || IsNil(o.Contents) {
		return nil, false
	}
	return o.Contents, true
}

// HasContents returns a boolean if a field has been set.
func (o *RemoteSyslogServer) HasContents() bool {
	if o != nil && !IsNil(o.Contents) {
		return true
	}

	return false
}

// SetContents gets a reference to the given []RemoteSyslogContent and assigns it to the Contents field.
func (o *RemoteSyslogServer) SetContents(v []RemoteSyslogContent) {
	o.Contents = v
}

// GetExplicitPriority returns the ExplicitPriority field value if set, zero value otherwise.
func (o *RemoteSyslogServer) GetExplicitPriority() bool {
	if o == nil || IsNil(o.ExplicitPriority) {
		var ret bool
		return ret
	}
	return *o.ExplicitPriority
}

// GetExplicitPriorityOk returns a tuple with the ExplicitPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslogServer) GetExplicitPriorityOk() (*bool, bool) {
	if o == nil || IsNil(o.ExplicitPriority) {
		return nil, false
	}
	return o.ExplicitPriority, true
}

// HasExplicitPriority returns a boolean if a field has been set.
func (o *RemoteSyslogServer) HasExplicitPriority() bool {
	if o != nil && !IsNil(o.ExplicitPriority) {
		return true
	}

	return false
}

// SetExplicitPriority gets a reference to the given bool and assigns it to the ExplicitPriority field.
func (o *RemoteSyslogServer) SetExplicitPriority(v bool) {
	o.ExplicitPriority = &v
}

// GetFacility returns the Facility field value if set, zero value otherwise.
func (o *RemoteSyslogServer) GetFacility() RemoteSyslogFacility {
	if o == nil || IsNil(o.Facility) {
		var ret RemoteSyslogFacility
		return ret
	}
	return *o.Facility
}

// GetFacilityOk returns a tuple with the Facility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslogServer) GetFacilityOk() (*RemoteSyslogFacility, bool) {
	if o == nil || IsNil(o.Facility) {
		return nil, false
	}
	return o.Facility, true
}

// HasFacility returns a boolean if a field has been set.
func (o *RemoteSyslogServer) HasFacility() bool {
	if o != nil && !IsNil(o.Facility) {
		return true
	}

	return false
}

// SetFacility gets a reference to the given RemoteSyslogFacility and assigns it to the Facility field.
func (o *RemoteSyslogServer) SetFacility(v RemoteSyslogFacility) {
	o.Facility = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *RemoteSyslogServer) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslogServer) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *RemoteSyslogServer) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *RemoteSyslogServer) SetHost(v string) {
	o.Host = &v
}

// GetMatch returns the Match field value if set, zero value otherwise.
func (o *RemoteSyslogServer) GetMatch() string {
	if o == nil || IsNil(o.Match) {
		var ret string
		return ret
	}
	return *o.Match
}

// GetMatchOk returns a tuple with the Match field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslogServer) GetMatchOk() (*string, bool) {
	if o == nil || IsNil(o.Match) {
		return nil, false
	}
	return o.Match, true
}

// HasMatch returns a boolean if a field has been set.
func (o *RemoteSyslogServer) HasMatch() bool {
	if o != nil && !IsNil(o.Match) {
		return true
	}

	return false
}

// SetMatch gets a reference to the given string and assigns it to the Match field.
func (o *RemoteSyslogServer) SetMatch(v string) {
	o.Match = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *RemoteSyslogServer) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslogServer) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *RemoteSyslogServer) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *RemoteSyslogServer) SetPort(v int32) {
	o.Port = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *RemoteSyslogServer) GetProtocol() RemoteSyslogServerProtocol {
	if o == nil || IsNil(o.Protocol) {
		var ret RemoteSyslogServerProtocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslogServer) GetProtocolOk() (*RemoteSyslogServerProtocol, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *RemoteSyslogServer) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given RemoteSyslogServerProtocol and assigns it to the Protocol field.
func (o *RemoteSyslogServer) SetProtocol(v RemoteSyslogServerProtocol) {
	o.Protocol = &v
}

// GetRoutingInstance returns the RoutingInstance field value if set, zero value otherwise.
func (o *RemoteSyslogServer) GetRoutingInstance() string {
	if o == nil || IsNil(o.RoutingInstance) {
		var ret string
		return ret
	}
	return *o.RoutingInstance
}

// GetRoutingInstanceOk returns a tuple with the RoutingInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslogServer) GetRoutingInstanceOk() (*string, bool) {
	if o == nil || IsNil(o.RoutingInstance) {
		return nil, false
	}
	return o.RoutingInstance, true
}

// HasRoutingInstance returns a boolean if a field has been set.
func (o *RemoteSyslogServer) HasRoutingInstance() bool {
	if o != nil && !IsNil(o.RoutingInstance) {
		return true
	}

	return false
}

// SetRoutingInstance gets a reference to the given string and assigns it to the RoutingInstance field.
func (o *RemoteSyslogServer) SetRoutingInstance(v string) {
	o.RoutingInstance = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *RemoteSyslogServer) GetSeverity() RemoteSyslogSeverity {
	if o == nil || IsNil(o.Severity) {
		var ret RemoteSyslogSeverity
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslogServer) GetSeverityOk() (*RemoteSyslogSeverity, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *RemoteSyslogServer) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given RemoteSyslogSeverity and assigns it to the Severity field.
func (o *RemoteSyslogServer) SetSeverity(v RemoteSyslogSeverity) {
	o.Severity = &v
}

// GetSourceAddress returns the SourceAddress field value if set, zero value otherwise.
func (o *RemoteSyslogServer) GetSourceAddress() string {
	if o == nil || IsNil(o.SourceAddress) {
		var ret string
		return ret
	}
	return *o.SourceAddress
}

// GetSourceAddressOk returns a tuple with the SourceAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslogServer) GetSourceAddressOk() (*string, bool) {
	if o == nil || IsNil(o.SourceAddress) {
		return nil, false
	}
	return o.SourceAddress, true
}

// HasSourceAddress returns a boolean if a field has been set.
func (o *RemoteSyslogServer) HasSourceAddress() bool {
	if o != nil && !IsNil(o.SourceAddress) {
		return true
	}

	return false
}

// SetSourceAddress gets a reference to the given string and assigns it to the SourceAddress field.
func (o *RemoteSyslogServer) SetSourceAddress(v string) {
	o.SourceAddress = &v
}

// GetStructuredData returns the StructuredData field value if set, zero value otherwise.
func (o *RemoteSyslogServer) GetStructuredData() bool {
	if o == nil || IsNil(o.StructuredData) {
		var ret bool
		return ret
	}
	return *o.StructuredData
}

// GetStructuredDataOk returns a tuple with the StructuredData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslogServer) GetStructuredDataOk() (*bool, bool) {
	if o == nil || IsNil(o.StructuredData) {
		return nil, false
	}
	return o.StructuredData, true
}

// HasStructuredData returns a boolean if a field has been set.
func (o *RemoteSyslogServer) HasStructuredData() bool {
	if o != nil && !IsNil(o.StructuredData) {
		return true
	}

	return false
}

// SetStructuredData gets a reference to the given bool and assigns it to the StructuredData field.
func (o *RemoteSyslogServer) SetStructuredData(v bool) {
	o.StructuredData = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *RemoteSyslogServer) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslogServer) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *RemoteSyslogServer) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *RemoteSyslogServer) SetTag(v string) {
	o.Tag = &v
}

func (o RemoteSyslogServer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoteSyslogServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Contents) {
		toSerialize["contents"] = o.Contents
	}
	if !IsNil(o.ExplicitPriority) {
		toSerialize["explicit_priority"] = o.ExplicitPriority
	}
	if !IsNil(o.Facility) {
		toSerialize["facility"] = o.Facility
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Match) {
		toSerialize["match"] = o.Match
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.RoutingInstance) {
		toSerialize["routing_instance"] = o.RoutingInstance
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.SourceAddress) {
		toSerialize["source_address"] = o.SourceAddress
	}
	if !IsNil(o.StructuredData) {
		toSerialize["structured_data"] = o.StructuredData
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RemoteSyslogServer) UnmarshalJSON(data []byte) (err error) {
	varRemoteSyslogServer := _RemoteSyslogServer{}

	err = json.Unmarshal(data, &varRemoteSyslogServer)

	if err != nil {
		return err
	}

	*o = RemoteSyslogServer(varRemoteSyslogServer)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "contents")
		delete(additionalProperties, "explicit_priority")
		delete(additionalProperties, "facility")
		delete(additionalProperties, "host")
		delete(additionalProperties, "match")
		delete(additionalProperties, "port")
		delete(additionalProperties, "protocol")
		delete(additionalProperties, "routing_instance")
		delete(additionalProperties, "severity")
		delete(additionalProperties, "source_address")
		delete(additionalProperties, "structured_data")
		delete(additionalProperties, "tag")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRemoteSyslogServer struct {
	value *RemoteSyslogServer
	isSet bool
}

func (v NullableRemoteSyslogServer) Get() *RemoteSyslogServer {
	return v.value
}

func (v *NullableRemoteSyslogServer) Set(val *RemoteSyslogServer) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteSyslogServer) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteSyslogServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteSyslogServer(val *RemoteSyslogServer) *NullableRemoteSyslogServer {
	return &NullableRemoteSyslogServer{value: val, isSet: true}
}

func (v NullableRemoteSyslogServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteSyslogServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


