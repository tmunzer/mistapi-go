/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the InsightRogueAp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InsightRogueAp{}

// InsightRogueAp struct for InsightRogueAp
type InsightRogueAp struct {
	// mac of the device that had strongest signal strength for ssid/bssid pair
	ApMac string `json:"ap_mac"`
	// average signal strength of ap_mac for ssid/bssid pair
	AvgRssi float32 `json:"avg_rssi"`
	// bssid of the network detected as threat
	Bssid string `json:"bssid"`
	// channel over which ap_mac heard ssid/bssid pair
	Channel string `json:"channel"`
	// X position relative to the reporting AP (`ap_mac`)
	DeltaX *float32 `json:"delta_x,omitempty"`
	// Y position relative to the reporting AP (`ap_mac`)
	DeltaY *float32 `json:"delta_y,omitempty"`
	// num of aps that heard the ssid/bssid pair
	NumAps int32 `json:"num_aps"`
	// whether the reporting AP see a wireless client (on LAN) connecting to it
	SeenOnLan *bool `json:"seen_on_lan,omitempty"`
	// ssid of the network detected as threat
	Ssid *string `json:"ssid,omitempty"`
	// represents number of times the pair was heard in the interval. Each count roughly corresponds to a minute.
	TimesHeard *int32 `json:"times_heard,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InsightRogueAp InsightRogueAp

// NewInsightRogueAp instantiates a new InsightRogueAp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInsightRogueAp(apMac string, avgRssi float32, bssid string, channel string, numAps int32) *InsightRogueAp {
	this := InsightRogueAp{}
	this.ApMac = apMac
	this.AvgRssi = avgRssi
	this.Bssid = bssid
	this.Channel = channel
	this.NumAps = numAps
	return &this
}

// NewInsightRogueApWithDefaults instantiates a new InsightRogueAp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInsightRogueApWithDefaults() *InsightRogueAp {
	this := InsightRogueAp{}
	return &this
}

// GetApMac returns the ApMac field value
func (o *InsightRogueAp) GetApMac() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApMac
}

// GetApMacOk returns a tuple with the ApMac field value
// and a boolean to check if the value has been set.
func (o *InsightRogueAp) GetApMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApMac, true
}

// SetApMac sets field value
func (o *InsightRogueAp) SetApMac(v string) {
	o.ApMac = v
}

// GetAvgRssi returns the AvgRssi field value
func (o *InsightRogueAp) GetAvgRssi() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AvgRssi
}

// GetAvgRssiOk returns a tuple with the AvgRssi field value
// and a boolean to check if the value has been set.
func (o *InsightRogueAp) GetAvgRssiOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvgRssi, true
}

// SetAvgRssi sets field value
func (o *InsightRogueAp) SetAvgRssi(v float32) {
	o.AvgRssi = v
}

// GetBssid returns the Bssid field value
func (o *InsightRogueAp) GetBssid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Bssid
}

// GetBssidOk returns a tuple with the Bssid field value
// and a boolean to check if the value has been set.
func (o *InsightRogueAp) GetBssidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bssid, true
}

// SetBssid sets field value
func (o *InsightRogueAp) SetBssid(v string) {
	o.Bssid = v
}

// GetChannel returns the Channel field value
func (o *InsightRogueAp) GetChannel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Channel
}

// GetChannelOk returns a tuple with the Channel field value
// and a boolean to check if the value has been set.
func (o *InsightRogueAp) GetChannelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Channel, true
}

// SetChannel sets field value
func (o *InsightRogueAp) SetChannel(v string) {
	o.Channel = v
}

// GetDeltaX returns the DeltaX field value if set, zero value otherwise.
func (o *InsightRogueAp) GetDeltaX() float32 {
	if o == nil || IsNil(o.DeltaX) {
		var ret float32
		return ret
	}
	return *o.DeltaX
}

// GetDeltaXOk returns a tuple with the DeltaX field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightRogueAp) GetDeltaXOk() (*float32, bool) {
	if o == nil || IsNil(o.DeltaX) {
		return nil, false
	}
	return o.DeltaX, true
}

// HasDeltaX returns a boolean if a field has been set.
func (o *InsightRogueAp) HasDeltaX() bool {
	if o != nil && !IsNil(o.DeltaX) {
		return true
	}

	return false
}

// SetDeltaX gets a reference to the given float32 and assigns it to the DeltaX field.
func (o *InsightRogueAp) SetDeltaX(v float32) {
	o.DeltaX = &v
}

// GetDeltaY returns the DeltaY field value if set, zero value otherwise.
func (o *InsightRogueAp) GetDeltaY() float32 {
	if o == nil || IsNil(o.DeltaY) {
		var ret float32
		return ret
	}
	return *o.DeltaY
}

// GetDeltaYOk returns a tuple with the DeltaY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightRogueAp) GetDeltaYOk() (*float32, bool) {
	if o == nil || IsNil(o.DeltaY) {
		return nil, false
	}
	return o.DeltaY, true
}

// HasDeltaY returns a boolean if a field has been set.
func (o *InsightRogueAp) HasDeltaY() bool {
	if o != nil && !IsNil(o.DeltaY) {
		return true
	}

	return false
}

// SetDeltaY gets a reference to the given float32 and assigns it to the DeltaY field.
func (o *InsightRogueAp) SetDeltaY(v float32) {
	o.DeltaY = &v
}

// GetNumAps returns the NumAps field value
func (o *InsightRogueAp) GetNumAps() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumAps
}

// GetNumApsOk returns a tuple with the NumAps field value
// and a boolean to check if the value has been set.
func (o *InsightRogueAp) GetNumApsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumAps, true
}

// SetNumAps sets field value
func (o *InsightRogueAp) SetNumAps(v int32) {
	o.NumAps = v
}

// GetSeenOnLan returns the SeenOnLan field value if set, zero value otherwise.
func (o *InsightRogueAp) GetSeenOnLan() bool {
	if o == nil || IsNil(o.SeenOnLan) {
		var ret bool
		return ret
	}
	return *o.SeenOnLan
}

// GetSeenOnLanOk returns a tuple with the SeenOnLan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightRogueAp) GetSeenOnLanOk() (*bool, bool) {
	if o == nil || IsNil(o.SeenOnLan) {
		return nil, false
	}
	return o.SeenOnLan, true
}

// HasSeenOnLan returns a boolean if a field has been set.
func (o *InsightRogueAp) HasSeenOnLan() bool {
	if o != nil && !IsNil(o.SeenOnLan) {
		return true
	}

	return false
}

// SetSeenOnLan gets a reference to the given bool and assigns it to the SeenOnLan field.
func (o *InsightRogueAp) SetSeenOnLan(v bool) {
	o.SeenOnLan = &v
}

// GetSsid returns the Ssid field value if set, zero value otherwise.
func (o *InsightRogueAp) GetSsid() string {
	if o == nil || IsNil(o.Ssid) {
		var ret string
		return ret
	}
	return *o.Ssid
}

// GetSsidOk returns a tuple with the Ssid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightRogueAp) GetSsidOk() (*string, bool) {
	if o == nil || IsNil(o.Ssid) {
		return nil, false
	}
	return o.Ssid, true
}

// HasSsid returns a boolean if a field has been set.
func (o *InsightRogueAp) HasSsid() bool {
	if o != nil && !IsNil(o.Ssid) {
		return true
	}

	return false
}

// SetSsid gets a reference to the given string and assigns it to the Ssid field.
func (o *InsightRogueAp) SetSsid(v string) {
	o.Ssid = &v
}

// GetTimesHeard returns the TimesHeard field value if set, zero value otherwise.
func (o *InsightRogueAp) GetTimesHeard() int32 {
	if o == nil || IsNil(o.TimesHeard) {
		var ret int32
		return ret
	}
	return *o.TimesHeard
}

// GetTimesHeardOk returns a tuple with the TimesHeard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightRogueAp) GetTimesHeardOk() (*int32, bool) {
	if o == nil || IsNil(o.TimesHeard) {
		return nil, false
	}
	return o.TimesHeard, true
}

// HasTimesHeard returns a boolean if a field has been set.
func (o *InsightRogueAp) HasTimesHeard() bool {
	if o != nil && !IsNil(o.TimesHeard) {
		return true
	}

	return false
}

// SetTimesHeard gets a reference to the given int32 and assigns it to the TimesHeard field.
func (o *InsightRogueAp) SetTimesHeard(v int32) {
	o.TimesHeard = &v
}

func (o InsightRogueAp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InsightRogueAp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ap_mac"] = o.ApMac
	toSerialize["avg_rssi"] = o.AvgRssi
	toSerialize["bssid"] = o.Bssid
	toSerialize["channel"] = o.Channel
	if !IsNil(o.DeltaX) {
		toSerialize["delta_x"] = o.DeltaX
	}
	if !IsNil(o.DeltaY) {
		toSerialize["delta_y"] = o.DeltaY
	}
	toSerialize["num_aps"] = o.NumAps
	if !IsNil(o.SeenOnLan) {
		toSerialize["seen_on_lan"] = o.SeenOnLan
	}
	if !IsNil(o.Ssid) {
		toSerialize["ssid"] = o.Ssid
	}
	if !IsNil(o.TimesHeard) {
		toSerialize["times_heard"] = o.TimesHeard
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InsightRogueAp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ap_mac",
		"avg_rssi",
		"bssid",
		"channel",
		"num_aps",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInsightRogueAp := _InsightRogueAp{}

	err = json.Unmarshal(data, &varInsightRogueAp)

	if err != nil {
		return err
	}

	*o = InsightRogueAp(varInsightRogueAp)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ap_mac")
		delete(additionalProperties, "avg_rssi")
		delete(additionalProperties, "bssid")
		delete(additionalProperties, "channel")
		delete(additionalProperties, "delta_x")
		delete(additionalProperties, "delta_y")
		delete(additionalProperties, "num_aps")
		delete(additionalProperties, "seen_on_lan")
		delete(additionalProperties, "ssid")
		delete(additionalProperties, "times_heard")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInsightRogueAp struct {
	value *InsightRogueAp
	isSet bool
}

func (v NullableInsightRogueAp) Get() *InsightRogueAp {
	return v.value
}

func (v *NullableInsightRogueAp) Set(val *InsightRogueAp) {
	v.value = val
	v.isSet = true
}

func (v NullableInsightRogueAp) IsSet() bool {
	return v.isSet
}

func (v *NullableInsightRogueAp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInsightRogueAp(val *InsightRogueAp) *NullableInsightRogueAp {
	return &NullableInsightRogueAp{value: val, isSet: true}
}

func (v NullableInsightRogueAp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInsightRogueAp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


