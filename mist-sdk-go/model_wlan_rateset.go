/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the WlanRateset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WlanRateset{}

// WlanRateset struct for WlanRateset
type WlanRateset struct {
	Var24 *WlanDatarates `json:"24,omitempty"`
	Var5 *WlanDatarates `json:"5,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WlanRateset WlanRateset

// NewWlanRateset instantiates a new WlanRateset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWlanRateset() *WlanRateset {
	this := WlanRateset{}
	return &this
}

// NewWlanRatesetWithDefaults instantiates a new WlanRateset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWlanRatesetWithDefaults() *WlanRateset {
	this := WlanRateset{}
	return &this
}

// GetVar24 returns the Var24 field value if set, zero value otherwise.
func (o *WlanRateset) GetVar24() WlanDatarates {
	if o == nil || IsNil(o.Var24) {
		var ret WlanDatarates
		return ret
	}
	return *o.Var24
}

// GetVar24Ok returns a tuple with the Var24 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanRateset) GetVar24Ok() (*WlanDatarates, bool) {
	if o == nil || IsNil(o.Var24) {
		return nil, false
	}
	return o.Var24, true
}

// HasVar24 returns a boolean if a field has been set.
func (o *WlanRateset) HasVar24() bool {
	if o != nil && !IsNil(o.Var24) {
		return true
	}

	return false
}

// SetVar24 gets a reference to the given WlanDatarates and assigns it to the Var24 field.
func (o *WlanRateset) SetVar24(v WlanDatarates) {
	o.Var24 = &v
}

// GetVar5 returns the Var5 field value if set, zero value otherwise.
func (o *WlanRateset) GetVar5() WlanDatarates {
	if o == nil || IsNil(o.Var5) {
		var ret WlanDatarates
		return ret
	}
	return *o.Var5
}

// GetVar5Ok returns a tuple with the Var5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanRateset) GetVar5Ok() (*WlanDatarates, bool) {
	if o == nil || IsNil(o.Var5) {
		return nil, false
	}
	return o.Var5, true
}

// HasVar5 returns a boolean if a field has been set.
func (o *WlanRateset) HasVar5() bool {
	if o != nil && !IsNil(o.Var5) {
		return true
	}

	return false
}

// SetVar5 gets a reference to the given WlanDatarates and assigns it to the Var5 field.
func (o *WlanRateset) SetVar5(v WlanDatarates) {
	o.Var5 = &v
}

func (o WlanRateset) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WlanRateset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Var24) {
		toSerialize["24"] = o.Var24
	}
	if !IsNil(o.Var5) {
		toSerialize["5"] = o.Var5
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WlanRateset) UnmarshalJSON(data []byte) (err error) {
	varWlanRateset := _WlanRateset{}

	err = json.Unmarshal(data, &varWlanRateset)

	if err != nil {
		return err
	}

	*o = WlanRateset(varWlanRateset)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "24")
		delete(additionalProperties, "5")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWlanRateset struct {
	value *WlanRateset
	isSet bool
}

func (v NullableWlanRateset) Get() *WlanRateset {
	return v.value
}

func (v *NullableWlanRateset) Set(val *WlanRateset) {
	v.value = val
	v.isSet = true
}

func (v NullableWlanRateset) IsSet() bool {
	return v.isSet
}

func (v *NullableWlanRateset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWlanRateset(val *WlanRateset) *NullableWlanRateset {
	return &NullableWlanRateset{value: val, isSet: true}
}

func (v NullableWlanRateset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWlanRateset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


