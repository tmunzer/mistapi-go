/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the ApSwitchSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApSwitchSetting{}

// ApSwitchSetting struct for ApSwitchSetting
type ApSwitchSetting struct {
	// additional VLAN IDs, only valid in mesh base mode
	AdditionalVlanIds []int32 `json:"additional_vlan_ids,omitempty"`
	EnableVlan *bool `json:"enable_vlan,omitempty"`
	PortVlanId *ApSwitchSettingPortVlanId `json:"port_vlan_id,omitempty"`
	// list of VLAN ids this
	VlanIds []int32 `json:"vlan_ids,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApSwitchSetting ApSwitchSetting

// NewApSwitchSetting instantiates a new ApSwitchSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApSwitchSetting() *ApSwitchSetting {
	this := ApSwitchSetting{}
	return &this
}

// NewApSwitchSettingWithDefaults instantiates a new ApSwitchSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApSwitchSettingWithDefaults() *ApSwitchSetting {
	this := ApSwitchSetting{}
	return &this
}

// GetAdditionalVlanIds returns the AdditionalVlanIds field value if set, zero value otherwise.
func (o *ApSwitchSetting) GetAdditionalVlanIds() []int32 {
	if o == nil || IsNil(o.AdditionalVlanIds) {
		var ret []int32
		return ret
	}
	return o.AdditionalVlanIds
}

// GetAdditionalVlanIdsOk returns a tuple with the AdditionalVlanIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApSwitchSetting) GetAdditionalVlanIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.AdditionalVlanIds) {
		return nil, false
	}
	return o.AdditionalVlanIds, true
}

// HasAdditionalVlanIds returns a boolean if a field has been set.
func (o *ApSwitchSetting) HasAdditionalVlanIds() bool {
	if o != nil && !IsNil(o.AdditionalVlanIds) {
		return true
	}

	return false
}

// SetAdditionalVlanIds gets a reference to the given []int32 and assigns it to the AdditionalVlanIds field.
func (o *ApSwitchSetting) SetAdditionalVlanIds(v []int32) {
	o.AdditionalVlanIds = v
}

// GetEnableVlan returns the EnableVlan field value if set, zero value otherwise.
func (o *ApSwitchSetting) GetEnableVlan() bool {
	if o == nil || IsNil(o.EnableVlan) {
		var ret bool
		return ret
	}
	return *o.EnableVlan
}

// GetEnableVlanOk returns a tuple with the EnableVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApSwitchSetting) GetEnableVlanOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableVlan) {
		return nil, false
	}
	return o.EnableVlan, true
}

// HasEnableVlan returns a boolean if a field has been set.
func (o *ApSwitchSetting) HasEnableVlan() bool {
	if o != nil && !IsNil(o.EnableVlan) {
		return true
	}

	return false
}

// SetEnableVlan gets a reference to the given bool and assigns it to the EnableVlan field.
func (o *ApSwitchSetting) SetEnableVlan(v bool) {
	o.EnableVlan = &v
}

// GetPortVlanId returns the PortVlanId field value if set, zero value otherwise.
func (o *ApSwitchSetting) GetPortVlanId() ApSwitchSettingPortVlanId {
	if o == nil || IsNil(o.PortVlanId) {
		var ret ApSwitchSettingPortVlanId
		return ret
	}
	return *o.PortVlanId
}

// GetPortVlanIdOk returns a tuple with the PortVlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApSwitchSetting) GetPortVlanIdOk() (*ApSwitchSettingPortVlanId, bool) {
	if o == nil || IsNil(o.PortVlanId) {
		return nil, false
	}
	return o.PortVlanId, true
}

// HasPortVlanId returns a boolean if a field has been set.
func (o *ApSwitchSetting) HasPortVlanId() bool {
	if o != nil && !IsNil(o.PortVlanId) {
		return true
	}

	return false
}

// SetPortVlanId gets a reference to the given ApSwitchSettingPortVlanId and assigns it to the PortVlanId field.
func (o *ApSwitchSetting) SetPortVlanId(v ApSwitchSettingPortVlanId) {
	o.PortVlanId = &v
}

// GetVlanIds returns the VlanIds field value if set, zero value otherwise.
func (o *ApSwitchSetting) GetVlanIds() []int32 {
	if o == nil || IsNil(o.VlanIds) {
		var ret []int32
		return ret
	}
	return o.VlanIds
}

// GetVlanIdsOk returns a tuple with the VlanIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApSwitchSetting) GetVlanIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.VlanIds) {
		return nil, false
	}
	return o.VlanIds, true
}

// HasVlanIds returns a boolean if a field has been set.
func (o *ApSwitchSetting) HasVlanIds() bool {
	if o != nil && !IsNil(o.VlanIds) {
		return true
	}

	return false
}

// SetVlanIds gets a reference to the given []int32 and assigns it to the VlanIds field.
func (o *ApSwitchSetting) SetVlanIds(v []int32) {
	o.VlanIds = v
}

func (o ApSwitchSetting) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApSwitchSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdditionalVlanIds) {
		toSerialize["additional_vlan_ids"] = o.AdditionalVlanIds
	}
	if !IsNil(o.EnableVlan) {
		toSerialize["enable_vlan"] = o.EnableVlan
	}
	if !IsNil(o.PortVlanId) {
		toSerialize["port_vlan_id"] = o.PortVlanId
	}
	if !IsNil(o.VlanIds) {
		toSerialize["vlan_ids"] = o.VlanIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApSwitchSetting) UnmarshalJSON(data []byte) (err error) {
	varApSwitchSetting := _ApSwitchSetting{}

	err = json.Unmarshal(data, &varApSwitchSetting)

	if err != nil {
		return err
	}

	*o = ApSwitchSetting(varApSwitchSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "additional_vlan_ids")
		delete(additionalProperties, "enable_vlan")
		delete(additionalProperties, "port_vlan_id")
		delete(additionalProperties, "vlan_ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApSwitchSetting struct {
	value *ApSwitchSetting
	isSet bool
}

func (v NullableApSwitchSetting) Get() *ApSwitchSetting {
	return v.value
}

func (v *NullableApSwitchSetting) Set(val *ApSwitchSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableApSwitchSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableApSwitchSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApSwitchSetting(val *ApSwitchSetting) *NullableApSwitchSetting {
	return &NullableApSwitchSetting{value: val, isSet: true}
}

func (v NullableApSwitchSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApSwitchSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


