/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the SimpleAlertArpFailure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SimpleAlertArpFailure{}

// SimpleAlertArpFailure struct for SimpleAlertArpFailure
type SimpleAlertArpFailure struct {
	ClientCount *int32 `json:"client_count,omitempty"`
	// failing within minutes
	Duration *int32 `json:"duration,omitempty"`
	IncidentCount *int32 `json:"incident_count,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SimpleAlertArpFailure SimpleAlertArpFailure

// NewSimpleAlertArpFailure instantiates a new SimpleAlertArpFailure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimpleAlertArpFailure() *SimpleAlertArpFailure {
	this := SimpleAlertArpFailure{}
	var clientCount int32 = 10
	this.ClientCount = &clientCount
	var duration int32 = 20
	this.Duration = &duration
	var incidentCount int32 = 10
	this.IncidentCount = &incidentCount
	return &this
}

// NewSimpleAlertArpFailureWithDefaults instantiates a new SimpleAlertArpFailure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimpleAlertArpFailureWithDefaults() *SimpleAlertArpFailure {
	this := SimpleAlertArpFailure{}
	var clientCount int32 = 10
	this.ClientCount = &clientCount
	var duration int32 = 20
	this.Duration = &duration
	var incidentCount int32 = 10
	this.IncidentCount = &incidentCount
	return &this
}

// GetClientCount returns the ClientCount field value if set, zero value otherwise.
func (o *SimpleAlertArpFailure) GetClientCount() int32 {
	if o == nil || IsNil(o.ClientCount) {
		var ret int32
		return ret
	}
	return *o.ClientCount
}

// GetClientCountOk returns a tuple with the ClientCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleAlertArpFailure) GetClientCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ClientCount) {
		return nil, false
	}
	return o.ClientCount, true
}

// HasClientCount returns a boolean if a field has been set.
func (o *SimpleAlertArpFailure) HasClientCount() bool {
	if o != nil && !IsNil(o.ClientCount) {
		return true
	}

	return false
}

// SetClientCount gets a reference to the given int32 and assigns it to the ClientCount field.
func (o *SimpleAlertArpFailure) SetClientCount(v int32) {
	o.ClientCount = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *SimpleAlertArpFailure) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleAlertArpFailure) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *SimpleAlertArpFailure) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *SimpleAlertArpFailure) SetDuration(v int32) {
	o.Duration = &v
}

// GetIncidentCount returns the IncidentCount field value if set, zero value otherwise.
func (o *SimpleAlertArpFailure) GetIncidentCount() int32 {
	if o == nil || IsNil(o.IncidentCount) {
		var ret int32
		return ret
	}
	return *o.IncidentCount
}

// GetIncidentCountOk returns a tuple with the IncidentCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleAlertArpFailure) GetIncidentCountOk() (*int32, bool) {
	if o == nil || IsNil(o.IncidentCount) {
		return nil, false
	}
	return o.IncidentCount, true
}

// HasIncidentCount returns a boolean if a field has been set.
func (o *SimpleAlertArpFailure) HasIncidentCount() bool {
	if o != nil && !IsNil(o.IncidentCount) {
		return true
	}

	return false
}

// SetIncidentCount gets a reference to the given int32 and assigns it to the IncidentCount field.
func (o *SimpleAlertArpFailure) SetIncidentCount(v int32) {
	o.IncidentCount = &v
}

func (o SimpleAlertArpFailure) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SimpleAlertArpFailure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClientCount) {
		toSerialize["client_count"] = o.ClientCount
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.IncidentCount) {
		toSerialize["incident_count"] = o.IncidentCount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SimpleAlertArpFailure) UnmarshalJSON(data []byte) (err error) {
	varSimpleAlertArpFailure := _SimpleAlertArpFailure{}

	err = json.Unmarshal(data, &varSimpleAlertArpFailure)

	if err != nil {
		return err
	}

	*o = SimpleAlertArpFailure(varSimpleAlertArpFailure)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "client_count")
		delete(additionalProperties, "duration")
		delete(additionalProperties, "incident_count")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSimpleAlertArpFailure struct {
	value *SimpleAlertArpFailure
	isSet bool
}

func (v NullableSimpleAlertArpFailure) Get() *SimpleAlertArpFailure {
	return v.value
}

func (v *NullableSimpleAlertArpFailure) Set(val *SimpleAlertArpFailure) {
	v.value = val
	v.isSet = true
}

func (v NullableSimpleAlertArpFailure) IsSet() bool {
	return v.isSet
}

func (v *NullableSimpleAlertArpFailure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimpleAlertArpFailure(val *SimpleAlertArpFailure) *NullableSimpleAlertArpFailure {
	return &NullableSimpleAlertArpFailure{value: val, isSet: true}
}

func (v NullableSimpleAlertArpFailure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimpleAlertArpFailure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


