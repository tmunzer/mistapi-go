/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type SitesServicesAPI interface {

	/*
	CountSiteServicePathEvents countSiteServicePathEvents

	Count Service Path Events

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@return ApiCountSiteServicePathEventsRequest
	*/
	CountSiteServicePathEvents(ctx context.Context, siteId string) ApiCountSiteServicePathEventsRequest

	// CountSiteServicePathEventsExecute executes the request
	//  @return RepsonseCount
	CountSiteServicePathEventsExecute(r ApiCountSiteServicePathEventsRequest) (*RepsonseCount, *http.Response, error)

	/*
	ListSiteServicesDerived listSiteServicesDerived

	Retrieves the list of Services available for the Site

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@return ApiListSiteServicesDerivedRequest
	*/
	ListSiteServicesDerived(ctx context.Context, siteId string) ApiListSiteServicesDerivedRequest

	// ListSiteServicesDerivedExecute executes the request
	//  @return []Service
	ListSiteServicesDerivedExecute(r ApiListSiteServicesDerivedRequest) ([]Service, *http.Response, error)

	/*
	SearchSiteServicePathEvents searchSiteServicePathEvents

	Search Service Path Events

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@return ApiSearchSiteServicePathEventsRequest
	*/
	SearchSiteServicePathEvents(ctx context.Context, siteId string) ApiSearchSiteServicePathEventsRequest

	// SearchSiteServicePathEventsExecute executes the request
	//  @return ResponseEventsPathSearch
	SearchSiteServicePathEventsExecute(r ApiSearchSiteServicePathEventsRequest) (*ResponseEventsPathSearch, *http.Response, error)
}

// SitesServicesAPIService SitesServicesAPI service
type SitesServicesAPIService service

type ApiCountSiteServicePathEventsRequest struct {
	ctx context.Context
	ApiService SitesServicesAPI
	siteId string
	distinct *SiteServiceEventsCountDistinct
	type_ *string
	text *string
	vpnName *string
	vpnPath *string
	policy *string
	portId *string
	model *string
	version *string
	timestamp *float32
	mac *string
	start *int32
	end *int32
	duration *string
	limit *int32
}

func (r ApiCountSiteServicePathEventsRequest) Distinct(distinct SiteServiceEventsCountDistinct) ApiCountSiteServicePathEventsRequest {
	r.distinct = &distinct
	return r
}

// Event type, e.g. GW_SERVICE_PATH_DOWN
func (r ApiCountSiteServicePathEventsRequest) Type_(type_ string) ApiCountSiteServicePathEventsRequest {
	r.type_ = &type_
	return r
}

// Description of the event including the reason it is triggered
func (r ApiCountSiteServicePathEventsRequest) Text(text string) ApiCountSiteServicePathEventsRequest {
	r.text = &text
	return r
}

// Peer name
func (r ApiCountSiteServicePathEventsRequest) VpnName(vpnName string) ApiCountSiteServicePathEventsRequest {
	r.vpnName = &vpnName
	return r
}

// Peer path name
func (r ApiCountSiteServicePathEventsRequest) VpnPath(vpnPath string) ApiCountSiteServicePathEventsRequest {
	r.vpnPath = &vpnPath
	return r
}

// Service policy associated with that specific path
func (r ApiCountSiteServicePathEventsRequest) Policy(policy string) ApiCountSiteServicePathEventsRequest {
	r.policy = &policy
	return r
}

// Network interface
func (r ApiCountSiteServicePathEventsRequest) PortId(portId string) ApiCountSiteServicePathEventsRequest {
	r.portId = &portId
	return r
}

// Device model
func (r ApiCountSiteServicePathEventsRequest) Model(model string) ApiCountSiteServicePathEventsRequest {
	r.model = &model
	return r
}

// Device firmware version
func (r ApiCountSiteServicePathEventsRequest) Version(version string) ApiCountSiteServicePathEventsRequest {
	r.version = &version
	return r
}

// Start time, in epoch
func (r ApiCountSiteServicePathEventsRequest) Timestamp(timestamp float32) ApiCountSiteServicePathEventsRequest {
	r.timestamp = &timestamp
	return r
}

// MAC address
func (r ApiCountSiteServicePathEventsRequest) Mac(mac string) ApiCountSiteServicePathEventsRequest {
	r.mac = &mac
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiCountSiteServicePathEventsRequest) Start(start int32) ApiCountSiteServicePathEventsRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiCountSiteServicePathEventsRequest) End(end int32) ApiCountSiteServicePathEventsRequest {
	r.end = &end
	return r
}

// duration like 7d, 2w
func (r ApiCountSiteServicePathEventsRequest) Duration(duration string) ApiCountSiteServicePathEventsRequest {
	r.duration = &duration
	return r
}

func (r ApiCountSiteServicePathEventsRequest) Limit(limit int32) ApiCountSiteServicePathEventsRequest {
	r.limit = &limit
	return r
}

func (r ApiCountSiteServicePathEventsRequest) Execute() (*RepsonseCount, *http.Response, error) {
	return r.ApiService.CountSiteServicePathEventsExecute(r)
}

/*
CountSiteServicePathEvents countSiteServicePathEvents

Count Service Path Events

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @return ApiCountSiteServicePathEventsRequest
*/
func (a *SitesServicesAPIService) CountSiteServicePathEvents(ctx context.Context, siteId string) ApiCountSiteServicePathEventsRequest {
	return ApiCountSiteServicePathEventsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return RepsonseCount
func (a *SitesServicesAPIService) CountSiteServicePathEventsExecute(r ApiCountSiteServicePathEventsRequest) (*RepsonseCount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RepsonseCount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesServicesAPIService.CountSiteServicePathEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/services/events/count"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.distinct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinct", r.distinct, "")
	} else {
		var defaultValue SiteServiceEventsCountDistinct = "type"
		r.distinct = &defaultValue
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.text != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "text", r.text, "")
	}
	if r.vpnName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpn_name", r.vpnName, "")
	}
	if r.vpnPath != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpn_path", r.vpnPath, "")
	}
	if r.policy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "policy", r.policy, "")
	}
	if r.portId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "port_id", r.portId, "")
	}
	if r.model != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "model", r.model, "")
	}
	if r.version != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "")
	}
	if r.timestamp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "")
	}
	if r.mac != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mac", r.mac, "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSiteServicesDerivedRequest struct {
	ctx context.Context
	ApiService SitesServicesAPI
	siteId string
	resolve *bool
}

// whether resolve the site variables
func (r ApiListSiteServicesDerivedRequest) Resolve(resolve bool) ApiListSiteServicesDerivedRequest {
	r.resolve = &resolve
	return r
}

func (r ApiListSiteServicesDerivedRequest) Execute() ([]Service, *http.Response, error) {
	return r.ApiService.ListSiteServicesDerivedExecute(r)
}

/*
ListSiteServicesDerived listSiteServicesDerived

Retrieves the list of Services available for the Site

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @return ApiListSiteServicesDerivedRequest
*/
func (a *SitesServicesAPIService) ListSiteServicesDerived(ctx context.Context, siteId string) ApiListSiteServicesDerivedRequest {
	return ApiListSiteServicesDerivedRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return []Service
func (a *SitesServicesAPIService) ListSiteServicesDerivedExecute(r ApiListSiteServicesDerivedRequest) ([]Service, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Service
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesServicesAPIService.ListSiteServicesDerived")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/services/derived"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.resolve != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resolve", r.resolve, "")
	} else {
		var defaultValue bool = false
		r.resolve = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchSiteServicePathEventsRequest struct {
	ctx context.Context
	ApiService SitesServicesAPI
	siteId string
	type_ *string
	text *string
	vpnName *string
	vpnPath *string
	policy *string
	portId *string
	model *string
	version *string
	timestamp *float32
	mac *string
	start *int32
	end *int32
	duration *string
	limit *int32
}

// Event type, e.g. GW_SERVICE_PATH_DOWN
func (r ApiSearchSiteServicePathEventsRequest) Type_(type_ string) ApiSearchSiteServicePathEventsRequest {
	r.type_ = &type_
	return r
}

// Description of the event including the reason it is triggered
func (r ApiSearchSiteServicePathEventsRequest) Text(text string) ApiSearchSiteServicePathEventsRequest {
	r.text = &text
	return r
}

// Peer name
func (r ApiSearchSiteServicePathEventsRequest) VpnName(vpnName string) ApiSearchSiteServicePathEventsRequest {
	r.vpnName = &vpnName
	return r
}

// Peer path name
func (r ApiSearchSiteServicePathEventsRequest) VpnPath(vpnPath string) ApiSearchSiteServicePathEventsRequest {
	r.vpnPath = &vpnPath
	return r
}

// Service policy associated with that specific path
func (r ApiSearchSiteServicePathEventsRequest) Policy(policy string) ApiSearchSiteServicePathEventsRequest {
	r.policy = &policy
	return r
}

// Network interface
func (r ApiSearchSiteServicePathEventsRequest) PortId(portId string) ApiSearchSiteServicePathEventsRequest {
	r.portId = &portId
	return r
}

// Device model
func (r ApiSearchSiteServicePathEventsRequest) Model(model string) ApiSearchSiteServicePathEventsRequest {
	r.model = &model
	return r
}

// Device firmware version
func (r ApiSearchSiteServicePathEventsRequest) Version(version string) ApiSearchSiteServicePathEventsRequest {
	r.version = &version
	return r
}

// Start time, in epoch
func (r ApiSearchSiteServicePathEventsRequest) Timestamp(timestamp float32) ApiSearchSiteServicePathEventsRequest {
	r.timestamp = &timestamp
	return r
}

// MAC address
func (r ApiSearchSiteServicePathEventsRequest) Mac(mac string) ApiSearchSiteServicePathEventsRequest {
	r.mac = &mac
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiSearchSiteServicePathEventsRequest) Start(start int32) ApiSearchSiteServicePathEventsRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiSearchSiteServicePathEventsRequest) End(end int32) ApiSearchSiteServicePathEventsRequest {
	r.end = &end
	return r
}

// duration like 7d, 2w
func (r ApiSearchSiteServicePathEventsRequest) Duration(duration string) ApiSearchSiteServicePathEventsRequest {
	r.duration = &duration
	return r
}

func (r ApiSearchSiteServicePathEventsRequest) Limit(limit int32) ApiSearchSiteServicePathEventsRequest {
	r.limit = &limit
	return r
}

func (r ApiSearchSiteServicePathEventsRequest) Execute() (*ResponseEventsPathSearch, *http.Response, error) {
	return r.ApiService.SearchSiteServicePathEventsExecute(r)
}

/*
SearchSiteServicePathEvents searchSiteServicePathEvents

Search Service Path Events

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @return ApiSearchSiteServicePathEventsRequest
*/
func (a *SitesServicesAPIService) SearchSiteServicePathEvents(ctx context.Context, siteId string) ApiSearchSiteServicePathEventsRequest {
	return ApiSearchSiteServicePathEventsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return ResponseEventsPathSearch
func (a *SitesServicesAPIService) SearchSiteServicePathEventsExecute(r ApiSearchSiteServicePathEventsRequest) (*ResponseEventsPathSearch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseEventsPathSearch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesServicesAPIService.SearchSiteServicePathEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/services/events/search"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.text != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "text", r.text, "")
	}
	if r.vpnName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpn_name", r.vpnName, "")
	}
	if r.vpnPath != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpn_path", r.vpnPath, "")
	}
	if r.policy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "policy", r.policy, "")
	}
	if r.portId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "port_id", r.portId, "")
	}
	if r.model != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "model", r.model, "")
	}
	if r.version != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "")
	}
	if r.timestamp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "")
	}
	if r.mac != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mac", r.mac, "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
