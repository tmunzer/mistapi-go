/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// OrgSitesCountDistinct the model 'OrgSitesCountDistinct'
type OrgSitesCountDistinct string

// List of org_sites_count_distinct
const (
	ORGSITESCOUNTDISTINCT_EMPTY OrgSitesCountDistinct = ""
	ORGSITESCOUNTDISTINCT_ANALYTIC_ENABLED OrgSitesCountDistinct = "analytic_enabled"
	ORGSITESCOUNTDISTINCT_APP_WAKING OrgSitesCountDistinct = "app_waking"
	ORGSITESCOUNTDISTINCT_ASSET_ENABLED OrgSitesCountDistinct = "asset_enabled"
	ORGSITESCOUNTDISTINCT_AUTO_UPGRADE_ENABLED OrgSitesCountDistinct = "auto_upgrade_enabled"
	ORGSITESCOUNTDISTINCT_AUTO_UPGRADE_VERSION OrgSitesCountDistinct = "auto_upgrade_version"
	ORGSITESCOUNTDISTINCT_COUNTRY_CODE OrgSitesCountDistinct = "country_code"
	ORGSITESCOUNTDISTINCT_HONEYPOT_ENABLED OrgSitesCountDistinct = "honeypot_enabled"
	ORGSITESCOUNTDISTINCT_ID OrgSitesCountDistinct = "id"
	ORGSITESCOUNTDISTINCT_LOCATE_UNCONNECTED OrgSitesCountDistinct = "locate_unconnected"
	ORGSITESCOUNTDISTINCT_MESH_ENABLED OrgSitesCountDistinct = "mesh_enabled"
	ORGSITESCOUNTDISTINCT_NAME OrgSitesCountDistinct = "name"
	ORGSITESCOUNTDISTINCT_ROGUE_ENABLED OrgSitesCountDistinct = "rogue_enabled"
	ORGSITESCOUNTDISTINCT_REMOTE_SYSLOG_ENABLED OrgSitesCountDistinct = "remote_syslog_enabled"
	ORGSITESCOUNTDISTINCT_RTSA_ENABLED OrgSitesCountDistinct = "rtsa_enabled"
	ORGSITESCOUNTDISTINCT_VNA_ENABLED OrgSitesCountDistinct = "vna_enabled"
	ORGSITESCOUNTDISTINCT_WIFI_ENABLED OrgSitesCountDistinct = "wifi_enabled"
)

// All allowed values of OrgSitesCountDistinct enum
var AllowedOrgSitesCountDistinctEnumValues = []OrgSitesCountDistinct{
	"",
	"analytic_enabled",
	"app_waking",
	"asset_enabled",
	"auto_upgrade_enabled",
	"auto_upgrade_version",
	"country_code",
	"honeypot_enabled",
	"id",
	"locate_unconnected",
	"mesh_enabled",
	"name",
	"rogue_enabled",
	"remote_syslog_enabled",
	"rtsa_enabled",
	"vna_enabled",
	"wifi_enabled",
}

func (v *OrgSitesCountDistinct) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrgSitesCountDistinct(value)
	for _, existing := range AllowedOrgSitesCountDistinctEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrgSitesCountDistinct", value)
}

// NewOrgSitesCountDistinctFromValue returns a pointer to a valid OrgSitesCountDistinct
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrgSitesCountDistinctFromValue(v string) (*OrgSitesCountDistinct, error) {
	ev := OrgSitesCountDistinct(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrgSitesCountDistinct: valid values are %v", v, AllowedOrgSitesCountDistinctEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrgSitesCountDistinct) IsValid() bool {
	for _, existing := range AllowedOrgSitesCountDistinctEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to org_sites_count_distinct value
func (v OrgSitesCountDistinct) Ptr() *OrgSitesCountDistinct {
	return &v
}

type NullableOrgSitesCountDistinct struct {
	value *OrgSitesCountDistinct
	isSet bool
}

func (v NullableOrgSitesCountDistinct) Get() *OrgSitesCountDistinct {
	return v.value
}

func (v *NullableOrgSitesCountDistinct) Set(val *OrgSitesCountDistinct) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgSitesCountDistinct) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgSitesCountDistinct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgSitesCountDistinct(val *OrgSitesCountDistinct) *NullableOrgSitesCountDistinct {
	return &NullableOrgSitesCountDistinct{value: val, isSet: true}
}

func (v NullableOrgSitesCountDistinct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgSitesCountDistinct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

