/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the OrgSettingSecurity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrgSettingSecurity{}

// OrgSettingSecurity struct for OrgSettingSecurity
type OrgSettingSecurity struct {
	// whether to disable local SSH (by default, local SSH is enabled with allow_mist in Org is enabled
	DisableLocalSsh *bool `json:"disable_local_ssh,omitempty"`
	// password required to zeroize devices (FIPS) on site level
	FipsZeroizePassword *string `json:"fips_zeroize_password,omitempty"`
	// whether to allow certain SSH keys to SSH into the AP (see Site:Setting)
	LimitSshAccess *bool `json:"limit_ssh_access,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrgSettingSecurity OrgSettingSecurity

// NewOrgSettingSecurity instantiates a new OrgSettingSecurity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgSettingSecurity() *OrgSettingSecurity {
	this := OrgSettingSecurity{}
	var limitSshAccess bool = false
	this.LimitSshAccess = &limitSshAccess
	return &this
}

// NewOrgSettingSecurityWithDefaults instantiates a new OrgSettingSecurity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgSettingSecurityWithDefaults() *OrgSettingSecurity {
	this := OrgSettingSecurity{}
	var limitSshAccess bool = false
	this.LimitSshAccess = &limitSshAccess
	return &this
}

// GetDisableLocalSsh returns the DisableLocalSsh field value if set, zero value otherwise.
func (o *OrgSettingSecurity) GetDisableLocalSsh() bool {
	if o == nil || IsNil(o.DisableLocalSsh) {
		var ret bool
		return ret
	}
	return *o.DisableLocalSsh
}

// GetDisableLocalSshOk returns a tuple with the DisableLocalSsh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSettingSecurity) GetDisableLocalSshOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableLocalSsh) {
		return nil, false
	}
	return o.DisableLocalSsh, true
}

// HasDisableLocalSsh returns a boolean if a field has been set.
func (o *OrgSettingSecurity) HasDisableLocalSsh() bool {
	if o != nil && !IsNil(o.DisableLocalSsh) {
		return true
	}

	return false
}

// SetDisableLocalSsh gets a reference to the given bool and assigns it to the DisableLocalSsh field.
func (o *OrgSettingSecurity) SetDisableLocalSsh(v bool) {
	o.DisableLocalSsh = &v
}

// GetFipsZeroizePassword returns the FipsZeroizePassword field value if set, zero value otherwise.
func (o *OrgSettingSecurity) GetFipsZeroizePassword() string {
	if o == nil || IsNil(o.FipsZeroizePassword) {
		var ret string
		return ret
	}
	return *o.FipsZeroizePassword
}

// GetFipsZeroizePasswordOk returns a tuple with the FipsZeroizePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSettingSecurity) GetFipsZeroizePasswordOk() (*string, bool) {
	if o == nil || IsNil(o.FipsZeroizePassword) {
		return nil, false
	}
	return o.FipsZeroizePassword, true
}

// HasFipsZeroizePassword returns a boolean if a field has been set.
func (o *OrgSettingSecurity) HasFipsZeroizePassword() bool {
	if o != nil && !IsNil(o.FipsZeroizePassword) {
		return true
	}

	return false
}

// SetFipsZeroizePassword gets a reference to the given string and assigns it to the FipsZeroizePassword field.
func (o *OrgSettingSecurity) SetFipsZeroizePassword(v string) {
	o.FipsZeroizePassword = &v
}

// GetLimitSshAccess returns the LimitSshAccess field value if set, zero value otherwise.
func (o *OrgSettingSecurity) GetLimitSshAccess() bool {
	if o == nil || IsNil(o.LimitSshAccess) {
		var ret bool
		return ret
	}
	return *o.LimitSshAccess
}

// GetLimitSshAccessOk returns a tuple with the LimitSshAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSettingSecurity) GetLimitSshAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.LimitSshAccess) {
		return nil, false
	}
	return o.LimitSshAccess, true
}

// HasLimitSshAccess returns a boolean if a field has been set.
func (o *OrgSettingSecurity) HasLimitSshAccess() bool {
	if o != nil && !IsNil(o.LimitSshAccess) {
		return true
	}

	return false
}

// SetLimitSshAccess gets a reference to the given bool and assigns it to the LimitSshAccess field.
func (o *OrgSettingSecurity) SetLimitSshAccess(v bool) {
	o.LimitSshAccess = &v
}

func (o OrgSettingSecurity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrgSettingSecurity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisableLocalSsh) {
		toSerialize["disable_local_ssh"] = o.DisableLocalSsh
	}
	if !IsNil(o.FipsZeroizePassword) {
		toSerialize["fips_zeroize_password"] = o.FipsZeroizePassword
	}
	if !IsNil(o.LimitSshAccess) {
		toSerialize["limit_ssh_access"] = o.LimitSshAccess
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrgSettingSecurity) UnmarshalJSON(data []byte) (err error) {
	varOrgSettingSecurity := _OrgSettingSecurity{}

	err = json.Unmarshal(data, &varOrgSettingSecurity)

	if err != nil {
		return err
	}

	*o = OrgSettingSecurity(varOrgSettingSecurity)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "disable_local_ssh")
		delete(additionalProperties, "fips_zeroize_password")
		delete(additionalProperties, "limit_ssh_access")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrgSettingSecurity struct {
	value *OrgSettingSecurity
	isSet bool
}

func (v NullableOrgSettingSecurity) Get() *OrgSettingSecurity {
	return v.value
}

func (v *NullableOrgSettingSecurity) Set(val *OrgSettingSecurity) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgSettingSecurity) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgSettingSecurity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgSettingSecurity(val *OrgSettingSecurity) *NullableOrgSettingSecurity {
	return &NullableOrgSettingSecurity{value: val, isSet: true}
}

func (v NullableOrgSettingSecurity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgSettingSecurity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


