/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the OrgSettingDeviceCert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrgSettingDeviceCert{}

// OrgSettingDeviceCert common device cert, optional
type OrgSettingDeviceCert struct {
	Cert *string `json:"cert,omitempty"`
	Key *string `json:"key,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrgSettingDeviceCert OrgSettingDeviceCert

// NewOrgSettingDeviceCert instantiates a new OrgSettingDeviceCert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgSettingDeviceCert() *OrgSettingDeviceCert {
	this := OrgSettingDeviceCert{}
	return &this
}

// NewOrgSettingDeviceCertWithDefaults instantiates a new OrgSettingDeviceCert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgSettingDeviceCertWithDefaults() *OrgSettingDeviceCert {
	this := OrgSettingDeviceCert{}
	return &this
}

// GetCert returns the Cert field value if set, zero value otherwise.
func (o *OrgSettingDeviceCert) GetCert() string {
	if o == nil || IsNil(o.Cert) {
		var ret string
		return ret
	}
	return *o.Cert
}

// GetCertOk returns a tuple with the Cert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSettingDeviceCert) GetCertOk() (*string, bool) {
	if o == nil || IsNil(o.Cert) {
		return nil, false
	}
	return o.Cert, true
}

// HasCert returns a boolean if a field has been set.
func (o *OrgSettingDeviceCert) HasCert() bool {
	if o != nil && !IsNil(o.Cert) {
		return true
	}

	return false
}

// SetCert gets a reference to the given string and assigns it to the Cert field.
func (o *OrgSettingDeviceCert) SetCert(v string) {
	o.Cert = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *OrgSettingDeviceCert) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSettingDeviceCert) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *OrgSettingDeviceCert) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *OrgSettingDeviceCert) SetKey(v string) {
	o.Key = &v
}

func (o OrgSettingDeviceCert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrgSettingDeviceCert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cert) {
		toSerialize["cert"] = o.Cert
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrgSettingDeviceCert) UnmarshalJSON(data []byte) (err error) {
	varOrgSettingDeviceCert := _OrgSettingDeviceCert{}

	err = json.Unmarshal(data, &varOrgSettingDeviceCert)

	if err != nil {
		return err
	}

	*o = OrgSettingDeviceCert(varOrgSettingDeviceCert)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cert")
		delete(additionalProperties, "key")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrgSettingDeviceCert struct {
	value *OrgSettingDeviceCert
	isSet bool
}

func (v NullableOrgSettingDeviceCert) Get() *OrgSettingDeviceCert {
	return v.value
}

func (v *NullableOrgSettingDeviceCert) Set(val *OrgSettingDeviceCert) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgSettingDeviceCert) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgSettingDeviceCert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgSettingDeviceCert(val *OrgSettingDeviceCert) *NullableOrgSettingDeviceCert {
	return &NullableOrgSettingDeviceCert{value: val, isSet: true}
}

func (v NullableOrgSettingDeviceCert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgSettingDeviceCert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


