/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the SleThreshold type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SleThreshold{}

// SleThreshold struct for SleThreshold
type SleThreshold struct {
	Default *float32 `json:"default,omitempty"`
	Direction *string `json:"direction,omitempty"`
	Maximum *float32 `json:"maximum,omitempty"`
	Metric *string `json:"metric,omitempty"`
	Minimum *float32 `json:"minimum,omitempty"`
	Threshold *string `json:"threshold,omitempty"`
	Units *string `json:"units,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SleThreshold SleThreshold

// NewSleThreshold instantiates a new SleThreshold object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSleThreshold() *SleThreshold {
	this := SleThreshold{}
	return &this
}

// NewSleThresholdWithDefaults instantiates a new SleThreshold object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSleThresholdWithDefaults() *SleThreshold {
	this := SleThreshold{}
	return &this
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *SleThreshold) GetDefault() float32 {
	if o == nil || IsNil(o.Default) {
		var ret float32
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SleThreshold) GetDefaultOk() (*float32, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *SleThreshold) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given float32 and assigns it to the Default field.
func (o *SleThreshold) SetDefault(v float32) {
	o.Default = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *SleThreshold) GetDirection() string {
	if o == nil || IsNil(o.Direction) {
		var ret string
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SleThreshold) GetDirectionOk() (*string, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *SleThreshold) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given string and assigns it to the Direction field.
func (o *SleThreshold) SetDirection(v string) {
	o.Direction = &v
}

// GetMaximum returns the Maximum field value if set, zero value otherwise.
func (o *SleThreshold) GetMaximum() float32 {
	if o == nil || IsNil(o.Maximum) {
		var ret float32
		return ret
	}
	return *o.Maximum
}

// GetMaximumOk returns a tuple with the Maximum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SleThreshold) GetMaximumOk() (*float32, bool) {
	if o == nil || IsNil(o.Maximum) {
		return nil, false
	}
	return o.Maximum, true
}

// HasMaximum returns a boolean if a field has been set.
func (o *SleThreshold) HasMaximum() bool {
	if o != nil && !IsNil(o.Maximum) {
		return true
	}

	return false
}

// SetMaximum gets a reference to the given float32 and assigns it to the Maximum field.
func (o *SleThreshold) SetMaximum(v float32) {
	o.Maximum = &v
}

// GetMetric returns the Metric field value if set, zero value otherwise.
func (o *SleThreshold) GetMetric() string {
	if o == nil || IsNil(o.Metric) {
		var ret string
		return ret
	}
	return *o.Metric
}

// GetMetricOk returns a tuple with the Metric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SleThreshold) GetMetricOk() (*string, bool) {
	if o == nil || IsNil(o.Metric) {
		return nil, false
	}
	return o.Metric, true
}

// HasMetric returns a boolean if a field has been set.
func (o *SleThreshold) HasMetric() bool {
	if o != nil && !IsNil(o.Metric) {
		return true
	}

	return false
}

// SetMetric gets a reference to the given string and assigns it to the Metric field.
func (o *SleThreshold) SetMetric(v string) {
	o.Metric = &v
}

// GetMinimum returns the Minimum field value if set, zero value otherwise.
func (o *SleThreshold) GetMinimum() float32 {
	if o == nil || IsNil(o.Minimum) {
		var ret float32
		return ret
	}
	return *o.Minimum
}

// GetMinimumOk returns a tuple with the Minimum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SleThreshold) GetMinimumOk() (*float32, bool) {
	if o == nil || IsNil(o.Minimum) {
		return nil, false
	}
	return o.Minimum, true
}

// HasMinimum returns a boolean if a field has been set.
func (o *SleThreshold) HasMinimum() bool {
	if o != nil && !IsNil(o.Minimum) {
		return true
	}

	return false
}

// SetMinimum gets a reference to the given float32 and assigns it to the Minimum field.
func (o *SleThreshold) SetMinimum(v float32) {
	o.Minimum = &v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *SleThreshold) GetThreshold() string {
	if o == nil || IsNil(o.Threshold) {
		var ret string
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SleThreshold) GetThresholdOk() (*string, bool) {
	if o == nil || IsNil(o.Threshold) {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *SleThreshold) HasThreshold() bool {
	if o != nil && !IsNil(o.Threshold) {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given string and assigns it to the Threshold field.
func (o *SleThreshold) SetThreshold(v string) {
	o.Threshold = &v
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *SleThreshold) GetUnits() string {
	if o == nil || IsNil(o.Units) {
		var ret string
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SleThreshold) GetUnitsOk() (*string, bool) {
	if o == nil || IsNil(o.Units) {
		return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *SleThreshold) HasUnits() bool {
	if o != nil && !IsNil(o.Units) {
		return true
	}

	return false
}

// SetUnits gets a reference to the given string and assigns it to the Units field.
func (o *SleThreshold) SetUnits(v string) {
	o.Units = &v
}

func (o SleThreshold) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SleThreshold) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !IsNil(o.Maximum) {
		toSerialize["maximum"] = o.Maximum
	}
	if !IsNil(o.Metric) {
		toSerialize["metric"] = o.Metric
	}
	if !IsNil(o.Minimum) {
		toSerialize["minimum"] = o.Minimum
	}
	if !IsNil(o.Threshold) {
		toSerialize["threshold"] = o.Threshold
	}
	if !IsNil(o.Units) {
		toSerialize["units"] = o.Units
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SleThreshold) UnmarshalJSON(data []byte) (err error) {
	varSleThreshold := _SleThreshold{}

	err = json.Unmarshal(data, &varSleThreshold)

	if err != nil {
		return err
	}

	*o = SleThreshold(varSleThreshold)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "default")
		delete(additionalProperties, "direction")
		delete(additionalProperties, "maximum")
		delete(additionalProperties, "metric")
		delete(additionalProperties, "minimum")
		delete(additionalProperties, "threshold")
		delete(additionalProperties, "units")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSleThreshold struct {
	value *SleThreshold
	isSet bool
}

func (v NullableSleThreshold) Get() *SleThreshold {
	return v.value
}

func (v *NullableSleThreshold) Set(val *SleThreshold) {
	v.value = val
	v.isSet = true
}

func (v NullableSleThreshold) IsSet() bool {
	return v.isSet
}

func (v *NullableSleThreshold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSleThreshold(val *SleThreshold) *NullableSleThreshold {
	return &NullableSleThreshold{value: val, isSet: true}
}

func (v NullableSleThreshold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSleThreshold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


