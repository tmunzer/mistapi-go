/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the CpuStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CpuStat{}

// CpuStat struct for CpuStat
type CpuStat struct {
	// Percentage of CPU time that is idle
	Idle *float32 `json:"idle,omitempty"`
	// Percentage of CPU time being used by interrupts
	Interrupt *float32 `json:"interrupt,omitempty"`
	// Load averages for the last 1, 5, and 15 minutes
	LoadAvg []float32 `json:"load_avg,omitempty"`
	// Percentage of CPU time being used by system processes
	System *float32 `json:"system,omitempty"`
	// Percentage of CPU time being used by user processe
	User *float32 `json:"user,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CpuStat CpuStat

// NewCpuStat instantiates a new CpuStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCpuStat() *CpuStat {
	this := CpuStat{}
	return &this
}

// NewCpuStatWithDefaults instantiates a new CpuStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCpuStatWithDefaults() *CpuStat {
	this := CpuStat{}
	return &this
}

// GetIdle returns the Idle field value if set, zero value otherwise.
func (o *CpuStat) GetIdle() float32 {
	if o == nil || IsNil(o.Idle) {
		var ret float32
		return ret
	}
	return *o.Idle
}

// GetIdleOk returns a tuple with the Idle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CpuStat) GetIdleOk() (*float32, bool) {
	if o == nil || IsNil(o.Idle) {
		return nil, false
	}
	return o.Idle, true
}

// HasIdle returns a boolean if a field has been set.
func (o *CpuStat) HasIdle() bool {
	if o != nil && !IsNil(o.Idle) {
		return true
	}

	return false
}

// SetIdle gets a reference to the given float32 and assigns it to the Idle field.
func (o *CpuStat) SetIdle(v float32) {
	o.Idle = &v
}

// GetInterrupt returns the Interrupt field value if set, zero value otherwise.
func (o *CpuStat) GetInterrupt() float32 {
	if o == nil || IsNil(o.Interrupt) {
		var ret float32
		return ret
	}
	return *o.Interrupt
}

// GetInterruptOk returns a tuple with the Interrupt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CpuStat) GetInterruptOk() (*float32, bool) {
	if o == nil || IsNil(o.Interrupt) {
		return nil, false
	}
	return o.Interrupt, true
}

// HasInterrupt returns a boolean if a field has been set.
func (o *CpuStat) HasInterrupt() bool {
	if o != nil && !IsNil(o.Interrupt) {
		return true
	}

	return false
}

// SetInterrupt gets a reference to the given float32 and assigns it to the Interrupt field.
func (o *CpuStat) SetInterrupt(v float32) {
	o.Interrupt = &v
}

// GetLoadAvg returns the LoadAvg field value if set, zero value otherwise.
func (o *CpuStat) GetLoadAvg() []float32 {
	if o == nil || IsNil(o.LoadAvg) {
		var ret []float32
		return ret
	}
	return o.LoadAvg
}

// GetLoadAvgOk returns a tuple with the LoadAvg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CpuStat) GetLoadAvgOk() ([]float32, bool) {
	if o == nil || IsNil(o.LoadAvg) {
		return nil, false
	}
	return o.LoadAvg, true
}

// HasLoadAvg returns a boolean if a field has been set.
func (o *CpuStat) HasLoadAvg() bool {
	if o != nil && !IsNil(o.LoadAvg) {
		return true
	}

	return false
}

// SetLoadAvg gets a reference to the given []float32 and assigns it to the LoadAvg field.
func (o *CpuStat) SetLoadAvg(v []float32) {
	o.LoadAvg = v
}

// GetSystem returns the System field value if set, zero value otherwise.
func (o *CpuStat) GetSystem() float32 {
	if o == nil || IsNil(o.System) {
		var ret float32
		return ret
	}
	return *o.System
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CpuStat) GetSystemOk() (*float32, bool) {
	if o == nil || IsNil(o.System) {
		return nil, false
	}
	return o.System, true
}

// HasSystem returns a boolean if a field has been set.
func (o *CpuStat) HasSystem() bool {
	if o != nil && !IsNil(o.System) {
		return true
	}

	return false
}

// SetSystem gets a reference to the given float32 and assigns it to the System field.
func (o *CpuStat) SetSystem(v float32) {
	o.System = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *CpuStat) GetUser() float32 {
	if o == nil || IsNil(o.User) {
		var ret float32
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CpuStat) GetUserOk() (*float32, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *CpuStat) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given float32 and assigns it to the User field.
func (o *CpuStat) SetUser(v float32) {
	o.User = &v
}

func (o CpuStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CpuStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Idle) {
		toSerialize["idle"] = o.Idle
	}
	if !IsNil(o.Interrupt) {
		toSerialize["interrupt"] = o.Interrupt
	}
	if !IsNil(o.LoadAvg) {
		toSerialize["load_avg"] = o.LoadAvg
	}
	if !IsNil(o.System) {
		toSerialize["system"] = o.System
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CpuStat) UnmarshalJSON(data []byte) (err error) {
	varCpuStat := _CpuStat{}

	err = json.Unmarshal(data, &varCpuStat)

	if err != nil {
		return err
	}

	*o = CpuStat(varCpuStat)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "idle")
		delete(additionalProperties, "interrupt")
		delete(additionalProperties, "load_avg")
		delete(additionalProperties, "system")
		delete(additionalProperties, "user")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCpuStat struct {
	value *CpuStat
	isSet bool
}

func (v NullableCpuStat) Get() *CpuStat {
	return v.value
}

func (v *NullableCpuStat) Set(val *CpuStat) {
	v.value = val
	v.isSet = true
}

func (v NullableCpuStat) IsSet() bool {
	return v.isSet
}

func (v *NullableCpuStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCpuStat(val *CpuStat) *NullableCpuStat {
	return &NullableCpuStat{value: val, isSet: true}
}

func (v NullableCpuStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCpuStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


