/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the EventsDeviceAp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventsDeviceAp{}

// EventsDeviceAp ap events
type EventsDeviceAp struct {
	Ap *string `json:"ap,omitempty"`
	Apfw *string `json:"apfw,omitempty"`
	Count *int32 `json:"count,omitempty"`
	DeviceType *string `json:"device_type,omitempty"`
	Mac *string `json:"mac,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	PortId *string `json:"port_id,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	Text *string `json:"text,omitempty"`
	Timestamp float32 `json:"timestamp"`
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EventsDeviceAp EventsDeviceAp

// NewEventsDeviceAp instantiates a new EventsDeviceAp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsDeviceAp(timestamp float32) *EventsDeviceAp {
	this := EventsDeviceAp{}
	this.Timestamp = timestamp
	return &this
}

// NewEventsDeviceApWithDefaults instantiates a new EventsDeviceAp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsDeviceApWithDefaults() *EventsDeviceAp {
	this := EventsDeviceAp{}
	return &this
}

// GetAp returns the Ap field value if set, zero value otherwise.
func (o *EventsDeviceAp) GetAp() string {
	if o == nil || IsNil(o.Ap) {
		var ret string
		return ret
	}
	return *o.Ap
}

// GetApOk returns a tuple with the Ap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsDeviceAp) GetApOk() (*string, bool) {
	if o == nil || IsNil(o.Ap) {
		return nil, false
	}
	return o.Ap, true
}

// HasAp returns a boolean if a field has been set.
func (o *EventsDeviceAp) HasAp() bool {
	if o != nil && !IsNil(o.Ap) {
		return true
	}

	return false
}

// SetAp gets a reference to the given string and assigns it to the Ap field.
func (o *EventsDeviceAp) SetAp(v string) {
	o.Ap = &v
}

// GetApfw returns the Apfw field value if set, zero value otherwise.
func (o *EventsDeviceAp) GetApfw() string {
	if o == nil || IsNil(o.Apfw) {
		var ret string
		return ret
	}
	return *o.Apfw
}

// GetApfwOk returns a tuple with the Apfw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsDeviceAp) GetApfwOk() (*string, bool) {
	if o == nil || IsNil(o.Apfw) {
		return nil, false
	}
	return o.Apfw, true
}

// HasApfw returns a boolean if a field has been set.
func (o *EventsDeviceAp) HasApfw() bool {
	if o != nil && !IsNil(o.Apfw) {
		return true
	}

	return false
}

// SetApfw gets a reference to the given string and assigns it to the Apfw field.
func (o *EventsDeviceAp) SetApfw(v string) {
	o.Apfw = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *EventsDeviceAp) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsDeviceAp) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *EventsDeviceAp) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *EventsDeviceAp) SetCount(v int32) {
	o.Count = &v
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *EventsDeviceAp) GetDeviceType() string {
	if o == nil || IsNil(o.DeviceType) {
		var ret string
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsDeviceAp) GetDeviceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceType) {
		return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *EventsDeviceAp) HasDeviceType() bool {
	if o != nil && !IsNil(o.DeviceType) {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given string and assigns it to the DeviceType field.
func (o *EventsDeviceAp) SetDeviceType(v string) {
	o.DeviceType = &v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *EventsDeviceAp) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsDeviceAp) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *EventsDeviceAp) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *EventsDeviceAp) SetMac(v string) {
	o.Mac = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *EventsDeviceAp) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsDeviceAp) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *EventsDeviceAp) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *EventsDeviceAp) SetOrgId(v string) {
	o.OrgId = &v
}

// GetPortId returns the PortId field value if set, zero value otherwise.
func (o *EventsDeviceAp) GetPortId() string {
	if o == nil || IsNil(o.PortId) {
		var ret string
		return ret
	}
	return *o.PortId
}

// GetPortIdOk returns a tuple with the PortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsDeviceAp) GetPortIdOk() (*string, bool) {
	if o == nil || IsNil(o.PortId) {
		return nil, false
	}
	return o.PortId, true
}

// HasPortId returns a boolean if a field has been set.
func (o *EventsDeviceAp) HasPortId() bool {
	if o != nil && !IsNil(o.PortId) {
		return true
	}

	return false
}

// SetPortId gets a reference to the given string and assigns it to the PortId field.
func (o *EventsDeviceAp) SetPortId(v string) {
	o.PortId = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *EventsDeviceAp) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsDeviceAp) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *EventsDeviceAp) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *EventsDeviceAp) SetSiteId(v string) {
	o.SiteId = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *EventsDeviceAp) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsDeviceAp) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *EventsDeviceAp) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *EventsDeviceAp) SetText(v string) {
	o.Text = &v
}

// GetTimestamp returns the Timestamp field value
func (o *EventsDeviceAp) GetTimestamp() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *EventsDeviceAp) GetTimestampOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *EventsDeviceAp) SetTimestamp(v float32) {
	o.Timestamp = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EventsDeviceAp) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsDeviceAp) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EventsDeviceAp) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EventsDeviceAp) SetType(v string) {
	o.Type = &v
}

func (o EventsDeviceAp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventsDeviceAp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ap) {
		toSerialize["ap"] = o.Ap
	}
	if !IsNil(o.Apfw) {
		toSerialize["apfw"] = o.Apfw
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.DeviceType) {
		toSerialize["device_type"] = o.DeviceType
	}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.PortId) {
		toSerialize["port_id"] = o.PortId
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	toSerialize["timestamp"] = o.Timestamp
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EventsDeviceAp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventsDeviceAp := _EventsDeviceAp{}

	err = json.Unmarshal(data, &varEventsDeviceAp)

	if err != nil {
		return err
	}

	*o = EventsDeviceAp(varEventsDeviceAp)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ap")
		delete(additionalProperties, "apfw")
		delete(additionalProperties, "count")
		delete(additionalProperties, "device_type")
		delete(additionalProperties, "mac")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "port_id")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "text")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEventsDeviceAp struct {
	value *EventsDeviceAp
	isSet bool
}

func (v NullableEventsDeviceAp) Get() *EventsDeviceAp {
	return v.value
}

func (v *NullableEventsDeviceAp) Set(val *EventsDeviceAp) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsDeviceAp) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsDeviceAp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsDeviceAp(val *EventsDeviceAp) *NullableEventsDeviceAp {
	return &NullableEventsDeviceAp{value: val, isSet: true}
}

func (v NullableEventsDeviceAp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsDeviceAp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


