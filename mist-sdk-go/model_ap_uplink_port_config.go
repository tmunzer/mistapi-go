/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the ApUplinkPortConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApUplinkPortConfig{}

// ApUplinkPortConfig struct for ApUplinkPortConfig
type ApUplinkPortConfig struct {
	// Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch
	Dot1x *bool `json:"dot1x,omitempty"`
	// by default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.
	KeepWlansUpIfDown *bool `json:"keep_wlans_up_if_down,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApUplinkPortConfig ApUplinkPortConfig

// NewApUplinkPortConfig instantiates a new ApUplinkPortConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApUplinkPortConfig() *ApUplinkPortConfig {
	this := ApUplinkPortConfig{}
	var dot1x bool = false
	this.Dot1x = &dot1x
	var keepWlansUpIfDown bool = false
	this.KeepWlansUpIfDown = &keepWlansUpIfDown
	return &this
}

// NewApUplinkPortConfigWithDefaults instantiates a new ApUplinkPortConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApUplinkPortConfigWithDefaults() *ApUplinkPortConfig {
	this := ApUplinkPortConfig{}
	var dot1x bool = false
	this.Dot1x = &dot1x
	var keepWlansUpIfDown bool = false
	this.KeepWlansUpIfDown = &keepWlansUpIfDown
	return &this
}

// GetDot1x returns the Dot1x field value if set, zero value otherwise.
func (o *ApUplinkPortConfig) GetDot1x() bool {
	if o == nil || IsNil(o.Dot1x) {
		var ret bool
		return ret
	}
	return *o.Dot1x
}

// GetDot1xOk returns a tuple with the Dot1x field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApUplinkPortConfig) GetDot1xOk() (*bool, bool) {
	if o == nil || IsNil(o.Dot1x) {
		return nil, false
	}
	return o.Dot1x, true
}

// HasDot1x returns a boolean if a field has been set.
func (o *ApUplinkPortConfig) HasDot1x() bool {
	if o != nil && !IsNil(o.Dot1x) {
		return true
	}

	return false
}

// SetDot1x gets a reference to the given bool and assigns it to the Dot1x field.
func (o *ApUplinkPortConfig) SetDot1x(v bool) {
	o.Dot1x = &v
}

// GetKeepWlansUpIfDown returns the KeepWlansUpIfDown field value if set, zero value otherwise.
func (o *ApUplinkPortConfig) GetKeepWlansUpIfDown() bool {
	if o == nil || IsNil(o.KeepWlansUpIfDown) {
		var ret bool
		return ret
	}
	return *o.KeepWlansUpIfDown
}

// GetKeepWlansUpIfDownOk returns a tuple with the KeepWlansUpIfDown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApUplinkPortConfig) GetKeepWlansUpIfDownOk() (*bool, bool) {
	if o == nil || IsNil(o.KeepWlansUpIfDown) {
		return nil, false
	}
	return o.KeepWlansUpIfDown, true
}

// HasKeepWlansUpIfDown returns a boolean if a field has been set.
func (o *ApUplinkPortConfig) HasKeepWlansUpIfDown() bool {
	if o != nil && !IsNil(o.KeepWlansUpIfDown) {
		return true
	}

	return false
}

// SetKeepWlansUpIfDown gets a reference to the given bool and assigns it to the KeepWlansUpIfDown field.
func (o *ApUplinkPortConfig) SetKeepWlansUpIfDown(v bool) {
	o.KeepWlansUpIfDown = &v
}

func (o ApUplinkPortConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApUplinkPortConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dot1x) {
		toSerialize["dot1x"] = o.Dot1x
	}
	if !IsNil(o.KeepWlansUpIfDown) {
		toSerialize["keep_wlans_up_if_down"] = o.KeepWlansUpIfDown
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApUplinkPortConfig) UnmarshalJSON(data []byte) (err error) {
	varApUplinkPortConfig := _ApUplinkPortConfig{}

	err = json.Unmarshal(data, &varApUplinkPortConfig)

	if err != nil {
		return err
	}

	*o = ApUplinkPortConfig(varApUplinkPortConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dot1x")
		delete(additionalProperties, "keep_wlans_up_if_down")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApUplinkPortConfig struct {
	value *ApUplinkPortConfig
	isSet bool
}

func (v NullableApUplinkPortConfig) Get() *ApUplinkPortConfig {
	return v.value
}

func (v *NullableApUplinkPortConfig) Set(val *ApUplinkPortConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableApUplinkPortConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableApUplinkPortConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApUplinkPortConfig(val *ApUplinkPortConfig) *NullableApUplinkPortConfig {
	return &NullableApUplinkPortConfig{value: val, isSet: true}
}

func (v NullableApUplinkPortConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApUplinkPortConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


