/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the OrgSettingVpnOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrgSettingVpnOptions{}

// OrgSettingVpnOptions struct for OrgSettingVpnOptions
type OrgSettingVpnOptions struct {
	AsBase *int32 `json:"as_base,omitempty"`
	// equiring /12 or bigger to support 16 private IPs for 65535 gateways
	StSubnet *string `json:"st_subnet,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrgSettingVpnOptions OrgSettingVpnOptions

// NewOrgSettingVpnOptions instantiates a new OrgSettingVpnOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgSettingVpnOptions() *OrgSettingVpnOptions {
	this := OrgSettingVpnOptions{}
	var stSubnet string = "10.224.0.0/12"
	this.StSubnet = &stSubnet
	return &this
}

// NewOrgSettingVpnOptionsWithDefaults instantiates a new OrgSettingVpnOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgSettingVpnOptionsWithDefaults() *OrgSettingVpnOptions {
	this := OrgSettingVpnOptions{}
	var stSubnet string = "10.224.0.0/12"
	this.StSubnet = &stSubnet
	return &this
}

// GetAsBase returns the AsBase field value if set, zero value otherwise.
func (o *OrgSettingVpnOptions) GetAsBase() int32 {
	if o == nil || IsNil(o.AsBase) {
		var ret int32
		return ret
	}
	return *o.AsBase
}

// GetAsBaseOk returns a tuple with the AsBase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSettingVpnOptions) GetAsBaseOk() (*int32, bool) {
	if o == nil || IsNil(o.AsBase) {
		return nil, false
	}
	return o.AsBase, true
}

// HasAsBase returns a boolean if a field has been set.
func (o *OrgSettingVpnOptions) HasAsBase() bool {
	if o != nil && !IsNil(o.AsBase) {
		return true
	}

	return false
}

// SetAsBase gets a reference to the given int32 and assigns it to the AsBase field.
func (o *OrgSettingVpnOptions) SetAsBase(v int32) {
	o.AsBase = &v
}

// GetStSubnet returns the StSubnet field value if set, zero value otherwise.
func (o *OrgSettingVpnOptions) GetStSubnet() string {
	if o == nil || IsNil(o.StSubnet) {
		var ret string
		return ret
	}
	return *o.StSubnet
}

// GetStSubnetOk returns a tuple with the StSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSettingVpnOptions) GetStSubnetOk() (*string, bool) {
	if o == nil || IsNil(o.StSubnet) {
		return nil, false
	}
	return o.StSubnet, true
}

// HasStSubnet returns a boolean if a field has been set.
func (o *OrgSettingVpnOptions) HasStSubnet() bool {
	if o != nil && !IsNil(o.StSubnet) {
		return true
	}

	return false
}

// SetStSubnet gets a reference to the given string and assigns it to the StSubnet field.
func (o *OrgSettingVpnOptions) SetStSubnet(v string) {
	o.StSubnet = &v
}

func (o OrgSettingVpnOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrgSettingVpnOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AsBase) {
		toSerialize["as_base"] = o.AsBase
	}
	if !IsNil(o.StSubnet) {
		toSerialize["st_subnet"] = o.StSubnet
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrgSettingVpnOptions) UnmarshalJSON(data []byte) (err error) {
	varOrgSettingVpnOptions := _OrgSettingVpnOptions{}

	err = json.Unmarshal(data, &varOrgSettingVpnOptions)

	if err != nil {
		return err
	}

	*o = OrgSettingVpnOptions(varOrgSettingVpnOptions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "as_base")
		delete(additionalProperties, "st_subnet")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrgSettingVpnOptions struct {
	value *OrgSettingVpnOptions
	isSet bool
}

func (v NullableOrgSettingVpnOptions) Get() *OrgSettingVpnOptions {
	return v.value
}

func (v *NullableOrgSettingVpnOptions) Set(val *OrgSettingVpnOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgSettingVpnOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgSettingVpnOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgSettingVpnOptions(val *OrgSettingVpnOptions) *NullableOrgSettingVpnOptions {
	return &NullableOrgSettingVpnOptions{value: val, isSet: true}
}

func (v NullableOrgSettingVpnOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgSettingVpnOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


