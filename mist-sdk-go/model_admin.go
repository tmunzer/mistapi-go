/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the Admin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Admin{}

// Admin struct for Admin
type Admin struct {
	AdminId *string `json:"admin_id,omitempty"`
	ComplianceStatus *AdminComplianceStatus `json:"compliance_status,omitempty"`
	Email string `json:"email"`
	EnableTwoFactor *bool `json:"enable_two_factor,omitempty"`
	ExpireTime *int32 `json:"expire_time,omitempty"`
	// for an invite, this is the original first name used
	FirstName string `json:"first_name"`
	// how long the invite should be valid
	Hours *int32 `json:"hours,omitempty"`
	// for an invite, this is the original last name used
	LastName string `json:"last_name"`
	OauthGoogle *bool `json:"oauth_google,omitempty"`
	// phone number (numbers only, including country code)
	Phone *string `json:"phone,omitempty"`
	// secondary phone number (numbers only, including country code)
	Phone2 *string `json:"phone2,omitempty"`
	// list of privileges the admin has
	Privileges []PrivilegeSelf `json:"privileges,omitempty"`
	SessionExpiry *int32 `json:"session_expiry,omitempty"`
	Tags []string `json:"tags,omitempty"`
	// two factor status
	TwoFactorVerified *bool `json:"two_factor_verified,omitempty"`
	// an admin alogin via_sso is more restircted. (password and email cannot be changed)
	ViaSso *bool `json:"via_sso,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Admin Admin

// NewAdmin instantiates a new Admin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdmin(email string, firstName string, lastName string) *Admin {
	this := Admin{}
	this.Email = email
	this.FirstName = firstName
	var hours int32 = 24
	this.Hours = &hours
	this.LastName = lastName
	return &this
}

// NewAdminWithDefaults instantiates a new Admin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminWithDefaults() *Admin {
	this := Admin{}
	var hours int32 = 24
	this.Hours = &hours
	return &this
}

// GetAdminId returns the AdminId field value if set, zero value otherwise.
func (o *Admin) GetAdminId() string {
	if o == nil || IsNil(o.AdminId) {
		var ret string
		return ret
	}
	return *o.AdminId
}

// GetAdminIdOk returns a tuple with the AdminId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admin) GetAdminIdOk() (*string, bool) {
	if o == nil || IsNil(o.AdminId) {
		return nil, false
	}
	return o.AdminId, true
}

// HasAdminId returns a boolean if a field has been set.
func (o *Admin) HasAdminId() bool {
	if o != nil && !IsNil(o.AdminId) {
		return true
	}

	return false
}

// SetAdminId gets a reference to the given string and assigns it to the AdminId field.
func (o *Admin) SetAdminId(v string) {
	o.AdminId = &v
}

// GetComplianceStatus returns the ComplianceStatus field value if set, zero value otherwise.
func (o *Admin) GetComplianceStatus() AdminComplianceStatus {
	if o == nil || IsNil(o.ComplianceStatus) {
		var ret AdminComplianceStatus
		return ret
	}
	return *o.ComplianceStatus
}

// GetComplianceStatusOk returns a tuple with the ComplianceStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admin) GetComplianceStatusOk() (*AdminComplianceStatus, bool) {
	if o == nil || IsNil(o.ComplianceStatus) {
		return nil, false
	}
	return o.ComplianceStatus, true
}

// HasComplianceStatus returns a boolean if a field has been set.
func (o *Admin) HasComplianceStatus() bool {
	if o != nil && !IsNil(o.ComplianceStatus) {
		return true
	}

	return false
}

// SetComplianceStatus gets a reference to the given AdminComplianceStatus and assigns it to the ComplianceStatus field.
func (o *Admin) SetComplianceStatus(v AdminComplianceStatus) {
	o.ComplianceStatus = &v
}

// GetEmail returns the Email field value
func (o *Admin) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *Admin) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *Admin) SetEmail(v string) {
	o.Email = v
}

// GetEnableTwoFactor returns the EnableTwoFactor field value if set, zero value otherwise.
func (o *Admin) GetEnableTwoFactor() bool {
	if o == nil || IsNil(o.EnableTwoFactor) {
		var ret bool
		return ret
	}
	return *o.EnableTwoFactor
}

// GetEnableTwoFactorOk returns a tuple with the EnableTwoFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admin) GetEnableTwoFactorOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableTwoFactor) {
		return nil, false
	}
	return o.EnableTwoFactor, true
}

// HasEnableTwoFactor returns a boolean if a field has been set.
func (o *Admin) HasEnableTwoFactor() bool {
	if o != nil && !IsNil(o.EnableTwoFactor) {
		return true
	}

	return false
}

// SetEnableTwoFactor gets a reference to the given bool and assigns it to the EnableTwoFactor field.
func (o *Admin) SetEnableTwoFactor(v bool) {
	o.EnableTwoFactor = &v
}

// GetExpireTime returns the ExpireTime field value if set, zero value otherwise.
func (o *Admin) GetExpireTime() int32 {
	if o == nil || IsNil(o.ExpireTime) {
		var ret int32
		return ret
	}
	return *o.ExpireTime
}

// GetExpireTimeOk returns a tuple with the ExpireTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admin) GetExpireTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpireTime) {
		return nil, false
	}
	return o.ExpireTime, true
}

// HasExpireTime returns a boolean if a field has been set.
func (o *Admin) HasExpireTime() bool {
	if o != nil && !IsNil(o.ExpireTime) {
		return true
	}

	return false
}

// SetExpireTime gets a reference to the given int32 and assigns it to the ExpireTime field.
func (o *Admin) SetExpireTime(v int32) {
	o.ExpireTime = &v
}

// GetFirstName returns the FirstName field value
func (o *Admin) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *Admin) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *Admin) SetFirstName(v string) {
	o.FirstName = v
}

// GetHours returns the Hours field value if set, zero value otherwise.
func (o *Admin) GetHours() int32 {
	if o == nil || IsNil(o.Hours) {
		var ret int32
		return ret
	}
	return *o.Hours
}

// GetHoursOk returns a tuple with the Hours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admin) GetHoursOk() (*int32, bool) {
	if o == nil || IsNil(o.Hours) {
		return nil, false
	}
	return o.Hours, true
}

// HasHours returns a boolean if a field has been set.
func (o *Admin) HasHours() bool {
	if o != nil && !IsNil(o.Hours) {
		return true
	}

	return false
}

// SetHours gets a reference to the given int32 and assigns it to the Hours field.
func (o *Admin) SetHours(v int32) {
	o.Hours = &v
}

// GetLastName returns the LastName field value
func (o *Admin) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *Admin) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *Admin) SetLastName(v string) {
	o.LastName = v
}

// GetOauthGoogle returns the OauthGoogle field value if set, zero value otherwise.
func (o *Admin) GetOauthGoogle() bool {
	if o == nil || IsNil(o.OauthGoogle) {
		var ret bool
		return ret
	}
	return *o.OauthGoogle
}

// GetOauthGoogleOk returns a tuple with the OauthGoogle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admin) GetOauthGoogleOk() (*bool, bool) {
	if o == nil || IsNil(o.OauthGoogle) {
		return nil, false
	}
	return o.OauthGoogle, true
}

// HasOauthGoogle returns a boolean if a field has been set.
func (o *Admin) HasOauthGoogle() bool {
	if o != nil && !IsNil(o.OauthGoogle) {
		return true
	}

	return false
}

// SetOauthGoogle gets a reference to the given bool and assigns it to the OauthGoogle field.
func (o *Admin) SetOauthGoogle(v bool) {
	o.OauthGoogle = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *Admin) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admin) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *Admin) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *Admin) SetPhone(v string) {
	o.Phone = &v
}

// GetPhone2 returns the Phone2 field value if set, zero value otherwise.
func (o *Admin) GetPhone2() string {
	if o == nil || IsNil(o.Phone2) {
		var ret string
		return ret
	}
	return *o.Phone2
}

// GetPhone2Ok returns a tuple with the Phone2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admin) GetPhone2Ok() (*string, bool) {
	if o == nil || IsNil(o.Phone2) {
		return nil, false
	}
	return o.Phone2, true
}

// HasPhone2 returns a boolean if a field has been set.
func (o *Admin) HasPhone2() bool {
	if o != nil && !IsNil(o.Phone2) {
		return true
	}

	return false
}

// SetPhone2 gets a reference to the given string and assigns it to the Phone2 field.
func (o *Admin) SetPhone2(v string) {
	o.Phone2 = &v
}

// GetPrivileges returns the Privileges field value if set, zero value otherwise.
func (o *Admin) GetPrivileges() []PrivilegeSelf {
	if o == nil || IsNil(o.Privileges) {
		var ret []PrivilegeSelf
		return ret
	}
	return o.Privileges
}

// GetPrivilegesOk returns a tuple with the Privileges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admin) GetPrivilegesOk() ([]PrivilegeSelf, bool) {
	if o == nil || IsNil(o.Privileges) {
		return nil, false
	}
	return o.Privileges, true
}

// HasPrivileges returns a boolean if a field has been set.
func (o *Admin) HasPrivileges() bool {
	if o != nil && !IsNil(o.Privileges) {
		return true
	}

	return false
}

// SetPrivileges gets a reference to the given []PrivilegeSelf and assigns it to the Privileges field.
func (o *Admin) SetPrivileges(v []PrivilegeSelf) {
	o.Privileges = v
}

// GetSessionExpiry returns the SessionExpiry field value if set, zero value otherwise.
func (o *Admin) GetSessionExpiry() int32 {
	if o == nil || IsNil(o.SessionExpiry) {
		var ret int32
		return ret
	}
	return *o.SessionExpiry
}

// GetSessionExpiryOk returns a tuple with the SessionExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admin) GetSessionExpiryOk() (*int32, bool) {
	if o == nil || IsNil(o.SessionExpiry) {
		return nil, false
	}
	return o.SessionExpiry, true
}

// HasSessionExpiry returns a boolean if a field has been set.
func (o *Admin) HasSessionExpiry() bool {
	if o != nil && !IsNil(o.SessionExpiry) {
		return true
	}

	return false
}

// SetSessionExpiry gets a reference to the given int32 and assigns it to the SessionExpiry field.
func (o *Admin) SetSessionExpiry(v int32) {
	o.SessionExpiry = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Admin) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admin) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Admin) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Admin) SetTags(v []string) {
	o.Tags = v
}

// GetTwoFactorVerified returns the TwoFactorVerified field value if set, zero value otherwise.
func (o *Admin) GetTwoFactorVerified() bool {
	if o == nil || IsNil(o.TwoFactorVerified) {
		var ret bool
		return ret
	}
	return *o.TwoFactorVerified
}

// GetTwoFactorVerifiedOk returns a tuple with the TwoFactorVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admin) GetTwoFactorVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.TwoFactorVerified) {
		return nil, false
	}
	return o.TwoFactorVerified, true
}

// HasTwoFactorVerified returns a boolean if a field has been set.
func (o *Admin) HasTwoFactorVerified() bool {
	if o != nil && !IsNil(o.TwoFactorVerified) {
		return true
	}

	return false
}

// SetTwoFactorVerified gets a reference to the given bool and assigns it to the TwoFactorVerified field.
func (o *Admin) SetTwoFactorVerified(v bool) {
	o.TwoFactorVerified = &v
}

// GetViaSso returns the ViaSso field value if set, zero value otherwise.
func (o *Admin) GetViaSso() bool {
	if o == nil || IsNil(o.ViaSso) {
		var ret bool
		return ret
	}
	return *o.ViaSso
}

// GetViaSsoOk returns a tuple with the ViaSso field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Admin) GetViaSsoOk() (*bool, bool) {
	if o == nil || IsNil(o.ViaSso) {
		return nil, false
	}
	return o.ViaSso, true
}

// HasViaSso returns a boolean if a field has been set.
func (o *Admin) HasViaSso() bool {
	if o != nil && !IsNil(o.ViaSso) {
		return true
	}

	return false
}

// SetViaSso gets a reference to the given bool and assigns it to the ViaSso field.
func (o *Admin) SetViaSso(v bool) {
	o.ViaSso = &v
}

func (o Admin) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Admin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdminId) {
		toSerialize["admin_id"] = o.AdminId
	}
	if !IsNil(o.ComplianceStatus) {
		toSerialize["compliance_status"] = o.ComplianceStatus
	}
	toSerialize["email"] = o.Email
	if !IsNil(o.EnableTwoFactor) {
		toSerialize["enable_two_factor"] = o.EnableTwoFactor
	}
	if !IsNil(o.ExpireTime) {
		toSerialize["expire_time"] = o.ExpireTime
	}
	toSerialize["first_name"] = o.FirstName
	if !IsNil(o.Hours) {
		toSerialize["hours"] = o.Hours
	}
	toSerialize["last_name"] = o.LastName
	if !IsNil(o.OauthGoogle) {
		toSerialize["oauth_google"] = o.OauthGoogle
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.Phone2) {
		toSerialize["phone2"] = o.Phone2
	}
	if !IsNil(o.Privileges) {
		toSerialize["privileges"] = o.Privileges
	}
	if !IsNil(o.SessionExpiry) {
		toSerialize["session_expiry"] = o.SessionExpiry
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.TwoFactorVerified) {
		toSerialize["two_factor_verified"] = o.TwoFactorVerified
	}
	if !IsNil(o.ViaSso) {
		toSerialize["via_sso"] = o.ViaSso
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Admin) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"first_name",
		"last_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAdmin := _Admin{}

	err = json.Unmarshal(data, &varAdmin)

	if err != nil {
		return err
	}

	*o = Admin(varAdmin)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "admin_id")
		delete(additionalProperties, "compliance_status")
		delete(additionalProperties, "email")
		delete(additionalProperties, "enable_two_factor")
		delete(additionalProperties, "expire_time")
		delete(additionalProperties, "first_name")
		delete(additionalProperties, "hours")
		delete(additionalProperties, "last_name")
		delete(additionalProperties, "oauth_google")
		delete(additionalProperties, "phone")
		delete(additionalProperties, "phone2")
		delete(additionalProperties, "privileges")
		delete(additionalProperties, "session_expiry")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "two_factor_verified")
		delete(additionalProperties, "via_sso")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAdmin struct {
	value *Admin
	isSet bool
}

func (v NullableAdmin) Get() *Admin {
	return v.value
}

func (v *NullableAdmin) Set(val *Admin) {
	v.value = val
	v.isSet = true
}

func (v NullableAdmin) IsSet() bool {
	return v.isSet
}

func (v *NullableAdmin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdmin(val *Admin) *NullableAdmin {
	return &NullableAdmin{value: val, isSet: true}
}

func (v NullableAdmin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdmin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


