/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the AdminInvite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdminInvite{}

// AdminInvite struct for AdminInvite
type AdminInvite struct {
	// skip creating initial setup if true
	AccountOnly *bool `json:"account_only,omitempty"`
	// whether to allow Mist to look at this org
	AllowMist *bool `json:"allow_mist,omitempty"`
	// city of registering user
	City *string `json:"city,omitempty"`
	// country/region of registering user
	Country *string `json:"country,omitempty"`
	Email string `json:"email"`
	FirstName string `json:"first_name"`
	// required initially
	InviteCode *string `json:"invite_code,omitempty"`
	LastName string `json:"last_name"`
	OrgName string `json:"org_name"`
	Password string `json:"password"`
	// reCAPTCHA , see https://www.google.com/recaptcha/
	Recaptcha string `json:"recaptcha"`
	RecaptchaFlavor *RecaptchaFlavor `json:"recaptcha_flavor,omitempty"`
	// the invite token to apply after account creation
	RefererInviteToken *string `json:"referer_invite_token,omitempty"`
	// the url the user should be redirected back to
	ReturnTo *string `json:"return_to,omitempty"`
	// state of registering user, optional (depends on country/region)
	State *string `json:"state,omitempty"`
	// street address of registering user
	StreetAddress *string `json:"street_address,omitempty"`
	// street address 2 of registering user
	StreetAddress2 *string `json:"street_address 2,omitempty"`
	// zipcode of registering user
	Zipcode *string `json:"zipcode,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AdminInvite AdminInvite

// NewAdminInvite instantiates a new AdminInvite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminInvite(email string, firstName string, lastName string, orgName string, password string, recaptcha string) *AdminInvite {
	this := AdminInvite{}
	var accountOnly bool = false
	this.AccountOnly = &accountOnly
	var allowMist bool = false
	this.AllowMist = &allowMist
	this.Email = email
	this.FirstName = firstName
	this.LastName = lastName
	this.OrgName = orgName
	this.Password = password
	this.Recaptcha = recaptcha
	var recaptchaFlavor RecaptchaFlavor = RECAPTCHAFLAVOR_GOOGLE
	this.RecaptchaFlavor = &recaptchaFlavor
	return &this
}

// NewAdminInviteWithDefaults instantiates a new AdminInvite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminInviteWithDefaults() *AdminInvite {
	this := AdminInvite{}
	var accountOnly bool = false
	this.AccountOnly = &accountOnly
	var allowMist bool = false
	this.AllowMist = &allowMist
	var recaptchaFlavor RecaptchaFlavor = RECAPTCHAFLAVOR_GOOGLE
	this.RecaptchaFlavor = &recaptchaFlavor
	return &this
}

// GetAccountOnly returns the AccountOnly field value if set, zero value otherwise.
func (o *AdminInvite) GetAccountOnly() bool {
	if o == nil || IsNil(o.AccountOnly) {
		var ret bool
		return ret
	}
	return *o.AccountOnly
}

// GetAccountOnlyOk returns a tuple with the AccountOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminInvite) GetAccountOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.AccountOnly) {
		return nil, false
	}
	return o.AccountOnly, true
}

// HasAccountOnly returns a boolean if a field has been set.
func (o *AdminInvite) HasAccountOnly() bool {
	if o != nil && !IsNil(o.AccountOnly) {
		return true
	}

	return false
}

// SetAccountOnly gets a reference to the given bool and assigns it to the AccountOnly field.
func (o *AdminInvite) SetAccountOnly(v bool) {
	o.AccountOnly = &v
}

// GetAllowMist returns the AllowMist field value if set, zero value otherwise.
func (o *AdminInvite) GetAllowMist() bool {
	if o == nil || IsNil(o.AllowMist) {
		var ret bool
		return ret
	}
	return *o.AllowMist
}

// GetAllowMistOk returns a tuple with the AllowMist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminInvite) GetAllowMistOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowMist) {
		return nil, false
	}
	return o.AllowMist, true
}

// HasAllowMist returns a boolean if a field has been set.
func (o *AdminInvite) HasAllowMist() bool {
	if o != nil && !IsNil(o.AllowMist) {
		return true
	}

	return false
}

// SetAllowMist gets a reference to the given bool and assigns it to the AllowMist field.
func (o *AdminInvite) SetAllowMist(v bool) {
	o.AllowMist = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *AdminInvite) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminInvite) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *AdminInvite) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *AdminInvite) SetCity(v string) {
	o.City = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *AdminInvite) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminInvite) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *AdminInvite) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *AdminInvite) SetCountry(v string) {
	o.Country = &v
}

// GetEmail returns the Email field value
func (o *AdminInvite) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *AdminInvite) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *AdminInvite) SetEmail(v string) {
	o.Email = v
}

// GetFirstName returns the FirstName field value
func (o *AdminInvite) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *AdminInvite) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *AdminInvite) SetFirstName(v string) {
	o.FirstName = v
}

// GetInviteCode returns the InviteCode field value if set, zero value otherwise.
func (o *AdminInvite) GetInviteCode() string {
	if o == nil || IsNil(o.InviteCode) {
		var ret string
		return ret
	}
	return *o.InviteCode
}

// GetInviteCodeOk returns a tuple with the InviteCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminInvite) GetInviteCodeOk() (*string, bool) {
	if o == nil || IsNil(o.InviteCode) {
		return nil, false
	}
	return o.InviteCode, true
}

// HasInviteCode returns a boolean if a field has been set.
func (o *AdminInvite) HasInviteCode() bool {
	if o != nil && !IsNil(o.InviteCode) {
		return true
	}

	return false
}

// SetInviteCode gets a reference to the given string and assigns it to the InviteCode field.
func (o *AdminInvite) SetInviteCode(v string) {
	o.InviteCode = &v
}

// GetLastName returns the LastName field value
func (o *AdminInvite) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *AdminInvite) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *AdminInvite) SetLastName(v string) {
	o.LastName = v
}

// GetOrgName returns the OrgName field value
func (o *AdminInvite) GetOrgName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgName
}

// GetOrgNameOk returns a tuple with the OrgName field value
// and a boolean to check if the value has been set.
func (o *AdminInvite) GetOrgNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgName, true
}

// SetOrgName sets field value
func (o *AdminInvite) SetOrgName(v string) {
	o.OrgName = v
}

// GetPassword returns the Password field value
func (o *AdminInvite) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *AdminInvite) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *AdminInvite) SetPassword(v string) {
	o.Password = v
}

// GetRecaptcha returns the Recaptcha field value
func (o *AdminInvite) GetRecaptcha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Recaptcha
}

// GetRecaptchaOk returns a tuple with the Recaptcha field value
// and a boolean to check if the value has been set.
func (o *AdminInvite) GetRecaptchaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Recaptcha, true
}

// SetRecaptcha sets field value
func (o *AdminInvite) SetRecaptcha(v string) {
	o.Recaptcha = v
}

// GetRecaptchaFlavor returns the RecaptchaFlavor field value if set, zero value otherwise.
func (o *AdminInvite) GetRecaptchaFlavor() RecaptchaFlavor {
	if o == nil || IsNil(o.RecaptchaFlavor) {
		var ret RecaptchaFlavor
		return ret
	}
	return *o.RecaptchaFlavor
}

// GetRecaptchaFlavorOk returns a tuple with the RecaptchaFlavor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminInvite) GetRecaptchaFlavorOk() (*RecaptchaFlavor, bool) {
	if o == nil || IsNil(o.RecaptchaFlavor) {
		return nil, false
	}
	return o.RecaptchaFlavor, true
}

// HasRecaptchaFlavor returns a boolean if a field has been set.
func (o *AdminInvite) HasRecaptchaFlavor() bool {
	if o != nil && !IsNil(o.RecaptchaFlavor) {
		return true
	}

	return false
}

// SetRecaptchaFlavor gets a reference to the given RecaptchaFlavor and assigns it to the RecaptchaFlavor field.
func (o *AdminInvite) SetRecaptchaFlavor(v RecaptchaFlavor) {
	o.RecaptchaFlavor = &v
}

// GetRefererInviteToken returns the RefererInviteToken field value if set, zero value otherwise.
func (o *AdminInvite) GetRefererInviteToken() string {
	if o == nil || IsNil(o.RefererInviteToken) {
		var ret string
		return ret
	}
	return *o.RefererInviteToken
}

// GetRefererInviteTokenOk returns a tuple with the RefererInviteToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminInvite) GetRefererInviteTokenOk() (*string, bool) {
	if o == nil || IsNil(o.RefererInviteToken) {
		return nil, false
	}
	return o.RefererInviteToken, true
}

// HasRefererInviteToken returns a boolean if a field has been set.
func (o *AdminInvite) HasRefererInviteToken() bool {
	if o != nil && !IsNil(o.RefererInviteToken) {
		return true
	}

	return false
}

// SetRefererInviteToken gets a reference to the given string and assigns it to the RefererInviteToken field.
func (o *AdminInvite) SetRefererInviteToken(v string) {
	o.RefererInviteToken = &v
}

// GetReturnTo returns the ReturnTo field value if set, zero value otherwise.
func (o *AdminInvite) GetReturnTo() string {
	if o == nil || IsNil(o.ReturnTo) {
		var ret string
		return ret
	}
	return *o.ReturnTo
}

// GetReturnToOk returns a tuple with the ReturnTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminInvite) GetReturnToOk() (*string, bool) {
	if o == nil || IsNil(o.ReturnTo) {
		return nil, false
	}
	return o.ReturnTo, true
}

// HasReturnTo returns a boolean if a field has been set.
func (o *AdminInvite) HasReturnTo() bool {
	if o != nil && !IsNil(o.ReturnTo) {
		return true
	}

	return false
}

// SetReturnTo gets a reference to the given string and assigns it to the ReturnTo field.
func (o *AdminInvite) SetReturnTo(v string) {
	o.ReturnTo = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *AdminInvite) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminInvite) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *AdminInvite) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *AdminInvite) SetState(v string) {
	o.State = &v
}

// GetStreetAddress returns the StreetAddress field value if set, zero value otherwise.
func (o *AdminInvite) GetStreetAddress() string {
	if o == nil || IsNil(o.StreetAddress) {
		var ret string
		return ret
	}
	return *o.StreetAddress
}

// GetStreetAddressOk returns a tuple with the StreetAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminInvite) GetStreetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.StreetAddress) {
		return nil, false
	}
	return o.StreetAddress, true
}

// HasStreetAddress returns a boolean if a field has been set.
func (o *AdminInvite) HasStreetAddress() bool {
	if o != nil && !IsNil(o.StreetAddress) {
		return true
	}

	return false
}

// SetStreetAddress gets a reference to the given string and assigns it to the StreetAddress field.
func (o *AdminInvite) SetStreetAddress(v string) {
	o.StreetAddress = &v
}

// GetStreetAddress2 returns the StreetAddress2 field value if set, zero value otherwise.
func (o *AdminInvite) GetStreetAddress2() string {
	if o == nil || IsNil(o.StreetAddress2) {
		var ret string
		return ret
	}
	return *o.StreetAddress2
}

// GetStreetAddress2Ok returns a tuple with the StreetAddress2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminInvite) GetStreetAddress2Ok() (*string, bool) {
	if o == nil || IsNil(o.StreetAddress2) {
		return nil, false
	}
	return o.StreetAddress2, true
}

// HasStreetAddress2 returns a boolean if a field has been set.
func (o *AdminInvite) HasStreetAddress2() bool {
	if o != nil && !IsNil(o.StreetAddress2) {
		return true
	}

	return false
}

// SetStreetAddress2 gets a reference to the given string and assigns it to the StreetAddress2 field.
func (o *AdminInvite) SetStreetAddress2(v string) {
	o.StreetAddress2 = &v
}

// GetZipcode returns the Zipcode field value if set, zero value otherwise.
func (o *AdminInvite) GetZipcode() string {
	if o == nil || IsNil(o.Zipcode) {
		var ret string
		return ret
	}
	return *o.Zipcode
}

// GetZipcodeOk returns a tuple with the Zipcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminInvite) GetZipcodeOk() (*string, bool) {
	if o == nil || IsNil(o.Zipcode) {
		return nil, false
	}
	return o.Zipcode, true
}

// HasZipcode returns a boolean if a field has been set.
func (o *AdminInvite) HasZipcode() bool {
	if o != nil && !IsNil(o.Zipcode) {
		return true
	}

	return false
}

// SetZipcode gets a reference to the given string and assigns it to the Zipcode field.
func (o *AdminInvite) SetZipcode(v string) {
	o.Zipcode = &v
}

func (o AdminInvite) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdminInvite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountOnly) {
		toSerialize["account_only"] = o.AccountOnly
	}
	if !IsNil(o.AllowMist) {
		toSerialize["allow_mist"] = o.AllowMist
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	toSerialize["email"] = o.Email
	toSerialize["first_name"] = o.FirstName
	if !IsNil(o.InviteCode) {
		toSerialize["invite_code"] = o.InviteCode
	}
	toSerialize["last_name"] = o.LastName
	toSerialize["org_name"] = o.OrgName
	toSerialize["password"] = o.Password
	toSerialize["recaptcha"] = o.Recaptcha
	if !IsNil(o.RecaptchaFlavor) {
		toSerialize["recaptcha_flavor"] = o.RecaptchaFlavor
	}
	if !IsNil(o.RefererInviteToken) {
		toSerialize["referer_invite_token"] = o.RefererInviteToken
	}
	if !IsNil(o.ReturnTo) {
		toSerialize["return_to"] = o.ReturnTo
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.StreetAddress) {
		toSerialize["street_address"] = o.StreetAddress
	}
	if !IsNil(o.StreetAddress2) {
		toSerialize["street_address 2"] = o.StreetAddress2
	}
	if !IsNil(o.Zipcode) {
		toSerialize["zipcode"] = o.Zipcode
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdminInvite) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"first_name",
		"last_name",
		"org_name",
		"password",
		"recaptcha",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAdminInvite := _AdminInvite{}

	err = json.Unmarshal(data, &varAdminInvite)

	if err != nil {
		return err
	}

	*o = AdminInvite(varAdminInvite)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "account_only")
		delete(additionalProperties, "allow_mist")
		delete(additionalProperties, "city")
		delete(additionalProperties, "country")
		delete(additionalProperties, "email")
		delete(additionalProperties, "first_name")
		delete(additionalProperties, "invite_code")
		delete(additionalProperties, "last_name")
		delete(additionalProperties, "org_name")
		delete(additionalProperties, "password")
		delete(additionalProperties, "recaptcha")
		delete(additionalProperties, "recaptcha_flavor")
		delete(additionalProperties, "referer_invite_token")
		delete(additionalProperties, "return_to")
		delete(additionalProperties, "state")
		delete(additionalProperties, "street_address")
		delete(additionalProperties, "street_address 2")
		delete(additionalProperties, "zipcode")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAdminInvite struct {
	value *AdminInvite
	isSet bool
}

func (v NullableAdminInvite) Get() *AdminInvite {
	return v.value
}

func (v *NullableAdminInvite) Set(val *AdminInvite) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminInvite) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminInvite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminInvite(val *AdminInvite) *NullableAdminInvite {
	return &NullableAdminInvite{value: val, isSet: true}
}

func (v NullableAdminInvite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminInvite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


