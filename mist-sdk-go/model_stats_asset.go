/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the StatsAsset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatsAsset{}

// StatsAsset Asset statistics
type StatsAsset struct {
	// battery voltage, in mV
	BatteryVoltage *float32 `json:"battery_voltage,omitempty"`
	Beam *int32 `json:"beam,omitempty"`
	DeviceName *string `json:"device_name,omitempty"`
	Duration *int32 `json:"duration,omitempty"`
	EddystoneUidInstance *string `json:"eddystone_uid_instance,omitempty"`
	EddystoneUidNamespace *string `json:"eddystone_uid_namespace,omitempty"`
	EddystoneUrlUrl *string `json:"eddystone_url_url,omitempty"`
	IbeaconMajor *int32 `json:"ibeacon_major,omitempty"`
	IbeaconMinor *int32 `json:"ibeacon_minor,omitempty"`
	IbeaconUuid *string `json:"ibeacon_uuid,omitempty"`
	// last seen timestamp
	LastSeen *float32 `json:"last_seen,omitempty"`
	// bluetooth MAC
	Mac string `json:"mac"`
	// map where the device belongs to
	MapId *string `json:"map_id,omitempty"`
	// name / label of the device
	Name *string `json:"name,omitempty"`
	Rssi *int32 `json:"rssi,omitempty"`
	// only send this for individual asset stat
	Rssizones []AssetRssiZone `json:"rssizones,omitempty"`
	Temperatur *float32 `json:"temperatur,omitempty"`
	// x in pixel
	X *float32 `json:"x,omitempty"`
	// y in pixel
	Y *float32 `json:"y,omitempty"`
	// only send this for individual asset stat
	Zones []AssetZone `json:"zones,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StatsAsset StatsAsset

// NewStatsAsset instantiates a new StatsAsset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatsAsset(mac string) *StatsAsset {
	this := StatsAsset{}
	this.Mac = mac
	return &this
}

// NewStatsAssetWithDefaults instantiates a new StatsAsset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatsAssetWithDefaults() *StatsAsset {
	this := StatsAsset{}
	return &this
}

// GetBatteryVoltage returns the BatteryVoltage field value if set, zero value otherwise.
func (o *StatsAsset) GetBatteryVoltage() float32 {
	if o == nil || IsNil(o.BatteryVoltage) {
		var ret float32
		return ret
	}
	return *o.BatteryVoltage
}

// GetBatteryVoltageOk returns a tuple with the BatteryVoltage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAsset) GetBatteryVoltageOk() (*float32, bool) {
	if o == nil || IsNil(o.BatteryVoltage) {
		return nil, false
	}
	return o.BatteryVoltage, true
}

// HasBatteryVoltage returns a boolean if a field has been set.
func (o *StatsAsset) HasBatteryVoltage() bool {
	if o != nil && !IsNil(o.BatteryVoltage) {
		return true
	}

	return false
}

// SetBatteryVoltage gets a reference to the given float32 and assigns it to the BatteryVoltage field.
func (o *StatsAsset) SetBatteryVoltage(v float32) {
	o.BatteryVoltage = &v
}

// GetBeam returns the Beam field value if set, zero value otherwise.
func (o *StatsAsset) GetBeam() int32 {
	if o == nil || IsNil(o.Beam) {
		var ret int32
		return ret
	}
	return *o.Beam
}

// GetBeamOk returns a tuple with the Beam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAsset) GetBeamOk() (*int32, bool) {
	if o == nil || IsNil(o.Beam) {
		return nil, false
	}
	return o.Beam, true
}

// HasBeam returns a boolean if a field has been set.
func (o *StatsAsset) HasBeam() bool {
	if o != nil && !IsNil(o.Beam) {
		return true
	}

	return false
}

// SetBeam gets a reference to the given int32 and assigns it to the Beam field.
func (o *StatsAsset) SetBeam(v int32) {
	o.Beam = &v
}

// GetDeviceName returns the DeviceName field value if set, zero value otherwise.
func (o *StatsAsset) GetDeviceName() string {
	if o == nil || IsNil(o.DeviceName) {
		var ret string
		return ret
	}
	return *o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAsset) GetDeviceNameOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceName) {
		return nil, false
	}
	return o.DeviceName, true
}

// HasDeviceName returns a boolean if a field has been set.
func (o *StatsAsset) HasDeviceName() bool {
	if o != nil && !IsNil(o.DeviceName) {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given string and assigns it to the DeviceName field.
func (o *StatsAsset) SetDeviceName(v string) {
	o.DeviceName = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *StatsAsset) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAsset) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *StatsAsset) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *StatsAsset) SetDuration(v int32) {
	o.Duration = &v
}

// GetEddystoneUidInstance returns the EddystoneUidInstance field value if set, zero value otherwise.
func (o *StatsAsset) GetEddystoneUidInstance() string {
	if o == nil || IsNil(o.EddystoneUidInstance) {
		var ret string
		return ret
	}
	return *o.EddystoneUidInstance
}

// GetEddystoneUidInstanceOk returns a tuple with the EddystoneUidInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAsset) GetEddystoneUidInstanceOk() (*string, bool) {
	if o == nil || IsNil(o.EddystoneUidInstance) {
		return nil, false
	}
	return o.EddystoneUidInstance, true
}

// HasEddystoneUidInstance returns a boolean if a field has been set.
func (o *StatsAsset) HasEddystoneUidInstance() bool {
	if o != nil && !IsNil(o.EddystoneUidInstance) {
		return true
	}

	return false
}

// SetEddystoneUidInstance gets a reference to the given string and assigns it to the EddystoneUidInstance field.
func (o *StatsAsset) SetEddystoneUidInstance(v string) {
	o.EddystoneUidInstance = &v
}

// GetEddystoneUidNamespace returns the EddystoneUidNamespace field value if set, zero value otherwise.
func (o *StatsAsset) GetEddystoneUidNamespace() string {
	if o == nil || IsNil(o.EddystoneUidNamespace) {
		var ret string
		return ret
	}
	return *o.EddystoneUidNamespace
}

// GetEddystoneUidNamespaceOk returns a tuple with the EddystoneUidNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAsset) GetEddystoneUidNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.EddystoneUidNamespace) {
		return nil, false
	}
	return o.EddystoneUidNamespace, true
}

// HasEddystoneUidNamespace returns a boolean if a field has been set.
func (o *StatsAsset) HasEddystoneUidNamespace() bool {
	if o != nil && !IsNil(o.EddystoneUidNamespace) {
		return true
	}

	return false
}

// SetEddystoneUidNamespace gets a reference to the given string and assigns it to the EddystoneUidNamespace field.
func (o *StatsAsset) SetEddystoneUidNamespace(v string) {
	o.EddystoneUidNamespace = &v
}

// GetEddystoneUrlUrl returns the EddystoneUrlUrl field value if set, zero value otherwise.
func (o *StatsAsset) GetEddystoneUrlUrl() string {
	if o == nil || IsNil(o.EddystoneUrlUrl) {
		var ret string
		return ret
	}
	return *o.EddystoneUrlUrl
}

// GetEddystoneUrlUrlOk returns a tuple with the EddystoneUrlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAsset) GetEddystoneUrlUrlOk() (*string, bool) {
	if o == nil || IsNil(o.EddystoneUrlUrl) {
		return nil, false
	}
	return o.EddystoneUrlUrl, true
}

// HasEddystoneUrlUrl returns a boolean if a field has been set.
func (o *StatsAsset) HasEddystoneUrlUrl() bool {
	if o != nil && !IsNil(o.EddystoneUrlUrl) {
		return true
	}

	return false
}

// SetEddystoneUrlUrl gets a reference to the given string and assigns it to the EddystoneUrlUrl field.
func (o *StatsAsset) SetEddystoneUrlUrl(v string) {
	o.EddystoneUrlUrl = &v
}

// GetIbeaconMajor returns the IbeaconMajor field value if set, zero value otherwise.
func (o *StatsAsset) GetIbeaconMajor() int32 {
	if o == nil || IsNil(o.IbeaconMajor) {
		var ret int32
		return ret
	}
	return *o.IbeaconMajor
}

// GetIbeaconMajorOk returns a tuple with the IbeaconMajor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAsset) GetIbeaconMajorOk() (*int32, bool) {
	if o == nil || IsNil(o.IbeaconMajor) {
		return nil, false
	}
	return o.IbeaconMajor, true
}

// HasIbeaconMajor returns a boolean if a field has been set.
func (o *StatsAsset) HasIbeaconMajor() bool {
	if o != nil && !IsNil(o.IbeaconMajor) {
		return true
	}

	return false
}

// SetIbeaconMajor gets a reference to the given int32 and assigns it to the IbeaconMajor field.
func (o *StatsAsset) SetIbeaconMajor(v int32) {
	o.IbeaconMajor = &v
}

// GetIbeaconMinor returns the IbeaconMinor field value if set, zero value otherwise.
func (o *StatsAsset) GetIbeaconMinor() int32 {
	if o == nil || IsNil(o.IbeaconMinor) {
		var ret int32
		return ret
	}
	return *o.IbeaconMinor
}

// GetIbeaconMinorOk returns a tuple with the IbeaconMinor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAsset) GetIbeaconMinorOk() (*int32, bool) {
	if o == nil || IsNil(o.IbeaconMinor) {
		return nil, false
	}
	return o.IbeaconMinor, true
}

// HasIbeaconMinor returns a boolean if a field has been set.
func (o *StatsAsset) HasIbeaconMinor() bool {
	if o != nil && !IsNil(o.IbeaconMinor) {
		return true
	}

	return false
}

// SetIbeaconMinor gets a reference to the given int32 and assigns it to the IbeaconMinor field.
func (o *StatsAsset) SetIbeaconMinor(v int32) {
	o.IbeaconMinor = &v
}

// GetIbeaconUuid returns the IbeaconUuid field value if set, zero value otherwise.
func (o *StatsAsset) GetIbeaconUuid() string {
	if o == nil || IsNil(o.IbeaconUuid) {
		var ret string
		return ret
	}
	return *o.IbeaconUuid
}

// GetIbeaconUuidOk returns a tuple with the IbeaconUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAsset) GetIbeaconUuidOk() (*string, bool) {
	if o == nil || IsNil(o.IbeaconUuid) {
		return nil, false
	}
	return o.IbeaconUuid, true
}

// HasIbeaconUuid returns a boolean if a field has been set.
func (o *StatsAsset) HasIbeaconUuid() bool {
	if o != nil && !IsNil(o.IbeaconUuid) {
		return true
	}

	return false
}

// SetIbeaconUuid gets a reference to the given string and assigns it to the IbeaconUuid field.
func (o *StatsAsset) SetIbeaconUuid(v string) {
	o.IbeaconUuid = &v
}

// GetLastSeen returns the LastSeen field value if set, zero value otherwise.
func (o *StatsAsset) GetLastSeen() float32 {
	if o == nil || IsNil(o.LastSeen) {
		var ret float32
		return ret
	}
	return *o.LastSeen
}

// GetLastSeenOk returns a tuple with the LastSeen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAsset) GetLastSeenOk() (*float32, bool) {
	if o == nil || IsNil(o.LastSeen) {
		return nil, false
	}
	return o.LastSeen, true
}

// HasLastSeen returns a boolean if a field has been set.
func (o *StatsAsset) HasLastSeen() bool {
	if o != nil && !IsNil(o.LastSeen) {
		return true
	}

	return false
}

// SetLastSeen gets a reference to the given float32 and assigns it to the LastSeen field.
func (o *StatsAsset) SetLastSeen(v float32) {
	o.LastSeen = &v
}

// GetMac returns the Mac field value
func (o *StatsAsset) GetMac() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mac
}

// GetMacOk returns a tuple with the Mac field value
// and a boolean to check if the value has been set.
func (o *StatsAsset) GetMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mac, true
}

// SetMac sets field value
func (o *StatsAsset) SetMac(v string) {
	o.Mac = v
}

// GetMapId returns the MapId field value if set, zero value otherwise.
func (o *StatsAsset) GetMapId() string {
	if o == nil || IsNil(o.MapId) {
		var ret string
		return ret
	}
	return *o.MapId
}

// GetMapIdOk returns a tuple with the MapId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAsset) GetMapIdOk() (*string, bool) {
	if o == nil || IsNil(o.MapId) {
		return nil, false
	}
	return o.MapId, true
}

// HasMapId returns a boolean if a field has been set.
func (o *StatsAsset) HasMapId() bool {
	if o != nil && !IsNil(o.MapId) {
		return true
	}

	return false
}

// SetMapId gets a reference to the given string and assigns it to the MapId field.
func (o *StatsAsset) SetMapId(v string) {
	o.MapId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StatsAsset) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAsset) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StatsAsset) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StatsAsset) SetName(v string) {
	o.Name = &v
}

// GetRssi returns the Rssi field value if set, zero value otherwise.
func (o *StatsAsset) GetRssi() int32 {
	if o == nil || IsNil(o.Rssi) {
		var ret int32
		return ret
	}
	return *o.Rssi
}

// GetRssiOk returns a tuple with the Rssi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAsset) GetRssiOk() (*int32, bool) {
	if o == nil || IsNil(o.Rssi) {
		return nil, false
	}
	return o.Rssi, true
}

// HasRssi returns a boolean if a field has been set.
func (o *StatsAsset) HasRssi() bool {
	if o != nil && !IsNil(o.Rssi) {
		return true
	}

	return false
}

// SetRssi gets a reference to the given int32 and assigns it to the Rssi field.
func (o *StatsAsset) SetRssi(v int32) {
	o.Rssi = &v
}

// GetRssizones returns the Rssizones field value if set, zero value otherwise.
func (o *StatsAsset) GetRssizones() []AssetRssiZone {
	if o == nil || IsNil(o.Rssizones) {
		var ret []AssetRssiZone
		return ret
	}
	return o.Rssizones
}

// GetRssizonesOk returns a tuple with the Rssizones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAsset) GetRssizonesOk() ([]AssetRssiZone, bool) {
	if o == nil || IsNil(o.Rssizones) {
		return nil, false
	}
	return o.Rssizones, true
}

// HasRssizones returns a boolean if a field has been set.
func (o *StatsAsset) HasRssizones() bool {
	if o != nil && !IsNil(o.Rssizones) {
		return true
	}

	return false
}

// SetRssizones gets a reference to the given []AssetRssiZone and assigns it to the Rssizones field.
func (o *StatsAsset) SetRssizones(v []AssetRssiZone) {
	o.Rssizones = v
}

// GetTemperatur returns the Temperatur field value if set, zero value otherwise.
func (o *StatsAsset) GetTemperatur() float32 {
	if o == nil || IsNil(o.Temperatur) {
		var ret float32
		return ret
	}
	return *o.Temperatur
}

// GetTemperaturOk returns a tuple with the Temperatur field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAsset) GetTemperaturOk() (*float32, bool) {
	if o == nil || IsNil(o.Temperatur) {
		return nil, false
	}
	return o.Temperatur, true
}

// HasTemperatur returns a boolean if a field has been set.
func (o *StatsAsset) HasTemperatur() bool {
	if o != nil && !IsNil(o.Temperatur) {
		return true
	}

	return false
}

// SetTemperatur gets a reference to the given float32 and assigns it to the Temperatur field.
func (o *StatsAsset) SetTemperatur(v float32) {
	o.Temperatur = &v
}

// GetX returns the X field value if set, zero value otherwise.
func (o *StatsAsset) GetX() float32 {
	if o == nil || IsNil(o.X) {
		var ret float32
		return ret
	}
	return *o.X
}

// GetXOk returns a tuple with the X field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAsset) GetXOk() (*float32, bool) {
	if o == nil || IsNil(o.X) {
		return nil, false
	}
	return o.X, true
}

// HasX returns a boolean if a field has been set.
func (o *StatsAsset) HasX() bool {
	if o != nil && !IsNil(o.X) {
		return true
	}

	return false
}

// SetX gets a reference to the given float32 and assigns it to the X field.
func (o *StatsAsset) SetX(v float32) {
	o.X = &v
}

// GetY returns the Y field value if set, zero value otherwise.
func (o *StatsAsset) GetY() float32 {
	if o == nil || IsNil(o.Y) {
		var ret float32
		return ret
	}
	return *o.Y
}

// GetYOk returns a tuple with the Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAsset) GetYOk() (*float32, bool) {
	if o == nil || IsNil(o.Y) {
		return nil, false
	}
	return o.Y, true
}

// HasY returns a boolean if a field has been set.
func (o *StatsAsset) HasY() bool {
	if o != nil && !IsNil(o.Y) {
		return true
	}

	return false
}

// SetY gets a reference to the given float32 and assigns it to the Y field.
func (o *StatsAsset) SetY(v float32) {
	o.Y = &v
}

// GetZones returns the Zones field value if set, zero value otherwise.
func (o *StatsAsset) GetZones() []AssetZone {
	if o == nil || IsNil(o.Zones) {
		var ret []AssetZone
		return ret
	}
	return o.Zones
}

// GetZonesOk returns a tuple with the Zones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAsset) GetZonesOk() ([]AssetZone, bool) {
	if o == nil || IsNil(o.Zones) {
		return nil, false
	}
	return o.Zones, true
}

// HasZones returns a boolean if a field has been set.
func (o *StatsAsset) HasZones() bool {
	if o != nil && !IsNil(o.Zones) {
		return true
	}

	return false
}

// SetZones gets a reference to the given []AssetZone and assigns it to the Zones field.
func (o *StatsAsset) SetZones(v []AssetZone) {
	o.Zones = v
}

func (o StatsAsset) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatsAsset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BatteryVoltage) {
		toSerialize["battery_voltage"] = o.BatteryVoltage
	}
	if !IsNil(o.Beam) {
		toSerialize["beam"] = o.Beam
	}
	if !IsNil(o.DeviceName) {
		toSerialize["device_name"] = o.DeviceName
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.EddystoneUidInstance) {
		toSerialize["eddystone_uid_instance"] = o.EddystoneUidInstance
	}
	if !IsNil(o.EddystoneUidNamespace) {
		toSerialize["eddystone_uid_namespace"] = o.EddystoneUidNamespace
	}
	if !IsNil(o.EddystoneUrlUrl) {
		toSerialize["eddystone_url_url"] = o.EddystoneUrlUrl
	}
	if !IsNil(o.IbeaconMajor) {
		toSerialize["ibeacon_major"] = o.IbeaconMajor
	}
	if !IsNil(o.IbeaconMinor) {
		toSerialize["ibeacon_minor"] = o.IbeaconMinor
	}
	if !IsNil(o.IbeaconUuid) {
		toSerialize["ibeacon_uuid"] = o.IbeaconUuid
	}
	if !IsNil(o.LastSeen) {
		toSerialize["last_seen"] = o.LastSeen
	}
	toSerialize["mac"] = o.Mac
	if !IsNil(o.MapId) {
		toSerialize["map_id"] = o.MapId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Rssi) {
		toSerialize["rssi"] = o.Rssi
	}
	if !IsNil(o.Rssizones) {
		toSerialize["rssizones"] = o.Rssizones
	}
	if !IsNil(o.Temperatur) {
		toSerialize["temperatur"] = o.Temperatur
	}
	if !IsNil(o.X) {
		toSerialize["x"] = o.X
	}
	if !IsNil(o.Y) {
		toSerialize["y"] = o.Y
	}
	if !IsNil(o.Zones) {
		toSerialize["zones"] = o.Zones
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StatsAsset) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mac",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStatsAsset := _StatsAsset{}

	err = json.Unmarshal(data, &varStatsAsset)

	if err != nil {
		return err
	}

	*o = StatsAsset(varStatsAsset)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "battery_voltage")
		delete(additionalProperties, "beam")
		delete(additionalProperties, "device_name")
		delete(additionalProperties, "duration")
		delete(additionalProperties, "eddystone_uid_instance")
		delete(additionalProperties, "eddystone_uid_namespace")
		delete(additionalProperties, "eddystone_url_url")
		delete(additionalProperties, "ibeacon_major")
		delete(additionalProperties, "ibeacon_minor")
		delete(additionalProperties, "ibeacon_uuid")
		delete(additionalProperties, "last_seen")
		delete(additionalProperties, "mac")
		delete(additionalProperties, "map_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "rssi")
		delete(additionalProperties, "rssizones")
		delete(additionalProperties, "temperatur")
		delete(additionalProperties, "x")
		delete(additionalProperties, "y")
		delete(additionalProperties, "zones")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStatsAsset struct {
	value *StatsAsset
	isSet bool
}

func (v NullableStatsAsset) Get() *StatsAsset {
	return v.value
}

func (v *NullableStatsAsset) Set(val *StatsAsset) {
	v.value = val
	v.isSet = true
}

func (v NullableStatsAsset) IsSet() bool {
	return v.isSet
}

func (v *NullableStatsAsset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatsAsset(val *StatsAsset) *NullableStatsAsset {
	return &NullableStatsAsset{value: val, isSet: true}
}

func (v NullableStatsAsset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatsAsset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


