/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the SleImpactedSwitchesSwitch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SleImpactedSwitchesSwitch{}

// SleImpactedSwitchesSwitch struct for SleImpactedSwitchesSwitch
type SleImpactedSwitchesSwitch struct {
	Degraded *float32 `json:"degraded,omitempty"`
	Duration *float32 `json:"duration,omitempty"`
	Interface []string `json:"interface,omitempty"`
	Name *string `json:"name,omitempty"`
	SwitchMac *string `json:"switch_mac,omitempty"`
	SwitchModel *string `json:"switch_model,omitempty"`
	SwitchVersion *string `json:"switch_version,omitempty"`
	Total *float32 `json:"total,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SleImpactedSwitchesSwitch SleImpactedSwitchesSwitch

// NewSleImpactedSwitchesSwitch instantiates a new SleImpactedSwitchesSwitch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSleImpactedSwitchesSwitch() *SleImpactedSwitchesSwitch {
	this := SleImpactedSwitchesSwitch{}
	return &this
}

// NewSleImpactedSwitchesSwitchWithDefaults instantiates a new SleImpactedSwitchesSwitch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSleImpactedSwitchesSwitchWithDefaults() *SleImpactedSwitchesSwitch {
	this := SleImpactedSwitchesSwitch{}
	return &this
}

// GetDegraded returns the Degraded field value if set, zero value otherwise.
func (o *SleImpactedSwitchesSwitch) GetDegraded() float32 {
	if o == nil || IsNil(o.Degraded) {
		var ret float32
		return ret
	}
	return *o.Degraded
}

// GetDegradedOk returns a tuple with the Degraded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SleImpactedSwitchesSwitch) GetDegradedOk() (*float32, bool) {
	if o == nil || IsNil(o.Degraded) {
		return nil, false
	}
	return o.Degraded, true
}

// HasDegraded returns a boolean if a field has been set.
func (o *SleImpactedSwitchesSwitch) HasDegraded() bool {
	if o != nil && !IsNil(o.Degraded) {
		return true
	}

	return false
}

// SetDegraded gets a reference to the given float32 and assigns it to the Degraded field.
func (o *SleImpactedSwitchesSwitch) SetDegraded(v float32) {
	o.Degraded = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *SleImpactedSwitchesSwitch) GetDuration() float32 {
	if o == nil || IsNil(o.Duration) {
		var ret float32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SleImpactedSwitchesSwitch) GetDurationOk() (*float32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *SleImpactedSwitchesSwitch) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given float32 and assigns it to the Duration field.
func (o *SleImpactedSwitchesSwitch) SetDuration(v float32) {
	o.Duration = &v
}

// GetInterface returns the Interface field value if set, zero value otherwise.
func (o *SleImpactedSwitchesSwitch) GetInterface() []string {
	if o == nil || IsNil(o.Interface) {
		var ret []string
		return ret
	}
	return o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SleImpactedSwitchesSwitch) GetInterfaceOk() ([]string, bool) {
	if o == nil || IsNil(o.Interface) {
		return nil, false
	}
	return o.Interface, true
}

// HasInterface returns a boolean if a field has been set.
func (o *SleImpactedSwitchesSwitch) HasInterface() bool {
	if o != nil && !IsNil(o.Interface) {
		return true
	}

	return false
}

// SetInterface gets a reference to the given []string and assigns it to the Interface field.
func (o *SleImpactedSwitchesSwitch) SetInterface(v []string) {
	o.Interface = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SleImpactedSwitchesSwitch) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SleImpactedSwitchesSwitch) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SleImpactedSwitchesSwitch) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SleImpactedSwitchesSwitch) SetName(v string) {
	o.Name = &v
}

// GetSwitchMac returns the SwitchMac field value if set, zero value otherwise.
func (o *SleImpactedSwitchesSwitch) GetSwitchMac() string {
	if o == nil || IsNil(o.SwitchMac) {
		var ret string
		return ret
	}
	return *o.SwitchMac
}

// GetSwitchMacOk returns a tuple with the SwitchMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SleImpactedSwitchesSwitch) GetSwitchMacOk() (*string, bool) {
	if o == nil || IsNil(o.SwitchMac) {
		return nil, false
	}
	return o.SwitchMac, true
}

// HasSwitchMac returns a boolean if a field has been set.
func (o *SleImpactedSwitchesSwitch) HasSwitchMac() bool {
	if o != nil && !IsNil(o.SwitchMac) {
		return true
	}

	return false
}

// SetSwitchMac gets a reference to the given string and assigns it to the SwitchMac field.
func (o *SleImpactedSwitchesSwitch) SetSwitchMac(v string) {
	o.SwitchMac = &v
}

// GetSwitchModel returns the SwitchModel field value if set, zero value otherwise.
func (o *SleImpactedSwitchesSwitch) GetSwitchModel() string {
	if o == nil || IsNil(o.SwitchModel) {
		var ret string
		return ret
	}
	return *o.SwitchModel
}

// GetSwitchModelOk returns a tuple with the SwitchModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SleImpactedSwitchesSwitch) GetSwitchModelOk() (*string, bool) {
	if o == nil || IsNil(o.SwitchModel) {
		return nil, false
	}
	return o.SwitchModel, true
}

// HasSwitchModel returns a boolean if a field has been set.
func (o *SleImpactedSwitchesSwitch) HasSwitchModel() bool {
	if o != nil && !IsNil(o.SwitchModel) {
		return true
	}

	return false
}

// SetSwitchModel gets a reference to the given string and assigns it to the SwitchModel field.
func (o *SleImpactedSwitchesSwitch) SetSwitchModel(v string) {
	o.SwitchModel = &v
}

// GetSwitchVersion returns the SwitchVersion field value if set, zero value otherwise.
func (o *SleImpactedSwitchesSwitch) GetSwitchVersion() string {
	if o == nil || IsNil(o.SwitchVersion) {
		var ret string
		return ret
	}
	return *o.SwitchVersion
}

// GetSwitchVersionOk returns a tuple with the SwitchVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SleImpactedSwitchesSwitch) GetSwitchVersionOk() (*string, bool) {
	if o == nil || IsNil(o.SwitchVersion) {
		return nil, false
	}
	return o.SwitchVersion, true
}

// HasSwitchVersion returns a boolean if a field has been set.
func (o *SleImpactedSwitchesSwitch) HasSwitchVersion() bool {
	if o != nil && !IsNil(o.SwitchVersion) {
		return true
	}

	return false
}

// SetSwitchVersion gets a reference to the given string and assigns it to the SwitchVersion field.
func (o *SleImpactedSwitchesSwitch) SetSwitchVersion(v string) {
	o.SwitchVersion = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *SleImpactedSwitchesSwitch) GetTotal() float32 {
	if o == nil || IsNil(o.Total) {
		var ret float32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SleImpactedSwitchesSwitch) GetTotalOk() (*float32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *SleImpactedSwitchesSwitch) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float32 and assigns it to the Total field.
func (o *SleImpactedSwitchesSwitch) SetTotal(v float32) {
	o.Total = &v
}

func (o SleImpactedSwitchesSwitch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SleImpactedSwitchesSwitch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Degraded) {
		toSerialize["degraded"] = o.Degraded
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.Interface) {
		toSerialize["interface"] = o.Interface
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SwitchMac) {
		toSerialize["switch_mac"] = o.SwitchMac
	}
	if !IsNil(o.SwitchModel) {
		toSerialize["switch_model"] = o.SwitchModel
	}
	if !IsNil(o.SwitchVersion) {
		toSerialize["switch_version"] = o.SwitchVersion
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SleImpactedSwitchesSwitch) UnmarshalJSON(data []byte) (err error) {
	varSleImpactedSwitchesSwitch := _SleImpactedSwitchesSwitch{}

	err = json.Unmarshal(data, &varSleImpactedSwitchesSwitch)

	if err != nil {
		return err
	}

	*o = SleImpactedSwitchesSwitch(varSleImpactedSwitchesSwitch)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "degraded")
		delete(additionalProperties, "duration")
		delete(additionalProperties, "interface")
		delete(additionalProperties, "name")
		delete(additionalProperties, "switch_mac")
		delete(additionalProperties, "switch_model")
		delete(additionalProperties, "switch_version")
		delete(additionalProperties, "total")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSleImpactedSwitchesSwitch struct {
	value *SleImpactedSwitchesSwitch
	isSet bool
}

func (v NullableSleImpactedSwitchesSwitch) Get() *SleImpactedSwitchesSwitch {
	return v.value
}

func (v *NullableSleImpactedSwitchesSwitch) Set(val *SleImpactedSwitchesSwitch) {
	v.value = val
	v.isSet = true
}

func (v NullableSleImpactedSwitchesSwitch) IsSet() bool {
	return v.isSet
}

func (v *NullableSleImpactedSwitchesSwitch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSleImpactedSwitchesSwitch(val *SleImpactedSwitchesSwitch) *NullableSleImpactedSwitchesSwitch {
	return &NullableSleImpactedSwitchesSwitch{value: val, isSet: true}
}

func (v NullableSleImpactedSwitchesSwitch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSleImpactedSwitchesSwitch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


