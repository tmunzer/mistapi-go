/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// PrivilegeSelfViews Custom roles restrict Org users to specific UI views. This is useful for limiting UI access of Org users.  You can invite a new user or update existing users in your Org to this custom role. For this, specify view along with role when assigning privileges.  Below are the list of supported UI views. Note that this is UI only feature Custom roles restrict Org users to specific UI views. This is useful for limiting UI access of Org users.  You can invite a new user or update existing users in your Org to this custom role. For this, specify `view` along with `role` when assigning privileges.  Below are the list of supported UI views. Note that this is UI only feature  | UI View | Description | | --- | --- | | `reporting` | full access to all analytics tools | | `marketing` | can view analytics and location maps | | `location` | can view and manage location maps | | `security` | can view and manage WLAN, rogues and authentication | | `switch_admin` | can view and manage Switch ports | | `mxedge_admin` | can view and manage Mist edges and Mist tunnels | | `lobby_admin` | full access to Org and Site Pre-shared keys |
type PrivilegeSelfViews string

// List of privilege_self_views
const (
	PRIVILEGESELFVIEWS_EMPTY PrivilegeSelfViews = ""
	PRIVILEGESELFVIEWS_REPORTING PrivilegeSelfViews = "reporting"
	PRIVILEGESELFVIEWS_MARKETING PrivilegeSelfViews = "marketing"
	PRIVILEGESELFVIEWS_LOCATION PrivilegeSelfViews = "location"
	PRIVILEGESELFVIEWS_SECURITY PrivilegeSelfViews = "security"
	PRIVILEGESELFVIEWS_SWITCH_ADMIN PrivilegeSelfViews = "switch_admin"
	PRIVILEGESELFVIEWS_MXEDGE_ADMIN PrivilegeSelfViews = "mxedge_admin"
	PRIVILEGESELFVIEWS_LOBBY_ADMIN PrivilegeSelfViews = "lobby_admin"
)

// All allowed values of PrivilegeSelfViews enum
var AllowedPrivilegeSelfViewsEnumValues = []PrivilegeSelfViews{
	"",
	"reporting",
	"marketing",
	"location",
	"security",
	"switch_admin",
	"mxedge_admin",
	"lobby_admin",
}

func (v *PrivilegeSelfViews) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PrivilegeSelfViews(value)
	for _, existing := range AllowedPrivilegeSelfViewsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PrivilegeSelfViews", value)
}

// NewPrivilegeSelfViewsFromValue returns a pointer to a valid PrivilegeSelfViews
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrivilegeSelfViewsFromValue(v string) (*PrivilegeSelfViews, error) {
	ev := PrivilegeSelfViews(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PrivilegeSelfViews: valid values are %v", v, AllowedPrivilegeSelfViewsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrivilegeSelfViews) IsValid() bool {
	for _, existing := range AllowedPrivilegeSelfViewsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to privilege_self_views value
func (v PrivilegeSelfViews) Ptr() *PrivilegeSelfViews {
	return &v
}

type NullablePrivilegeSelfViews struct {
	value *PrivilegeSelfViews
	isSet bool
}

func (v NullablePrivilegeSelfViews) Get() *PrivilegeSelfViews {
	return v.value
}

func (v *NullablePrivilegeSelfViews) Set(val *PrivilegeSelfViews) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivilegeSelfViews) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivilegeSelfViews) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivilegeSelfViews(val *PrivilegeSelfViews) *NullablePrivilegeSelfViews {
	return &NullablePrivilegeSelfViews{value: val, isSet: true}
}

func (v NullablePrivilegeSelfViews) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivilegeSelfViews) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

