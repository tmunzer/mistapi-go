/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the MapMicello type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MapMicello{}

// MapMicello struct for MapMicello
type MapMicello struct {
	// the account key that has access to the map
	AccountKey string `json:"account_key"`
	// micello floor/level id
	DefaultLevelId int32 `json:"default_level_id"`
	// micello map id
	MapId string `json:"map_id"`
	VendorName MapMicelloVendorName `json:"vendor_name"`
	AdditionalProperties map[string]interface{}
}

type _MapMicello MapMicello

// NewMapMicello instantiates a new MapMicello object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMapMicello(accountKey string, defaultLevelId int32, mapId string, vendorName MapMicelloVendorName) *MapMicello {
	this := MapMicello{}
	this.AccountKey = accountKey
	this.DefaultLevelId = defaultLevelId
	this.MapId = mapId
	this.VendorName = vendorName
	return &this
}

// NewMapMicelloWithDefaults instantiates a new MapMicello object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMapMicelloWithDefaults() *MapMicello {
	this := MapMicello{}
	var vendorName MapMicelloVendorName = MAPMICELLOVENDORNAME_MICELLO
	this.VendorName = vendorName
	return &this
}

// GetAccountKey returns the AccountKey field value
func (o *MapMicello) GetAccountKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountKey
}

// GetAccountKeyOk returns a tuple with the AccountKey field value
// and a boolean to check if the value has been set.
func (o *MapMicello) GetAccountKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountKey, true
}

// SetAccountKey sets field value
func (o *MapMicello) SetAccountKey(v string) {
	o.AccountKey = v
}

// GetDefaultLevelId returns the DefaultLevelId field value
func (o *MapMicello) GetDefaultLevelId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DefaultLevelId
}

// GetDefaultLevelIdOk returns a tuple with the DefaultLevelId field value
// and a boolean to check if the value has been set.
func (o *MapMicello) GetDefaultLevelIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultLevelId, true
}

// SetDefaultLevelId sets field value
func (o *MapMicello) SetDefaultLevelId(v int32) {
	o.DefaultLevelId = v
}

// GetMapId returns the MapId field value
func (o *MapMicello) GetMapId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MapId
}

// GetMapIdOk returns a tuple with the MapId field value
// and a boolean to check if the value has been set.
func (o *MapMicello) GetMapIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MapId, true
}

// SetMapId sets field value
func (o *MapMicello) SetMapId(v string) {
	o.MapId = v
}

// GetVendorName returns the VendorName field value
func (o *MapMicello) GetVendorName() MapMicelloVendorName {
	if o == nil {
		var ret MapMicelloVendorName
		return ret
	}

	return o.VendorName
}

// GetVendorNameOk returns a tuple with the VendorName field value
// and a boolean to check if the value has been set.
func (o *MapMicello) GetVendorNameOk() (*MapMicelloVendorName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VendorName, true
}

// SetVendorName sets field value
func (o *MapMicello) SetVendorName(v MapMicelloVendorName) {
	o.VendorName = v
}

func (o MapMicello) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MapMicello) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_key"] = o.AccountKey
	toSerialize["default_level_id"] = o.DefaultLevelId
	toSerialize["map_id"] = o.MapId
	toSerialize["vendor_name"] = o.VendorName

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MapMicello) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_key",
		"default_level_id",
		"map_id",
		"vendor_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMapMicello := _MapMicello{}

	err = json.Unmarshal(data, &varMapMicello)

	if err != nil {
		return err
	}

	*o = MapMicello(varMapMicello)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "account_key")
		delete(additionalProperties, "default_level_id")
		delete(additionalProperties, "map_id")
		delete(additionalProperties, "vendor_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMapMicello struct {
	value *MapMicello
	isSet bool
}

func (v NullableMapMicello) Get() *MapMicello {
	return v.value
}

func (v *NullableMapMicello) Set(val *MapMicello) {
	v.value = val
	v.isSet = true
}

func (v NullableMapMicello) IsSet() bool {
	return v.isSet
}

func (v *NullableMapMicello) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapMicello(val *MapMicello) *NullableMapMicello {
	return &NullableMapMicello{value: val, isSet: true}
}

func (v NullableMapMicello) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapMicello) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


