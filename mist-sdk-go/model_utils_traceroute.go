/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the UtilsTraceroute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UtilsTraceroute{}

// UtilsTraceroute struct for UtilsTraceroute
type UtilsTraceroute struct {
	// host name
	Host *string `json:"host,omitempty"`
	// for SSR, optional, the source to initiate traceroute from
	Network *string `json:"network,omitempty"`
	// when `protocol`==`udp`, the udp port to use
	Port *int32 `json:"port,omitempty"`
	Protocol *UtilsTracerouteProtocol `json:"protocol,omitempty"`
	// maximum time in seconds to wait for the response
	Timeout *int32 `json:"timeout,omitempty"`
	// for SRX, optional, the source to initiate traceroute from. by default, master VRF/RI is assumed
	Vrf *string `json:"vrf,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UtilsTraceroute UtilsTraceroute

// NewUtilsTraceroute instantiates a new UtilsTraceroute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUtilsTraceroute() *UtilsTraceroute {
	this := UtilsTraceroute{}
	var network string = "internal"
	this.Network = &network
	var port int32 = 33434
	this.Port = &port
	var protocol UtilsTracerouteProtocol = UTILSTRACEROUTEPROTOCOL_UDP
	this.Protocol = &protocol
	var timeout int32 = 60
	this.Timeout = &timeout
	return &this
}

// NewUtilsTracerouteWithDefaults instantiates a new UtilsTraceroute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUtilsTracerouteWithDefaults() *UtilsTraceroute {
	this := UtilsTraceroute{}
	var network string = "internal"
	this.Network = &network
	var port int32 = 33434
	this.Port = &port
	var protocol UtilsTracerouteProtocol = UTILSTRACEROUTEPROTOCOL_UDP
	this.Protocol = &protocol
	var timeout int32 = 60
	this.Timeout = &timeout
	return &this
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *UtilsTraceroute) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsTraceroute) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *UtilsTraceroute) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *UtilsTraceroute) SetHost(v string) {
	o.Host = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *UtilsTraceroute) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsTraceroute) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *UtilsTraceroute) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *UtilsTraceroute) SetNetwork(v string) {
	o.Network = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *UtilsTraceroute) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsTraceroute) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *UtilsTraceroute) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *UtilsTraceroute) SetPort(v int32) {
	o.Port = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *UtilsTraceroute) GetProtocol() UtilsTracerouteProtocol {
	if o == nil || IsNil(o.Protocol) {
		var ret UtilsTracerouteProtocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsTraceroute) GetProtocolOk() (*UtilsTracerouteProtocol, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *UtilsTraceroute) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given UtilsTracerouteProtocol and assigns it to the Protocol field.
func (o *UtilsTraceroute) SetProtocol(v UtilsTracerouteProtocol) {
	o.Protocol = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *UtilsTraceroute) GetTimeout() int32 {
	if o == nil || IsNil(o.Timeout) {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsTraceroute) GetTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *UtilsTraceroute) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *UtilsTraceroute) SetTimeout(v int32) {
	o.Timeout = &v
}

// GetVrf returns the Vrf field value if set, zero value otherwise.
func (o *UtilsTraceroute) GetVrf() string {
	if o == nil || IsNil(o.Vrf) {
		var ret string
		return ret
	}
	return *o.Vrf
}

// GetVrfOk returns a tuple with the Vrf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsTraceroute) GetVrfOk() (*string, bool) {
	if o == nil || IsNil(o.Vrf) {
		return nil, false
	}
	return o.Vrf, true
}

// HasVrf returns a boolean if a field has been set.
func (o *UtilsTraceroute) HasVrf() bool {
	if o != nil && !IsNil(o.Vrf) {
		return true
	}

	return false
}

// SetVrf gets a reference to the given string and assigns it to the Vrf field.
func (o *UtilsTraceroute) SetVrf(v string) {
	o.Vrf = &v
}

func (o UtilsTraceroute) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UtilsTraceroute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.Vrf) {
		toSerialize["vrf"] = o.Vrf
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UtilsTraceroute) UnmarshalJSON(data []byte) (err error) {
	varUtilsTraceroute := _UtilsTraceroute{}

	err = json.Unmarshal(data, &varUtilsTraceroute)

	if err != nil {
		return err
	}

	*o = UtilsTraceroute(varUtilsTraceroute)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "host")
		delete(additionalProperties, "network")
		delete(additionalProperties, "port")
		delete(additionalProperties, "protocol")
		delete(additionalProperties, "timeout")
		delete(additionalProperties, "vrf")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUtilsTraceroute struct {
	value *UtilsTraceroute
	isSet bool
}

func (v NullableUtilsTraceroute) Get() *UtilsTraceroute {
	return v.value
}

func (v *NullableUtilsTraceroute) Set(val *UtilsTraceroute) {
	v.value = val
	v.isSet = true
}

func (v NullableUtilsTraceroute) IsSet() bool {
	return v.isSet
}

func (v *NullableUtilsTraceroute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUtilsTraceroute(val *UtilsTraceroute) *NullableUtilsTraceroute {
	return &NullableUtilsTraceroute{value: val, isSet: true}
}

func (v NullableUtilsTraceroute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUtilsTraceroute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


