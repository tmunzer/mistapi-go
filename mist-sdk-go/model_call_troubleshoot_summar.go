/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the CallTroubleshootSummar type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CallTroubleshootSummar{}

// CallTroubleshootSummar struct for CallTroubleshootSummar
type CallTroubleshootSummar struct {
	AudioIn *CallTroubleshootSummaryData `json:"audio_in,omitempty"`
	AudioOut *CallTroubleshootSummaryData `json:"audio_out,omitempty"`
	Timestamp *int32 `json:"timestamp,omitempty"`
	VideoIn *CallTroubleshootSummaryData `json:"video_in,omitempty"`
	VideoOut *CallTroubleshootSummaryData `json:"video_out,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CallTroubleshootSummar CallTroubleshootSummar

// NewCallTroubleshootSummar instantiates a new CallTroubleshootSummar object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallTroubleshootSummar() *CallTroubleshootSummar {
	this := CallTroubleshootSummar{}
	return &this
}

// NewCallTroubleshootSummarWithDefaults instantiates a new CallTroubleshootSummar object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallTroubleshootSummarWithDefaults() *CallTroubleshootSummar {
	this := CallTroubleshootSummar{}
	return &this
}

// GetAudioIn returns the AudioIn field value if set, zero value otherwise.
func (o *CallTroubleshootSummar) GetAudioIn() CallTroubleshootSummaryData {
	if o == nil || IsNil(o.AudioIn) {
		var ret CallTroubleshootSummaryData
		return ret
	}
	return *o.AudioIn
}

// GetAudioInOk returns a tuple with the AudioIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallTroubleshootSummar) GetAudioInOk() (*CallTroubleshootSummaryData, bool) {
	if o == nil || IsNil(o.AudioIn) {
		return nil, false
	}
	return o.AudioIn, true
}

// HasAudioIn returns a boolean if a field has been set.
func (o *CallTroubleshootSummar) HasAudioIn() bool {
	if o != nil && !IsNil(o.AudioIn) {
		return true
	}

	return false
}

// SetAudioIn gets a reference to the given CallTroubleshootSummaryData and assigns it to the AudioIn field.
func (o *CallTroubleshootSummar) SetAudioIn(v CallTroubleshootSummaryData) {
	o.AudioIn = &v
}

// GetAudioOut returns the AudioOut field value if set, zero value otherwise.
func (o *CallTroubleshootSummar) GetAudioOut() CallTroubleshootSummaryData {
	if o == nil || IsNil(o.AudioOut) {
		var ret CallTroubleshootSummaryData
		return ret
	}
	return *o.AudioOut
}

// GetAudioOutOk returns a tuple with the AudioOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallTroubleshootSummar) GetAudioOutOk() (*CallTroubleshootSummaryData, bool) {
	if o == nil || IsNil(o.AudioOut) {
		return nil, false
	}
	return o.AudioOut, true
}

// HasAudioOut returns a boolean if a field has been set.
func (o *CallTroubleshootSummar) HasAudioOut() bool {
	if o != nil && !IsNil(o.AudioOut) {
		return true
	}

	return false
}

// SetAudioOut gets a reference to the given CallTroubleshootSummaryData and assigns it to the AudioOut field.
func (o *CallTroubleshootSummar) SetAudioOut(v CallTroubleshootSummaryData) {
	o.AudioOut = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *CallTroubleshootSummar) GetTimestamp() int32 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int32
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallTroubleshootSummar) GetTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *CallTroubleshootSummar) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int32 and assigns it to the Timestamp field.
func (o *CallTroubleshootSummar) SetTimestamp(v int32) {
	o.Timestamp = &v
}

// GetVideoIn returns the VideoIn field value if set, zero value otherwise.
func (o *CallTroubleshootSummar) GetVideoIn() CallTroubleshootSummaryData {
	if o == nil || IsNil(o.VideoIn) {
		var ret CallTroubleshootSummaryData
		return ret
	}
	return *o.VideoIn
}

// GetVideoInOk returns a tuple with the VideoIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallTroubleshootSummar) GetVideoInOk() (*CallTroubleshootSummaryData, bool) {
	if o == nil || IsNil(o.VideoIn) {
		return nil, false
	}
	return o.VideoIn, true
}

// HasVideoIn returns a boolean if a field has been set.
func (o *CallTroubleshootSummar) HasVideoIn() bool {
	if o != nil && !IsNil(o.VideoIn) {
		return true
	}

	return false
}

// SetVideoIn gets a reference to the given CallTroubleshootSummaryData and assigns it to the VideoIn field.
func (o *CallTroubleshootSummar) SetVideoIn(v CallTroubleshootSummaryData) {
	o.VideoIn = &v
}

// GetVideoOut returns the VideoOut field value if set, zero value otherwise.
func (o *CallTroubleshootSummar) GetVideoOut() CallTroubleshootSummaryData {
	if o == nil || IsNil(o.VideoOut) {
		var ret CallTroubleshootSummaryData
		return ret
	}
	return *o.VideoOut
}

// GetVideoOutOk returns a tuple with the VideoOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallTroubleshootSummar) GetVideoOutOk() (*CallTroubleshootSummaryData, bool) {
	if o == nil || IsNil(o.VideoOut) {
		return nil, false
	}
	return o.VideoOut, true
}

// HasVideoOut returns a boolean if a field has been set.
func (o *CallTroubleshootSummar) HasVideoOut() bool {
	if o != nil && !IsNil(o.VideoOut) {
		return true
	}

	return false
}

// SetVideoOut gets a reference to the given CallTroubleshootSummaryData and assigns it to the VideoOut field.
func (o *CallTroubleshootSummar) SetVideoOut(v CallTroubleshootSummaryData) {
	o.VideoOut = &v
}

func (o CallTroubleshootSummar) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CallTroubleshootSummar) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AudioIn) {
		toSerialize["audio_in"] = o.AudioIn
	}
	if !IsNil(o.AudioOut) {
		toSerialize["audio_out"] = o.AudioOut
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.VideoIn) {
		toSerialize["video_in"] = o.VideoIn
	}
	if !IsNil(o.VideoOut) {
		toSerialize["video_out"] = o.VideoOut
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CallTroubleshootSummar) UnmarshalJSON(data []byte) (err error) {
	varCallTroubleshootSummar := _CallTroubleshootSummar{}

	err = json.Unmarshal(data, &varCallTroubleshootSummar)

	if err != nil {
		return err
	}

	*o = CallTroubleshootSummar(varCallTroubleshootSummar)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "audio_in")
		delete(additionalProperties, "audio_out")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "video_in")
		delete(additionalProperties, "video_out")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCallTroubleshootSummar struct {
	value *CallTroubleshootSummar
	isSet bool
}

func (v NullableCallTroubleshootSummar) Get() *CallTroubleshootSummar {
	return v.value
}

func (v *NullableCallTroubleshootSummar) Set(val *CallTroubleshootSummar) {
	v.value = val
	v.isSet = true
}

func (v NullableCallTroubleshootSummar) IsSet() bool {
	return v.isSet
}

func (v *NullableCallTroubleshootSummar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallTroubleshootSummar(val *CallTroubleshootSummar) *NullableCallTroubleshootSummar {
	return &NullableCallTroubleshootSummar{value: val, isSet: true}
}

func (v NullableCallTroubleshootSummar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallTroubleshootSummar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


