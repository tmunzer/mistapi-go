/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the PrivilegeSelf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivilegeSelf{}

// PrivilegeSelf Privilieges settings
type PrivilegeSelf struct {
	MspId *string `json:"msp_id,omitempty"`
	// logo of the MSP (if the MSP belongs to an Advanced tier)
	MspLogoUrl *string `json:"msp_logo_url,omitempty"`
	// name of the MSP (if the org belongs to an MSP)
	MspName NullableString `json:"msp_name,omitempty"`
	// custom url of the MSP (if the MSP belongs to an Advanced tier)
	MspUrl *string `json:"msp_url,omitempty"`
	// name of the org/site/MSP depending on object scope
	Name *string `json:"name,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	// name of the org (for a site belonging to org)
	OrgName *string `json:"org_name,omitempty"`
	// if `scope`==`orggroup`
	OrggroupIds []string `json:"orggroup_ids,omitempty"`
	Role PrivilegeSelfRole `json:"role"`
	Scope PrivilegeSelfScope `json:"scope"`
	SiteId *string `json:"site_id,omitempty"`
	SitegroupIds []string `json:"sitegroup_ids,omitempty"`
	Views *PrivilegeSelfViews `json:"views,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PrivilegeSelf PrivilegeSelf

// NewPrivilegeSelf instantiates a new PrivilegeSelf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivilegeSelf(role PrivilegeSelfRole, scope PrivilegeSelfScope) *PrivilegeSelf {
	this := PrivilegeSelf{}
	this.Role = role
	this.Scope = scope
	return &this
}

// NewPrivilegeSelfWithDefaults instantiates a new PrivilegeSelf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivilegeSelfWithDefaults() *PrivilegeSelf {
	this := PrivilegeSelf{}
	return &this
}

// GetMspId returns the MspId field value if set, zero value otherwise.
func (o *PrivilegeSelf) GetMspId() string {
	if o == nil || IsNil(o.MspId) {
		var ret string
		return ret
	}
	return *o.MspId
}

// GetMspIdOk returns a tuple with the MspId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegeSelf) GetMspIdOk() (*string, bool) {
	if o == nil || IsNil(o.MspId) {
		return nil, false
	}
	return o.MspId, true
}

// HasMspId returns a boolean if a field has been set.
func (o *PrivilegeSelf) HasMspId() bool {
	if o != nil && !IsNil(o.MspId) {
		return true
	}

	return false
}

// SetMspId gets a reference to the given string and assigns it to the MspId field.
func (o *PrivilegeSelf) SetMspId(v string) {
	o.MspId = &v
}

// GetMspLogoUrl returns the MspLogoUrl field value if set, zero value otherwise.
func (o *PrivilegeSelf) GetMspLogoUrl() string {
	if o == nil || IsNil(o.MspLogoUrl) {
		var ret string
		return ret
	}
	return *o.MspLogoUrl
}

// GetMspLogoUrlOk returns a tuple with the MspLogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegeSelf) GetMspLogoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.MspLogoUrl) {
		return nil, false
	}
	return o.MspLogoUrl, true
}

// HasMspLogoUrl returns a boolean if a field has been set.
func (o *PrivilegeSelf) HasMspLogoUrl() bool {
	if o != nil && !IsNil(o.MspLogoUrl) {
		return true
	}

	return false
}

// SetMspLogoUrl gets a reference to the given string and assigns it to the MspLogoUrl field.
func (o *PrivilegeSelf) SetMspLogoUrl(v string) {
	o.MspLogoUrl = &v
}

// GetMspName returns the MspName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrivilegeSelf) GetMspName() string {
	if o == nil || IsNil(o.MspName.Get()) {
		var ret string
		return ret
	}
	return *o.MspName.Get()
}

// GetMspNameOk returns a tuple with the MspName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrivilegeSelf) GetMspNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MspName.Get(), o.MspName.IsSet()
}

// HasMspName returns a boolean if a field has been set.
func (o *PrivilegeSelf) HasMspName() bool {
	if o != nil && o.MspName.IsSet() {
		return true
	}

	return false
}

// SetMspName gets a reference to the given NullableString and assigns it to the MspName field.
func (o *PrivilegeSelf) SetMspName(v string) {
	o.MspName.Set(&v)
}
// SetMspNameNil sets the value for MspName to be an explicit nil
func (o *PrivilegeSelf) SetMspNameNil() {
	o.MspName.Set(nil)
}

// UnsetMspName ensures that no value is present for MspName, not even an explicit nil
func (o *PrivilegeSelf) UnsetMspName() {
	o.MspName.Unset()
}

// GetMspUrl returns the MspUrl field value if set, zero value otherwise.
func (o *PrivilegeSelf) GetMspUrl() string {
	if o == nil || IsNil(o.MspUrl) {
		var ret string
		return ret
	}
	return *o.MspUrl
}

// GetMspUrlOk returns a tuple with the MspUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegeSelf) GetMspUrlOk() (*string, bool) {
	if o == nil || IsNil(o.MspUrl) {
		return nil, false
	}
	return o.MspUrl, true
}

// HasMspUrl returns a boolean if a field has been set.
func (o *PrivilegeSelf) HasMspUrl() bool {
	if o != nil && !IsNil(o.MspUrl) {
		return true
	}

	return false
}

// SetMspUrl gets a reference to the given string and assigns it to the MspUrl field.
func (o *PrivilegeSelf) SetMspUrl(v string) {
	o.MspUrl = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PrivilegeSelf) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegeSelf) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PrivilegeSelf) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PrivilegeSelf) SetName(v string) {
	o.Name = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *PrivilegeSelf) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegeSelf) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *PrivilegeSelf) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *PrivilegeSelf) SetOrgId(v string) {
	o.OrgId = &v
}

// GetOrgName returns the OrgName field value if set, zero value otherwise.
func (o *PrivilegeSelf) GetOrgName() string {
	if o == nil || IsNil(o.OrgName) {
		var ret string
		return ret
	}
	return *o.OrgName
}

// GetOrgNameOk returns a tuple with the OrgName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegeSelf) GetOrgNameOk() (*string, bool) {
	if o == nil || IsNil(o.OrgName) {
		return nil, false
	}
	return o.OrgName, true
}

// HasOrgName returns a boolean if a field has been set.
func (o *PrivilegeSelf) HasOrgName() bool {
	if o != nil && !IsNil(o.OrgName) {
		return true
	}

	return false
}

// SetOrgName gets a reference to the given string and assigns it to the OrgName field.
func (o *PrivilegeSelf) SetOrgName(v string) {
	o.OrgName = &v
}

// GetOrggroupIds returns the OrggroupIds field value if set, zero value otherwise.
func (o *PrivilegeSelf) GetOrggroupIds() []string {
	if o == nil || IsNil(o.OrggroupIds) {
		var ret []string
		return ret
	}
	return o.OrggroupIds
}

// GetOrggroupIdsOk returns a tuple with the OrggroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegeSelf) GetOrggroupIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.OrggroupIds) {
		return nil, false
	}
	return o.OrggroupIds, true
}

// HasOrggroupIds returns a boolean if a field has been set.
func (o *PrivilegeSelf) HasOrggroupIds() bool {
	if o != nil && !IsNil(o.OrggroupIds) {
		return true
	}

	return false
}

// SetOrggroupIds gets a reference to the given []string and assigns it to the OrggroupIds field.
func (o *PrivilegeSelf) SetOrggroupIds(v []string) {
	o.OrggroupIds = v
}

// GetRole returns the Role field value
func (o *PrivilegeSelf) GetRole() PrivilegeSelfRole {
	if o == nil {
		var ret PrivilegeSelfRole
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *PrivilegeSelf) GetRoleOk() (*PrivilegeSelfRole, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *PrivilegeSelf) SetRole(v PrivilegeSelfRole) {
	o.Role = v
}

// GetScope returns the Scope field value
func (o *PrivilegeSelf) GetScope() PrivilegeSelfScope {
	if o == nil {
		var ret PrivilegeSelfScope
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *PrivilegeSelf) GetScopeOk() (*PrivilegeSelfScope, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *PrivilegeSelf) SetScope(v PrivilegeSelfScope) {
	o.Scope = v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *PrivilegeSelf) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegeSelf) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *PrivilegeSelf) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *PrivilegeSelf) SetSiteId(v string) {
	o.SiteId = &v
}

// GetSitegroupIds returns the SitegroupIds field value if set, zero value otherwise.
func (o *PrivilegeSelf) GetSitegroupIds() []string {
	if o == nil || IsNil(o.SitegroupIds) {
		var ret []string
		return ret
	}
	return o.SitegroupIds
}

// GetSitegroupIdsOk returns a tuple with the SitegroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegeSelf) GetSitegroupIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.SitegroupIds) {
		return nil, false
	}
	return o.SitegroupIds, true
}

// HasSitegroupIds returns a boolean if a field has been set.
func (o *PrivilegeSelf) HasSitegroupIds() bool {
	if o != nil && !IsNil(o.SitegroupIds) {
		return true
	}

	return false
}

// SetSitegroupIds gets a reference to the given []string and assigns it to the SitegroupIds field.
func (o *PrivilegeSelf) SetSitegroupIds(v []string) {
	o.SitegroupIds = v
}

// GetViews returns the Views field value if set, zero value otherwise.
func (o *PrivilegeSelf) GetViews() PrivilegeSelfViews {
	if o == nil || IsNil(o.Views) {
		var ret PrivilegeSelfViews
		return ret
	}
	return *o.Views
}

// GetViewsOk returns a tuple with the Views field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegeSelf) GetViewsOk() (*PrivilegeSelfViews, bool) {
	if o == nil || IsNil(o.Views) {
		return nil, false
	}
	return o.Views, true
}

// HasViews returns a boolean if a field has been set.
func (o *PrivilegeSelf) HasViews() bool {
	if o != nil && !IsNil(o.Views) {
		return true
	}

	return false
}

// SetViews gets a reference to the given PrivilegeSelfViews and assigns it to the Views field.
func (o *PrivilegeSelf) SetViews(v PrivilegeSelfViews) {
	o.Views = &v
}

func (o PrivilegeSelf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivilegeSelf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MspId) {
		toSerialize["msp_id"] = o.MspId
	}
	if !IsNil(o.MspLogoUrl) {
		toSerialize["msp_logo_url"] = o.MspLogoUrl
	}
	if o.MspName.IsSet() {
		toSerialize["msp_name"] = o.MspName.Get()
	}
	if !IsNil(o.MspUrl) {
		toSerialize["msp_url"] = o.MspUrl
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.OrgName) {
		toSerialize["org_name"] = o.OrgName
	}
	if !IsNil(o.OrggroupIds) {
		toSerialize["orggroup_ids"] = o.OrggroupIds
	}
	toSerialize["role"] = o.Role
	toSerialize["scope"] = o.Scope
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.SitegroupIds) {
		toSerialize["sitegroup_ids"] = o.SitegroupIds
	}
	if !IsNil(o.Views) {
		toSerialize["views"] = o.Views
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PrivilegeSelf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"role",
		"scope",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrivilegeSelf := _PrivilegeSelf{}

	err = json.Unmarshal(data, &varPrivilegeSelf)

	if err != nil {
		return err
	}

	*o = PrivilegeSelf(varPrivilegeSelf)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "msp_id")
		delete(additionalProperties, "msp_logo_url")
		delete(additionalProperties, "msp_name")
		delete(additionalProperties, "msp_url")
		delete(additionalProperties, "name")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "org_name")
		delete(additionalProperties, "orggroup_ids")
		delete(additionalProperties, "role")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "sitegroup_ids")
		delete(additionalProperties, "views")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePrivilegeSelf struct {
	value *PrivilegeSelf
	isSet bool
}

func (v NullablePrivilegeSelf) Get() *PrivilegeSelf {
	return v.value
}

func (v *NullablePrivilegeSelf) Set(val *PrivilegeSelf) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivilegeSelf) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivilegeSelf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivilegeSelf(val *PrivilegeSelf) *NullablePrivilegeSelf {
	return &NullablePrivilegeSelf{value: val, isSet: true}
}

func (v NullablePrivilegeSelf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivilegeSelf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


