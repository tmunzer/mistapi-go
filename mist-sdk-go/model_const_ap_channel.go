/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the ConstApChannel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConstApChannel{}

// ConstApChannel struct for ConstApChannel
type ConstApChannel struct {
	Band2440mhzAllowed *bool `json:"band24_40mhz_allowed,omitempty"`
	// Property key is the channel width
	Band24Channels *map[string][]int32 `json:"band24_channels,omitempty"`
	Band24Enabled *bool `json:"band24_enabled,omitempty"`
	// Property key is the channel width
	Band5Channels *map[string][]int32 `json:"band5_channels,omitempty"`
	Band5Enabled *bool `json:"band5_enabled,omitempty"`
	// Property key is the channel width
	Band6Channels *map[string][]int32 `json:"band6_channels,omitempty"`
	Band6Enabled *bool `json:"band6_enabled,omitempty"`
	Certified *bool `json:"certified,omitempty"`
	// country code, ISO 3166-1 numeric
	Code *int32 `json:"code,omitempty"`
	DfsOk *bool `json:"dfs_ok,omitempty"`
	// country code, in two-character
	Key *string `json:"key,omitempty"`
	Name *string `json:"name,omitempty"`
	Uses *string `json:"uses,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConstApChannel ConstApChannel

// NewConstApChannel instantiates a new ConstApChannel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConstApChannel() *ConstApChannel {
	this := ConstApChannel{}
	return &this
}

// NewConstApChannelWithDefaults instantiates a new ConstApChannel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConstApChannelWithDefaults() *ConstApChannel {
	this := ConstApChannel{}
	return &this
}

// GetBand2440mhzAllowed returns the Band2440mhzAllowed field value if set, zero value otherwise.
func (o *ConstApChannel) GetBand2440mhzAllowed() bool {
	if o == nil || IsNil(o.Band2440mhzAllowed) {
		var ret bool
		return ret
	}
	return *o.Band2440mhzAllowed
}

// GetBand2440mhzAllowedOk returns a tuple with the Band2440mhzAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstApChannel) GetBand2440mhzAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.Band2440mhzAllowed) {
		return nil, false
	}
	return o.Band2440mhzAllowed, true
}

// HasBand2440mhzAllowed returns a boolean if a field has been set.
func (o *ConstApChannel) HasBand2440mhzAllowed() bool {
	if o != nil && !IsNil(o.Band2440mhzAllowed) {
		return true
	}

	return false
}

// SetBand2440mhzAllowed gets a reference to the given bool and assigns it to the Band2440mhzAllowed field.
func (o *ConstApChannel) SetBand2440mhzAllowed(v bool) {
	o.Band2440mhzAllowed = &v
}

// GetBand24Channels returns the Band24Channels field value if set, zero value otherwise.
func (o *ConstApChannel) GetBand24Channels() map[string][]int32 {
	if o == nil || IsNil(o.Band24Channels) {
		var ret map[string][]int32
		return ret
	}
	return *o.Band24Channels
}

// GetBand24ChannelsOk returns a tuple with the Band24Channels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstApChannel) GetBand24ChannelsOk() (*map[string][]int32, bool) {
	if o == nil || IsNil(o.Band24Channels) {
		return nil, false
	}
	return o.Band24Channels, true
}

// HasBand24Channels returns a boolean if a field has been set.
func (o *ConstApChannel) HasBand24Channels() bool {
	if o != nil && !IsNil(o.Band24Channels) {
		return true
	}

	return false
}

// SetBand24Channels gets a reference to the given map[string][]int32 and assigns it to the Band24Channels field.
func (o *ConstApChannel) SetBand24Channels(v map[string][]int32) {
	o.Band24Channels = &v
}

// GetBand24Enabled returns the Band24Enabled field value if set, zero value otherwise.
func (o *ConstApChannel) GetBand24Enabled() bool {
	if o == nil || IsNil(o.Band24Enabled) {
		var ret bool
		return ret
	}
	return *o.Band24Enabled
}

// GetBand24EnabledOk returns a tuple with the Band24Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstApChannel) GetBand24EnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Band24Enabled) {
		return nil, false
	}
	return o.Band24Enabled, true
}

// HasBand24Enabled returns a boolean if a field has been set.
func (o *ConstApChannel) HasBand24Enabled() bool {
	if o != nil && !IsNil(o.Band24Enabled) {
		return true
	}

	return false
}

// SetBand24Enabled gets a reference to the given bool and assigns it to the Band24Enabled field.
func (o *ConstApChannel) SetBand24Enabled(v bool) {
	o.Band24Enabled = &v
}

// GetBand5Channels returns the Band5Channels field value if set, zero value otherwise.
func (o *ConstApChannel) GetBand5Channels() map[string][]int32 {
	if o == nil || IsNil(o.Band5Channels) {
		var ret map[string][]int32
		return ret
	}
	return *o.Band5Channels
}

// GetBand5ChannelsOk returns a tuple with the Band5Channels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstApChannel) GetBand5ChannelsOk() (*map[string][]int32, bool) {
	if o == nil || IsNil(o.Band5Channels) {
		return nil, false
	}
	return o.Band5Channels, true
}

// HasBand5Channels returns a boolean if a field has been set.
func (o *ConstApChannel) HasBand5Channels() bool {
	if o != nil && !IsNil(o.Band5Channels) {
		return true
	}

	return false
}

// SetBand5Channels gets a reference to the given map[string][]int32 and assigns it to the Band5Channels field.
func (o *ConstApChannel) SetBand5Channels(v map[string][]int32) {
	o.Band5Channels = &v
}

// GetBand5Enabled returns the Band5Enabled field value if set, zero value otherwise.
func (o *ConstApChannel) GetBand5Enabled() bool {
	if o == nil || IsNil(o.Band5Enabled) {
		var ret bool
		return ret
	}
	return *o.Band5Enabled
}

// GetBand5EnabledOk returns a tuple with the Band5Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstApChannel) GetBand5EnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Band5Enabled) {
		return nil, false
	}
	return o.Band5Enabled, true
}

// HasBand5Enabled returns a boolean if a field has been set.
func (o *ConstApChannel) HasBand5Enabled() bool {
	if o != nil && !IsNil(o.Band5Enabled) {
		return true
	}

	return false
}

// SetBand5Enabled gets a reference to the given bool and assigns it to the Band5Enabled field.
func (o *ConstApChannel) SetBand5Enabled(v bool) {
	o.Band5Enabled = &v
}

// GetBand6Channels returns the Band6Channels field value if set, zero value otherwise.
func (o *ConstApChannel) GetBand6Channels() map[string][]int32 {
	if o == nil || IsNil(o.Band6Channels) {
		var ret map[string][]int32
		return ret
	}
	return *o.Band6Channels
}

// GetBand6ChannelsOk returns a tuple with the Band6Channels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstApChannel) GetBand6ChannelsOk() (*map[string][]int32, bool) {
	if o == nil || IsNil(o.Band6Channels) {
		return nil, false
	}
	return o.Band6Channels, true
}

// HasBand6Channels returns a boolean if a field has been set.
func (o *ConstApChannel) HasBand6Channels() bool {
	if o != nil && !IsNil(o.Band6Channels) {
		return true
	}

	return false
}

// SetBand6Channels gets a reference to the given map[string][]int32 and assigns it to the Band6Channels field.
func (o *ConstApChannel) SetBand6Channels(v map[string][]int32) {
	o.Band6Channels = &v
}

// GetBand6Enabled returns the Band6Enabled field value if set, zero value otherwise.
func (o *ConstApChannel) GetBand6Enabled() bool {
	if o == nil || IsNil(o.Band6Enabled) {
		var ret bool
		return ret
	}
	return *o.Band6Enabled
}

// GetBand6EnabledOk returns a tuple with the Band6Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstApChannel) GetBand6EnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Band6Enabled) {
		return nil, false
	}
	return o.Band6Enabled, true
}

// HasBand6Enabled returns a boolean if a field has been set.
func (o *ConstApChannel) HasBand6Enabled() bool {
	if o != nil && !IsNil(o.Band6Enabled) {
		return true
	}

	return false
}

// SetBand6Enabled gets a reference to the given bool and assigns it to the Band6Enabled field.
func (o *ConstApChannel) SetBand6Enabled(v bool) {
	o.Band6Enabled = &v
}

// GetCertified returns the Certified field value if set, zero value otherwise.
func (o *ConstApChannel) GetCertified() bool {
	if o == nil || IsNil(o.Certified) {
		var ret bool
		return ret
	}
	return *o.Certified
}

// GetCertifiedOk returns a tuple with the Certified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstApChannel) GetCertifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.Certified) {
		return nil, false
	}
	return o.Certified, true
}

// HasCertified returns a boolean if a field has been set.
func (o *ConstApChannel) HasCertified() bool {
	if o != nil && !IsNil(o.Certified) {
		return true
	}

	return false
}

// SetCertified gets a reference to the given bool and assigns it to the Certified field.
func (o *ConstApChannel) SetCertified(v bool) {
	o.Certified = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ConstApChannel) GetCode() int32 {
	if o == nil || IsNil(o.Code) {
		var ret int32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstApChannel) GetCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ConstApChannel) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given int32 and assigns it to the Code field.
func (o *ConstApChannel) SetCode(v int32) {
	o.Code = &v
}

// GetDfsOk returns the DfsOk field value if set, zero value otherwise.
func (o *ConstApChannel) GetDfsOk() bool {
	if o == nil || IsNil(o.DfsOk) {
		var ret bool
		return ret
	}
	return *o.DfsOk
}

// GetDfsOkOk returns a tuple with the DfsOk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstApChannel) GetDfsOkOk() (*bool, bool) {
	if o == nil || IsNil(o.DfsOk) {
		return nil, false
	}
	return o.DfsOk, true
}

// HasDfsOk returns a boolean if a field has been set.
func (o *ConstApChannel) HasDfsOk() bool {
	if o != nil && !IsNil(o.DfsOk) {
		return true
	}

	return false
}

// SetDfsOk gets a reference to the given bool and assigns it to the DfsOk field.
func (o *ConstApChannel) SetDfsOk(v bool) {
	o.DfsOk = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ConstApChannel) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstApChannel) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ConstApChannel) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *ConstApChannel) SetKey(v string) {
	o.Key = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConstApChannel) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstApChannel) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConstApChannel) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConstApChannel) SetName(v string) {
	o.Name = &v
}

// GetUses returns the Uses field value if set, zero value otherwise.
func (o *ConstApChannel) GetUses() string {
	if o == nil || IsNil(o.Uses) {
		var ret string
		return ret
	}
	return *o.Uses
}

// GetUsesOk returns a tuple with the Uses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstApChannel) GetUsesOk() (*string, bool) {
	if o == nil || IsNil(o.Uses) {
		return nil, false
	}
	return o.Uses, true
}

// HasUses returns a boolean if a field has been set.
func (o *ConstApChannel) HasUses() bool {
	if o != nil && !IsNil(o.Uses) {
		return true
	}

	return false
}

// SetUses gets a reference to the given string and assigns it to the Uses field.
func (o *ConstApChannel) SetUses(v string) {
	o.Uses = &v
}

func (o ConstApChannel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConstApChannel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Band2440mhzAllowed) {
		toSerialize["band24_40mhz_allowed"] = o.Band2440mhzAllowed
	}
	if !IsNil(o.Band24Channels) {
		toSerialize["band24_channels"] = o.Band24Channels
	}
	if !IsNil(o.Band24Enabled) {
		toSerialize["band24_enabled"] = o.Band24Enabled
	}
	if !IsNil(o.Band5Channels) {
		toSerialize["band5_channels"] = o.Band5Channels
	}
	if !IsNil(o.Band5Enabled) {
		toSerialize["band5_enabled"] = o.Band5Enabled
	}
	if !IsNil(o.Band6Channels) {
		toSerialize["band6_channels"] = o.Band6Channels
	}
	if !IsNil(o.Band6Enabled) {
		toSerialize["band6_enabled"] = o.Band6Enabled
	}
	if !IsNil(o.Certified) {
		toSerialize["certified"] = o.Certified
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.DfsOk) {
		toSerialize["dfs_ok"] = o.DfsOk
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Uses) {
		toSerialize["uses"] = o.Uses
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConstApChannel) UnmarshalJSON(data []byte) (err error) {
	varConstApChannel := _ConstApChannel{}

	err = json.Unmarshal(data, &varConstApChannel)

	if err != nil {
		return err
	}

	*o = ConstApChannel(varConstApChannel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "band24_40mhz_allowed")
		delete(additionalProperties, "band24_channels")
		delete(additionalProperties, "band24_enabled")
		delete(additionalProperties, "band5_channels")
		delete(additionalProperties, "band5_enabled")
		delete(additionalProperties, "band6_channels")
		delete(additionalProperties, "band6_enabled")
		delete(additionalProperties, "certified")
		delete(additionalProperties, "code")
		delete(additionalProperties, "dfs_ok")
		delete(additionalProperties, "key")
		delete(additionalProperties, "name")
		delete(additionalProperties, "uses")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConstApChannel struct {
	value *ConstApChannel
	isSet bool
}

func (v NullableConstApChannel) Get() *ConstApChannel {
	return v.value
}

func (v *NullableConstApChannel) Set(val *ConstApChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableConstApChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableConstApChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConstApChannel(val *ConstApChannel) *NullableConstApChannel {
	return &NullableConstApChannel{value: val, isSet: true}
}

func (v NullableConstApChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConstApChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


