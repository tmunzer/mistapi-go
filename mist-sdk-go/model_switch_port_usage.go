/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the SwitchPortUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwitchPortUsage{}

// SwitchPortUsage Junos port usages
type SwitchPortUsage struct {
	// Only if `mode`==`trunk` whether to trunk all network/vlans
	AllNetworks *bool `json:"all_networks,omitempty"`
	// Only if `mode`!=`dynamic` if DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allow_dhcpd is a tri_state.  When it is not defined, it means using the systemâ€™s default setting which depends on whether the port is a access or trunk port.
	AllowDhcpd *bool `json:"allow_dhcpd,omitempty"`
	// Only if `mode`!=`dynamic`
	AllowMultipleSupplicants *bool `json:"allow_multiple_supplicants,omitempty"`
	// Only if `mode`!=`dynamic` and `port_auth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down
	BypassAuthWhenServerDown *bool `json:"bypass_auth_when_server_down,omitempty"`
	// Only if `mode`!=`dynamic` and `port_auth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down
	BypassAuthWhenServerDownForUnkonwnClient *bool `json:"bypass_auth_when_server_down_for_unkonwn_client,omitempty"`
	// Only if `mode`!=`dynamic`
	Description *string `json:"description,omitempty"`
	// Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation
	DisableAutoneg *bool `json:"disable_autoneg,omitempty"`
	// Only if `mode`!=`dynamic` whether the port is disabled
	Disabled *bool `json:"disabled,omitempty"`
	Duplex *SwitchPortUsageDuplex `json:"duplex,omitempty"`
	// Only if `mode`!=`dynamic` if dynamic vlan is used, specify the possible networks/vlans RADIUS can return
	DynamicVlanNetworks []string `json:"dynamic_vlan_networks,omitempty"`
	// Only if `mode`!=`dynamic` and `port_auth`==`dot1x` whether to enable MAC Auth
	EnableMacAuth *bool `json:"enable_mac_auth,omitempty"`
	EnableQos *bool `json:"enable_qos,omitempty"`
	// Only if `mode`!=`dynamic` and `port_auth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)
	GuestNetwork NullableString `json:"guest_network,omitempty"`
	// Only if `mode`!=`dynamic` inter_switch_link is used together with \"isolation\" under networks NOTE: inter_switch_link works only between Juniper device. This has to be applied to both ports connected together
	InterSwitchLink *bool `json:"inter_switch_link,omitempty"`
	// Only if `mode`!=`dynamic` and `enable_mac_auth`==`true`
	MacAuthOnly *bool `json:"mac_auth_only,omitempty"`
	MacAuthProtocol *SwitchPortUsageMacAuthProtocol `json:"mac_auth_protocol,omitempty"`
	// Only if `mode`!=`dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform
	MacLimit *int32 `json:"mac_limit,omitempty"`
	Mode *SwitchPortUsageMode `json:"mode,omitempty"`
	// Only if `mode`!=`dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.
	Mtu *int32 `json:"mtu,omitempty"`
	// Only if `mode`==`trunk`, the list of network/vlans
	Networks []string `json:"networks,omitempty"`
	// Only if `mode`!=`dynamic` and `mode`==`access` and `port_auth`!=`dot1x` whether the port should retain dynamically learned MAC addresses
	PersistMac *bool `json:"persist_mac,omitempty"`
	// Only if `mode`!=`dynamic` whether PoE capabilities are disabled for a port
	PoeDisabled *bool `json:"poe_disabled,omitempty"`
	// Only if `mode`!=`dynamic` if dot1x is desired, set to dot1x
	PortAuth *string `json:"port_auth,omitempty"`
	// Only if `mode`!=`dynamic` native network/vlan for untagged traffic
	PortNetwork *string `json:"port_network,omitempty"`
	// Only if `mode`!=`dynamic` and `port_auth`=`dot1x` reauthentication interval range
	ReauthInterval *int32 `json:"reauth_interval,omitempty"`
	// Only if `mode`!=`dynamic` and `port_auth`==`dot1x` when radius server reject / fails
	RejectedNetwork NullableString `json:"rejected_network,omitempty"`
	ResetDefaultWhen *SwitchPortUsageDynamicResetDefaultWhen `json:"reset_default_when,omitempty"`
	// Only if `mode`==`dynamic`
	Rules []SwitchPortUsageDynamicRule `json:"rules,omitempty"`
	// Only if `mode`!=`dynamic` speed, default is auto to automatically negotiate speed
	Speed *string `json:"speed,omitempty"`
	StormControl *SwitchPortUsageStormControl `json:"storm_control,omitempty"`
	// Only if `mode`!=`dynamic` when enabled, the port is not expected to receive BPDU frames
	StpEdge *bool `json:"stp_edge,omitempty"`
	// Only if `mode`!=`dynamic` network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth
	VoipNetwork *string `json:"voip_network,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SwitchPortUsage SwitchPortUsage

// NewSwitchPortUsage instantiates a new SwitchPortUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwitchPortUsage() *SwitchPortUsage {
	this := SwitchPortUsage{}
	var allNetworks bool = false
	this.AllNetworks = &allNetworks
	var allowMultipleSupplicants bool = false
	this.AllowMultipleSupplicants = &allowMultipleSupplicants
	var bypassAuthWhenServerDown bool = false
	this.BypassAuthWhenServerDown = &bypassAuthWhenServerDown
	var bypassAuthWhenServerDownForUnkonwnClient bool = false
	this.BypassAuthWhenServerDownForUnkonwnClient = &bypassAuthWhenServerDownForUnkonwnClient
	var disableAutoneg bool = false
	this.DisableAutoneg = &disableAutoneg
	var disabled bool = false
	this.Disabled = &disabled
	var duplex SwitchPortUsageDuplex = SWITCHPORTUSAGEDUPLEX_AUTO
	this.Duplex = &duplex
	var enableMacAuth bool = false
	this.EnableMacAuth = &enableMacAuth
	var enableQos bool = false
	this.EnableQos = &enableQos
	var interSwitchLink bool = false
	this.InterSwitchLink = &interSwitchLink
	var macAuthProtocol SwitchPortUsageMacAuthProtocol = SWITCHPORTUSAGEMACAUTHPROTOCOL_EAP_MD5
	this.MacAuthProtocol = &macAuthProtocol
	var macLimit int32 = 0
	this.MacLimit = &macLimit
	var persistMac bool = false
	this.PersistMac = &persistMac
	var poeDisabled bool = false
	this.PoeDisabled = &poeDisabled
	var reauthInterval int32 = 3600
	this.ReauthInterval = &reauthInterval
	var resetDefaultWhen SwitchPortUsageDynamicResetDefaultWhen = SWITCHPORTUSAGEDYNAMICRESETDEFAULTWHEN_LINK_DOWN
	this.ResetDefaultWhen = &resetDefaultWhen
	var stpEdge bool = false
	this.StpEdge = &stpEdge
	return &this
}

// NewSwitchPortUsageWithDefaults instantiates a new SwitchPortUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwitchPortUsageWithDefaults() *SwitchPortUsage {
	this := SwitchPortUsage{}
	var allNetworks bool = false
	this.AllNetworks = &allNetworks
	var allowMultipleSupplicants bool = false
	this.AllowMultipleSupplicants = &allowMultipleSupplicants
	var bypassAuthWhenServerDown bool = false
	this.BypassAuthWhenServerDown = &bypassAuthWhenServerDown
	var bypassAuthWhenServerDownForUnkonwnClient bool = false
	this.BypassAuthWhenServerDownForUnkonwnClient = &bypassAuthWhenServerDownForUnkonwnClient
	var disableAutoneg bool = false
	this.DisableAutoneg = &disableAutoneg
	var disabled bool = false
	this.Disabled = &disabled
	var duplex SwitchPortUsageDuplex = SWITCHPORTUSAGEDUPLEX_AUTO
	this.Duplex = &duplex
	var enableMacAuth bool = false
	this.EnableMacAuth = &enableMacAuth
	var enableQos bool = false
	this.EnableQos = &enableQos
	var interSwitchLink bool = false
	this.InterSwitchLink = &interSwitchLink
	var macAuthProtocol SwitchPortUsageMacAuthProtocol = SWITCHPORTUSAGEMACAUTHPROTOCOL_EAP_MD5
	this.MacAuthProtocol = &macAuthProtocol
	var macLimit int32 = 0
	this.MacLimit = &macLimit
	var persistMac bool = false
	this.PersistMac = &persistMac
	var poeDisabled bool = false
	this.PoeDisabled = &poeDisabled
	var reauthInterval int32 = 3600
	this.ReauthInterval = &reauthInterval
	var resetDefaultWhen SwitchPortUsageDynamicResetDefaultWhen = SWITCHPORTUSAGEDYNAMICRESETDEFAULTWHEN_LINK_DOWN
	this.ResetDefaultWhen = &resetDefaultWhen
	var stpEdge bool = false
	this.StpEdge = &stpEdge
	return &this
}

// GetAllNetworks returns the AllNetworks field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetAllNetworks() bool {
	if o == nil || IsNil(o.AllNetworks) {
		var ret bool
		return ret
	}
	return *o.AllNetworks
}

// GetAllNetworksOk returns a tuple with the AllNetworks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetAllNetworksOk() (*bool, bool) {
	if o == nil || IsNil(o.AllNetworks) {
		return nil, false
	}
	return o.AllNetworks, true
}

// HasAllNetworks returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasAllNetworks() bool {
	if o != nil && !IsNil(o.AllNetworks) {
		return true
	}

	return false
}

// SetAllNetworks gets a reference to the given bool and assigns it to the AllNetworks field.
func (o *SwitchPortUsage) SetAllNetworks(v bool) {
	o.AllNetworks = &v
}

// GetAllowDhcpd returns the AllowDhcpd field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetAllowDhcpd() bool {
	if o == nil || IsNil(o.AllowDhcpd) {
		var ret bool
		return ret
	}
	return *o.AllowDhcpd
}

// GetAllowDhcpdOk returns a tuple with the AllowDhcpd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetAllowDhcpdOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowDhcpd) {
		return nil, false
	}
	return o.AllowDhcpd, true
}

// HasAllowDhcpd returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasAllowDhcpd() bool {
	if o != nil && !IsNil(o.AllowDhcpd) {
		return true
	}

	return false
}

// SetAllowDhcpd gets a reference to the given bool and assigns it to the AllowDhcpd field.
func (o *SwitchPortUsage) SetAllowDhcpd(v bool) {
	o.AllowDhcpd = &v
}

// GetAllowMultipleSupplicants returns the AllowMultipleSupplicants field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetAllowMultipleSupplicants() bool {
	if o == nil || IsNil(o.AllowMultipleSupplicants) {
		var ret bool
		return ret
	}
	return *o.AllowMultipleSupplicants
}

// GetAllowMultipleSupplicantsOk returns a tuple with the AllowMultipleSupplicants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetAllowMultipleSupplicantsOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowMultipleSupplicants) {
		return nil, false
	}
	return o.AllowMultipleSupplicants, true
}

// HasAllowMultipleSupplicants returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasAllowMultipleSupplicants() bool {
	if o != nil && !IsNil(o.AllowMultipleSupplicants) {
		return true
	}

	return false
}

// SetAllowMultipleSupplicants gets a reference to the given bool and assigns it to the AllowMultipleSupplicants field.
func (o *SwitchPortUsage) SetAllowMultipleSupplicants(v bool) {
	o.AllowMultipleSupplicants = &v
}

// GetBypassAuthWhenServerDown returns the BypassAuthWhenServerDown field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetBypassAuthWhenServerDown() bool {
	if o == nil || IsNil(o.BypassAuthWhenServerDown) {
		var ret bool
		return ret
	}
	return *o.BypassAuthWhenServerDown
}

// GetBypassAuthWhenServerDownOk returns a tuple with the BypassAuthWhenServerDown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetBypassAuthWhenServerDownOk() (*bool, bool) {
	if o == nil || IsNil(o.BypassAuthWhenServerDown) {
		return nil, false
	}
	return o.BypassAuthWhenServerDown, true
}

// HasBypassAuthWhenServerDown returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasBypassAuthWhenServerDown() bool {
	if o != nil && !IsNil(o.BypassAuthWhenServerDown) {
		return true
	}

	return false
}

// SetBypassAuthWhenServerDown gets a reference to the given bool and assigns it to the BypassAuthWhenServerDown field.
func (o *SwitchPortUsage) SetBypassAuthWhenServerDown(v bool) {
	o.BypassAuthWhenServerDown = &v
}

// GetBypassAuthWhenServerDownForUnkonwnClient returns the BypassAuthWhenServerDownForUnkonwnClient field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetBypassAuthWhenServerDownForUnkonwnClient() bool {
	if o == nil || IsNil(o.BypassAuthWhenServerDownForUnkonwnClient) {
		var ret bool
		return ret
	}
	return *o.BypassAuthWhenServerDownForUnkonwnClient
}

// GetBypassAuthWhenServerDownForUnkonwnClientOk returns a tuple with the BypassAuthWhenServerDownForUnkonwnClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetBypassAuthWhenServerDownForUnkonwnClientOk() (*bool, bool) {
	if o == nil || IsNil(o.BypassAuthWhenServerDownForUnkonwnClient) {
		return nil, false
	}
	return o.BypassAuthWhenServerDownForUnkonwnClient, true
}

// HasBypassAuthWhenServerDownForUnkonwnClient returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasBypassAuthWhenServerDownForUnkonwnClient() bool {
	if o != nil && !IsNil(o.BypassAuthWhenServerDownForUnkonwnClient) {
		return true
	}

	return false
}

// SetBypassAuthWhenServerDownForUnkonwnClient gets a reference to the given bool and assigns it to the BypassAuthWhenServerDownForUnkonwnClient field.
func (o *SwitchPortUsage) SetBypassAuthWhenServerDownForUnkonwnClient(v bool) {
	o.BypassAuthWhenServerDownForUnkonwnClient = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SwitchPortUsage) SetDescription(v string) {
	o.Description = &v
}

// GetDisableAutoneg returns the DisableAutoneg field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetDisableAutoneg() bool {
	if o == nil || IsNil(o.DisableAutoneg) {
		var ret bool
		return ret
	}
	return *o.DisableAutoneg
}

// GetDisableAutonegOk returns a tuple with the DisableAutoneg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetDisableAutonegOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableAutoneg) {
		return nil, false
	}
	return o.DisableAutoneg, true
}

// HasDisableAutoneg returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasDisableAutoneg() bool {
	if o != nil && !IsNil(o.DisableAutoneg) {
		return true
	}

	return false
}

// SetDisableAutoneg gets a reference to the given bool and assigns it to the DisableAutoneg field.
func (o *SwitchPortUsage) SetDisableAutoneg(v bool) {
	o.DisableAutoneg = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *SwitchPortUsage) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetDuplex returns the Duplex field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetDuplex() SwitchPortUsageDuplex {
	if o == nil || IsNil(o.Duplex) {
		var ret SwitchPortUsageDuplex
		return ret
	}
	return *o.Duplex
}

// GetDuplexOk returns a tuple with the Duplex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetDuplexOk() (*SwitchPortUsageDuplex, bool) {
	if o == nil || IsNil(o.Duplex) {
		return nil, false
	}
	return o.Duplex, true
}

// HasDuplex returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasDuplex() bool {
	if o != nil && !IsNil(o.Duplex) {
		return true
	}

	return false
}

// SetDuplex gets a reference to the given SwitchPortUsageDuplex and assigns it to the Duplex field.
func (o *SwitchPortUsage) SetDuplex(v SwitchPortUsageDuplex) {
	o.Duplex = &v
}

// GetDynamicVlanNetworks returns the DynamicVlanNetworks field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetDynamicVlanNetworks() []string {
	if o == nil || IsNil(o.DynamicVlanNetworks) {
		var ret []string
		return ret
	}
	return o.DynamicVlanNetworks
}

// GetDynamicVlanNetworksOk returns a tuple with the DynamicVlanNetworks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetDynamicVlanNetworksOk() ([]string, bool) {
	if o == nil || IsNil(o.DynamicVlanNetworks) {
		return nil, false
	}
	return o.DynamicVlanNetworks, true
}

// HasDynamicVlanNetworks returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasDynamicVlanNetworks() bool {
	if o != nil && !IsNil(o.DynamicVlanNetworks) {
		return true
	}

	return false
}

// SetDynamicVlanNetworks gets a reference to the given []string and assigns it to the DynamicVlanNetworks field.
func (o *SwitchPortUsage) SetDynamicVlanNetworks(v []string) {
	o.DynamicVlanNetworks = v
}

// GetEnableMacAuth returns the EnableMacAuth field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetEnableMacAuth() bool {
	if o == nil || IsNil(o.EnableMacAuth) {
		var ret bool
		return ret
	}
	return *o.EnableMacAuth
}

// GetEnableMacAuthOk returns a tuple with the EnableMacAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetEnableMacAuthOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMacAuth) {
		return nil, false
	}
	return o.EnableMacAuth, true
}

// HasEnableMacAuth returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasEnableMacAuth() bool {
	if o != nil && !IsNil(o.EnableMacAuth) {
		return true
	}

	return false
}

// SetEnableMacAuth gets a reference to the given bool and assigns it to the EnableMacAuth field.
func (o *SwitchPortUsage) SetEnableMacAuth(v bool) {
	o.EnableMacAuth = &v
}

// GetEnableQos returns the EnableQos field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetEnableQos() bool {
	if o == nil || IsNil(o.EnableQos) {
		var ret bool
		return ret
	}
	return *o.EnableQos
}

// GetEnableQosOk returns a tuple with the EnableQos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetEnableQosOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableQos) {
		return nil, false
	}
	return o.EnableQos, true
}

// HasEnableQos returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasEnableQos() bool {
	if o != nil && !IsNil(o.EnableQos) {
		return true
	}

	return false
}

// SetEnableQos gets a reference to the given bool and assigns it to the EnableQos field.
func (o *SwitchPortUsage) SetEnableQos(v bool) {
	o.EnableQos = &v
}

// GetGuestNetwork returns the GuestNetwork field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SwitchPortUsage) GetGuestNetwork() string {
	if o == nil || IsNil(o.GuestNetwork.Get()) {
		var ret string
		return ret
	}
	return *o.GuestNetwork.Get()
}

// GetGuestNetworkOk returns a tuple with the GuestNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SwitchPortUsage) GetGuestNetworkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GuestNetwork.Get(), o.GuestNetwork.IsSet()
}

// HasGuestNetwork returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasGuestNetwork() bool {
	if o != nil && o.GuestNetwork.IsSet() {
		return true
	}

	return false
}

// SetGuestNetwork gets a reference to the given NullableString and assigns it to the GuestNetwork field.
func (o *SwitchPortUsage) SetGuestNetwork(v string) {
	o.GuestNetwork.Set(&v)
}
// SetGuestNetworkNil sets the value for GuestNetwork to be an explicit nil
func (o *SwitchPortUsage) SetGuestNetworkNil() {
	o.GuestNetwork.Set(nil)
}

// UnsetGuestNetwork ensures that no value is present for GuestNetwork, not even an explicit nil
func (o *SwitchPortUsage) UnsetGuestNetwork() {
	o.GuestNetwork.Unset()
}

// GetInterSwitchLink returns the InterSwitchLink field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetInterSwitchLink() bool {
	if o == nil || IsNil(o.InterSwitchLink) {
		var ret bool
		return ret
	}
	return *o.InterSwitchLink
}

// GetInterSwitchLinkOk returns a tuple with the InterSwitchLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetInterSwitchLinkOk() (*bool, bool) {
	if o == nil || IsNil(o.InterSwitchLink) {
		return nil, false
	}
	return o.InterSwitchLink, true
}

// HasInterSwitchLink returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasInterSwitchLink() bool {
	if o != nil && !IsNil(o.InterSwitchLink) {
		return true
	}

	return false
}

// SetInterSwitchLink gets a reference to the given bool and assigns it to the InterSwitchLink field.
func (o *SwitchPortUsage) SetInterSwitchLink(v bool) {
	o.InterSwitchLink = &v
}

// GetMacAuthOnly returns the MacAuthOnly field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetMacAuthOnly() bool {
	if o == nil || IsNil(o.MacAuthOnly) {
		var ret bool
		return ret
	}
	return *o.MacAuthOnly
}

// GetMacAuthOnlyOk returns a tuple with the MacAuthOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetMacAuthOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.MacAuthOnly) {
		return nil, false
	}
	return o.MacAuthOnly, true
}

// HasMacAuthOnly returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasMacAuthOnly() bool {
	if o != nil && !IsNil(o.MacAuthOnly) {
		return true
	}

	return false
}

// SetMacAuthOnly gets a reference to the given bool and assigns it to the MacAuthOnly field.
func (o *SwitchPortUsage) SetMacAuthOnly(v bool) {
	o.MacAuthOnly = &v
}

// GetMacAuthProtocol returns the MacAuthProtocol field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetMacAuthProtocol() SwitchPortUsageMacAuthProtocol {
	if o == nil || IsNil(o.MacAuthProtocol) {
		var ret SwitchPortUsageMacAuthProtocol
		return ret
	}
	return *o.MacAuthProtocol
}

// GetMacAuthProtocolOk returns a tuple with the MacAuthProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetMacAuthProtocolOk() (*SwitchPortUsageMacAuthProtocol, bool) {
	if o == nil || IsNil(o.MacAuthProtocol) {
		return nil, false
	}
	return o.MacAuthProtocol, true
}

// HasMacAuthProtocol returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasMacAuthProtocol() bool {
	if o != nil && !IsNil(o.MacAuthProtocol) {
		return true
	}

	return false
}

// SetMacAuthProtocol gets a reference to the given SwitchPortUsageMacAuthProtocol and assigns it to the MacAuthProtocol field.
func (o *SwitchPortUsage) SetMacAuthProtocol(v SwitchPortUsageMacAuthProtocol) {
	o.MacAuthProtocol = &v
}

// GetMacLimit returns the MacLimit field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetMacLimit() int32 {
	if o == nil || IsNil(o.MacLimit) {
		var ret int32
		return ret
	}
	return *o.MacLimit
}

// GetMacLimitOk returns a tuple with the MacLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetMacLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.MacLimit) {
		return nil, false
	}
	return o.MacLimit, true
}

// HasMacLimit returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasMacLimit() bool {
	if o != nil && !IsNil(o.MacLimit) {
		return true
	}

	return false
}

// SetMacLimit gets a reference to the given int32 and assigns it to the MacLimit field.
func (o *SwitchPortUsage) SetMacLimit(v int32) {
	o.MacLimit = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetMode() SwitchPortUsageMode {
	if o == nil || IsNil(o.Mode) {
		var ret SwitchPortUsageMode
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetModeOk() (*SwitchPortUsageMode, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given SwitchPortUsageMode and assigns it to the Mode field.
func (o *SwitchPortUsage) SetMode(v SwitchPortUsageMode) {
	o.Mode = &v
}

// GetMtu returns the Mtu field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetMtu() int32 {
	if o == nil || IsNil(o.Mtu) {
		var ret int32
		return ret
	}
	return *o.Mtu
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetMtuOk() (*int32, bool) {
	if o == nil || IsNil(o.Mtu) {
		return nil, false
	}
	return o.Mtu, true
}

// HasMtu returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasMtu() bool {
	if o != nil && !IsNil(o.Mtu) {
		return true
	}

	return false
}

// SetMtu gets a reference to the given int32 and assigns it to the Mtu field.
func (o *SwitchPortUsage) SetMtu(v int32) {
	o.Mtu = &v
}

// GetNetworks returns the Networks field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetNetworks() []string {
	if o == nil || IsNil(o.Networks) {
		var ret []string
		return ret
	}
	return o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetNetworksOk() ([]string, bool) {
	if o == nil || IsNil(o.Networks) {
		return nil, false
	}
	return o.Networks, true
}

// HasNetworks returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasNetworks() bool {
	if o != nil && !IsNil(o.Networks) {
		return true
	}

	return false
}

// SetNetworks gets a reference to the given []string and assigns it to the Networks field.
func (o *SwitchPortUsage) SetNetworks(v []string) {
	o.Networks = v
}

// GetPersistMac returns the PersistMac field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetPersistMac() bool {
	if o == nil || IsNil(o.PersistMac) {
		var ret bool
		return ret
	}
	return *o.PersistMac
}

// GetPersistMacOk returns a tuple with the PersistMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetPersistMacOk() (*bool, bool) {
	if o == nil || IsNil(o.PersistMac) {
		return nil, false
	}
	return o.PersistMac, true
}

// HasPersistMac returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasPersistMac() bool {
	if o != nil && !IsNil(o.PersistMac) {
		return true
	}

	return false
}

// SetPersistMac gets a reference to the given bool and assigns it to the PersistMac field.
func (o *SwitchPortUsage) SetPersistMac(v bool) {
	o.PersistMac = &v
}

// GetPoeDisabled returns the PoeDisabled field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetPoeDisabled() bool {
	if o == nil || IsNil(o.PoeDisabled) {
		var ret bool
		return ret
	}
	return *o.PoeDisabled
}

// GetPoeDisabledOk returns a tuple with the PoeDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetPoeDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PoeDisabled) {
		return nil, false
	}
	return o.PoeDisabled, true
}

// HasPoeDisabled returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasPoeDisabled() bool {
	if o != nil && !IsNil(o.PoeDisabled) {
		return true
	}

	return false
}

// SetPoeDisabled gets a reference to the given bool and assigns it to the PoeDisabled field.
func (o *SwitchPortUsage) SetPoeDisabled(v bool) {
	o.PoeDisabled = &v
}

// GetPortAuth returns the PortAuth field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetPortAuth() string {
	if o == nil || IsNil(o.PortAuth) {
		var ret string
		return ret
	}
	return *o.PortAuth
}

// GetPortAuthOk returns a tuple with the PortAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetPortAuthOk() (*string, bool) {
	if o == nil || IsNil(o.PortAuth) {
		return nil, false
	}
	return o.PortAuth, true
}

// HasPortAuth returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasPortAuth() bool {
	if o != nil && !IsNil(o.PortAuth) {
		return true
	}

	return false
}

// SetPortAuth gets a reference to the given string and assigns it to the PortAuth field.
func (o *SwitchPortUsage) SetPortAuth(v string) {
	o.PortAuth = &v
}

// GetPortNetwork returns the PortNetwork field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetPortNetwork() string {
	if o == nil || IsNil(o.PortNetwork) {
		var ret string
		return ret
	}
	return *o.PortNetwork
}

// GetPortNetworkOk returns a tuple with the PortNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetPortNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.PortNetwork) {
		return nil, false
	}
	return o.PortNetwork, true
}

// HasPortNetwork returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasPortNetwork() bool {
	if o != nil && !IsNil(o.PortNetwork) {
		return true
	}

	return false
}

// SetPortNetwork gets a reference to the given string and assigns it to the PortNetwork field.
func (o *SwitchPortUsage) SetPortNetwork(v string) {
	o.PortNetwork = &v
}

// GetReauthInterval returns the ReauthInterval field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetReauthInterval() int32 {
	if o == nil || IsNil(o.ReauthInterval) {
		var ret int32
		return ret
	}
	return *o.ReauthInterval
}

// GetReauthIntervalOk returns a tuple with the ReauthInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetReauthIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.ReauthInterval) {
		return nil, false
	}
	return o.ReauthInterval, true
}

// HasReauthInterval returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasReauthInterval() bool {
	if o != nil && !IsNil(o.ReauthInterval) {
		return true
	}

	return false
}

// SetReauthInterval gets a reference to the given int32 and assigns it to the ReauthInterval field.
func (o *SwitchPortUsage) SetReauthInterval(v int32) {
	o.ReauthInterval = &v
}

// GetRejectedNetwork returns the RejectedNetwork field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SwitchPortUsage) GetRejectedNetwork() string {
	if o == nil || IsNil(o.RejectedNetwork.Get()) {
		var ret string
		return ret
	}
	return *o.RejectedNetwork.Get()
}

// GetRejectedNetworkOk returns a tuple with the RejectedNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SwitchPortUsage) GetRejectedNetworkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RejectedNetwork.Get(), o.RejectedNetwork.IsSet()
}

// HasRejectedNetwork returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasRejectedNetwork() bool {
	if o != nil && o.RejectedNetwork.IsSet() {
		return true
	}

	return false
}

// SetRejectedNetwork gets a reference to the given NullableString and assigns it to the RejectedNetwork field.
func (o *SwitchPortUsage) SetRejectedNetwork(v string) {
	o.RejectedNetwork.Set(&v)
}
// SetRejectedNetworkNil sets the value for RejectedNetwork to be an explicit nil
func (o *SwitchPortUsage) SetRejectedNetworkNil() {
	o.RejectedNetwork.Set(nil)
}

// UnsetRejectedNetwork ensures that no value is present for RejectedNetwork, not even an explicit nil
func (o *SwitchPortUsage) UnsetRejectedNetwork() {
	o.RejectedNetwork.Unset()
}

// GetResetDefaultWhen returns the ResetDefaultWhen field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetResetDefaultWhen() SwitchPortUsageDynamicResetDefaultWhen {
	if o == nil || IsNil(o.ResetDefaultWhen) {
		var ret SwitchPortUsageDynamicResetDefaultWhen
		return ret
	}
	return *o.ResetDefaultWhen
}

// GetResetDefaultWhenOk returns a tuple with the ResetDefaultWhen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetResetDefaultWhenOk() (*SwitchPortUsageDynamicResetDefaultWhen, bool) {
	if o == nil || IsNil(o.ResetDefaultWhen) {
		return nil, false
	}
	return o.ResetDefaultWhen, true
}

// HasResetDefaultWhen returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasResetDefaultWhen() bool {
	if o != nil && !IsNil(o.ResetDefaultWhen) {
		return true
	}

	return false
}

// SetResetDefaultWhen gets a reference to the given SwitchPortUsageDynamicResetDefaultWhen and assigns it to the ResetDefaultWhen field.
func (o *SwitchPortUsage) SetResetDefaultWhen(v SwitchPortUsageDynamicResetDefaultWhen) {
	o.ResetDefaultWhen = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetRules() []SwitchPortUsageDynamicRule {
	if o == nil || IsNil(o.Rules) {
		var ret []SwitchPortUsageDynamicRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetRulesOk() ([]SwitchPortUsageDynamicRule, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []SwitchPortUsageDynamicRule and assigns it to the Rules field.
func (o *SwitchPortUsage) SetRules(v []SwitchPortUsageDynamicRule) {
	o.Rules = v
}

// GetSpeed returns the Speed field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetSpeed() string {
	if o == nil || IsNil(o.Speed) {
		var ret string
		return ret
	}
	return *o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetSpeedOk() (*string, bool) {
	if o == nil || IsNil(o.Speed) {
		return nil, false
	}
	return o.Speed, true
}

// HasSpeed returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasSpeed() bool {
	if o != nil && !IsNil(o.Speed) {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given string and assigns it to the Speed field.
func (o *SwitchPortUsage) SetSpeed(v string) {
	o.Speed = &v
}

// GetStormControl returns the StormControl field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetStormControl() SwitchPortUsageStormControl {
	if o == nil || IsNil(o.StormControl) {
		var ret SwitchPortUsageStormControl
		return ret
	}
	return *o.StormControl
}

// GetStormControlOk returns a tuple with the StormControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetStormControlOk() (*SwitchPortUsageStormControl, bool) {
	if o == nil || IsNil(o.StormControl) {
		return nil, false
	}
	return o.StormControl, true
}

// HasStormControl returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasStormControl() bool {
	if o != nil && !IsNil(o.StormControl) {
		return true
	}

	return false
}

// SetStormControl gets a reference to the given SwitchPortUsageStormControl and assigns it to the StormControl field.
func (o *SwitchPortUsage) SetStormControl(v SwitchPortUsageStormControl) {
	o.StormControl = &v
}

// GetStpEdge returns the StpEdge field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetStpEdge() bool {
	if o == nil || IsNil(o.StpEdge) {
		var ret bool
		return ret
	}
	return *o.StpEdge
}

// GetStpEdgeOk returns a tuple with the StpEdge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetStpEdgeOk() (*bool, bool) {
	if o == nil || IsNil(o.StpEdge) {
		return nil, false
	}
	return o.StpEdge, true
}

// HasStpEdge returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasStpEdge() bool {
	if o != nil && !IsNil(o.StpEdge) {
		return true
	}

	return false
}

// SetStpEdge gets a reference to the given bool and assigns it to the StpEdge field.
func (o *SwitchPortUsage) SetStpEdge(v bool) {
	o.StpEdge = &v
}

// GetVoipNetwork returns the VoipNetwork field value if set, zero value otherwise.
func (o *SwitchPortUsage) GetVoipNetwork() string {
	if o == nil || IsNil(o.VoipNetwork) {
		var ret string
		return ret
	}
	return *o.VoipNetwork
}

// GetVoipNetworkOk returns a tuple with the VoipNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortUsage) GetVoipNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.VoipNetwork) {
		return nil, false
	}
	return o.VoipNetwork, true
}

// HasVoipNetwork returns a boolean if a field has been set.
func (o *SwitchPortUsage) HasVoipNetwork() bool {
	if o != nil && !IsNil(o.VoipNetwork) {
		return true
	}

	return false
}

// SetVoipNetwork gets a reference to the given string and assigns it to the VoipNetwork field.
func (o *SwitchPortUsage) SetVoipNetwork(v string) {
	o.VoipNetwork = &v
}

func (o SwitchPortUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwitchPortUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllNetworks) {
		toSerialize["all_networks"] = o.AllNetworks
	}
	if !IsNil(o.AllowDhcpd) {
		toSerialize["allow_dhcpd"] = o.AllowDhcpd
	}
	if !IsNil(o.AllowMultipleSupplicants) {
		toSerialize["allow_multiple_supplicants"] = o.AllowMultipleSupplicants
	}
	if !IsNil(o.BypassAuthWhenServerDown) {
		toSerialize["bypass_auth_when_server_down"] = o.BypassAuthWhenServerDown
	}
	if !IsNil(o.BypassAuthWhenServerDownForUnkonwnClient) {
		toSerialize["bypass_auth_when_server_down_for_unkonwn_client"] = o.BypassAuthWhenServerDownForUnkonwnClient
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisableAutoneg) {
		toSerialize["disable_autoneg"] = o.DisableAutoneg
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.Duplex) {
		toSerialize["duplex"] = o.Duplex
	}
	if !IsNil(o.DynamicVlanNetworks) {
		toSerialize["dynamic_vlan_networks"] = o.DynamicVlanNetworks
	}
	if !IsNil(o.EnableMacAuth) {
		toSerialize["enable_mac_auth"] = o.EnableMacAuth
	}
	if !IsNil(o.EnableQos) {
		toSerialize["enable_qos"] = o.EnableQos
	}
	if o.GuestNetwork.IsSet() {
		toSerialize["guest_network"] = o.GuestNetwork.Get()
	}
	if !IsNil(o.InterSwitchLink) {
		toSerialize["inter_switch_link"] = o.InterSwitchLink
	}
	if !IsNil(o.MacAuthOnly) {
		toSerialize["mac_auth_only"] = o.MacAuthOnly
	}
	if !IsNil(o.MacAuthProtocol) {
		toSerialize["mac_auth_protocol"] = o.MacAuthProtocol
	}
	if !IsNil(o.MacLimit) {
		toSerialize["mac_limit"] = o.MacLimit
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.Mtu) {
		toSerialize["mtu"] = o.Mtu
	}
	if !IsNil(o.Networks) {
		toSerialize["networks"] = o.Networks
	}
	if !IsNil(o.PersistMac) {
		toSerialize["persist_mac"] = o.PersistMac
	}
	if !IsNil(o.PoeDisabled) {
		toSerialize["poe_disabled"] = o.PoeDisabled
	}
	if !IsNil(o.PortAuth) {
		toSerialize["port_auth"] = o.PortAuth
	}
	if !IsNil(o.PortNetwork) {
		toSerialize["port_network"] = o.PortNetwork
	}
	if !IsNil(o.ReauthInterval) {
		toSerialize["reauth_interval"] = o.ReauthInterval
	}
	if o.RejectedNetwork.IsSet() {
		toSerialize["rejected_network"] = o.RejectedNetwork.Get()
	}
	if !IsNil(o.ResetDefaultWhen) {
		toSerialize["reset_default_when"] = o.ResetDefaultWhen
	}
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	if !IsNil(o.Speed) {
		toSerialize["speed"] = o.Speed
	}
	if !IsNil(o.StormControl) {
		toSerialize["storm_control"] = o.StormControl
	}
	if !IsNil(o.StpEdge) {
		toSerialize["stp_edge"] = o.StpEdge
	}
	if !IsNil(o.VoipNetwork) {
		toSerialize["voip_network"] = o.VoipNetwork
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SwitchPortUsage) UnmarshalJSON(data []byte) (err error) {
	varSwitchPortUsage := _SwitchPortUsage{}

	err = json.Unmarshal(data, &varSwitchPortUsage)

	if err != nil {
		return err
	}

	*o = SwitchPortUsage(varSwitchPortUsage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "all_networks")
		delete(additionalProperties, "allow_dhcpd")
		delete(additionalProperties, "allow_multiple_supplicants")
		delete(additionalProperties, "bypass_auth_when_server_down")
		delete(additionalProperties, "bypass_auth_when_server_down_for_unkonwn_client")
		delete(additionalProperties, "description")
		delete(additionalProperties, "disable_autoneg")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "duplex")
		delete(additionalProperties, "dynamic_vlan_networks")
		delete(additionalProperties, "enable_mac_auth")
		delete(additionalProperties, "enable_qos")
		delete(additionalProperties, "guest_network")
		delete(additionalProperties, "inter_switch_link")
		delete(additionalProperties, "mac_auth_only")
		delete(additionalProperties, "mac_auth_protocol")
		delete(additionalProperties, "mac_limit")
		delete(additionalProperties, "mode")
		delete(additionalProperties, "mtu")
		delete(additionalProperties, "networks")
		delete(additionalProperties, "persist_mac")
		delete(additionalProperties, "poe_disabled")
		delete(additionalProperties, "port_auth")
		delete(additionalProperties, "port_network")
		delete(additionalProperties, "reauth_interval")
		delete(additionalProperties, "rejected_network")
		delete(additionalProperties, "reset_default_when")
		delete(additionalProperties, "rules")
		delete(additionalProperties, "speed")
		delete(additionalProperties, "storm_control")
		delete(additionalProperties, "stp_edge")
		delete(additionalProperties, "voip_network")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSwitchPortUsage struct {
	value *SwitchPortUsage
	isSet bool
}

func (v NullableSwitchPortUsage) Get() *SwitchPortUsage {
	return v.value
}

func (v *NullableSwitchPortUsage) Set(val *SwitchPortUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableSwitchPortUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableSwitchPortUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwitchPortUsage(val *SwitchPortUsage) *NullableSwitchPortUsage {
	return &NullableSwitchPortUsage{value: val, isSet: true}
}

func (v NullableSwitchPortUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwitchPortUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


