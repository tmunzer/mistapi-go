/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the OrgSettingMistNac type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrgSettingMistNac{}

// OrgSettingMistNac struct for OrgSettingMistNac
type OrgSettingMistNac struct {
	// the CA certs we use to verify client certs
	Cacerts *string `json:"cacerts,omitempty"`
	// use this IDP when no explicit realm present in the incoming username/CN OR when no IDP is explicitly mapped to the incoming realm.
	DefaultIdpId *string `json:"default_idp_id,omitempty"`
	// eap ssl security level see https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_set_security_level.html#DEFAULT-CALLBACK-BEHAVIOUR
	EapSslSecurityLevel *int32 `json:"eap_ssl_security_level,omitempty"`
	// By default NAC POD failover considers all NAC pods available around the globe, i.e. EU, US, or APAC based, failover happens based on geo IP of the originating site. For strict GDPR compliancy NAC POD failover would only happen between the PODs located within the EU environment, and no authentication would take place outside of EU. This is an org setting that is applicable to WLANs, switch templates, mxedge clusters that have mist_nac enabled
	EuOnly *bool `json:"eu_only,omitempty"`
	Idps []OrgSettingMistNacIdp `json:"idps,omitempty"`
	ServerCert *OrgSettingMistNacServerCert `json:"server_cert,omitempty"`
	UseIpVersion *OrgSettingMistNacIpVersion `json:"use_ip_version,omitempty"`
	// By default NAS devices (switches/aps) and proxies(mxedge) are configured to use port TCP2083(radsec) to reach mist-nac.  Set `use_ssl_port`==`true` to override that port with TCP43 (ssl),  This is a org level setting that is applicable to wlans, switch_templates, and mxedge_clusters that have mist-nac enabled
	UseSslPort *bool `json:"use_ssl_port,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrgSettingMistNac OrgSettingMistNac

// NewOrgSettingMistNac instantiates a new OrgSettingMistNac object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgSettingMistNac() *OrgSettingMistNac {
	this := OrgSettingMistNac{}
	var eapSslSecurityLevel int32 = 2
	this.EapSslSecurityLevel = &eapSslSecurityLevel
	var euOnly bool = false
	this.EuOnly = &euOnly
	var useIpVersion OrgSettingMistNacIpVersion = ORGSETTINGMISTNACIPVERSION_V4
	this.UseIpVersion = &useIpVersion
	var useSslPort bool = false
	this.UseSslPort = &useSslPort
	return &this
}

// NewOrgSettingMistNacWithDefaults instantiates a new OrgSettingMistNac object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgSettingMistNacWithDefaults() *OrgSettingMistNac {
	this := OrgSettingMistNac{}
	var eapSslSecurityLevel int32 = 2
	this.EapSslSecurityLevel = &eapSslSecurityLevel
	var euOnly bool = false
	this.EuOnly = &euOnly
	var useIpVersion OrgSettingMistNacIpVersion = ORGSETTINGMISTNACIPVERSION_V4
	this.UseIpVersion = &useIpVersion
	var useSslPort bool = false
	this.UseSslPort = &useSslPort
	return &this
}

// GetCacerts returns the Cacerts field value if set, zero value otherwise.
func (o *OrgSettingMistNac) GetCacerts() string {
	if o == nil || IsNil(o.Cacerts) {
		var ret string
		return ret
	}
	return *o.Cacerts
}

// GetCacertsOk returns a tuple with the Cacerts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSettingMistNac) GetCacertsOk() (*string, bool) {
	if o == nil || IsNil(o.Cacerts) {
		return nil, false
	}
	return o.Cacerts, true
}

// HasCacerts returns a boolean if a field has been set.
func (o *OrgSettingMistNac) HasCacerts() bool {
	if o != nil && !IsNil(o.Cacerts) {
		return true
	}

	return false
}

// SetCacerts gets a reference to the given string and assigns it to the Cacerts field.
func (o *OrgSettingMistNac) SetCacerts(v string) {
	o.Cacerts = &v
}

// GetDefaultIdpId returns the DefaultIdpId field value if set, zero value otherwise.
func (o *OrgSettingMistNac) GetDefaultIdpId() string {
	if o == nil || IsNil(o.DefaultIdpId) {
		var ret string
		return ret
	}
	return *o.DefaultIdpId
}

// GetDefaultIdpIdOk returns a tuple with the DefaultIdpId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSettingMistNac) GetDefaultIdpIdOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultIdpId) {
		return nil, false
	}
	return o.DefaultIdpId, true
}

// HasDefaultIdpId returns a boolean if a field has been set.
func (o *OrgSettingMistNac) HasDefaultIdpId() bool {
	if o != nil && !IsNil(o.DefaultIdpId) {
		return true
	}

	return false
}

// SetDefaultIdpId gets a reference to the given string and assigns it to the DefaultIdpId field.
func (o *OrgSettingMistNac) SetDefaultIdpId(v string) {
	o.DefaultIdpId = &v
}

// GetEapSslSecurityLevel returns the EapSslSecurityLevel field value if set, zero value otherwise.
func (o *OrgSettingMistNac) GetEapSslSecurityLevel() int32 {
	if o == nil || IsNil(o.EapSslSecurityLevel) {
		var ret int32
		return ret
	}
	return *o.EapSslSecurityLevel
}

// GetEapSslSecurityLevelOk returns a tuple with the EapSslSecurityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSettingMistNac) GetEapSslSecurityLevelOk() (*int32, bool) {
	if o == nil || IsNil(o.EapSslSecurityLevel) {
		return nil, false
	}
	return o.EapSslSecurityLevel, true
}

// HasEapSslSecurityLevel returns a boolean if a field has been set.
func (o *OrgSettingMistNac) HasEapSslSecurityLevel() bool {
	if o != nil && !IsNil(o.EapSslSecurityLevel) {
		return true
	}

	return false
}

// SetEapSslSecurityLevel gets a reference to the given int32 and assigns it to the EapSslSecurityLevel field.
func (o *OrgSettingMistNac) SetEapSslSecurityLevel(v int32) {
	o.EapSslSecurityLevel = &v
}

// GetEuOnly returns the EuOnly field value if set, zero value otherwise.
func (o *OrgSettingMistNac) GetEuOnly() bool {
	if o == nil || IsNil(o.EuOnly) {
		var ret bool
		return ret
	}
	return *o.EuOnly
}

// GetEuOnlyOk returns a tuple with the EuOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSettingMistNac) GetEuOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.EuOnly) {
		return nil, false
	}
	return o.EuOnly, true
}

// HasEuOnly returns a boolean if a field has been set.
func (o *OrgSettingMistNac) HasEuOnly() bool {
	if o != nil && !IsNil(o.EuOnly) {
		return true
	}

	return false
}

// SetEuOnly gets a reference to the given bool and assigns it to the EuOnly field.
func (o *OrgSettingMistNac) SetEuOnly(v bool) {
	o.EuOnly = &v
}

// GetIdps returns the Idps field value if set, zero value otherwise.
func (o *OrgSettingMistNac) GetIdps() []OrgSettingMistNacIdp {
	if o == nil || IsNil(o.Idps) {
		var ret []OrgSettingMistNacIdp
		return ret
	}
	return o.Idps
}

// GetIdpsOk returns a tuple with the Idps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSettingMistNac) GetIdpsOk() ([]OrgSettingMistNacIdp, bool) {
	if o == nil || IsNil(o.Idps) {
		return nil, false
	}
	return o.Idps, true
}

// HasIdps returns a boolean if a field has been set.
func (o *OrgSettingMistNac) HasIdps() bool {
	if o != nil && !IsNil(o.Idps) {
		return true
	}

	return false
}

// SetIdps gets a reference to the given []OrgSettingMistNacIdp and assigns it to the Idps field.
func (o *OrgSettingMistNac) SetIdps(v []OrgSettingMistNacIdp) {
	o.Idps = v
}

// GetServerCert returns the ServerCert field value if set, zero value otherwise.
func (o *OrgSettingMistNac) GetServerCert() OrgSettingMistNacServerCert {
	if o == nil || IsNil(o.ServerCert) {
		var ret OrgSettingMistNacServerCert
		return ret
	}
	return *o.ServerCert
}

// GetServerCertOk returns a tuple with the ServerCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSettingMistNac) GetServerCertOk() (*OrgSettingMistNacServerCert, bool) {
	if o == nil || IsNil(o.ServerCert) {
		return nil, false
	}
	return o.ServerCert, true
}

// HasServerCert returns a boolean if a field has been set.
func (o *OrgSettingMistNac) HasServerCert() bool {
	if o != nil && !IsNil(o.ServerCert) {
		return true
	}

	return false
}

// SetServerCert gets a reference to the given OrgSettingMistNacServerCert and assigns it to the ServerCert field.
func (o *OrgSettingMistNac) SetServerCert(v OrgSettingMistNacServerCert) {
	o.ServerCert = &v
}

// GetUseIpVersion returns the UseIpVersion field value if set, zero value otherwise.
func (o *OrgSettingMistNac) GetUseIpVersion() OrgSettingMistNacIpVersion {
	if o == nil || IsNil(o.UseIpVersion) {
		var ret OrgSettingMistNacIpVersion
		return ret
	}
	return *o.UseIpVersion
}

// GetUseIpVersionOk returns a tuple with the UseIpVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSettingMistNac) GetUseIpVersionOk() (*OrgSettingMistNacIpVersion, bool) {
	if o == nil || IsNil(o.UseIpVersion) {
		return nil, false
	}
	return o.UseIpVersion, true
}

// HasUseIpVersion returns a boolean if a field has been set.
func (o *OrgSettingMistNac) HasUseIpVersion() bool {
	if o != nil && !IsNil(o.UseIpVersion) {
		return true
	}

	return false
}

// SetUseIpVersion gets a reference to the given OrgSettingMistNacIpVersion and assigns it to the UseIpVersion field.
func (o *OrgSettingMistNac) SetUseIpVersion(v OrgSettingMistNacIpVersion) {
	o.UseIpVersion = &v
}

// GetUseSslPort returns the UseSslPort field value if set, zero value otherwise.
func (o *OrgSettingMistNac) GetUseSslPort() bool {
	if o == nil || IsNil(o.UseSslPort) {
		var ret bool
		return ret
	}
	return *o.UseSslPort
}

// GetUseSslPortOk returns a tuple with the UseSslPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSettingMistNac) GetUseSslPortOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSslPort) {
		return nil, false
	}
	return o.UseSslPort, true
}

// HasUseSslPort returns a boolean if a field has been set.
func (o *OrgSettingMistNac) HasUseSslPort() bool {
	if o != nil && !IsNil(o.UseSslPort) {
		return true
	}

	return false
}

// SetUseSslPort gets a reference to the given bool and assigns it to the UseSslPort field.
func (o *OrgSettingMistNac) SetUseSslPort(v bool) {
	o.UseSslPort = &v
}

func (o OrgSettingMistNac) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrgSettingMistNac) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cacerts) {
		toSerialize["cacerts"] = o.Cacerts
	}
	if !IsNil(o.DefaultIdpId) {
		toSerialize["default_idp_id"] = o.DefaultIdpId
	}
	if !IsNil(o.EapSslSecurityLevel) {
		toSerialize["eap_ssl_security_level"] = o.EapSslSecurityLevel
	}
	if !IsNil(o.EuOnly) {
		toSerialize["eu_only"] = o.EuOnly
	}
	if !IsNil(o.Idps) {
		toSerialize["idps"] = o.Idps
	}
	if !IsNil(o.ServerCert) {
		toSerialize["server_cert"] = o.ServerCert
	}
	if !IsNil(o.UseIpVersion) {
		toSerialize["use_ip_version"] = o.UseIpVersion
	}
	if !IsNil(o.UseSslPort) {
		toSerialize["use_ssl_port"] = o.UseSslPort
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrgSettingMistNac) UnmarshalJSON(data []byte) (err error) {
	varOrgSettingMistNac := _OrgSettingMistNac{}

	err = json.Unmarshal(data, &varOrgSettingMistNac)

	if err != nil {
		return err
	}

	*o = OrgSettingMistNac(varOrgSettingMistNac)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cacerts")
		delete(additionalProperties, "default_idp_id")
		delete(additionalProperties, "eap_ssl_security_level")
		delete(additionalProperties, "eu_only")
		delete(additionalProperties, "idps")
		delete(additionalProperties, "server_cert")
		delete(additionalProperties, "use_ip_version")
		delete(additionalProperties, "use_ssl_port")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrgSettingMistNac struct {
	value *OrgSettingMistNac
	isSet bool
}

func (v NullableOrgSettingMistNac) Get() *OrgSettingMistNac {
	return v.value
}

func (v *NullableOrgSettingMistNac) Set(val *OrgSettingMistNac) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgSettingMistNac) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgSettingMistNac) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgSettingMistNac(val *OrgSettingMistNac) *NullableOrgSettingMistNac {
	return &NullableOrgSettingMistNac{value: val, isSet: true}
}

func (v NullableOrgSettingMistNac) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgSettingMistNac) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


