/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the Service type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Service{}

// Service Applications used for the Gateway configurations
type Service struct {
	// if `type`==`custom`, ip subnets
	Addresses []string `json:"addresses,omitempty"`
	// when `type`==`app_categories` list of application categories are available through /api/v1/const/app_categories
	AppCategories []string `json:"app_categories,omitempty"`
	// when `type`==`app_categories` list of application categories are available through /api/v1/const/app_subcategories
	AppSubcategories []string `json:"app_subcategories,omitempty"`
	// when `type`==`apps` list of applications are available through:   - /api/v1/const/applications,   - /api/v1/const/gateway_applications   - /insight/top_app_by-bytes?wired=true
	Apps []string `json:"apps,omitempty"`
	CreatedTime *int32 `json:"created_time,omitempty"`
	Description *string `json:"description,omitempty"`
	// when `traffic_type`==`custom`
	Dscp *int32 `json:"dscp,omitempty"`
	FailoverPolicy *ServiceFailoverPolicy `json:"failover_policy,omitempty"`
	// if `type`==`custom`, web filtering
	Hostnames []string `json:"hostnames,omitempty"`
	Id *string `json:"id,omitempty"`
	// when `traffic_type`==`custom`, for uplink selection
	MaxJitter *int32 `json:"max_jitter,omitempty"`
	// when `traffic_type`==`custom`, for uplink selection
	MaxLatency *int32 `json:"max_latency,omitempty"`
	// when `traffic_type`==`custom`, for uplink selection
	MaxLoss *int32 `json:"max_loss,omitempty"`
	ModifiedTime *int32 `json:"modified_time,omitempty"`
	Name *string `json:"name,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	// whether to enable measure SLE
	SleEnabled *bool `json:"sle_enabled,omitempty"`
	Specs []ServiceSpec `json:"specs,omitempty"`
	SsrRelaxedTcpStateEnforcement *bool `json:"ssr_relaxed_tcp_state_enforcement,omitempty"`
	TrafficClass *ServiceTrafficClass `json:"traffic_class,omitempty"`
	// values from `/api/v1/consts/traffic_types` * when `type`==`apps`, we'll choose traffic_type automatically * when `type`==`addresses` or `type`==`hostnames`, you can provide your own settings (optional)
	TrafficType *string `json:"traffic_type,omitempty"`
	Type *ServiceType `json:"type,omitempty"`
	// when `type`==`urls no need for spec as URL can encode the ports being used`
	Urls []string `json:"urls,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Service Service

// NewService instantiates a new Service object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewService() *Service {
	this := Service{}
	var failoverPolicy ServiceFailoverPolicy = SERVICEFAILOVERPOLICY_REVERTABLE
	this.FailoverPolicy = &failoverPolicy
	var sleEnabled bool = false
	this.SleEnabled = &sleEnabled
	var ssrRelaxedTcpStateEnforcement bool = false
	this.SsrRelaxedTcpStateEnforcement = &ssrRelaxedTcpStateEnforcement
	var trafficClass ServiceTrafficClass = SERVICETRAFFICCLASS_BEST_EFFORT
	this.TrafficClass = &trafficClass
	var trafficType string = "data_best_effort"
	this.TrafficType = &trafficType
	var type_ ServiceType = SERVICETYPE_CUSTOM
	this.Type = &type_
	return &this
}

// NewServiceWithDefaults instantiates a new Service object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceWithDefaults() *Service {
	this := Service{}
	var failoverPolicy ServiceFailoverPolicy = SERVICEFAILOVERPOLICY_REVERTABLE
	this.FailoverPolicy = &failoverPolicy
	var sleEnabled bool = false
	this.SleEnabled = &sleEnabled
	var ssrRelaxedTcpStateEnforcement bool = false
	this.SsrRelaxedTcpStateEnforcement = &ssrRelaxedTcpStateEnforcement
	var trafficClass ServiceTrafficClass = SERVICETRAFFICCLASS_BEST_EFFORT
	this.TrafficClass = &trafficClass
	var trafficType string = "data_best_effort"
	this.TrafficType = &trafficType
	var type_ ServiceType = SERVICETYPE_CUSTOM
	this.Type = &type_
	return &this
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *Service) GetAddresses() []string {
	if o == nil || IsNil(o.Addresses) {
		var ret []string
		return ret
	}
	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.Addresses) {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *Service) HasAddresses() bool {
	if o != nil && !IsNil(o.Addresses) {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []string and assigns it to the Addresses field.
func (o *Service) SetAddresses(v []string) {
	o.Addresses = v
}

// GetAppCategories returns the AppCategories field value if set, zero value otherwise.
func (o *Service) GetAppCategories() []string {
	if o == nil || IsNil(o.AppCategories) {
		var ret []string
		return ret
	}
	return o.AppCategories
}

// GetAppCategoriesOk returns a tuple with the AppCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetAppCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.AppCategories) {
		return nil, false
	}
	return o.AppCategories, true
}

// HasAppCategories returns a boolean if a field has been set.
func (o *Service) HasAppCategories() bool {
	if o != nil && !IsNil(o.AppCategories) {
		return true
	}

	return false
}

// SetAppCategories gets a reference to the given []string and assigns it to the AppCategories field.
func (o *Service) SetAppCategories(v []string) {
	o.AppCategories = v
}

// GetAppSubcategories returns the AppSubcategories field value if set, zero value otherwise.
func (o *Service) GetAppSubcategories() []string {
	if o == nil || IsNil(o.AppSubcategories) {
		var ret []string
		return ret
	}
	return o.AppSubcategories
}

// GetAppSubcategoriesOk returns a tuple with the AppSubcategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetAppSubcategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.AppSubcategories) {
		return nil, false
	}
	return o.AppSubcategories, true
}

// HasAppSubcategories returns a boolean if a field has been set.
func (o *Service) HasAppSubcategories() bool {
	if o != nil && !IsNil(o.AppSubcategories) {
		return true
	}

	return false
}

// SetAppSubcategories gets a reference to the given []string and assigns it to the AppSubcategories field.
func (o *Service) SetAppSubcategories(v []string) {
	o.AppSubcategories = v
}

// GetApps returns the Apps field value if set, zero value otherwise.
func (o *Service) GetApps() []string {
	if o == nil || IsNil(o.Apps) {
		var ret []string
		return ret
	}
	return o.Apps
}

// GetAppsOk returns a tuple with the Apps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetAppsOk() ([]string, bool) {
	if o == nil || IsNil(o.Apps) {
		return nil, false
	}
	return o.Apps, true
}

// HasApps returns a boolean if a field has been set.
func (o *Service) HasApps() bool {
	if o != nil && !IsNil(o.Apps) {
		return true
	}

	return false
}

// SetApps gets a reference to the given []string and assigns it to the Apps field.
func (o *Service) SetApps(v []string) {
	o.Apps = v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *Service) GetCreatedTime() int32 {
	if o == nil || IsNil(o.CreatedTime) {
		var ret int32
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetCreatedTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *Service) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given int32 and assigns it to the CreatedTime field.
func (o *Service) SetCreatedTime(v int32) {
	o.CreatedTime = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Service) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Service) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Service) SetDescription(v string) {
	o.Description = &v
}

// GetDscp returns the Dscp field value if set, zero value otherwise.
func (o *Service) GetDscp() int32 {
	if o == nil || IsNil(o.Dscp) {
		var ret int32
		return ret
	}
	return *o.Dscp
}

// GetDscpOk returns a tuple with the Dscp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetDscpOk() (*int32, bool) {
	if o == nil || IsNil(o.Dscp) {
		return nil, false
	}
	return o.Dscp, true
}

// HasDscp returns a boolean if a field has been set.
func (o *Service) HasDscp() bool {
	if o != nil && !IsNil(o.Dscp) {
		return true
	}

	return false
}

// SetDscp gets a reference to the given int32 and assigns it to the Dscp field.
func (o *Service) SetDscp(v int32) {
	o.Dscp = &v
}

// GetFailoverPolicy returns the FailoverPolicy field value if set, zero value otherwise.
func (o *Service) GetFailoverPolicy() ServiceFailoverPolicy {
	if o == nil || IsNil(o.FailoverPolicy) {
		var ret ServiceFailoverPolicy
		return ret
	}
	return *o.FailoverPolicy
}

// GetFailoverPolicyOk returns a tuple with the FailoverPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetFailoverPolicyOk() (*ServiceFailoverPolicy, bool) {
	if o == nil || IsNil(o.FailoverPolicy) {
		return nil, false
	}
	return o.FailoverPolicy, true
}

// HasFailoverPolicy returns a boolean if a field has been set.
func (o *Service) HasFailoverPolicy() bool {
	if o != nil && !IsNil(o.FailoverPolicy) {
		return true
	}

	return false
}

// SetFailoverPolicy gets a reference to the given ServiceFailoverPolicy and assigns it to the FailoverPolicy field.
func (o *Service) SetFailoverPolicy(v ServiceFailoverPolicy) {
	o.FailoverPolicy = &v
}

// GetHostnames returns the Hostnames field value if set, zero value otherwise.
func (o *Service) GetHostnames() []string {
	if o == nil || IsNil(o.Hostnames) {
		var ret []string
		return ret
	}
	return o.Hostnames
}

// GetHostnamesOk returns a tuple with the Hostnames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetHostnamesOk() ([]string, bool) {
	if o == nil || IsNil(o.Hostnames) {
		return nil, false
	}
	return o.Hostnames, true
}

// HasHostnames returns a boolean if a field has been set.
func (o *Service) HasHostnames() bool {
	if o != nil && !IsNil(o.Hostnames) {
		return true
	}

	return false
}

// SetHostnames gets a reference to the given []string and assigns it to the Hostnames field.
func (o *Service) SetHostnames(v []string) {
	o.Hostnames = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Service) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Service) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Service) SetId(v string) {
	o.Id = &v
}

// GetMaxJitter returns the MaxJitter field value if set, zero value otherwise.
func (o *Service) GetMaxJitter() int32 {
	if o == nil || IsNil(o.MaxJitter) {
		var ret int32
		return ret
	}
	return *o.MaxJitter
}

// GetMaxJitterOk returns a tuple with the MaxJitter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetMaxJitterOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxJitter) {
		return nil, false
	}
	return o.MaxJitter, true
}

// HasMaxJitter returns a boolean if a field has been set.
func (o *Service) HasMaxJitter() bool {
	if o != nil && !IsNil(o.MaxJitter) {
		return true
	}

	return false
}

// SetMaxJitter gets a reference to the given int32 and assigns it to the MaxJitter field.
func (o *Service) SetMaxJitter(v int32) {
	o.MaxJitter = &v
}

// GetMaxLatency returns the MaxLatency field value if set, zero value otherwise.
func (o *Service) GetMaxLatency() int32 {
	if o == nil || IsNil(o.MaxLatency) {
		var ret int32
		return ret
	}
	return *o.MaxLatency
}

// GetMaxLatencyOk returns a tuple with the MaxLatency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetMaxLatencyOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxLatency) {
		return nil, false
	}
	return o.MaxLatency, true
}

// HasMaxLatency returns a boolean if a field has been set.
func (o *Service) HasMaxLatency() bool {
	if o != nil && !IsNil(o.MaxLatency) {
		return true
	}

	return false
}

// SetMaxLatency gets a reference to the given int32 and assigns it to the MaxLatency field.
func (o *Service) SetMaxLatency(v int32) {
	o.MaxLatency = &v
}

// GetMaxLoss returns the MaxLoss field value if set, zero value otherwise.
func (o *Service) GetMaxLoss() int32 {
	if o == nil || IsNil(o.MaxLoss) {
		var ret int32
		return ret
	}
	return *o.MaxLoss
}

// GetMaxLossOk returns a tuple with the MaxLoss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetMaxLossOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxLoss) {
		return nil, false
	}
	return o.MaxLoss, true
}

// HasMaxLoss returns a boolean if a field has been set.
func (o *Service) HasMaxLoss() bool {
	if o != nil && !IsNil(o.MaxLoss) {
		return true
	}

	return false
}

// SetMaxLoss gets a reference to the given int32 and assigns it to the MaxLoss field.
func (o *Service) SetMaxLoss(v int32) {
	o.MaxLoss = &v
}

// GetModifiedTime returns the ModifiedTime field value if set, zero value otherwise.
func (o *Service) GetModifiedTime() int32 {
	if o == nil || IsNil(o.ModifiedTime) {
		var ret int32
		return ret
	}
	return *o.ModifiedTime
}

// GetModifiedTimeOk returns a tuple with the ModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetModifiedTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.ModifiedTime) {
		return nil, false
	}
	return o.ModifiedTime, true
}

// HasModifiedTime returns a boolean if a field has been set.
func (o *Service) HasModifiedTime() bool {
	if o != nil && !IsNil(o.ModifiedTime) {
		return true
	}

	return false
}

// SetModifiedTime gets a reference to the given int32 and assigns it to the ModifiedTime field.
func (o *Service) SetModifiedTime(v int32) {
	o.ModifiedTime = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Service) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Service) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Service) SetName(v string) {
	o.Name = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *Service) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *Service) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *Service) SetOrgId(v string) {
	o.OrgId = &v
}

// GetSleEnabled returns the SleEnabled field value if set, zero value otherwise.
func (o *Service) GetSleEnabled() bool {
	if o == nil || IsNil(o.SleEnabled) {
		var ret bool
		return ret
	}
	return *o.SleEnabled
}

// GetSleEnabledOk returns a tuple with the SleEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetSleEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SleEnabled) {
		return nil, false
	}
	return o.SleEnabled, true
}

// HasSleEnabled returns a boolean if a field has been set.
func (o *Service) HasSleEnabled() bool {
	if o != nil && !IsNil(o.SleEnabled) {
		return true
	}

	return false
}

// SetSleEnabled gets a reference to the given bool and assigns it to the SleEnabled field.
func (o *Service) SetSleEnabled(v bool) {
	o.SleEnabled = &v
}

// GetSpecs returns the Specs field value if set, zero value otherwise.
func (o *Service) GetSpecs() []ServiceSpec {
	if o == nil || IsNil(o.Specs) {
		var ret []ServiceSpec
		return ret
	}
	return o.Specs
}

// GetSpecsOk returns a tuple with the Specs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetSpecsOk() ([]ServiceSpec, bool) {
	if o == nil || IsNil(o.Specs) {
		return nil, false
	}
	return o.Specs, true
}

// HasSpecs returns a boolean if a field has been set.
func (o *Service) HasSpecs() bool {
	if o != nil && !IsNil(o.Specs) {
		return true
	}

	return false
}

// SetSpecs gets a reference to the given []ServiceSpec and assigns it to the Specs field.
func (o *Service) SetSpecs(v []ServiceSpec) {
	o.Specs = v
}

// GetSsrRelaxedTcpStateEnforcement returns the SsrRelaxedTcpStateEnforcement field value if set, zero value otherwise.
func (o *Service) GetSsrRelaxedTcpStateEnforcement() bool {
	if o == nil || IsNil(o.SsrRelaxedTcpStateEnforcement) {
		var ret bool
		return ret
	}
	return *o.SsrRelaxedTcpStateEnforcement
}

// GetSsrRelaxedTcpStateEnforcementOk returns a tuple with the SsrRelaxedTcpStateEnforcement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetSsrRelaxedTcpStateEnforcementOk() (*bool, bool) {
	if o == nil || IsNil(o.SsrRelaxedTcpStateEnforcement) {
		return nil, false
	}
	return o.SsrRelaxedTcpStateEnforcement, true
}

// HasSsrRelaxedTcpStateEnforcement returns a boolean if a field has been set.
func (o *Service) HasSsrRelaxedTcpStateEnforcement() bool {
	if o != nil && !IsNil(o.SsrRelaxedTcpStateEnforcement) {
		return true
	}

	return false
}

// SetSsrRelaxedTcpStateEnforcement gets a reference to the given bool and assigns it to the SsrRelaxedTcpStateEnforcement field.
func (o *Service) SetSsrRelaxedTcpStateEnforcement(v bool) {
	o.SsrRelaxedTcpStateEnforcement = &v
}

// GetTrafficClass returns the TrafficClass field value if set, zero value otherwise.
func (o *Service) GetTrafficClass() ServiceTrafficClass {
	if o == nil || IsNil(o.TrafficClass) {
		var ret ServiceTrafficClass
		return ret
	}
	return *o.TrafficClass
}

// GetTrafficClassOk returns a tuple with the TrafficClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetTrafficClassOk() (*ServiceTrafficClass, bool) {
	if o == nil || IsNil(o.TrafficClass) {
		return nil, false
	}
	return o.TrafficClass, true
}

// HasTrafficClass returns a boolean if a field has been set.
func (o *Service) HasTrafficClass() bool {
	if o != nil && !IsNil(o.TrafficClass) {
		return true
	}

	return false
}

// SetTrafficClass gets a reference to the given ServiceTrafficClass and assigns it to the TrafficClass field.
func (o *Service) SetTrafficClass(v ServiceTrafficClass) {
	o.TrafficClass = &v
}

// GetTrafficType returns the TrafficType field value if set, zero value otherwise.
func (o *Service) GetTrafficType() string {
	if o == nil || IsNil(o.TrafficType) {
		var ret string
		return ret
	}
	return *o.TrafficType
}

// GetTrafficTypeOk returns a tuple with the TrafficType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetTrafficTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TrafficType) {
		return nil, false
	}
	return o.TrafficType, true
}

// HasTrafficType returns a boolean if a field has been set.
func (o *Service) HasTrafficType() bool {
	if o != nil && !IsNil(o.TrafficType) {
		return true
	}

	return false
}

// SetTrafficType gets a reference to the given string and assigns it to the TrafficType field.
func (o *Service) SetTrafficType(v string) {
	o.TrafficType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Service) GetType() ServiceType {
	if o == nil || IsNil(o.Type) {
		var ret ServiceType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetTypeOk() (*ServiceType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Service) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ServiceType and assigns it to the Type field.
func (o *Service) SetType(v ServiceType) {
	o.Type = &v
}

// GetUrls returns the Urls field value if set, zero value otherwise.
func (o *Service) GetUrls() []string {
	if o == nil || IsNil(o.Urls) {
		var ret []string
		return ret
	}
	return o.Urls
}

// GetUrlsOk returns a tuple with the Urls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetUrlsOk() ([]string, bool) {
	if o == nil || IsNil(o.Urls) {
		return nil, false
	}
	return o.Urls, true
}

// HasUrls returns a boolean if a field has been set.
func (o *Service) HasUrls() bool {
	if o != nil && !IsNil(o.Urls) {
		return true
	}

	return false
}

// SetUrls gets a reference to the given []string and assigns it to the Urls field.
func (o *Service) SetUrls(v []string) {
	o.Urls = v
}

func (o Service) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Service) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Addresses) {
		toSerialize["addresses"] = o.Addresses
	}
	if !IsNil(o.AppCategories) {
		toSerialize["app_categories"] = o.AppCategories
	}
	if !IsNil(o.AppSubcategories) {
		toSerialize["app_subcategories"] = o.AppSubcategories
	}
	if !IsNil(o.Apps) {
		toSerialize["apps"] = o.Apps
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Dscp) {
		toSerialize["dscp"] = o.Dscp
	}
	if !IsNil(o.FailoverPolicy) {
		toSerialize["failover_policy"] = o.FailoverPolicy
	}
	if !IsNil(o.Hostnames) {
		toSerialize["hostnames"] = o.Hostnames
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MaxJitter) {
		toSerialize["max_jitter"] = o.MaxJitter
	}
	if !IsNil(o.MaxLatency) {
		toSerialize["max_latency"] = o.MaxLatency
	}
	if !IsNil(o.MaxLoss) {
		toSerialize["max_loss"] = o.MaxLoss
	}
	if !IsNil(o.ModifiedTime) {
		toSerialize["modified_time"] = o.ModifiedTime
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.SleEnabled) {
		toSerialize["sle_enabled"] = o.SleEnabled
	}
	if !IsNil(o.Specs) {
		toSerialize["specs"] = o.Specs
	}
	if !IsNil(o.SsrRelaxedTcpStateEnforcement) {
		toSerialize["ssr_relaxed_tcp_state_enforcement"] = o.SsrRelaxedTcpStateEnforcement
	}
	if !IsNil(o.TrafficClass) {
		toSerialize["traffic_class"] = o.TrafficClass
	}
	if !IsNil(o.TrafficType) {
		toSerialize["traffic_type"] = o.TrafficType
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Urls) {
		toSerialize["urls"] = o.Urls
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Service) UnmarshalJSON(data []byte) (err error) {
	varService := _Service{}

	err = json.Unmarshal(data, &varService)

	if err != nil {
		return err
	}

	*o = Service(varService)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "addresses")
		delete(additionalProperties, "app_categories")
		delete(additionalProperties, "app_subcategories")
		delete(additionalProperties, "apps")
		delete(additionalProperties, "created_time")
		delete(additionalProperties, "description")
		delete(additionalProperties, "dscp")
		delete(additionalProperties, "failover_policy")
		delete(additionalProperties, "hostnames")
		delete(additionalProperties, "id")
		delete(additionalProperties, "max_jitter")
		delete(additionalProperties, "max_latency")
		delete(additionalProperties, "max_loss")
		delete(additionalProperties, "modified_time")
		delete(additionalProperties, "name")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "sle_enabled")
		delete(additionalProperties, "specs")
		delete(additionalProperties, "ssr_relaxed_tcp_state_enforcement")
		delete(additionalProperties, "traffic_class")
		delete(additionalProperties, "traffic_type")
		delete(additionalProperties, "type")
		delete(additionalProperties, "urls")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableService struct {
	value *Service
	isSet bool
}

func (v NullableService) Get() *Service {
	return v.value
}

func (v *NullableService) Set(val *Service) {
	v.value = val
	v.isSet = true
}

func (v NullableService) IsSet() bool {
	return v.isSet
}

func (v *NullableService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableService(val *Service) *NullableService {
	return &NullableService{value: val, isSet: true}
}

func (v NullableService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


