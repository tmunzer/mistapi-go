/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the ResponseConfigHistorySearchItemWlan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseConfigHistorySearchItemWlan{}

// ResponseConfigHistorySearchItemWlan struct for ResponseConfigHistorySearchItemWlan
type ResponseConfigHistorySearchItemWlan struct {
	Auth string `json:"auth"`
	Bands []string `json:"bands,omitempty"`
	Id string `json:"id"`
	Ssid string `json:"ssid"`
	VlanIds []string `json:"vlan_ids,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ResponseConfigHistorySearchItemWlan ResponseConfigHistorySearchItemWlan

// NewResponseConfigHistorySearchItemWlan instantiates a new ResponseConfigHistorySearchItemWlan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseConfigHistorySearchItemWlan(auth string, id string, ssid string) *ResponseConfigHistorySearchItemWlan {
	this := ResponseConfigHistorySearchItemWlan{}
	this.Auth = auth
	this.Id = id
	this.Ssid = ssid
	return &this
}

// NewResponseConfigHistorySearchItemWlanWithDefaults instantiates a new ResponseConfigHistorySearchItemWlan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseConfigHistorySearchItemWlanWithDefaults() *ResponseConfigHistorySearchItemWlan {
	this := ResponseConfigHistorySearchItemWlan{}
	return &this
}

// GetAuth returns the Auth field value
func (o *ResponseConfigHistorySearchItemWlan) GetAuth() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Auth
}

// GetAuthOk returns a tuple with the Auth field value
// and a boolean to check if the value has been set.
func (o *ResponseConfigHistorySearchItemWlan) GetAuthOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Auth, true
}

// SetAuth sets field value
func (o *ResponseConfigHistorySearchItemWlan) SetAuth(v string) {
	o.Auth = v
}

// GetBands returns the Bands field value if set, zero value otherwise.
func (o *ResponseConfigHistorySearchItemWlan) GetBands() []string {
	if o == nil || IsNil(o.Bands) {
		var ret []string
		return ret
	}
	return o.Bands
}

// GetBandsOk returns a tuple with the Bands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseConfigHistorySearchItemWlan) GetBandsOk() ([]string, bool) {
	if o == nil || IsNil(o.Bands) {
		return nil, false
	}
	return o.Bands, true
}

// HasBands returns a boolean if a field has been set.
func (o *ResponseConfigHistorySearchItemWlan) HasBands() bool {
	if o != nil && !IsNil(o.Bands) {
		return true
	}

	return false
}

// SetBands gets a reference to the given []string and assigns it to the Bands field.
func (o *ResponseConfigHistorySearchItemWlan) SetBands(v []string) {
	o.Bands = v
}

// GetId returns the Id field value
func (o *ResponseConfigHistorySearchItemWlan) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ResponseConfigHistorySearchItemWlan) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ResponseConfigHistorySearchItemWlan) SetId(v string) {
	o.Id = v
}

// GetSsid returns the Ssid field value
func (o *ResponseConfigHistorySearchItemWlan) GetSsid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ssid
}

// GetSsidOk returns a tuple with the Ssid field value
// and a boolean to check if the value has been set.
func (o *ResponseConfigHistorySearchItemWlan) GetSsidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ssid, true
}

// SetSsid sets field value
func (o *ResponseConfigHistorySearchItemWlan) SetSsid(v string) {
	o.Ssid = v
}

// GetVlanIds returns the VlanIds field value if set, zero value otherwise.
func (o *ResponseConfigHistorySearchItemWlan) GetVlanIds() []string {
	if o == nil || IsNil(o.VlanIds) {
		var ret []string
		return ret
	}
	return o.VlanIds
}

// GetVlanIdsOk returns a tuple with the VlanIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseConfigHistorySearchItemWlan) GetVlanIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.VlanIds) {
		return nil, false
	}
	return o.VlanIds, true
}

// HasVlanIds returns a boolean if a field has been set.
func (o *ResponseConfigHistorySearchItemWlan) HasVlanIds() bool {
	if o != nil && !IsNil(o.VlanIds) {
		return true
	}

	return false
}

// SetVlanIds gets a reference to the given []string and assigns it to the VlanIds field.
func (o *ResponseConfigHistorySearchItemWlan) SetVlanIds(v []string) {
	o.VlanIds = v
}

func (o ResponseConfigHistorySearchItemWlan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseConfigHistorySearchItemWlan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["auth"] = o.Auth
	if !IsNil(o.Bands) {
		toSerialize["bands"] = o.Bands
	}
	toSerialize["id"] = o.Id
	toSerialize["ssid"] = o.Ssid
	if !IsNil(o.VlanIds) {
		toSerialize["vlan_ids"] = o.VlanIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResponseConfigHistorySearchItemWlan) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"auth",
		"id",
		"ssid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResponseConfigHistorySearchItemWlan := _ResponseConfigHistorySearchItemWlan{}

	err = json.Unmarshal(data, &varResponseConfigHistorySearchItemWlan)

	if err != nil {
		return err
	}

	*o = ResponseConfigHistorySearchItemWlan(varResponseConfigHistorySearchItemWlan)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "auth")
		delete(additionalProperties, "bands")
		delete(additionalProperties, "id")
		delete(additionalProperties, "ssid")
		delete(additionalProperties, "vlan_ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResponseConfigHistorySearchItemWlan struct {
	value *ResponseConfigHistorySearchItemWlan
	isSet bool
}

func (v NullableResponseConfigHistorySearchItemWlan) Get() *ResponseConfigHistorySearchItemWlan {
	return v.value
}

func (v *NullableResponseConfigHistorySearchItemWlan) Set(val *ResponseConfigHistorySearchItemWlan) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseConfigHistorySearchItemWlan) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseConfigHistorySearchItemWlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseConfigHistorySearchItemWlan(val *ResponseConfigHistorySearchItemWlan) *NullableResponseConfigHistorySearchItemWlan {
	return &NullableResponseConfigHistorySearchItemWlan{value: val, isSet: true}
}

func (v NullableResponseConfigHistorySearchItemWlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseConfigHistorySearchItemWlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


