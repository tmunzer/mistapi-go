/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the RemoteSyslog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoteSyslog{}

// RemoteSyslog struct for RemoteSyslog
type RemoteSyslog struct {
	Archive *RemoteSyslogArchive `json:"archive,omitempty"`
	Console *RemoteSyslogConsole `json:"console,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Files []RemoteSyslogFileConfig `json:"files,omitempty"`
	// if source_address is configured, will use the vlan firstly otherwise use source_ip
	Network *string `json:"network,omitempty"`
	SendToAllServers *bool `json:"send_to_all_servers,omitempty"`
	Servers []RemoteSyslogServer `json:"servers,omitempty"`
	TimeFormat *RemoteSyslogTimeFormat `json:"time_format,omitempty"`
	Users []RemoteSyslogUser `json:"users,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RemoteSyslog RemoteSyslog

// NewRemoteSyslog instantiates a new RemoteSyslog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteSyslog() *RemoteSyslog {
	this := RemoteSyslog{}
	var enabled bool = false
	this.Enabled = &enabled
	var sendToAllServers bool = false
	this.SendToAllServers = &sendToAllServers
	return &this
}

// NewRemoteSyslogWithDefaults instantiates a new RemoteSyslog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteSyslogWithDefaults() *RemoteSyslog {
	this := RemoteSyslog{}
	var enabled bool = false
	this.Enabled = &enabled
	var sendToAllServers bool = false
	this.SendToAllServers = &sendToAllServers
	return &this
}

// GetArchive returns the Archive field value if set, zero value otherwise.
func (o *RemoteSyslog) GetArchive() RemoteSyslogArchive {
	if o == nil || IsNil(o.Archive) {
		var ret RemoteSyslogArchive
		return ret
	}
	return *o.Archive
}

// GetArchiveOk returns a tuple with the Archive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslog) GetArchiveOk() (*RemoteSyslogArchive, bool) {
	if o == nil || IsNil(o.Archive) {
		return nil, false
	}
	return o.Archive, true
}

// HasArchive returns a boolean if a field has been set.
func (o *RemoteSyslog) HasArchive() bool {
	if o != nil && !IsNil(o.Archive) {
		return true
	}

	return false
}

// SetArchive gets a reference to the given RemoteSyslogArchive and assigns it to the Archive field.
func (o *RemoteSyslog) SetArchive(v RemoteSyslogArchive) {
	o.Archive = &v
}

// GetConsole returns the Console field value if set, zero value otherwise.
func (o *RemoteSyslog) GetConsole() RemoteSyslogConsole {
	if o == nil || IsNil(o.Console) {
		var ret RemoteSyslogConsole
		return ret
	}
	return *o.Console
}

// GetConsoleOk returns a tuple with the Console field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslog) GetConsoleOk() (*RemoteSyslogConsole, bool) {
	if o == nil || IsNil(o.Console) {
		return nil, false
	}
	return o.Console, true
}

// HasConsole returns a boolean if a field has been set.
func (o *RemoteSyslog) HasConsole() bool {
	if o != nil && !IsNil(o.Console) {
		return true
	}

	return false
}

// SetConsole gets a reference to the given RemoteSyslogConsole and assigns it to the Console field.
func (o *RemoteSyslog) SetConsole(v RemoteSyslogConsole) {
	o.Console = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RemoteSyslog) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslog) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RemoteSyslog) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RemoteSyslog) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *RemoteSyslog) GetFiles() []RemoteSyslogFileConfig {
	if o == nil || IsNil(o.Files) {
		var ret []RemoteSyslogFileConfig
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslog) GetFilesOk() ([]RemoteSyslogFileConfig, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *RemoteSyslog) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []RemoteSyslogFileConfig and assigns it to the Files field.
func (o *RemoteSyslog) SetFiles(v []RemoteSyslogFileConfig) {
	o.Files = v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *RemoteSyslog) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslog) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *RemoteSyslog) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *RemoteSyslog) SetNetwork(v string) {
	o.Network = &v
}

// GetSendToAllServers returns the SendToAllServers field value if set, zero value otherwise.
func (o *RemoteSyslog) GetSendToAllServers() bool {
	if o == nil || IsNil(o.SendToAllServers) {
		var ret bool
		return ret
	}
	return *o.SendToAllServers
}

// GetSendToAllServersOk returns a tuple with the SendToAllServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslog) GetSendToAllServersOk() (*bool, bool) {
	if o == nil || IsNil(o.SendToAllServers) {
		return nil, false
	}
	return o.SendToAllServers, true
}

// HasSendToAllServers returns a boolean if a field has been set.
func (o *RemoteSyslog) HasSendToAllServers() bool {
	if o != nil && !IsNil(o.SendToAllServers) {
		return true
	}

	return false
}

// SetSendToAllServers gets a reference to the given bool and assigns it to the SendToAllServers field.
func (o *RemoteSyslog) SetSendToAllServers(v bool) {
	o.SendToAllServers = &v
}

// GetServers returns the Servers field value if set, zero value otherwise.
func (o *RemoteSyslog) GetServers() []RemoteSyslogServer {
	if o == nil || IsNil(o.Servers) {
		var ret []RemoteSyslogServer
		return ret
	}
	return o.Servers
}

// GetServersOk returns a tuple with the Servers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslog) GetServersOk() ([]RemoteSyslogServer, bool) {
	if o == nil || IsNil(o.Servers) {
		return nil, false
	}
	return o.Servers, true
}

// HasServers returns a boolean if a field has been set.
func (o *RemoteSyslog) HasServers() bool {
	if o != nil && !IsNil(o.Servers) {
		return true
	}

	return false
}

// SetServers gets a reference to the given []RemoteSyslogServer and assigns it to the Servers field.
func (o *RemoteSyslog) SetServers(v []RemoteSyslogServer) {
	o.Servers = v
}

// GetTimeFormat returns the TimeFormat field value if set, zero value otherwise.
func (o *RemoteSyslog) GetTimeFormat() RemoteSyslogTimeFormat {
	if o == nil || IsNil(o.TimeFormat) {
		var ret RemoteSyslogTimeFormat
		return ret
	}
	return *o.TimeFormat
}

// GetTimeFormatOk returns a tuple with the TimeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslog) GetTimeFormatOk() (*RemoteSyslogTimeFormat, bool) {
	if o == nil || IsNil(o.TimeFormat) {
		return nil, false
	}
	return o.TimeFormat, true
}

// HasTimeFormat returns a boolean if a field has been set.
func (o *RemoteSyslog) HasTimeFormat() bool {
	if o != nil && !IsNil(o.TimeFormat) {
		return true
	}

	return false
}

// SetTimeFormat gets a reference to the given RemoteSyslogTimeFormat and assigns it to the TimeFormat field.
func (o *RemoteSyslog) SetTimeFormat(v RemoteSyslogTimeFormat) {
	o.TimeFormat = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *RemoteSyslog) GetUsers() []RemoteSyslogUser {
	if o == nil || IsNil(o.Users) {
		var ret []RemoteSyslogUser
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslog) GetUsersOk() ([]RemoteSyslogUser, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *RemoteSyslog) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []RemoteSyslogUser and assigns it to the Users field.
func (o *RemoteSyslog) SetUsers(v []RemoteSyslogUser) {
	o.Users = v
}

func (o RemoteSyslog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoteSyslog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Archive) {
		toSerialize["archive"] = o.Archive
	}
	if !IsNil(o.Console) {
		toSerialize["console"] = o.Console
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.SendToAllServers) {
		toSerialize["send_to_all_servers"] = o.SendToAllServers
	}
	if !IsNil(o.Servers) {
		toSerialize["servers"] = o.Servers
	}
	if !IsNil(o.TimeFormat) {
		toSerialize["time_format"] = o.TimeFormat
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RemoteSyslog) UnmarshalJSON(data []byte) (err error) {
	varRemoteSyslog := _RemoteSyslog{}

	err = json.Unmarshal(data, &varRemoteSyslog)

	if err != nil {
		return err
	}

	*o = RemoteSyslog(varRemoteSyslog)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "archive")
		delete(additionalProperties, "console")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "files")
		delete(additionalProperties, "network")
		delete(additionalProperties, "send_to_all_servers")
		delete(additionalProperties, "servers")
		delete(additionalProperties, "time_format")
		delete(additionalProperties, "users")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRemoteSyslog struct {
	value *RemoteSyslog
	isSet bool
}

func (v NullableRemoteSyslog) Get() *RemoteSyslog {
	return v.value
}

func (v *NullableRemoteSyslog) Set(val *RemoteSyslog) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteSyslog) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteSyslog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteSyslog(val *RemoteSyslog) *NullableRemoteSyslog {
	return &NullableRemoteSyslog{value: val, isSet: true}
}

func (v NullableRemoteSyslog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteSyslog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


