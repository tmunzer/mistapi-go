/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// SiteAppsCountDistinct the model 'SiteAppsCountDistinct'
type SiteAppsCountDistinct string

// List of site_apps_count_distinct
const (
	SITEAPPSCOUNTDISTINCT_EMPTY SiteAppsCountDistinct = ""
	SITEAPPSCOUNTDISTINCT_AP SiteAppsCountDistinct = "ap"
	SITEAPPSCOUNTDISTINCT_WCID SiteAppsCountDistinct = "wcid"
	SITEAPPSCOUNTDISTINCT_SSID SiteAppsCountDistinct = "ssid"
	SITEAPPSCOUNTDISTINCT_WLAN_ID_APP SiteAppsCountDistinct = "wlan_id app"
	SITEAPPSCOUNTDISTINCT_DEVICE_MAC SiteAppsCountDistinct = "device_mac"
	SITEAPPSCOUNTDISTINCT_SRC_IP SiteAppsCountDistinct = "src_ip"
	SITEAPPSCOUNTDISTINCT_PORT_ID SiteAppsCountDistinct = "port_id"
	SITEAPPSCOUNTDISTINCT_APP SiteAppsCountDistinct = "app"
	SITEAPPSCOUNTDISTINCT_CATEGORY SiteAppsCountDistinct = "category"
	SITEAPPSCOUNTDISTINCT_SERVICE SiteAppsCountDistinct = "service"
)

// All allowed values of SiteAppsCountDistinct enum
var AllowedSiteAppsCountDistinctEnumValues = []SiteAppsCountDistinct{
	"",
	"ap",
	"wcid",
	"ssid",
	"wlan_id app",
	"device_mac",
	"src_ip",
	"port_id",
	"app",
	"category",
	"service",
}

func (v *SiteAppsCountDistinct) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SiteAppsCountDistinct(value)
	for _, existing := range AllowedSiteAppsCountDistinctEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SiteAppsCountDistinct", value)
}

// NewSiteAppsCountDistinctFromValue returns a pointer to a valid SiteAppsCountDistinct
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSiteAppsCountDistinctFromValue(v string) (*SiteAppsCountDistinct, error) {
	ev := SiteAppsCountDistinct(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SiteAppsCountDistinct: valid values are %v", v, AllowedSiteAppsCountDistinctEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SiteAppsCountDistinct) IsValid() bool {
	for _, existing := range AllowedSiteAppsCountDistinctEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to site_apps_count_distinct value
func (v SiteAppsCountDistinct) Ptr() *SiteAppsCountDistinct {
	return &v
}

type NullableSiteAppsCountDistinct struct {
	value *SiteAppsCountDistinct
	isSet bool
}

func (v NullableSiteAppsCountDistinct) Get() *SiteAppsCountDistinct {
	return v.value
}

func (v *NullableSiteAppsCountDistinct) Set(val *SiteAppsCountDistinct) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteAppsCountDistinct) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteAppsCountDistinct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteAppsCountDistinct(val *SiteAppsCountDistinct) *NullableSiteAppsCountDistinct {
	return &NullableSiteAppsCountDistinct{value: val, isSet: true}
}

func (v NullableSiteAppsCountDistinct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteAppsCountDistinct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

