/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the ModelSwitch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelSwitch{}

// ModelSwitch Switch Configuration. You can configure `port_usages` and `networks` settings at the device level, but most of the time it's better use the Site Setting to achieve better consistency and be able to re-use the same settings across switches entries defined here will \"replace\" those defined in Site Setting/Network Template
type ModelSwitch struct {
	AclPolicies []AclPolicy `json:"acl_policies,omitempty"`
	// ACL Tags to identify traffic source or destination. Key name is the tag name
	AclTags *map[string]AclTag `json:"acl_tags,omitempty"`
	// additional CLI commands to append to the generated Junos config  **Note**: no check is done
	AdditionalConfigCmds []string `json:"additional_config_cmds,omitempty"`
	CreatedTime *float32 `json:"created_time,omitempty"`
	DeviceprofileId *string `json:"deviceprofile_id,omitempty"`
	DhcpConfig *DhcpdConfigs `json:"dhcp_config,omitempty"`
	DhcpSnooping *DhcpSnooping `json:"dhcp_snooping,omitempty"`
	// for a claimed switch, we control the configs by default. This option (disables the behavior)
	DisableAutoConfig *bool `json:"disable_auto_config,omitempty"`
	// Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
	DnsServers []string `json:"dns_servers,omitempty"`
	// Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
	DnsSuffix []string `json:"dns_suffix,omitempty"`
	EvpnConfig *EvpnConfig `json:"evpn_config,omitempty"`
	ExtraRoutes *map[string]ExtraRouteProperties `json:"extra_routes,omitempty"`
	// Property key is the destination CIDR (e.g. \"2a02:1234:420a:10c9::/64\")
	ExtraRoutes6 *map[string]ExtraRoute6Properties `json:"extra_routes6,omitempty"`
	Id *string `json:"id,omitempty"`
	Image1Url NullableString `json:"image1_url,omitempty"`
	Image2Url NullableString `json:"image2_url,omitempty"`
	Image3Url NullableString `json:"image3_url,omitempty"`
	IpConfig *JunosIpConfig `json:"ip_config,omitempty"`
	// for an adopted switch, we donâ€™t overwrite their existing configs automatically
	Managed *bool `json:"managed,omitempty"`
	ModifiedTime *float32 `json:"modified_time,omitempty"`
	Name *string `json:"name,omitempty"`
	// Property key is network name
	Networks *map[string]SwitchNetwork `json:"networks,omitempty"`
	Notes *string `json:"notes,omitempty"`
	// list of NTP servers specific to this device. By default, those in Site Settings will be used
	NtpServers []string `json:"ntp_servers,omitempty"`
	OobIpConfig *JunosOobIpConfigs `json:"oob_ip_config,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	OspfConfig *OspfConfig `json:"ospf_config,omitempty"`
	// Property key is the network name
	OtherIpConfigs *map[string]JunosOtherIpConfigs `json:"other_ip_configs,omitempty"`
	// Property key is the port name or range (e.g. \"ge-0/0/0-10\")
	PortConfig *map[string]JunosPortConfig `json:"port_config,omitempty"`
	// Property key is the port mirroring instance name port_mirroring can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
	PortMirroring *map[string]SwitchPortMirroring `json:"port_mirroring,omitempty"`
	PortUsages *map[string]SwitchPortUsage `json:"port_usages,omitempty"`
	RadiusConfig *RadiusConfig `json:"radius_config,omitempty"`
	Role *SwitchRole `json:"role,omitempty"`
	// used for OSPF / BGP / EVPN
	RouterId *string `json:"router_id,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	StpConfig *SwitchStpConfig `json:"stp_config,omitempty"`
	SwitchMgmt *SwitchSwitchMgmt `json:"switch_mgmt,omitempty"`
	// whether to use it for snmp / syslog / tacplus / radius
	UseRouterIdAsSourceIp *bool `json:"use_router_id_as_source_ip,omitempty"`
	// a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
	Vars *map[string]string `json:"vars,omitempty"`
	VirtualChassis *SwitchVirtualChassis `json:"virtual_chassis,omitempty"`
	VrfConfig *VrfConfig `json:"vrf_config,omitempty"`
	VrrpConfig *VrrpConfig `json:"vrrp_config,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelSwitch ModelSwitch

// NewModelSwitch instantiates a new ModelSwitch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelSwitch() *ModelSwitch {
	this := ModelSwitch{}
	var disableAutoConfig bool = false
	this.DisableAutoConfig = &disableAutoConfig
	var managed bool = false
	this.Managed = &managed
	var role SwitchRole = SWITCHROLE_ACCESS
	this.Role = &role
	var useRouterIdAsSourceIp bool = false
	this.UseRouterIdAsSourceIp = &useRouterIdAsSourceIp
	return &this
}

// NewModelSwitchWithDefaults instantiates a new ModelSwitch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelSwitchWithDefaults() *ModelSwitch {
	this := ModelSwitch{}
	var disableAutoConfig bool = false
	this.DisableAutoConfig = &disableAutoConfig
	var managed bool = false
	this.Managed = &managed
	var role SwitchRole = SWITCHROLE_ACCESS
	this.Role = &role
	var useRouterIdAsSourceIp bool = false
	this.UseRouterIdAsSourceIp = &useRouterIdAsSourceIp
	return &this
}

// GetAclPolicies returns the AclPolicies field value if set, zero value otherwise.
func (o *ModelSwitch) GetAclPolicies() []AclPolicy {
	if o == nil || IsNil(o.AclPolicies) {
		var ret []AclPolicy
		return ret
	}
	return o.AclPolicies
}

// GetAclPoliciesOk returns a tuple with the AclPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetAclPoliciesOk() ([]AclPolicy, bool) {
	if o == nil || IsNil(o.AclPolicies) {
		return nil, false
	}
	return o.AclPolicies, true
}

// HasAclPolicies returns a boolean if a field has been set.
func (o *ModelSwitch) HasAclPolicies() bool {
	if o != nil && !IsNil(o.AclPolicies) {
		return true
	}

	return false
}

// SetAclPolicies gets a reference to the given []AclPolicy and assigns it to the AclPolicies field.
func (o *ModelSwitch) SetAclPolicies(v []AclPolicy) {
	o.AclPolicies = v
}

// GetAclTags returns the AclTags field value if set, zero value otherwise.
func (o *ModelSwitch) GetAclTags() map[string]AclTag {
	if o == nil || IsNil(o.AclTags) {
		var ret map[string]AclTag
		return ret
	}
	return *o.AclTags
}

// GetAclTagsOk returns a tuple with the AclTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetAclTagsOk() (*map[string]AclTag, bool) {
	if o == nil || IsNil(o.AclTags) {
		return nil, false
	}
	return o.AclTags, true
}

// HasAclTags returns a boolean if a field has been set.
func (o *ModelSwitch) HasAclTags() bool {
	if o != nil && !IsNil(o.AclTags) {
		return true
	}

	return false
}

// SetAclTags gets a reference to the given map[string]AclTag and assigns it to the AclTags field.
func (o *ModelSwitch) SetAclTags(v map[string]AclTag) {
	o.AclTags = &v
}

// GetAdditionalConfigCmds returns the AdditionalConfigCmds field value if set, zero value otherwise.
func (o *ModelSwitch) GetAdditionalConfigCmds() []string {
	if o == nil || IsNil(o.AdditionalConfigCmds) {
		var ret []string
		return ret
	}
	return o.AdditionalConfigCmds
}

// GetAdditionalConfigCmdsOk returns a tuple with the AdditionalConfigCmds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetAdditionalConfigCmdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AdditionalConfigCmds) {
		return nil, false
	}
	return o.AdditionalConfigCmds, true
}

// HasAdditionalConfigCmds returns a boolean if a field has been set.
func (o *ModelSwitch) HasAdditionalConfigCmds() bool {
	if o != nil && !IsNil(o.AdditionalConfigCmds) {
		return true
	}

	return false
}

// SetAdditionalConfigCmds gets a reference to the given []string and assigns it to the AdditionalConfigCmds field.
func (o *ModelSwitch) SetAdditionalConfigCmds(v []string) {
	o.AdditionalConfigCmds = v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *ModelSwitch) GetCreatedTime() float32 {
	if o == nil || IsNil(o.CreatedTime) {
		var ret float32
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetCreatedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *ModelSwitch) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given float32 and assigns it to the CreatedTime field.
func (o *ModelSwitch) SetCreatedTime(v float32) {
	o.CreatedTime = &v
}

// GetDeviceprofileId returns the DeviceprofileId field value if set, zero value otherwise.
func (o *ModelSwitch) GetDeviceprofileId() string {
	if o == nil || IsNil(o.DeviceprofileId) {
		var ret string
		return ret
	}
	return *o.DeviceprofileId
}

// GetDeviceprofileIdOk returns a tuple with the DeviceprofileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetDeviceprofileIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceprofileId) {
		return nil, false
	}
	return o.DeviceprofileId, true
}

// HasDeviceprofileId returns a boolean if a field has been set.
func (o *ModelSwitch) HasDeviceprofileId() bool {
	if o != nil && !IsNil(o.DeviceprofileId) {
		return true
	}

	return false
}

// SetDeviceprofileId gets a reference to the given string and assigns it to the DeviceprofileId field.
func (o *ModelSwitch) SetDeviceprofileId(v string) {
	o.DeviceprofileId = &v
}

// GetDhcpConfig returns the DhcpConfig field value if set, zero value otherwise.
func (o *ModelSwitch) GetDhcpConfig() DhcpdConfigs {
	if o == nil || IsNil(o.DhcpConfig) {
		var ret DhcpdConfigs
		return ret
	}
	return *o.DhcpConfig
}

// GetDhcpConfigOk returns a tuple with the DhcpConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetDhcpConfigOk() (*DhcpdConfigs, bool) {
	if o == nil || IsNil(o.DhcpConfig) {
		return nil, false
	}
	return o.DhcpConfig, true
}

// HasDhcpConfig returns a boolean if a field has been set.
func (o *ModelSwitch) HasDhcpConfig() bool {
	if o != nil && !IsNil(o.DhcpConfig) {
		return true
	}

	return false
}

// SetDhcpConfig gets a reference to the given DhcpdConfigs and assigns it to the DhcpConfig field.
func (o *ModelSwitch) SetDhcpConfig(v DhcpdConfigs) {
	o.DhcpConfig = &v
}

// GetDhcpSnooping returns the DhcpSnooping field value if set, zero value otherwise.
func (o *ModelSwitch) GetDhcpSnooping() DhcpSnooping {
	if o == nil || IsNil(o.DhcpSnooping) {
		var ret DhcpSnooping
		return ret
	}
	return *o.DhcpSnooping
}

// GetDhcpSnoopingOk returns a tuple with the DhcpSnooping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetDhcpSnoopingOk() (*DhcpSnooping, bool) {
	if o == nil || IsNil(o.DhcpSnooping) {
		return nil, false
	}
	return o.DhcpSnooping, true
}

// HasDhcpSnooping returns a boolean if a field has been set.
func (o *ModelSwitch) HasDhcpSnooping() bool {
	if o != nil && !IsNil(o.DhcpSnooping) {
		return true
	}

	return false
}

// SetDhcpSnooping gets a reference to the given DhcpSnooping and assigns it to the DhcpSnooping field.
func (o *ModelSwitch) SetDhcpSnooping(v DhcpSnooping) {
	o.DhcpSnooping = &v
}

// GetDisableAutoConfig returns the DisableAutoConfig field value if set, zero value otherwise.
func (o *ModelSwitch) GetDisableAutoConfig() bool {
	if o == nil || IsNil(o.DisableAutoConfig) {
		var ret bool
		return ret
	}
	return *o.DisableAutoConfig
}

// GetDisableAutoConfigOk returns a tuple with the DisableAutoConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetDisableAutoConfigOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableAutoConfig) {
		return nil, false
	}
	return o.DisableAutoConfig, true
}

// HasDisableAutoConfig returns a boolean if a field has been set.
func (o *ModelSwitch) HasDisableAutoConfig() bool {
	if o != nil && !IsNil(o.DisableAutoConfig) {
		return true
	}

	return false
}

// SetDisableAutoConfig gets a reference to the given bool and assigns it to the DisableAutoConfig field.
func (o *ModelSwitch) SetDisableAutoConfig(v bool) {
	o.DisableAutoConfig = &v
}

// GetDnsServers returns the DnsServers field value if set, zero value otherwise.
func (o *ModelSwitch) GetDnsServers() []string {
	if o == nil || IsNil(o.DnsServers) {
		var ret []string
		return ret
	}
	return o.DnsServers
}

// GetDnsServersOk returns a tuple with the DnsServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetDnsServersOk() ([]string, bool) {
	if o == nil || IsNil(o.DnsServers) {
		return nil, false
	}
	return o.DnsServers, true
}

// HasDnsServers returns a boolean if a field has been set.
func (o *ModelSwitch) HasDnsServers() bool {
	if o != nil && !IsNil(o.DnsServers) {
		return true
	}

	return false
}

// SetDnsServers gets a reference to the given []string and assigns it to the DnsServers field.
func (o *ModelSwitch) SetDnsServers(v []string) {
	o.DnsServers = v
}

// GetDnsSuffix returns the DnsSuffix field value if set, zero value otherwise.
func (o *ModelSwitch) GetDnsSuffix() []string {
	if o == nil || IsNil(o.DnsSuffix) {
		var ret []string
		return ret
	}
	return o.DnsSuffix
}

// GetDnsSuffixOk returns a tuple with the DnsSuffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetDnsSuffixOk() ([]string, bool) {
	if o == nil || IsNil(o.DnsSuffix) {
		return nil, false
	}
	return o.DnsSuffix, true
}

// HasDnsSuffix returns a boolean if a field has been set.
func (o *ModelSwitch) HasDnsSuffix() bool {
	if o != nil && !IsNil(o.DnsSuffix) {
		return true
	}

	return false
}

// SetDnsSuffix gets a reference to the given []string and assigns it to the DnsSuffix field.
func (o *ModelSwitch) SetDnsSuffix(v []string) {
	o.DnsSuffix = v
}

// GetEvpnConfig returns the EvpnConfig field value if set, zero value otherwise.
func (o *ModelSwitch) GetEvpnConfig() EvpnConfig {
	if o == nil || IsNil(o.EvpnConfig) {
		var ret EvpnConfig
		return ret
	}
	return *o.EvpnConfig
}

// GetEvpnConfigOk returns a tuple with the EvpnConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetEvpnConfigOk() (*EvpnConfig, bool) {
	if o == nil || IsNil(o.EvpnConfig) {
		return nil, false
	}
	return o.EvpnConfig, true
}

// HasEvpnConfig returns a boolean if a field has been set.
func (o *ModelSwitch) HasEvpnConfig() bool {
	if o != nil && !IsNil(o.EvpnConfig) {
		return true
	}

	return false
}

// SetEvpnConfig gets a reference to the given EvpnConfig and assigns it to the EvpnConfig field.
func (o *ModelSwitch) SetEvpnConfig(v EvpnConfig) {
	o.EvpnConfig = &v
}

// GetExtraRoutes returns the ExtraRoutes field value if set, zero value otherwise.
func (o *ModelSwitch) GetExtraRoutes() map[string]ExtraRouteProperties {
	if o == nil || IsNil(o.ExtraRoutes) {
		var ret map[string]ExtraRouteProperties
		return ret
	}
	return *o.ExtraRoutes
}

// GetExtraRoutesOk returns a tuple with the ExtraRoutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetExtraRoutesOk() (*map[string]ExtraRouteProperties, bool) {
	if o == nil || IsNil(o.ExtraRoutes) {
		return nil, false
	}
	return o.ExtraRoutes, true
}

// HasExtraRoutes returns a boolean if a field has been set.
func (o *ModelSwitch) HasExtraRoutes() bool {
	if o != nil && !IsNil(o.ExtraRoutes) {
		return true
	}

	return false
}

// SetExtraRoutes gets a reference to the given map[string]ExtraRouteProperties and assigns it to the ExtraRoutes field.
func (o *ModelSwitch) SetExtraRoutes(v map[string]ExtraRouteProperties) {
	o.ExtraRoutes = &v
}

// GetExtraRoutes6 returns the ExtraRoutes6 field value if set, zero value otherwise.
func (o *ModelSwitch) GetExtraRoutes6() map[string]ExtraRoute6Properties {
	if o == nil || IsNil(o.ExtraRoutes6) {
		var ret map[string]ExtraRoute6Properties
		return ret
	}
	return *o.ExtraRoutes6
}

// GetExtraRoutes6Ok returns a tuple with the ExtraRoutes6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetExtraRoutes6Ok() (*map[string]ExtraRoute6Properties, bool) {
	if o == nil || IsNil(o.ExtraRoutes6) {
		return nil, false
	}
	return o.ExtraRoutes6, true
}

// HasExtraRoutes6 returns a boolean if a field has been set.
func (o *ModelSwitch) HasExtraRoutes6() bool {
	if o != nil && !IsNil(o.ExtraRoutes6) {
		return true
	}

	return false
}

// SetExtraRoutes6 gets a reference to the given map[string]ExtraRoute6Properties and assigns it to the ExtraRoutes6 field.
func (o *ModelSwitch) SetExtraRoutes6(v map[string]ExtraRoute6Properties) {
	o.ExtraRoutes6 = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelSwitch) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelSwitch) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ModelSwitch) SetId(v string) {
	o.Id = &v
}

// GetImage1Url returns the Image1Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelSwitch) GetImage1Url() string {
	if o == nil || IsNil(o.Image1Url.Get()) {
		var ret string
		return ret
	}
	return *o.Image1Url.Get()
}

// GetImage1UrlOk returns a tuple with the Image1Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelSwitch) GetImage1UrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Image1Url.Get(), o.Image1Url.IsSet()
}

// HasImage1Url returns a boolean if a field has been set.
func (o *ModelSwitch) HasImage1Url() bool {
	if o != nil && o.Image1Url.IsSet() {
		return true
	}

	return false
}

// SetImage1Url gets a reference to the given NullableString and assigns it to the Image1Url field.
func (o *ModelSwitch) SetImage1Url(v string) {
	o.Image1Url.Set(&v)
}
// SetImage1UrlNil sets the value for Image1Url to be an explicit nil
func (o *ModelSwitch) SetImage1UrlNil() {
	o.Image1Url.Set(nil)
}

// UnsetImage1Url ensures that no value is present for Image1Url, not even an explicit nil
func (o *ModelSwitch) UnsetImage1Url() {
	o.Image1Url.Unset()
}

// GetImage2Url returns the Image2Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelSwitch) GetImage2Url() string {
	if o == nil || IsNil(o.Image2Url.Get()) {
		var ret string
		return ret
	}
	return *o.Image2Url.Get()
}

// GetImage2UrlOk returns a tuple with the Image2Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelSwitch) GetImage2UrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Image2Url.Get(), o.Image2Url.IsSet()
}

// HasImage2Url returns a boolean if a field has been set.
func (o *ModelSwitch) HasImage2Url() bool {
	if o != nil && o.Image2Url.IsSet() {
		return true
	}

	return false
}

// SetImage2Url gets a reference to the given NullableString and assigns it to the Image2Url field.
func (o *ModelSwitch) SetImage2Url(v string) {
	o.Image2Url.Set(&v)
}
// SetImage2UrlNil sets the value for Image2Url to be an explicit nil
func (o *ModelSwitch) SetImage2UrlNil() {
	o.Image2Url.Set(nil)
}

// UnsetImage2Url ensures that no value is present for Image2Url, not even an explicit nil
func (o *ModelSwitch) UnsetImage2Url() {
	o.Image2Url.Unset()
}

// GetImage3Url returns the Image3Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelSwitch) GetImage3Url() string {
	if o == nil || IsNil(o.Image3Url.Get()) {
		var ret string
		return ret
	}
	return *o.Image3Url.Get()
}

// GetImage3UrlOk returns a tuple with the Image3Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelSwitch) GetImage3UrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Image3Url.Get(), o.Image3Url.IsSet()
}

// HasImage3Url returns a boolean if a field has been set.
func (o *ModelSwitch) HasImage3Url() bool {
	if o != nil && o.Image3Url.IsSet() {
		return true
	}

	return false
}

// SetImage3Url gets a reference to the given NullableString and assigns it to the Image3Url field.
func (o *ModelSwitch) SetImage3Url(v string) {
	o.Image3Url.Set(&v)
}
// SetImage3UrlNil sets the value for Image3Url to be an explicit nil
func (o *ModelSwitch) SetImage3UrlNil() {
	o.Image3Url.Set(nil)
}

// UnsetImage3Url ensures that no value is present for Image3Url, not even an explicit nil
func (o *ModelSwitch) UnsetImage3Url() {
	o.Image3Url.Unset()
}

// GetIpConfig returns the IpConfig field value if set, zero value otherwise.
func (o *ModelSwitch) GetIpConfig() JunosIpConfig {
	if o == nil || IsNil(o.IpConfig) {
		var ret JunosIpConfig
		return ret
	}
	return *o.IpConfig
}

// GetIpConfigOk returns a tuple with the IpConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetIpConfigOk() (*JunosIpConfig, bool) {
	if o == nil || IsNil(o.IpConfig) {
		return nil, false
	}
	return o.IpConfig, true
}

// HasIpConfig returns a boolean if a field has been set.
func (o *ModelSwitch) HasIpConfig() bool {
	if o != nil && !IsNil(o.IpConfig) {
		return true
	}

	return false
}

// SetIpConfig gets a reference to the given JunosIpConfig and assigns it to the IpConfig field.
func (o *ModelSwitch) SetIpConfig(v JunosIpConfig) {
	o.IpConfig = &v
}

// GetManaged returns the Managed field value if set, zero value otherwise.
func (o *ModelSwitch) GetManaged() bool {
	if o == nil || IsNil(o.Managed) {
		var ret bool
		return ret
	}
	return *o.Managed
}

// GetManagedOk returns a tuple with the Managed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetManagedOk() (*bool, bool) {
	if o == nil || IsNil(o.Managed) {
		return nil, false
	}
	return o.Managed, true
}

// HasManaged returns a boolean if a field has been set.
func (o *ModelSwitch) HasManaged() bool {
	if o != nil && !IsNil(o.Managed) {
		return true
	}

	return false
}

// SetManaged gets a reference to the given bool and assigns it to the Managed field.
func (o *ModelSwitch) SetManaged(v bool) {
	o.Managed = &v
}

// GetModifiedTime returns the ModifiedTime field value if set, zero value otherwise.
func (o *ModelSwitch) GetModifiedTime() float32 {
	if o == nil || IsNil(o.ModifiedTime) {
		var ret float32
		return ret
	}
	return *o.ModifiedTime
}

// GetModifiedTimeOk returns a tuple with the ModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetModifiedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.ModifiedTime) {
		return nil, false
	}
	return o.ModifiedTime, true
}

// HasModifiedTime returns a boolean if a field has been set.
func (o *ModelSwitch) HasModifiedTime() bool {
	if o != nil && !IsNil(o.ModifiedTime) {
		return true
	}

	return false
}

// SetModifiedTime gets a reference to the given float32 and assigns it to the ModifiedTime field.
func (o *ModelSwitch) SetModifiedTime(v float32) {
	o.ModifiedTime = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelSwitch) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelSwitch) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelSwitch) SetName(v string) {
	o.Name = &v
}

// GetNetworks returns the Networks field value if set, zero value otherwise.
func (o *ModelSwitch) GetNetworks() map[string]SwitchNetwork {
	if o == nil || IsNil(o.Networks) {
		var ret map[string]SwitchNetwork
		return ret
	}
	return *o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetNetworksOk() (*map[string]SwitchNetwork, bool) {
	if o == nil || IsNil(o.Networks) {
		return nil, false
	}
	return o.Networks, true
}

// HasNetworks returns a boolean if a field has been set.
func (o *ModelSwitch) HasNetworks() bool {
	if o != nil && !IsNil(o.Networks) {
		return true
	}

	return false
}

// SetNetworks gets a reference to the given map[string]SwitchNetwork and assigns it to the Networks field.
func (o *ModelSwitch) SetNetworks(v map[string]SwitchNetwork) {
	o.Networks = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *ModelSwitch) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *ModelSwitch) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *ModelSwitch) SetNotes(v string) {
	o.Notes = &v
}

// GetNtpServers returns the NtpServers field value if set, zero value otherwise.
func (o *ModelSwitch) GetNtpServers() []string {
	if o == nil || IsNil(o.NtpServers) {
		var ret []string
		return ret
	}
	return o.NtpServers
}

// GetNtpServersOk returns a tuple with the NtpServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetNtpServersOk() ([]string, bool) {
	if o == nil || IsNil(o.NtpServers) {
		return nil, false
	}
	return o.NtpServers, true
}

// HasNtpServers returns a boolean if a field has been set.
func (o *ModelSwitch) HasNtpServers() bool {
	if o != nil && !IsNil(o.NtpServers) {
		return true
	}

	return false
}

// SetNtpServers gets a reference to the given []string and assigns it to the NtpServers field.
func (o *ModelSwitch) SetNtpServers(v []string) {
	o.NtpServers = v
}

// GetOobIpConfig returns the OobIpConfig field value if set, zero value otherwise.
func (o *ModelSwitch) GetOobIpConfig() JunosOobIpConfigs {
	if o == nil || IsNil(o.OobIpConfig) {
		var ret JunosOobIpConfigs
		return ret
	}
	return *o.OobIpConfig
}

// GetOobIpConfigOk returns a tuple with the OobIpConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetOobIpConfigOk() (*JunosOobIpConfigs, bool) {
	if o == nil || IsNil(o.OobIpConfig) {
		return nil, false
	}
	return o.OobIpConfig, true
}

// HasOobIpConfig returns a boolean if a field has been set.
func (o *ModelSwitch) HasOobIpConfig() bool {
	if o != nil && !IsNil(o.OobIpConfig) {
		return true
	}

	return false
}

// SetOobIpConfig gets a reference to the given JunosOobIpConfigs and assigns it to the OobIpConfig field.
func (o *ModelSwitch) SetOobIpConfig(v JunosOobIpConfigs) {
	o.OobIpConfig = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *ModelSwitch) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *ModelSwitch) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *ModelSwitch) SetOrgId(v string) {
	o.OrgId = &v
}

// GetOspfConfig returns the OspfConfig field value if set, zero value otherwise.
func (o *ModelSwitch) GetOspfConfig() OspfConfig {
	if o == nil || IsNil(o.OspfConfig) {
		var ret OspfConfig
		return ret
	}
	return *o.OspfConfig
}

// GetOspfConfigOk returns a tuple with the OspfConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetOspfConfigOk() (*OspfConfig, bool) {
	if o == nil || IsNil(o.OspfConfig) {
		return nil, false
	}
	return o.OspfConfig, true
}

// HasOspfConfig returns a boolean if a field has been set.
func (o *ModelSwitch) HasOspfConfig() bool {
	if o != nil && !IsNil(o.OspfConfig) {
		return true
	}

	return false
}

// SetOspfConfig gets a reference to the given OspfConfig and assigns it to the OspfConfig field.
func (o *ModelSwitch) SetOspfConfig(v OspfConfig) {
	o.OspfConfig = &v
}

// GetOtherIpConfigs returns the OtherIpConfigs field value if set, zero value otherwise.
func (o *ModelSwitch) GetOtherIpConfigs() map[string]JunosOtherIpConfigs {
	if o == nil || IsNil(o.OtherIpConfigs) {
		var ret map[string]JunosOtherIpConfigs
		return ret
	}
	return *o.OtherIpConfigs
}

// GetOtherIpConfigsOk returns a tuple with the OtherIpConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetOtherIpConfigsOk() (*map[string]JunosOtherIpConfigs, bool) {
	if o == nil || IsNil(o.OtherIpConfigs) {
		return nil, false
	}
	return o.OtherIpConfigs, true
}

// HasOtherIpConfigs returns a boolean if a field has been set.
func (o *ModelSwitch) HasOtherIpConfigs() bool {
	if o != nil && !IsNil(o.OtherIpConfigs) {
		return true
	}

	return false
}

// SetOtherIpConfigs gets a reference to the given map[string]JunosOtherIpConfigs and assigns it to the OtherIpConfigs field.
func (o *ModelSwitch) SetOtherIpConfigs(v map[string]JunosOtherIpConfigs) {
	o.OtherIpConfigs = &v
}

// GetPortConfig returns the PortConfig field value if set, zero value otherwise.
func (o *ModelSwitch) GetPortConfig() map[string]JunosPortConfig {
	if o == nil || IsNil(o.PortConfig) {
		var ret map[string]JunosPortConfig
		return ret
	}
	return *o.PortConfig
}

// GetPortConfigOk returns a tuple with the PortConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetPortConfigOk() (*map[string]JunosPortConfig, bool) {
	if o == nil || IsNil(o.PortConfig) {
		return nil, false
	}
	return o.PortConfig, true
}

// HasPortConfig returns a boolean if a field has been set.
func (o *ModelSwitch) HasPortConfig() bool {
	if o != nil && !IsNil(o.PortConfig) {
		return true
	}

	return false
}

// SetPortConfig gets a reference to the given map[string]JunosPortConfig and assigns it to the PortConfig field.
func (o *ModelSwitch) SetPortConfig(v map[string]JunosPortConfig) {
	o.PortConfig = &v
}

// GetPortMirroring returns the PortMirroring field value if set, zero value otherwise.
func (o *ModelSwitch) GetPortMirroring() map[string]SwitchPortMirroring {
	if o == nil || IsNil(o.PortMirroring) {
		var ret map[string]SwitchPortMirroring
		return ret
	}
	return *o.PortMirroring
}

// GetPortMirroringOk returns a tuple with the PortMirroring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetPortMirroringOk() (*map[string]SwitchPortMirroring, bool) {
	if o == nil || IsNil(o.PortMirroring) {
		return nil, false
	}
	return o.PortMirroring, true
}

// HasPortMirroring returns a boolean if a field has been set.
func (o *ModelSwitch) HasPortMirroring() bool {
	if o != nil && !IsNil(o.PortMirroring) {
		return true
	}

	return false
}

// SetPortMirroring gets a reference to the given map[string]SwitchPortMirroring and assigns it to the PortMirroring field.
func (o *ModelSwitch) SetPortMirroring(v map[string]SwitchPortMirroring) {
	o.PortMirroring = &v
}

// GetPortUsages returns the PortUsages field value if set, zero value otherwise.
func (o *ModelSwitch) GetPortUsages() map[string]SwitchPortUsage {
	if o == nil || IsNil(o.PortUsages) {
		var ret map[string]SwitchPortUsage
		return ret
	}
	return *o.PortUsages
}

// GetPortUsagesOk returns a tuple with the PortUsages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetPortUsagesOk() (*map[string]SwitchPortUsage, bool) {
	if o == nil || IsNil(o.PortUsages) {
		return nil, false
	}
	return o.PortUsages, true
}

// HasPortUsages returns a boolean if a field has been set.
func (o *ModelSwitch) HasPortUsages() bool {
	if o != nil && !IsNil(o.PortUsages) {
		return true
	}

	return false
}

// SetPortUsages gets a reference to the given map[string]SwitchPortUsage and assigns it to the PortUsages field.
func (o *ModelSwitch) SetPortUsages(v map[string]SwitchPortUsage) {
	o.PortUsages = &v
}

// GetRadiusConfig returns the RadiusConfig field value if set, zero value otherwise.
func (o *ModelSwitch) GetRadiusConfig() RadiusConfig {
	if o == nil || IsNil(o.RadiusConfig) {
		var ret RadiusConfig
		return ret
	}
	return *o.RadiusConfig
}

// GetRadiusConfigOk returns a tuple with the RadiusConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetRadiusConfigOk() (*RadiusConfig, bool) {
	if o == nil || IsNil(o.RadiusConfig) {
		return nil, false
	}
	return o.RadiusConfig, true
}

// HasRadiusConfig returns a boolean if a field has been set.
func (o *ModelSwitch) HasRadiusConfig() bool {
	if o != nil && !IsNil(o.RadiusConfig) {
		return true
	}

	return false
}

// SetRadiusConfig gets a reference to the given RadiusConfig and assigns it to the RadiusConfig field.
func (o *ModelSwitch) SetRadiusConfig(v RadiusConfig) {
	o.RadiusConfig = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *ModelSwitch) GetRole() SwitchRole {
	if o == nil || IsNil(o.Role) {
		var ret SwitchRole
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetRoleOk() (*SwitchRole, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *ModelSwitch) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given SwitchRole and assigns it to the Role field.
func (o *ModelSwitch) SetRole(v SwitchRole) {
	o.Role = &v
}

// GetRouterId returns the RouterId field value if set, zero value otherwise.
func (o *ModelSwitch) GetRouterId() string {
	if o == nil || IsNil(o.RouterId) {
		var ret string
		return ret
	}
	return *o.RouterId
}

// GetRouterIdOk returns a tuple with the RouterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetRouterIdOk() (*string, bool) {
	if o == nil || IsNil(o.RouterId) {
		return nil, false
	}
	return o.RouterId, true
}

// HasRouterId returns a boolean if a field has been set.
func (o *ModelSwitch) HasRouterId() bool {
	if o != nil && !IsNil(o.RouterId) {
		return true
	}

	return false
}

// SetRouterId gets a reference to the given string and assigns it to the RouterId field.
func (o *ModelSwitch) SetRouterId(v string) {
	o.RouterId = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *ModelSwitch) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *ModelSwitch) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *ModelSwitch) SetSiteId(v string) {
	o.SiteId = &v
}

// GetStpConfig returns the StpConfig field value if set, zero value otherwise.
func (o *ModelSwitch) GetStpConfig() SwitchStpConfig {
	if o == nil || IsNil(o.StpConfig) {
		var ret SwitchStpConfig
		return ret
	}
	return *o.StpConfig
}

// GetStpConfigOk returns a tuple with the StpConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetStpConfigOk() (*SwitchStpConfig, bool) {
	if o == nil || IsNil(o.StpConfig) {
		return nil, false
	}
	return o.StpConfig, true
}

// HasStpConfig returns a boolean if a field has been set.
func (o *ModelSwitch) HasStpConfig() bool {
	if o != nil && !IsNil(o.StpConfig) {
		return true
	}

	return false
}

// SetStpConfig gets a reference to the given SwitchStpConfig and assigns it to the StpConfig field.
func (o *ModelSwitch) SetStpConfig(v SwitchStpConfig) {
	o.StpConfig = &v
}

// GetSwitchMgmt returns the SwitchMgmt field value if set, zero value otherwise.
func (o *ModelSwitch) GetSwitchMgmt() SwitchSwitchMgmt {
	if o == nil || IsNil(o.SwitchMgmt) {
		var ret SwitchSwitchMgmt
		return ret
	}
	return *o.SwitchMgmt
}

// GetSwitchMgmtOk returns a tuple with the SwitchMgmt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetSwitchMgmtOk() (*SwitchSwitchMgmt, bool) {
	if o == nil || IsNil(o.SwitchMgmt) {
		return nil, false
	}
	return o.SwitchMgmt, true
}

// HasSwitchMgmt returns a boolean if a field has been set.
func (o *ModelSwitch) HasSwitchMgmt() bool {
	if o != nil && !IsNil(o.SwitchMgmt) {
		return true
	}

	return false
}

// SetSwitchMgmt gets a reference to the given SwitchSwitchMgmt and assigns it to the SwitchMgmt field.
func (o *ModelSwitch) SetSwitchMgmt(v SwitchSwitchMgmt) {
	o.SwitchMgmt = &v
}

// GetUseRouterIdAsSourceIp returns the UseRouterIdAsSourceIp field value if set, zero value otherwise.
func (o *ModelSwitch) GetUseRouterIdAsSourceIp() bool {
	if o == nil || IsNil(o.UseRouterIdAsSourceIp) {
		var ret bool
		return ret
	}
	return *o.UseRouterIdAsSourceIp
}

// GetUseRouterIdAsSourceIpOk returns a tuple with the UseRouterIdAsSourceIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetUseRouterIdAsSourceIpOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRouterIdAsSourceIp) {
		return nil, false
	}
	return o.UseRouterIdAsSourceIp, true
}

// HasUseRouterIdAsSourceIp returns a boolean if a field has been set.
func (o *ModelSwitch) HasUseRouterIdAsSourceIp() bool {
	if o != nil && !IsNil(o.UseRouterIdAsSourceIp) {
		return true
	}

	return false
}

// SetUseRouterIdAsSourceIp gets a reference to the given bool and assigns it to the UseRouterIdAsSourceIp field.
func (o *ModelSwitch) SetUseRouterIdAsSourceIp(v bool) {
	o.UseRouterIdAsSourceIp = &v
}

// GetVars returns the Vars field value if set, zero value otherwise.
func (o *ModelSwitch) GetVars() map[string]string {
	if o == nil || IsNil(o.Vars) {
		var ret map[string]string
		return ret
	}
	return *o.Vars
}

// GetVarsOk returns a tuple with the Vars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetVarsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Vars) {
		return nil, false
	}
	return o.Vars, true
}

// HasVars returns a boolean if a field has been set.
func (o *ModelSwitch) HasVars() bool {
	if o != nil && !IsNil(o.Vars) {
		return true
	}

	return false
}

// SetVars gets a reference to the given map[string]string and assigns it to the Vars field.
func (o *ModelSwitch) SetVars(v map[string]string) {
	o.Vars = &v
}

// GetVirtualChassis returns the VirtualChassis field value if set, zero value otherwise.
func (o *ModelSwitch) GetVirtualChassis() SwitchVirtualChassis {
	if o == nil || IsNil(o.VirtualChassis) {
		var ret SwitchVirtualChassis
		return ret
	}
	return *o.VirtualChassis
}

// GetVirtualChassisOk returns a tuple with the VirtualChassis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetVirtualChassisOk() (*SwitchVirtualChassis, bool) {
	if o == nil || IsNil(o.VirtualChassis) {
		return nil, false
	}
	return o.VirtualChassis, true
}

// HasVirtualChassis returns a boolean if a field has been set.
func (o *ModelSwitch) HasVirtualChassis() bool {
	if o != nil && !IsNil(o.VirtualChassis) {
		return true
	}

	return false
}

// SetVirtualChassis gets a reference to the given SwitchVirtualChassis and assigns it to the VirtualChassis field.
func (o *ModelSwitch) SetVirtualChassis(v SwitchVirtualChassis) {
	o.VirtualChassis = &v
}

// GetVrfConfig returns the VrfConfig field value if set, zero value otherwise.
func (o *ModelSwitch) GetVrfConfig() VrfConfig {
	if o == nil || IsNil(o.VrfConfig) {
		var ret VrfConfig
		return ret
	}
	return *o.VrfConfig
}

// GetVrfConfigOk returns a tuple with the VrfConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetVrfConfigOk() (*VrfConfig, bool) {
	if o == nil || IsNil(o.VrfConfig) {
		return nil, false
	}
	return o.VrfConfig, true
}

// HasVrfConfig returns a boolean if a field has been set.
func (o *ModelSwitch) HasVrfConfig() bool {
	if o != nil && !IsNil(o.VrfConfig) {
		return true
	}

	return false
}

// SetVrfConfig gets a reference to the given VrfConfig and assigns it to the VrfConfig field.
func (o *ModelSwitch) SetVrfConfig(v VrfConfig) {
	o.VrfConfig = &v
}

// GetVrrpConfig returns the VrrpConfig field value if set, zero value otherwise.
func (o *ModelSwitch) GetVrrpConfig() VrrpConfig {
	if o == nil || IsNil(o.VrrpConfig) {
		var ret VrrpConfig
		return ret
	}
	return *o.VrrpConfig
}

// GetVrrpConfigOk returns a tuple with the VrrpConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSwitch) GetVrrpConfigOk() (*VrrpConfig, bool) {
	if o == nil || IsNil(o.VrrpConfig) {
		return nil, false
	}
	return o.VrrpConfig, true
}

// HasVrrpConfig returns a boolean if a field has been set.
func (o *ModelSwitch) HasVrrpConfig() bool {
	if o != nil && !IsNil(o.VrrpConfig) {
		return true
	}

	return false
}

// SetVrrpConfig gets a reference to the given VrrpConfig and assigns it to the VrrpConfig field.
func (o *ModelSwitch) SetVrrpConfig(v VrrpConfig) {
	o.VrrpConfig = &v
}

func (o ModelSwitch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelSwitch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AclPolicies) {
		toSerialize["acl_policies"] = o.AclPolicies
	}
	if !IsNil(o.AclTags) {
		toSerialize["acl_tags"] = o.AclTags
	}
	if !IsNil(o.AdditionalConfigCmds) {
		toSerialize["additional_config_cmds"] = o.AdditionalConfigCmds
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.DeviceprofileId) {
		toSerialize["deviceprofile_id"] = o.DeviceprofileId
	}
	if !IsNil(o.DhcpConfig) {
		toSerialize["dhcp_config"] = o.DhcpConfig
	}
	if !IsNil(o.DhcpSnooping) {
		toSerialize["dhcp_snooping"] = o.DhcpSnooping
	}
	if !IsNil(o.DisableAutoConfig) {
		toSerialize["disable_auto_config"] = o.DisableAutoConfig
	}
	if !IsNil(o.DnsServers) {
		toSerialize["dns_servers"] = o.DnsServers
	}
	if !IsNil(o.DnsSuffix) {
		toSerialize["dns_suffix"] = o.DnsSuffix
	}
	if !IsNil(o.EvpnConfig) {
		toSerialize["evpn_config"] = o.EvpnConfig
	}
	if !IsNil(o.ExtraRoutes) {
		toSerialize["extra_routes"] = o.ExtraRoutes
	}
	if !IsNil(o.ExtraRoutes6) {
		toSerialize["extra_routes6"] = o.ExtraRoutes6
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Image1Url.IsSet() {
		toSerialize["image1_url"] = o.Image1Url.Get()
	}
	if o.Image2Url.IsSet() {
		toSerialize["image2_url"] = o.Image2Url.Get()
	}
	if o.Image3Url.IsSet() {
		toSerialize["image3_url"] = o.Image3Url.Get()
	}
	if !IsNil(o.IpConfig) {
		toSerialize["ip_config"] = o.IpConfig
	}
	if !IsNil(o.Managed) {
		toSerialize["managed"] = o.Managed
	}
	if !IsNil(o.ModifiedTime) {
		toSerialize["modified_time"] = o.ModifiedTime
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Networks) {
		toSerialize["networks"] = o.Networks
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.NtpServers) {
		toSerialize["ntp_servers"] = o.NtpServers
	}
	if !IsNil(o.OobIpConfig) {
		toSerialize["oob_ip_config"] = o.OobIpConfig
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.OspfConfig) {
		toSerialize["ospf_config"] = o.OspfConfig
	}
	if !IsNil(o.OtherIpConfigs) {
		toSerialize["other_ip_configs"] = o.OtherIpConfigs
	}
	if !IsNil(o.PortConfig) {
		toSerialize["port_config"] = o.PortConfig
	}
	if !IsNil(o.PortMirroring) {
		toSerialize["port_mirroring"] = o.PortMirroring
	}
	if !IsNil(o.PortUsages) {
		toSerialize["port_usages"] = o.PortUsages
	}
	if !IsNil(o.RadiusConfig) {
		toSerialize["radius_config"] = o.RadiusConfig
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.RouterId) {
		toSerialize["router_id"] = o.RouterId
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.StpConfig) {
		toSerialize["stp_config"] = o.StpConfig
	}
	if !IsNil(o.SwitchMgmt) {
		toSerialize["switch_mgmt"] = o.SwitchMgmt
	}
	if !IsNil(o.UseRouterIdAsSourceIp) {
		toSerialize["use_router_id_as_source_ip"] = o.UseRouterIdAsSourceIp
	}
	if !IsNil(o.Vars) {
		toSerialize["vars"] = o.Vars
	}
	if !IsNil(o.VirtualChassis) {
		toSerialize["virtual_chassis"] = o.VirtualChassis
	}
	if !IsNil(o.VrfConfig) {
		toSerialize["vrf_config"] = o.VrfConfig
	}
	if !IsNil(o.VrrpConfig) {
		toSerialize["vrrp_config"] = o.VrrpConfig
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelSwitch) UnmarshalJSON(data []byte) (err error) {
	varModelSwitch := _ModelSwitch{}

	err = json.Unmarshal(data, &varModelSwitch)

	if err != nil {
		return err
	}

	*o = ModelSwitch(varModelSwitch)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "acl_policies")
		delete(additionalProperties, "acl_tags")
		delete(additionalProperties, "additional_config_cmds")
		delete(additionalProperties, "created_time")
		delete(additionalProperties, "deviceprofile_id")
		delete(additionalProperties, "dhcp_config")
		delete(additionalProperties, "dhcp_snooping")
		delete(additionalProperties, "disable_auto_config")
		delete(additionalProperties, "dns_servers")
		delete(additionalProperties, "dns_suffix")
		delete(additionalProperties, "evpn_config")
		delete(additionalProperties, "extra_routes")
		delete(additionalProperties, "extra_routes6")
		delete(additionalProperties, "id")
		delete(additionalProperties, "image1_url")
		delete(additionalProperties, "image2_url")
		delete(additionalProperties, "image3_url")
		delete(additionalProperties, "ip_config")
		delete(additionalProperties, "managed")
		delete(additionalProperties, "modified_time")
		delete(additionalProperties, "name")
		delete(additionalProperties, "networks")
		delete(additionalProperties, "notes")
		delete(additionalProperties, "ntp_servers")
		delete(additionalProperties, "oob_ip_config")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "ospf_config")
		delete(additionalProperties, "other_ip_configs")
		delete(additionalProperties, "port_config")
		delete(additionalProperties, "port_mirroring")
		delete(additionalProperties, "port_usages")
		delete(additionalProperties, "radius_config")
		delete(additionalProperties, "role")
		delete(additionalProperties, "router_id")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "stp_config")
		delete(additionalProperties, "switch_mgmt")
		delete(additionalProperties, "use_router_id_as_source_ip")
		delete(additionalProperties, "vars")
		delete(additionalProperties, "virtual_chassis")
		delete(additionalProperties, "vrf_config")
		delete(additionalProperties, "vrrp_config")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelSwitch struct {
	value *ModelSwitch
	isSet bool
}

func (v NullableModelSwitch) Get() *ModelSwitch {
	return v.value
}

func (v *NullableModelSwitch) Set(val *ModelSwitch) {
	v.value = val
	v.isSet = true
}

func (v NullableModelSwitch) IsSet() bool {
	return v.isSet
}

func (v *NullableModelSwitch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelSwitch(val *ModelSwitch) *NullableModelSwitch {
	return &NullableModelSwitch{value: val, isSet: true}
}

func (v NullableModelSwitch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelSwitch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


