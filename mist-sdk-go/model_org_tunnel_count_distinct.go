/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// OrgTunnelCountDistinct the model 'OrgTunnelCountDistinct'
type OrgTunnelCountDistinct string

// List of org_tunnel_count_distinct
const (
	ORGTUNNELCOUNTDISTINCT_EMPTY OrgTunnelCountDistinct = ""
	ORGTUNNELCOUNTDISTINCT_AUTH_ALGO OrgTunnelCountDistinct = "auth_algo"
	ORGTUNNELCOUNTDISTINCT_WXTUNNEL_ID OrgTunnelCountDistinct = "wxtunnel_id"
	ORGTUNNELCOUNTDISTINCT_AP OrgTunnelCountDistinct = "ap"
	ORGTUNNELCOUNTDISTINCT_REMOTE_IP OrgTunnelCountDistinct = "remote_ip"
	ORGTUNNELCOUNTDISTINCT_REMOTE_PORT OrgTunnelCountDistinct = "remote_port"
	ORGTUNNELCOUNTDISTINCT_STATE OrgTunnelCountDistinct = "state"
	ORGTUNNELCOUNTDISTINCT_MXEDGE_ID OrgTunnelCountDistinct = "mxedge_id"
	ORGTUNNELCOUNTDISTINCT_MXCLUSTER_ID OrgTunnelCountDistinct = "mxcluster_id"
	ORGTUNNELCOUNTDISTINCT_SITE_ID OrgTunnelCountDistinct = "site_id"
	ORGTUNNELCOUNTDISTINCT_PEER_MXEDGE_ID OrgTunnelCountDistinct = "peer_mxedge_id"
	ORGTUNNELCOUNTDISTINCT_MAC OrgTunnelCountDistinct = "mac"
	ORGTUNNELCOUNTDISTINCT_NODE OrgTunnelCountDistinct = "node"
	ORGTUNNELCOUNTDISTINCT_PEER_IP OrgTunnelCountDistinct = "peer_ip"
	ORGTUNNELCOUNTDISTINCT_PEER_HOST OrgTunnelCountDistinct = "peer_host"
	ORGTUNNELCOUNTDISTINCT_IP OrgTunnelCountDistinct = "ip"
	ORGTUNNELCOUNTDISTINCT_TUNNEL_NAME OrgTunnelCountDistinct = "tunnel_name"
	ORGTUNNELCOUNTDISTINCT_PROTOCOL OrgTunnelCountDistinct = "protocol"
	ORGTUNNELCOUNTDISTINCT_ENCRYPT_ALGO OrgTunnelCountDistinct = "encrypt_algo"
	ORGTUNNELCOUNTDISTINCT_IKE_VERSION OrgTunnelCountDistinct = "ike_version"
	ORGTUNNELCOUNTDISTINCT_LAST_EVENT OrgTunnelCountDistinct = "last_event"
	ORGTUNNELCOUNTDISTINCT_UP OrgTunnelCountDistinct = "up"
)

// All allowed values of OrgTunnelCountDistinct enum
var AllowedOrgTunnelCountDistinctEnumValues = []OrgTunnelCountDistinct{
	"",
	"auth_algo",
	"wxtunnel_id",
	"ap",
	"remote_ip",
	"remote_port",
	"state",
	"mxedge_id",
	"mxcluster_id",
	"site_id",
	"peer_mxedge_id",
	"mac",
	"node",
	"peer_ip",
	"peer_host",
	"ip",
	"tunnel_name",
	"protocol",
	"encrypt_algo",
	"ike_version",
	"last_event",
	"up",
}

func (v *OrgTunnelCountDistinct) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrgTunnelCountDistinct(value)
	for _, existing := range AllowedOrgTunnelCountDistinctEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrgTunnelCountDistinct", value)
}

// NewOrgTunnelCountDistinctFromValue returns a pointer to a valid OrgTunnelCountDistinct
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrgTunnelCountDistinctFromValue(v string) (*OrgTunnelCountDistinct, error) {
	ev := OrgTunnelCountDistinct(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrgTunnelCountDistinct: valid values are %v", v, AllowedOrgTunnelCountDistinctEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrgTunnelCountDistinct) IsValid() bool {
	for _, existing := range AllowedOrgTunnelCountDistinctEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to org_tunnel_count_distinct value
func (v OrgTunnelCountDistinct) Ptr() *OrgTunnelCountDistinct {
	return &v
}

type NullableOrgTunnelCountDistinct struct {
	value *OrgTunnelCountDistinct
	isSet bool
}

func (v NullableOrgTunnelCountDistinct) Get() *OrgTunnelCountDistinct {
	return v.value
}

func (v *NullableOrgTunnelCountDistinct) Set(val *OrgTunnelCountDistinct) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgTunnelCountDistinct) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgTunnelCountDistinct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgTunnelCountDistinct(val *OrgTunnelCountDistinct) *NullableOrgTunnelCountDistinct {
	return &NullableOrgTunnelCountDistinct{value: val, isSet: true}
}

func (v NullableOrgTunnelCountDistinct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgTunnelCountDistinct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

