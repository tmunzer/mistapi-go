/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the License type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &License{}

// License License
type License struct {
	Amendments []LicenseAmendment `json:"amendments,omitempty"`
	// Property key is license type (e.g. SUB-MAN) and Property value is the number of licenses entitled.
	Entitled *map[string]int32 `json:"entitled,omitempty"`
	Licenses []LicenseSub `json:"licenses,omitempty"`
	// Property key is license type (e.g. SUB-MAN) and Property value is the number of licenses consumed.
	Summary *map[string]int32 `json:"summary,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _License License

// NewLicense instantiates a new License object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicense() *License {
	this := License{}
	return &this
}

// NewLicenseWithDefaults instantiates a new License object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseWithDefaults() *License {
	this := License{}
	return &this
}

// GetAmendments returns the Amendments field value if set, zero value otherwise.
func (o *License) GetAmendments() []LicenseAmendment {
	if o == nil || IsNil(o.Amendments) {
		var ret []LicenseAmendment
		return ret
	}
	return o.Amendments
}

// GetAmendmentsOk returns a tuple with the Amendments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetAmendmentsOk() ([]LicenseAmendment, bool) {
	if o == nil || IsNil(o.Amendments) {
		return nil, false
	}
	return o.Amendments, true
}

// HasAmendments returns a boolean if a field has been set.
func (o *License) HasAmendments() bool {
	if o != nil && !IsNil(o.Amendments) {
		return true
	}

	return false
}

// SetAmendments gets a reference to the given []LicenseAmendment and assigns it to the Amendments field.
func (o *License) SetAmendments(v []LicenseAmendment) {
	o.Amendments = v
}

// GetEntitled returns the Entitled field value if set, zero value otherwise.
func (o *License) GetEntitled() map[string]int32 {
	if o == nil || IsNil(o.Entitled) {
		var ret map[string]int32
		return ret
	}
	return *o.Entitled
}

// GetEntitledOk returns a tuple with the Entitled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetEntitledOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.Entitled) {
		return nil, false
	}
	return o.Entitled, true
}

// HasEntitled returns a boolean if a field has been set.
func (o *License) HasEntitled() bool {
	if o != nil && !IsNil(o.Entitled) {
		return true
	}

	return false
}

// SetEntitled gets a reference to the given map[string]int32 and assigns it to the Entitled field.
func (o *License) SetEntitled(v map[string]int32) {
	o.Entitled = &v
}

// GetLicenses returns the Licenses field value if set, zero value otherwise.
func (o *License) GetLicenses() []LicenseSub {
	if o == nil || IsNil(o.Licenses) {
		var ret []LicenseSub
		return ret
	}
	return o.Licenses
}

// GetLicensesOk returns a tuple with the Licenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetLicensesOk() ([]LicenseSub, bool) {
	if o == nil || IsNil(o.Licenses) {
		return nil, false
	}
	return o.Licenses, true
}

// HasLicenses returns a boolean if a field has been set.
func (o *License) HasLicenses() bool {
	if o != nil && !IsNil(o.Licenses) {
		return true
	}

	return false
}

// SetLicenses gets a reference to the given []LicenseSub and assigns it to the Licenses field.
func (o *License) SetLicenses(v []LicenseSub) {
	o.Licenses = v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *License) GetSummary() map[string]int32 {
	if o == nil || IsNil(o.Summary) {
		var ret map[string]int32
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetSummaryOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *License) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given map[string]int32 and assigns it to the Summary field.
func (o *License) SetSummary(v map[string]int32) {
	o.Summary = &v
}

func (o License) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o License) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amendments) {
		toSerialize["amendments"] = o.Amendments
	}
	if !IsNil(o.Entitled) {
		toSerialize["entitled"] = o.Entitled
	}
	if !IsNil(o.Licenses) {
		toSerialize["licenses"] = o.Licenses
	}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *License) UnmarshalJSON(data []byte) (err error) {
	varLicense := _License{}

	err = json.Unmarshal(data, &varLicense)

	if err != nil {
		return err
	}

	*o = License(varLicense)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "amendments")
		delete(additionalProperties, "entitled")
		delete(additionalProperties, "licenses")
		delete(additionalProperties, "summary")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLicense struct {
	value *License
	isSet bool
}

func (v NullableLicense) Get() *License {
	return v.value
}

func (v *NullableLicense) Set(val *License) {
	v.value = val
	v.isSet = true
}

func (v NullableLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicense(val *License) *NullableLicense {
	return &NullableLicense{value: val, isSet: true}
}

func (v NullableLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


