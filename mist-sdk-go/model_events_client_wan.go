/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the EventsClientWan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventsClientWan{}

// EventsClientWan struct for EventsClientWan
type EventsClientWan struct {
	When *string `json:"When,omitempty"`
	EvType *string `json:"ev_type,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	RandomMac *bool `json:"random_mac,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	Text *string `json:"text,omitempty"`
	Wcid *string `json:"wcid,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EventsClientWan EventsClientWan

// NewEventsClientWan instantiates a new EventsClientWan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsClientWan() *EventsClientWan {
	this := EventsClientWan{}
	return &this
}

// NewEventsClientWanWithDefaults instantiates a new EventsClientWan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsClientWanWithDefaults() *EventsClientWan {
	this := EventsClientWan{}
	return &this
}

// GetWhen returns the When field value if set, zero value otherwise.
func (o *EventsClientWan) GetWhen() string {
	if o == nil || IsNil(o.When) {
		var ret string
		return ret
	}
	return *o.When
}

// GetWhenOk returns a tuple with the When field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsClientWan) GetWhenOk() (*string, bool) {
	if o == nil || IsNil(o.When) {
		return nil, false
	}
	return o.When, true
}

// HasWhen returns a boolean if a field has been set.
func (o *EventsClientWan) HasWhen() bool {
	if o != nil && !IsNil(o.When) {
		return true
	}

	return false
}

// SetWhen gets a reference to the given string and assigns it to the When field.
func (o *EventsClientWan) SetWhen(v string) {
	o.When = &v
}

// GetEvType returns the EvType field value if set, zero value otherwise.
func (o *EventsClientWan) GetEvType() string {
	if o == nil || IsNil(o.EvType) {
		var ret string
		return ret
	}
	return *o.EvType
}

// GetEvTypeOk returns a tuple with the EvType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsClientWan) GetEvTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EvType) {
		return nil, false
	}
	return o.EvType, true
}

// HasEvType returns a boolean if a field has been set.
func (o *EventsClientWan) HasEvType() bool {
	if o != nil && !IsNil(o.EvType) {
		return true
	}

	return false
}

// SetEvType gets a reference to the given string and assigns it to the EvType field.
func (o *EventsClientWan) SetEvType(v string) {
	o.EvType = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *EventsClientWan) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsClientWan) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *EventsClientWan) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *EventsClientWan) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *EventsClientWan) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsClientWan) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *EventsClientWan) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *EventsClientWan) SetOrgId(v string) {
	o.OrgId = &v
}

// GetRandomMac returns the RandomMac field value if set, zero value otherwise.
func (o *EventsClientWan) GetRandomMac() bool {
	if o == nil || IsNil(o.RandomMac) {
		var ret bool
		return ret
	}
	return *o.RandomMac
}

// GetRandomMacOk returns a tuple with the RandomMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsClientWan) GetRandomMacOk() (*bool, bool) {
	if o == nil || IsNil(o.RandomMac) {
		return nil, false
	}
	return o.RandomMac, true
}

// HasRandomMac returns a boolean if a field has been set.
func (o *EventsClientWan) HasRandomMac() bool {
	if o != nil && !IsNil(o.RandomMac) {
		return true
	}

	return false
}

// SetRandomMac gets a reference to the given bool and assigns it to the RandomMac field.
func (o *EventsClientWan) SetRandomMac(v bool) {
	o.RandomMac = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *EventsClientWan) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsClientWan) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *EventsClientWan) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *EventsClientWan) SetSiteId(v string) {
	o.SiteId = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *EventsClientWan) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsClientWan) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *EventsClientWan) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *EventsClientWan) SetText(v string) {
	o.Text = &v
}

// GetWcid returns the Wcid field value if set, zero value otherwise.
func (o *EventsClientWan) GetWcid() string {
	if o == nil || IsNil(o.Wcid) {
		var ret string
		return ret
	}
	return *o.Wcid
}

// GetWcidOk returns a tuple with the Wcid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsClientWan) GetWcidOk() (*string, bool) {
	if o == nil || IsNil(o.Wcid) {
		return nil, false
	}
	return o.Wcid, true
}

// HasWcid returns a boolean if a field has been set.
func (o *EventsClientWan) HasWcid() bool {
	if o != nil && !IsNil(o.Wcid) {
		return true
	}

	return false
}

// SetWcid gets a reference to the given string and assigns it to the Wcid field.
func (o *EventsClientWan) SetWcid(v string) {
	o.Wcid = &v
}

func (o EventsClientWan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventsClientWan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.When) {
		toSerialize["When"] = o.When
	}
	if !IsNil(o.EvType) {
		toSerialize["ev_type"] = o.EvType
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.RandomMac) {
		toSerialize["random_mac"] = o.RandomMac
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Wcid) {
		toSerialize["wcid"] = o.Wcid
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EventsClientWan) UnmarshalJSON(data []byte) (err error) {
	varEventsClientWan := _EventsClientWan{}

	err = json.Unmarshal(data, &varEventsClientWan)

	if err != nil {
		return err
	}

	*o = EventsClientWan(varEventsClientWan)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "When")
		delete(additionalProperties, "ev_type")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "random_mac")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "text")
		delete(additionalProperties, "wcid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEventsClientWan struct {
	value *EventsClientWan
	isSet bool
}

func (v NullableEventsClientWan) Get() *EventsClientWan {
	return v.value
}

func (v *NullableEventsClientWan) Set(val *EventsClientWan) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsClientWan) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsClientWan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsClientWan(val *EventsClientWan) *NullableEventsClientWan {
	return &NullableEventsClientWan{value: val, isSet: true}
}

func (v NullableEventsClientWan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsClientWan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


