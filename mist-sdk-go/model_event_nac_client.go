/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the EventNacClient type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventNacClient{}

// EventNacClient struct for EventNacClient
type EventNacClient struct {
	Ap *string `json:"ap,omitempty"`
	// authentication type, e.g. “eap-tls”, “eap-ttls”, “eap-teap”, “mab”, “psk”, “device-auth”
	AuthType *string `json:"auth_type,omitempty"`
	Bssid *string `json:"bssid,omitempty"`
	DeviceMac *string `json:"device_mac,omitempty"`
	// NAC Policy Dry Run Rule ID, if present and matched
	DryrunNacruleId *string `json:"dryrun_nacrule_id,omitempty"`
	DryrunNacruleMatched *bool `json:"dryrun_nacrule_matched,omitempty"`
	IdpId *string `json:"idp_id,omitempty"`
	IdpRole []string `json:"idp_role,omitempty"`
	// Username presented to the Identity Provider
	IdpUsername *string `json:"idp_username,omitempty"`
	// Client MAC address
	Mac *string `json:"mac,omitempty"`
	// Mist Edge ID used to connect to cloud
	MxedgeId *string `json:"mxedge_id,omitempty"`
	// NAC Policy Rule ID, if matched
	NacruleId *string `json:"nacrule_id,omitempty"`
	NacruleMatched *bool `json:"nacrule_matched,omitempty"`
	NasVendor *string `json:"nas_vendor,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	PortId *string `json:"port_id,omitempty"`
	// Type of client i.e wired, wireless
	PortType *string `json:"port_type,omitempty"`
	RandomMac *bool `json:"random_mac,omitempty"`
	RespAttrs []string `json:"resp_attrs,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	Ssid *string `json:"ssid,omitempty"`
	Timestamp *float32 `json:"timestamp,omitempty"`
	// event type, e.g. NAC_CLIENT_PERMIT
	Type *string `json:"type,omitempty"`
	// labels derived from usermac entry
	UsermacLabels []string `json:"usermac_labels,omitempty"`
	// Username presented by the client
	Username *string `json:"username,omitempty"`
	// Vlan ID
	Vlan *string `json:"vlan,omitempty"`
	// Vlan source, e.g. \"nactag\", \"usermac\"
	VlanSource *string `json:"vlan_source,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EventNacClient EventNacClient

// NewEventNacClient instantiates a new EventNacClient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventNacClient() *EventNacClient {
	this := EventNacClient{}
	return &this
}

// NewEventNacClientWithDefaults instantiates a new EventNacClient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventNacClientWithDefaults() *EventNacClient {
	this := EventNacClient{}
	return &this
}

// GetAp returns the Ap field value if set, zero value otherwise.
func (o *EventNacClient) GetAp() string {
	if o == nil || IsNil(o.Ap) {
		var ret string
		return ret
	}
	return *o.Ap
}

// GetApOk returns a tuple with the Ap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetApOk() (*string, bool) {
	if o == nil || IsNil(o.Ap) {
		return nil, false
	}
	return o.Ap, true
}

// HasAp returns a boolean if a field has been set.
func (o *EventNacClient) HasAp() bool {
	if o != nil && !IsNil(o.Ap) {
		return true
	}

	return false
}

// SetAp gets a reference to the given string and assigns it to the Ap field.
func (o *EventNacClient) SetAp(v string) {
	o.Ap = &v
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *EventNacClient) GetAuthType() string {
	if o == nil || IsNil(o.AuthType) {
		var ret string
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetAuthTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthType) {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *EventNacClient) HasAuthType() bool {
	if o != nil && !IsNil(o.AuthType) {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given string and assigns it to the AuthType field.
func (o *EventNacClient) SetAuthType(v string) {
	o.AuthType = &v
}

// GetBssid returns the Bssid field value if set, zero value otherwise.
func (o *EventNacClient) GetBssid() string {
	if o == nil || IsNil(o.Bssid) {
		var ret string
		return ret
	}
	return *o.Bssid
}

// GetBssidOk returns a tuple with the Bssid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetBssidOk() (*string, bool) {
	if o == nil || IsNil(o.Bssid) {
		return nil, false
	}
	return o.Bssid, true
}

// HasBssid returns a boolean if a field has been set.
func (o *EventNacClient) HasBssid() bool {
	if o != nil && !IsNil(o.Bssid) {
		return true
	}

	return false
}

// SetBssid gets a reference to the given string and assigns it to the Bssid field.
func (o *EventNacClient) SetBssid(v string) {
	o.Bssid = &v
}

// GetDeviceMac returns the DeviceMac field value if set, zero value otherwise.
func (o *EventNacClient) GetDeviceMac() string {
	if o == nil || IsNil(o.DeviceMac) {
		var ret string
		return ret
	}
	return *o.DeviceMac
}

// GetDeviceMacOk returns a tuple with the DeviceMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetDeviceMacOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceMac) {
		return nil, false
	}
	return o.DeviceMac, true
}

// HasDeviceMac returns a boolean if a field has been set.
func (o *EventNacClient) HasDeviceMac() bool {
	if o != nil && !IsNil(o.DeviceMac) {
		return true
	}

	return false
}

// SetDeviceMac gets a reference to the given string and assigns it to the DeviceMac field.
func (o *EventNacClient) SetDeviceMac(v string) {
	o.DeviceMac = &v
}

// GetDryrunNacruleId returns the DryrunNacruleId field value if set, zero value otherwise.
func (o *EventNacClient) GetDryrunNacruleId() string {
	if o == nil || IsNil(o.DryrunNacruleId) {
		var ret string
		return ret
	}
	return *o.DryrunNacruleId
}

// GetDryrunNacruleIdOk returns a tuple with the DryrunNacruleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetDryrunNacruleIdOk() (*string, bool) {
	if o == nil || IsNil(o.DryrunNacruleId) {
		return nil, false
	}
	return o.DryrunNacruleId, true
}

// HasDryrunNacruleId returns a boolean if a field has been set.
func (o *EventNacClient) HasDryrunNacruleId() bool {
	if o != nil && !IsNil(o.DryrunNacruleId) {
		return true
	}

	return false
}

// SetDryrunNacruleId gets a reference to the given string and assigns it to the DryrunNacruleId field.
func (o *EventNacClient) SetDryrunNacruleId(v string) {
	o.DryrunNacruleId = &v
}

// GetDryrunNacruleMatched returns the DryrunNacruleMatched field value if set, zero value otherwise.
func (o *EventNacClient) GetDryrunNacruleMatched() bool {
	if o == nil || IsNil(o.DryrunNacruleMatched) {
		var ret bool
		return ret
	}
	return *o.DryrunNacruleMatched
}

// GetDryrunNacruleMatchedOk returns a tuple with the DryrunNacruleMatched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetDryrunNacruleMatchedOk() (*bool, bool) {
	if o == nil || IsNil(o.DryrunNacruleMatched) {
		return nil, false
	}
	return o.DryrunNacruleMatched, true
}

// HasDryrunNacruleMatched returns a boolean if a field has been set.
func (o *EventNacClient) HasDryrunNacruleMatched() bool {
	if o != nil && !IsNil(o.DryrunNacruleMatched) {
		return true
	}

	return false
}

// SetDryrunNacruleMatched gets a reference to the given bool and assigns it to the DryrunNacruleMatched field.
func (o *EventNacClient) SetDryrunNacruleMatched(v bool) {
	o.DryrunNacruleMatched = &v
}

// GetIdpId returns the IdpId field value if set, zero value otherwise.
func (o *EventNacClient) GetIdpId() string {
	if o == nil || IsNil(o.IdpId) {
		var ret string
		return ret
	}
	return *o.IdpId
}

// GetIdpIdOk returns a tuple with the IdpId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetIdpIdOk() (*string, bool) {
	if o == nil || IsNil(o.IdpId) {
		return nil, false
	}
	return o.IdpId, true
}

// HasIdpId returns a boolean if a field has been set.
func (o *EventNacClient) HasIdpId() bool {
	if o != nil && !IsNil(o.IdpId) {
		return true
	}

	return false
}

// SetIdpId gets a reference to the given string and assigns it to the IdpId field.
func (o *EventNacClient) SetIdpId(v string) {
	o.IdpId = &v
}

// GetIdpRole returns the IdpRole field value if set, zero value otherwise.
func (o *EventNacClient) GetIdpRole() []string {
	if o == nil || IsNil(o.IdpRole) {
		var ret []string
		return ret
	}
	return o.IdpRole
}

// GetIdpRoleOk returns a tuple with the IdpRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetIdpRoleOk() ([]string, bool) {
	if o == nil || IsNil(o.IdpRole) {
		return nil, false
	}
	return o.IdpRole, true
}

// HasIdpRole returns a boolean if a field has been set.
func (o *EventNacClient) HasIdpRole() bool {
	if o != nil && !IsNil(o.IdpRole) {
		return true
	}

	return false
}

// SetIdpRole gets a reference to the given []string and assigns it to the IdpRole field.
func (o *EventNacClient) SetIdpRole(v []string) {
	o.IdpRole = v
}

// GetIdpUsername returns the IdpUsername field value if set, zero value otherwise.
func (o *EventNacClient) GetIdpUsername() string {
	if o == nil || IsNil(o.IdpUsername) {
		var ret string
		return ret
	}
	return *o.IdpUsername
}

// GetIdpUsernameOk returns a tuple with the IdpUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetIdpUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.IdpUsername) {
		return nil, false
	}
	return o.IdpUsername, true
}

// HasIdpUsername returns a boolean if a field has been set.
func (o *EventNacClient) HasIdpUsername() bool {
	if o != nil && !IsNil(o.IdpUsername) {
		return true
	}

	return false
}

// SetIdpUsername gets a reference to the given string and assigns it to the IdpUsername field.
func (o *EventNacClient) SetIdpUsername(v string) {
	o.IdpUsername = &v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *EventNacClient) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *EventNacClient) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *EventNacClient) SetMac(v string) {
	o.Mac = &v
}

// GetMxedgeId returns the MxedgeId field value if set, zero value otherwise.
func (o *EventNacClient) GetMxedgeId() string {
	if o == nil || IsNil(o.MxedgeId) {
		var ret string
		return ret
	}
	return *o.MxedgeId
}

// GetMxedgeIdOk returns a tuple with the MxedgeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetMxedgeIdOk() (*string, bool) {
	if o == nil || IsNil(o.MxedgeId) {
		return nil, false
	}
	return o.MxedgeId, true
}

// HasMxedgeId returns a boolean if a field has been set.
func (o *EventNacClient) HasMxedgeId() bool {
	if o != nil && !IsNil(o.MxedgeId) {
		return true
	}

	return false
}

// SetMxedgeId gets a reference to the given string and assigns it to the MxedgeId field.
func (o *EventNacClient) SetMxedgeId(v string) {
	o.MxedgeId = &v
}

// GetNacruleId returns the NacruleId field value if set, zero value otherwise.
func (o *EventNacClient) GetNacruleId() string {
	if o == nil || IsNil(o.NacruleId) {
		var ret string
		return ret
	}
	return *o.NacruleId
}

// GetNacruleIdOk returns a tuple with the NacruleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetNacruleIdOk() (*string, bool) {
	if o == nil || IsNil(o.NacruleId) {
		return nil, false
	}
	return o.NacruleId, true
}

// HasNacruleId returns a boolean if a field has been set.
func (o *EventNacClient) HasNacruleId() bool {
	if o != nil && !IsNil(o.NacruleId) {
		return true
	}

	return false
}

// SetNacruleId gets a reference to the given string and assigns it to the NacruleId field.
func (o *EventNacClient) SetNacruleId(v string) {
	o.NacruleId = &v
}

// GetNacruleMatched returns the NacruleMatched field value if set, zero value otherwise.
func (o *EventNacClient) GetNacruleMatched() bool {
	if o == nil || IsNil(o.NacruleMatched) {
		var ret bool
		return ret
	}
	return *o.NacruleMatched
}

// GetNacruleMatchedOk returns a tuple with the NacruleMatched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetNacruleMatchedOk() (*bool, bool) {
	if o == nil || IsNil(o.NacruleMatched) {
		return nil, false
	}
	return o.NacruleMatched, true
}

// HasNacruleMatched returns a boolean if a field has been set.
func (o *EventNacClient) HasNacruleMatched() bool {
	if o != nil && !IsNil(o.NacruleMatched) {
		return true
	}

	return false
}

// SetNacruleMatched gets a reference to the given bool and assigns it to the NacruleMatched field.
func (o *EventNacClient) SetNacruleMatched(v bool) {
	o.NacruleMatched = &v
}

// GetNasVendor returns the NasVendor field value if set, zero value otherwise.
func (o *EventNacClient) GetNasVendor() string {
	if o == nil || IsNil(o.NasVendor) {
		var ret string
		return ret
	}
	return *o.NasVendor
}

// GetNasVendorOk returns a tuple with the NasVendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetNasVendorOk() (*string, bool) {
	if o == nil || IsNil(o.NasVendor) {
		return nil, false
	}
	return o.NasVendor, true
}

// HasNasVendor returns a boolean if a field has been set.
func (o *EventNacClient) HasNasVendor() bool {
	if o != nil && !IsNil(o.NasVendor) {
		return true
	}

	return false
}

// SetNasVendor gets a reference to the given string and assigns it to the NasVendor field.
func (o *EventNacClient) SetNasVendor(v string) {
	o.NasVendor = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *EventNacClient) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *EventNacClient) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *EventNacClient) SetOrgId(v string) {
	o.OrgId = &v
}

// GetPortId returns the PortId field value if set, zero value otherwise.
func (o *EventNacClient) GetPortId() string {
	if o == nil || IsNil(o.PortId) {
		var ret string
		return ret
	}
	return *o.PortId
}

// GetPortIdOk returns a tuple with the PortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetPortIdOk() (*string, bool) {
	if o == nil || IsNil(o.PortId) {
		return nil, false
	}
	return o.PortId, true
}

// HasPortId returns a boolean if a field has been set.
func (o *EventNacClient) HasPortId() bool {
	if o != nil && !IsNil(o.PortId) {
		return true
	}

	return false
}

// SetPortId gets a reference to the given string and assigns it to the PortId field.
func (o *EventNacClient) SetPortId(v string) {
	o.PortId = &v
}

// GetPortType returns the PortType field value if set, zero value otherwise.
func (o *EventNacClient) GetPortType() string {
	if o == nil || IsNil(o.PortType) {
		var ret string
		return ret
	}
	return *o.PortType
}

// GetPortTypeOk returns a tuple with the PortType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetPortTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PortType) {
		return nil, false
	}
	return o.PortType, true
}

// HasPortType returns a boolean if a field has been set.
func (o *EventNacClient) HasPortType() bool {
	if o != nil && !IsNil(o.PortType) {
		return true
	}

	return false
}

// SetPortType gets a reference to the given string and assigns it to the PortType field.
func (o *EventNacClient) SetPortType(v string) {
	o.PortType = &v
}

// GetRandomMac returns the RandomMac field value if set, zero value otherwise.
func (o *EventNacClient) GetRandomMac() bool {
	if o == nil || IsNil(o.RandomMac) {
		var ret bool
		return ret
	}
	return *o.RandomMac
}

// GetRandomMacOk returns a tuple with the RandomMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetRandomMacOk() (*bool, bool) {
	if o == nil || IsNil(o.RandomMac) {
		return nil, false
	}
	return o.RandomMac, true
}

// HasRandomMac returns a boolean if a field has been set.
func (o *EventNacClient) HasRandomMac() bool {
	if o != nil && !IsNil(o.RandomMac) {
		return true
	}

	return false
}

// SetRandomMac gets a reference to the given bool and assigns it to the RandomMac field.
func (o *EventNacClient) SetRandomMac(v bool) {
	o.RandomMac = &v
}

// GetRespAttrs returns the RespAttrs field value if set, zero value otherwise.
func (o *EventNacClient) GetRespAttrs() []string {
	if o == nil || IsNil(o.RespAttrs) {
		var ret []string
		return ret
	}
	return o.RespAttrs
}

// GetRespAttrsOk returns a tuple with the RespAttrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetRespAttrsOk() ([]string, bool) {
	if o == nil || IsNil(o.RespAttrs) {
		return nil, false
	}
	return o.RespAttrs, true
}

// HasRespAttrs returns a boolean if a field has been set.
func (o *EventNacClient) HasRespAttrs() bool {
	if o != nil && !IsNil(o.RespAttrs) {
		return true
	}

	return false
}

// SetRespAttrs gets a reference to the given []string and assigns it to the RespAttrs field.
func (o *EventNacClient) SetRespAttrs(v []string) {
	o.RespAttrs = v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *EventNacClient) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *EventNacClient) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *EventNacClient) SetSiteId(v string) {
	o.SiteId = &v
}

// GetSsid returns the Ssid field value if set, zero value otherwise.
func (o *EventNacClient) GetSsid() string {
	if o == nil || IsNil(o.Ssid) {
		var ret string
		return ret
	}
	return *o.Ssid
}

// GetSsidOk returns a tuple with the Ssid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetSsidOk() (*string, bool) {
	if o == nil || IsNil(o.Ssid) {
		return nil, false
	}
	return o.Ssid, true
}

// HasSsid returns a boolean if a field has been set.
func (o *EventNacClient) HasSsid() bool {
	if o != nil && !IsNil(o.Ssid) {
		return true
	}

	return false
}

// SetSsid gets a reference to the given string and assigns it to the Ssid field.
func (o *EventNacClient) SetSsid(v string) {
	o.Ssid = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *EventNacClient) GetTimestamp() float32 {
	if o == nil || IsNil(o.Timestamp) {
		var ret float32
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetTimestampOk() (*float32, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *EventNacClient) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given float32 and assigns it to the Timestamp field.
func (o *EventNacClient) SetTimestamp(v float32) {
	o.Timestamp = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EventNacClient) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EventNacClient) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EventNacClient) SetType(v string) {
	o.Type = &v
}

// GetUsermacLabels returns the UsermacLabels field value if set, zero value otherwise.
func (o *EventNacClient) GetUsermacLabels() []string {
	if o == nil || IsNil(o.UsermacLabels) {
		var ret []string
		return ret
	}
	return o.UsermacLabels
}

// GetUsermacLabelsOk returns a tuple with the UsermacLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetUsermacLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.UsermacLabels) {
		return nil, false
	}
	return o.UsermacLabels, true
}

// HasUsermacLabels returns a boolean if a field has been set.
func (o *EventNacClient) HasUsermacLabels() bool {
	if o != nil && !IsNil(o.UsermacLabels) {
		return true
	}

	return false
}

// SetUsermacLabels gets a reference to the given []string and assigns it to the UsermacLabels field.
func (o *EventNacClient) SetUsermacLabels(v []string) {
	o.UsermacLabels = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *EventNacClient) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *EventNacClient) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *EventNacClient) SetUsername(v string) {
	o.Username = &v
}

// GetVlan returns the Vlan field value if set, zero value otherwise.
func (o *EventNacClient) GetVlan() string {
	if o == nil || IsNil(o.Vlan) {
		var ret string
		return ret
	}
	return *o.Vlan
}

// GetVlanOk returns a tuple with the Vlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetVlanOk() (*string, bool) {
	if o == nil || IsNil(o.Vlan) {
		return nil, false
	}
	return o.Vlan, true
}

// HasVlan returns a boolean if a field has been set.
func (o *EventNacClient) HasVlan() bool {
	if o != nil && !IsNil(o.Vlan) {
		return true
	}

	return false
}

// SetVlan gets a reference to the given string and assigns it to the Vlan field.
func (o *EventNacClient) SetVlan(v string) {
	o.Vlan = &v
}

// GetVlanSource returns the VlanSource field value if set, zero value otherwise.
func (o *EventNacClient) GetVlanSource() string {
	if o == nil || IsNil(o.VlanSource) {
		var ret string
		return ret
	}
	return *o.VlanSource
}

// GetVlanSourceOk returns a tuple with the VlanSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNacClient) GetVlanSourceOk() (*string, bool) {
	if o == nil || IsNil(o.VlanSource) {
		return nil, false
	}
	return o.VlanSource, true
}

// HasVlanSource returns a boolean if a field has been set.
func (o *EventNacClient) HasVlanSource() bool {
	if o != nil && !IsNil(o.VlanSource) {
		return true
	}

	return false
}

// SetVlanSource gets a reference to the given string and assigns it to the VlanSource field.
func (o *EventNacClient) SetVlanSource(v string) {
	o.VlanSource = &v
}

func (o EventNacClient) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventNacClient) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ap) {
		toSerialize["ap"] = o.Ap
	}
	if !IsNil(o.AuthType) {
		toSerialize["auth_type"] = o.AuthType
	}
	if !IsNil(o.Bssid) {
		toSerialize["bssid"] = o.Bssid
	}
	if !IsNil(o.DeviceMac) {
		toSerialize["device_mac"] = o.DeviceMac
	}
	if !IsNil(o.DryrunNacruleId) {
		toSerialize["dryrun_nacrule_id"] = o.DryrunNacruleId
	}
	if !IsNil(o.DryrunNacruleMatched) {
		toSerialize["dryrun_nacrule_matched"] = o.DryrunNacruleMatched
	}
	if !IsNil(o.IdpId) {
		toSerialize["idp_id"] = o.IdpId
	}
	if !IsNil(o.IdpRole) {
		toSerialize["idp_role"] = o.IdpRole
	}
	if !IsNil(o.IdpUsername) {
		toSerialize["idp_username"] = o.IdpUsername
	}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if !IsNil(o.MxedgeId) {
		toSerialize["mxedge_id"] = o.MxedgeId
	}
	if !IsNil(o.NacruleId) {
		toSerialize["nacrule_id"] = o.NacruleId
	}
	if !IsNil(o.NacruleMatched) {
		toSerialize["nacrule_matched"] = o.NacruleMatched
	}
	if !IsNil(o.NasVendor) {
		toSerialize["nas_vendor"] = o.NasVendor
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.PortId) {
		toSerialize["port_id"] = o.PortId
	}
	if !IsNil(o.PortType) {
		toSerialize["port_type"] = o.PortType
	}
	if !IsNil(o.RandomMac) {
		toSerialize["random_mac"] = o.RandomMac
	}
	if !IsNil(o.RespAttrs) {
		toSerialize["resp_attrs"] = o.RespAttrs
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.Ssid) {
		toSerialize["ssid"] = o.Ssid
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UsermacLabels) {
		toSerialize["usermac_labels"] = o.UsermacLabels
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Vlan) {
		toSerialize["vlan"] = o.Vlan
	}
	if !IsNil(o.VlanSource) {
		toSerialize["vlan_source"] = o.VlanSource
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EventNacClient) UnmarshalJSON(data []byte) (err error) {
	varEventNacClient := _EventNacClient{}

	err = json.Unmarshal(data, &varEventNacClient)

	if err != nil {
		return err
	}

	*o = EventNacClient(varEventNacClient)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ap")
		delete(additionalProperties, "auth_type")
		delete(additionalProperties, "bssid")
		delete(additionalProperties, "device_mac")
		delete(additionalProperties, "dryrun_nacrule_id")
		delete(additionalProperties, "dryrun_nacrule_matched")
		delete(additionalProperties, "idp_id")
		delete(additionalProperties, "idp_role")
		delete(additionalProperties, "idp_username")
		delete(additionalProperties, "mac")
		delete(additionalProperties, "mxedge_id")
		delete(additionalProperties, "nacrule_id")
		delete(additionalProperties, "nacrule_matched")
		delete(additionalProperties, "nas_vendor")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "port_id")
		delete(additionalProperties, "port_type")
		delete(additionalProperties, "random_mac")
		delete(additionalProperties, "resp_attrs")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "ssid")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "type")
		delete(additionalProperties, "usermac_labels")
		delete(additionalProperties, "username")
		delete(additionalProperties, "vlan")
		delete(additionalProperties, "vlan_source")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEventNacClient struct {
	value *EventNacClient
	isSet bool
}

func (v NullableEventNacClient) Get() *EventNacClient {
	return v.value
}

func (v *NullableEventNacClient) Set(val *EventNacClient) {
	v.value = val
	v.isSet = true
}

func (v NullableEventNacClient) IsSet() bool {
	return v.isSet
}

func (v *NullableEventNacClient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventNacClient(val *EventNacClient) *NullableEventNacClient {
	return &NullableEventNacClient{value: val, isSet: true}
}

func (v NullableEventNacClient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventNacClient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


