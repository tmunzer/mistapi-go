/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the Tacacs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tacacs{}

// Tacacs struct for Tacacs
type Tacacs struct {
	AcctServers []TacacsAcctServer `json:"acct_servers,omitempty"`
	DefaultRole *TacacsDefaultRole `json:"default_role,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	// which network the TACACS server resides
	Network *string `json:"network,omitempty"`
	TacplusServers []TacacsAuthServer `json:"tacplus_servers,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Tacacs Tacacs

// NewTacacs instantiates a new Tacacs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTacacs() *Tacacs {
	this := Tacacs{}
	var defaultRole TacacsDefaultRole = TACACSDEFAULTROLE_NONE
	this.DefaultRole = &defaultRole
	return &this
}

// NewTacacsWithDefaults instantiates a new Tacacs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTacacsWithDefaults() *Tacacs {
	this := Tacacs{}
	var defaultRole TacacsDefaultRole = TACACSDEFAULTROLE_NONE
	this.DefaultRole = &defaultRole
	return &this
}

// GetAcctServers returns the AcctServers field value if set, zero value otherwise.
func (o *Tacacs) GetAcctServers() []TacacsAcctServer {
	if o == nil || IsNil(o.AcctServers) {
		var ret []TacacsAcctServer
		return ret
	}
	return o.AcctServers
}

// GetAcctServersOk returns a tuple with the AcctServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tacacs) GetAcctServersOk() ([]TacacsAcctServer, bool) {
	if o == nil || IsNil(o.AcctServers) {
		return nil, false
	}
	return o.AcctServers, true
}

// HasAcctServers returns a boolean if a field has been set.
func (o *Tacacs) HasAcctServers() bool {
	if o != nil && !IsNil(o.AcctServers) {
		return true
	}

	return false
}

// SetAcctServers gets a reference to the given []TacacsAcctServer and assigns it to the AcctServers field.
func (o *Tacacs) SetAcctServers(v []TacacsAcctServer) {
	o.AcctServers = v
}

// GetDefaultRole returns the DefaultRole field value if set, zero value otherwise.
func (o *Tacacs) GetDefaultRole() TacacsDefaultRole {
	if o == nil || IsNil(o.DefaultRole) {
		var ret TacacsDefaultRole
		return ret
	}
	return *o.DefaultRole
}

// GetDefaultRoleOk returns a tuple with the DefaultRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tacacs) GetDefaultRoleOk() (*TacacsDefaultRole, bool) {
	if o == nil || IsNil(o.DefaultRole) {
		return nil, false
	}
	return o.DefaultRole, true
}

// HasDefaultRole returns a boolean if a field has been set.
func (o *Tacacs) HasDefaultRole() bool {
	if o != nil && !IsNil(o.DefaultRole) {
		return true
	}

	return false
}

// SetDefaultRole gets a reference to the given TacacsDefaultRole and assigns it to the DefaultRole field.
func (o *Tacacs) SetDefaultRole(v TacacsDefaultRole) {
	o.DefaultRole = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Tacacs) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tacacs) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Tacacs) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Tacacs) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *Tacacs) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tacacs) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *Tacacs) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *Tacacs) SetNetwork(v string) {
	o.Network = &v
}

// GetTacplusServers returns the TacplusServers field value if set, zero value otherwise.
func (o *Tacacs) GetTacplusServers() []TacacsAuthServer {
	if o == nil || IsNil(o.TacplusServers) {
		var ret []TacacsAuthServer
		return ret
	}
	return o.TacplusServers
}

// GetTacplusServersOk returns a tuple with the TacplusServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tacacs) GetTacplusServersOk() ([]TacacsAuthServer, bool) {
	if o == nil || IsNil(o.TacplusServers) {
		return nil, false
	}
	return o.TacplusServers, true
}

// HasTacplusServers returns a boolean if a field has been set.
func (o *Tacacs) HasTacplusServers() bool {
	if o != nil && !IsNil(o.TacplusServers) {
		return true
	}

	return false
}

// SetTacplusServers gets a reference to the given []TacacsAuthServer and assigns it to the TacplusServers field.
func (o *Tacacs) SetTacplusServers(v []TacacsAuthServer) {
	o.TacplusServers = v
}

func (o Tacacs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tacacs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AcctServers) {
		toSerialize["acct_servers"] = o.AcctServers
	}
	if !IsNil(o.DefaultRole) {
		toSerialize["default_role"] = o.DefaultRole
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.TacplusServers) {
		toSerialize["tacplus_servers"] = o.TacplusServers
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Tacacs) UnmarshalJSON(data []byte) (err error) {
	varTacacs := _Tacacs{}

	err = json.Unmarshal(data, &varTacacs)

	if err != nil {
		return err
	}

	*o = Tacacs(varTacacs)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "acct_servers")
		delete(additionalProperties, "default_role")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "network")
		delete(additionalProperties, "tacplus_servers")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTacacs struct {
	value *Tacacs
	isSet bool
}

func (v NullableTacacs) Get() *Tacacs {
	return v.value
}

func (v *NullableTacacs) Set(val *Tacacs) {
	v.value = val
	v.isSet = true
}

func (v NullableTacacs) IsSet() bool {
	return v.isSet
}

func (v *NullableTacacs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTacacs(val *Tacacs) *NullableTacacs {
	return &NullableTacacs{value: val, isSet: true}
}

func (v NullableTacacs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTacacs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


