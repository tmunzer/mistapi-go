/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the GatewayIpConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GatewayIpConfig{}

// GatewayIpConfig Junos IP Config
type GatewayIpConfig struct {
	// except for out-of_band interface (vme/em0/fxp0)
	Dns []string `json:"dns,omitempty"`
	// except for out-of_band interface (vme/em0/fxp0)
	DnsSuffix []string `json:"dns_suffix,omitempty"`
	// except for out-of_band interface (vme/em0/fxp0)
	Gateway *string `json:"gateway,omitempty"`
	Ip *string `json:"ip,omitempty"`
	// used only if `subnet` is not specified in `networks`
	Netmask *string `json:"netmask,omitempty"`
	// optional, the network to be used for mgmt
	Network *string `json:"network,omitempty"`
	// if `type`==`pppoe`
	PoserPassword *string `json:"poser_password,omitempty"`
	PppoeAuth *GatewayWanPpoeAuth `json:"pppoe_auth,omitempty"`
	// if `type`==`pppoe`
	PppoeUsername *string `json:"pppoe_username,omitempty"`
	Type *GatewayWanType `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GatewayIpConfig GatewayIpConfig

// NewGatewayIpConfig instantiates a new GatewayIpConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGatewayIpConfig() *GatewayIpConfig {
	this := GatewayIpConfig{}
	var pppoeAuth GatewayWanPpoeAuth = GATEWAYWANPPOEAUTH_NONE
	this.PppoeAuth = &pppoeAuth
	var type_ GatewayWanType = GATEWAYWANTYPE_DHCP
	this.Type = &type_
	return &this
}

// NewGatewayIpConfigWithDefaults instantiates a new GatewayIpConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGatewayIpConfigWithDefaults() *GatewayIpConfig {
	this := GatewayIpConfig{}
	var pppoeAuth GatewayWanPpoeAuth = GATEWAYWANPPOEAUTH_NONE
	this.PppoeAuth = &pppoeAuth
	var type_ GatewayWanType = GATEWAYWANTYPE_DHCP
	this.Type = &type_
	return &this
}

// GetDns returns the Dns field value if set, zero value otherwise.
func (o *GatewayIpConfig) GetDns() []string {
	if o == nil || IsNil(o.Dns) {
		var ret []string
		return ret
	}
	return o.Dns
}

// GetDnsOk returns a tuple with the Dns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayIpConfig) GetDnsOk() ([]string, bool) {
	if o == nil || IsNil(o.Dns) {
		return nil, false
	}
	return o.Dns, true
}

// HasDns returns a boolean if a field has been set.
func (o *GatewayIpConfig) HasDns() bool {
	if o != nil && !IsNil(o.Dns) {
		return true
	}

	return false
}

// SetDns gets a reference to the given []string and assigns it to the Dns field.
func (o *GatewayIpConfig) SetDns(v []string) {
	o.Dns = v
}

// GetDnsSuffix returns the DnsSuffix field value if set, zero value otherwise.
func (o *GatewayIpConfig) GetDnsSuffix() []string {
	if o == nil || IsNil(o.DnsSuffix) {
		var ret []string
		return ret
	}
	return o.DnsSuffix
}

// GetDnsSuffixOk returns a tuple with the DnsSuffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayIpConfig) GetDnsSuffixOk() ([]string, bool) {
	if o == nil || IsNil(o.DnsSuffix) {
		return nil, false
	}
	return o.DnsSuffix, true
}

// HasDnsSuffix returns a boolean if a field has been set.
func (o *GatewayIpConfig) HasDnsSuffix() bool {
	if o != nil && !IsNil(o.DnsSuffix) {
		return true
	}

	return false
}

// SetDnsSuffix gets a reference to the given []string and assigns it to the DnsSuffix field.
func (o *GatewayIpConfig) SetDnsSuffix(v []string) {
	o.DnsSuffix = v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *GatewayIpConfig) GetGateway() string {
	if o == nil || IsNil(o.Gateway) {
		var ret string
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayIpConfig) GetGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.Gateway) {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *GatewayIpConfig) HasGateway() bool {
	if o != nil && !IsNil(o.Gateway) {
		return true
	}

	return false
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *GatewayIpConfig) SetGateway(v string) {
	o.Gateway = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *GatewayIpConfig) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayIpConfig) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *GatewayIpConfig) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *GatewayIpConfig) SetIp(v string) {
	o.Ip = &v
}

// GetNetmask returns the Netmask field value if set, zero value otherwise.
func (o *GatewayIpConfig) GetNetmask() string {
	if o == nil || IsNil(o.Netmask) {
		var ret string
		return ret
	}
	return *o.Netmask
}

// GetNetmaskOk returns a tuple with the Netmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayIpConfig) GetNetmaskOk() (*string, bool) {
	if o == nil || IsNil(o.Netmask) {
		return nil, false
	}
	return o.Netmask, true
}

// HasNetmask returns a boolean if a field has been set.
func (o *GatewayIpConfig) HasNetmask() bool {
	if o != nil && !IsNil(o.Netmask) {
		return true
	}

	return false
}

// SetNetmask gets a reference to the given string and assigns it to the Netmask field.
func (o *GatewayIpConfig) SetNetmask(v string) {
	o.Netmask = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *GatewayIpConfig) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayIpConfig) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *GatewayIpConfig) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *GatewayIpConfig) SetNetwork(v string) {
	o.Network = &v
}

// GetPoserPassword returns the PoserPassword field value if set, zero value otherwise.
func (o *GatewayIpConfig) GetPoserPassword() string {
	if o == nil || IsNil(o.PoserPassword) {
		var ret string
		return ret
	}
	return *o.PoserPassword
}

// GetPoserPasswordOk returns a tuple with the PoserPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayIpConfig) GetPoserPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.PoserPassword) {
		return nil, false
	}
	return o.PoserPassword, true
}

// HasPoserPassword returns a boolean if a field has been set.
func (o *GatewayIpConfig) HasPoserPassword() bool {
	if o != nil && !IsNil(o.PoserPassword) {
		return true
	}

	return false
}

// SetPoserPassword gets a reference to the given string and assigns it to the PoserPassword field.
func (o *GatewayIpConfig) SetPoserPassword(v string) {
	o.PoserPassword = &v
}

// GetPppoeAuth returns the PppoeAuth field value if set, zero value otherwise.
func (o *GatewayIpConfig) GetPppoeAuth() GatewayWanPpoeAuth {
	if o == nil || IsNil(o.PppoeAuth) {
		var ret GatewayWanPpoeAuth
		return ret
	}
	return *o.PppoeAuth
}

// GetPppoeAuthOk returns a tuple with the PppoeAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayIpConfig) GetPppoeAuthOk() (*GatewayWanPpoeAuth, bool) {
	if o == nil || IsNil(o.PppoeAuth) {
		return nil, false
	}
	return o.PppoeAuth, true
}

// HasPppoeAuth returns a boolean if a field has been set.
func (o *GatewayIpConfig) HasPppoeAuth() bool {
	if o != nil && !IsNil(o.PppoeAuth) {
		return true
	}

	return false
}

// SetPppoeAuth gets a reference to the given GatewayWanPpoeAuth and assigns it to the PppoeAuth field.
func (o *GatewayIpConfig) SetPppoeAuth(v GatewayWanPpoeAuth) {
	o.PppoeAuth = &v
}

// GetPppoeUsername returns the PppoeUsername field value if set, zero value otherwise.
func (o *GatewayIpConfig) GetPppoeUsername() string {
	if o == nil || IsNil(o.PppoeUsername) {
		var ret string
		return ret
	}
	return *o.PppoeUsername
}

// GetPppoeUsernameOk returns a tuple with the PppoeUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayIpConfig) GetPppoeUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.PppoeUsername) {
		return nil, false
	}
	return o.PppoeUsername, true
}

// HasPppoeUsername returns a boolean if a field has been set.
func (o *GatewayIpConfig) HasPppoeUsername() bool {
	if o != nil && !IsNil(o.PppoeUsername) {
		return true
	}

	return false
}

// SetPppoeUsername gets a reference to the given string and assigns it to the PppoeUsername field.
func (o *GatewayIpConfig) SetPppoeUsername(v string) {
	o.PppoeUsername = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GatewayIpConfig) GetType() GatewayWanType {
	if o == nil || IsNil(o.Type) {
		var ret GatewayWanType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayIpConfig) GetTypeOk() (*GatewayWanType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GatewayIpConfig) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given GatewayWanType and assigns it to the Type field.
func (o *GatewayIpConfig) SetType(v GatewayWanType) {
	o.Type = &v
}

func (o GatewayIpConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GatewayIpConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dns) {
		toSerialize["dns"] = o.Dns
	}
	if !IsNil(o.DnsSuffix) {
		toSerialize["dns_suffix"] = o.DnsSuffix
	}
	if !IsNil(o.Gateway) {
		toSerialize["gateway"] = o.Gateway
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Netmask) {
		toSerialize["netmask"] = o.Netmask
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.PoserPassword) {
		toSerialize["poser_password"] = o.PoserPassword
	}
	if !IsNil(o.PppoeAuth) {
		toSerialize["pppoe_auth"] = o.PppoeAuth
	}
	if !IsNil(o.PppoeUsername) {
		toSerialize["pppoe_username"] = o.PppoeUsername
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GatewayIpConfig) UnmarshalJSON(data []byte) (err error) {
	varGatewayIpConfig := _GatewayIpConfig{}

	err = json.Unmarshal(data, &varGatewayIpConfig)

	if err != nil {
		return err
	}

	*o = GatewayIpConfig(varGatewayIpConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dns")
		delete(additionalProperties, "dns_suffix")
		delete(additionalProperties, "gateway")
		delete(additionalProperties, "ip")
		delete(additionalProperties, "netmask")
		delete(additionalProperties, "network")
		delete(additionalProperties, "poser_password")
		delete(additionalProperties, "pppoe_auth")
		delete(additionalProperties, "pppoe_username")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGatewayIpConfig struct {
	value *GatewayIpConfig
	isSet bool
}

func (v NullableGatewayIpConfig) Get() *GatewayIpConfig {
	return v.value
}

func (v *NullableGatewayIpConfig) Set(val *GatewayIpConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableGatewayIpConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableGatewayIpConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGatewayIpConfig(val *GatewayIpConfig) *NullableGatewayIpConfig {
	return &NullableGatewayIpConfig{value: val, isSet: true}
}

func (v NullableGatewayIpConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGatewayIpConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


