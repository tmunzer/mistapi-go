/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the Sso type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Sso{}

// Sso SSO
type Sso struct {
	CreatedTime *float32 `json:"created_time,omitempty"`
	// optional, a URL we will redirect the user after user logout from Mist (for some IdP which supports a custom logout URL that is different from SP-initiated SLO process)
	CustomLogoutUrl *string `json:"custom_logout_url,omitempty"`
	// default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
	DefaultRole *string `json:"default_role,omitempty"`
	Domain *string `json:"domain,omitempty"`
	Id *string `json:"id,omitempty"`
	// if `idp_type`==`saml`. IDP Cert (used to verify the signed response)
	IdpCert *string `json:"idp_cert,omitempty"`
	// if `idp_type`==`saml`. Signing algorithm for SAML Assertion
	IdpSignAlgo *string `json:"idp_sign_algo,omitempty"`
	// IDP Single-Sign-On URL
	IdpSsoUrl *string `json:"idp_sso_url,omitempty"`
	IdpType *SsoIdpType `json:"idp_type,omitempty"`
	// ignore any unmatched roles provided in assertion. By default, an assertion is treated as invalid for any unmatched role
	IgnoreUnmatchedRoles *bool `json:"ignore_unmatched_roles,omitempty"`
	// if `idp_type`==`saml`. IDP issuer URL
	Issuer *string `json:"issuer,omitempty"`
	// if `idp_type`==`ldap`
	LdapBaseDn *string `json:"ldap_base_dn,omitempty"`
	// if `idp_type`==`ldap`
	LdapBindDn *string `json:"ldap_bind_dn,omitempty"`
	// if `idp_type`==`ldap`
	LdapBindPassword *string `json:"ldap_bind_password,omitempty"`
	// if `idp_type`==`ldap`
	LdapCerts []string `json:"ldap_certs,omitempty"`
	// if `idp_type`==`ldap`
	LdapClientCert *string `json:"ldap_client_cert,omitempty"`
	// if `idp_type`==`ldap`
	LdapClientKey *string `json:"ldap_client_key,omitempty"`
	// Only if `ldap_type`==`custom`
	LdapGroupAttr *string `json:"ldap_group_attr,omitempty"`
	// Only if `ldap_type`==`custom`
	LdapGroupDn *string `json:"ldap_group_dn,omitempty"`
	// Only if `ldap_type`==`custom`
	LdapGroupFilter *string `json:"ldap_group_filter,omitempty"`
	// whether to recursively resolve LDAP groups
	LdapResolveGroups *bool `json:"ldap_resolve_groups,omitempty"`
	// if `idp_type`==`ldap`
	LdapServerHosts []string `json:"ldap_server_hosts,omitempty"`
	LdapType *SsoLdapType `json:"ldap_type,omitempty"`
	// Only if `ldap_type`==`custom`
	LdapUserFilter *string `json:"ldap_user_filter,omitempty"`
	ModifiedTime *float32 `json:"modified_time,omitempty"`
	MspId *string `json:"msp_id,omitempty"`
	MxedgeProxy *SsoMxedgeProxy `json:"mxedge_proxy,omitempty"`
	// name
	Name string `json:"name"`
	NameidFormat *SsoNameidFormat `json:"nameid_format,omitempty"`
	// if `oauth_type`==`okta`, Client Credentials
	OauthCcClientId *string `json:"oauth_cc_client_id,omitempty"`
	// if `oauth_type`==`okta`, oauth_cc_client_secret is RSA private key, of the form \"-----BEGIN RSA PRIVATE KEY--....\"
	OauthCcClientSecret *string `json:"oauth_cc_client_secret,omitempty"`
	// if `idp_type`==`oauth`
	OauthDiscoveryUrl *string `json:"oauth_discovery_url,omitempty"`
	// ropc = Resource Owner Password Credentials
	OauthRopcClientId *string `json:"oauth_ropc_client_id,omitempty"`
	// oauth_ropc_client_secret can be empty if oauth_type is azure or azure-gov
	OauthRopcClientSecret *string `json:"oauth_ropc_client_secret,omitempty"`
	// if `oauth_type`==`okta`, oauth_tenant_id
	OauthTenantId *string `json:"oauth_tenant_id,omitempty"`
	OauthType *SsoOauthType `json:"oauth_type,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	// optional, custom role attribute parsing scheme  Supported Role Parsing Schemes <table><tr><th>Name</th><th>Scheme</th></tr><tr><td>cn</td><td><ul><li>The expected role attribute format in SAML Assertion is “CN=cn,OU=ou1,OU=ou2,…”</li><li>CN (the key) is case insensitive and exactly 1 CN is expected (or the entire entry will be ignored)</li><li>E.g. if role attribute is “CN=cn,OU=ou1,OU=ou2” then parsed role value is “cn”</li></ul></td></tr></table>
	RoleAttrExtraction *string `json:"role_attr_extraction,omitempty"`
	// name of the attribute in SAML Assertion to extract role from
	RoleAttrFrom *string `json:"role_attr_from,omitempty"`
	// indicates if SCIM provisioning is enabled for the OAuth IDP
	ScimEnabled *bool `json:"scim_enabled,omitempty"`
	// scim_secret_token (generated by caller, crypto-random) is used as the Bearer token in the Authorization header of SCIM provisioning requests by the IDP
	ScimSecretToken *string `json:"scim_secret_token,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Sso Sso

// NewSso instantiates a new Sso object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSso(name string) *Sso {
	this := Sso{}
	var idpType SsoIdpType = SSOIDPTYPE_SAML
	this.IdpType = &idpType
	var ldapResolveGroups bool = false
	this.LdapResolveGroups = &ldapResolveGroups
	var ldapType SsoLdapType = SSOLDAPTYPE_AZURE
	this.LdapType = &ldapType
	this.Name = name
	var nameidFormat SsoNameidFormat = SSONAMEIDFORMAT_EMAIL
	this.NameidFormat = &nameidFormat
	var oauthType SsoOauthType = SSOOAUTHTYPE_AZURE
	this.OauthType = &oauthType
	var roleAttrFrom string = "role"
	this.RoleAttrFrom = &roleAttrFrom
	var scimEnabled bool = false
	this.ScimEnabled = &scimEnabled
	return &this
}

// NewSsoWithDefaults instantiates a new Sso object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSsoWithDefaults() *Sso {
	this := Sso{}
	var idpType SsoIdpType = SSOIDPTYPE_SAML
	this.IdpType = &idpType
	var ldapResolveGroups bool = false
	this.LdapResolveGroups = &ldapResolveGroups
	var ldapType SsoLdapType = SSOLDAPTYPE_AZURE
	this.LdapType = &ldapType
	var nameidFormat SsoNameidFormat = SSONAMEIDFORMAT_EMAIL
	this.NameidFormat = &nameidFormat
	var oauthType SsoOauthType = SSOOAUTHTYPE_AZURE
	this.OauthType = &oauthType
	var roleAttrFrom string = "role"
	this.RoleAttrFrom = &roleAttrFrom
	var scimEnabled bool = false
	this.ScimEnabled = &scimEnabled
	return &this
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *Sso) GetCreatedTime() float32 {
	if o == nil || IsNil(o.CreatedTime) {
		var ret float32
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetCreatedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *Sso) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given float32 and assigns it to the CreatedTime field.
func (o *Sso) SetCreatedTime(v float32) {
	o.CreatedTime = &v
}

// GetCustomLogoutUrl returns the CustomLogoutUrl field value if set, zero value otherwise.
func (o *Sso) GetCustomLogoutUrl() string {
	if o == nil || IsNil(o.CustomLogoutUrl) {
		var ret string
		return ret
	}
	return *o.CustomLogoutUrl
}

// GetCustomLogoutUrlOk returns a tuple with the CustomLogoutUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetCustomLogoutUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CustomLogoutUrl) {
		return nil, false
	}
	return o.CustomLogoutUrl, true
}

// HasCustomLogoutUrl returns a boolean if a field has been set.
func (o *Sso) HasCustomLogoutUrl() bool {
	if o != nil && !IsNil(o.CustomLogoutUrl) {
		return true
	}

	return false
}

// SetCustomLogoutUrl gets a reference to the given string and assigns it to the CustomLogoutUrl field.
func (o *Sso) SetCustomLogoutUrl(v string) {
	o.CustomLogoutUrl = &v
}

// GetDefaultRole returns the DefaultRole field value if set, zero value otherwise.
func (o *Sso) GetDefaultRole() string {
	if o == nil || IsNil(o.DefaultRole) {
		var ret string
		return ret
	}
	return *o.DefaultRole
}

// GetDefaultRoleOk returns a tuple with the DefaultRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetDefaultRoleOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultRole) {
		return nil, false
	}
	return o.DefaultRole, true
}

// HasDefaultRole returns a boolean if a field has been set.
func (o *Sso) HasDefaultRole() bool {
	if o != nil && !IsNil(o.DefaultRole) {
		return true
	}

	return false
}

// SetDefaultRole gets a reference to the given string and assigns it to the DefaultRole field.
func (o *Sso) SetDefaultRole(v string) {
	o.DefaultRole = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *Sso) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *Sso) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *Sso) SetDomain(v string) {
	o.Domain = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Sso) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Sso) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Sso) SetId(v string) {
	o.Id = &v
}

// GetIdpCert returns the IdpCert field value if set, zero value otherwise.
func (o *Sso) GetIdpCert() string {
	if o == nil || IsNil(o.IdpCert) {
		var ret string
		return ret
	}
	return *o.IdpCert
}

// GetIdpCertOk returns a tuple with the IdpCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetIdpCertOk() (*string, bool) {
	if o == nil || IsNil(o.IdpCert) {
		return nil, false
	}
	return o.IdpCert, true
}

// HasIdpCert returns a boolean if a field has been set.
func (o *Sso) HasIdpCert() bool {
	if o != nil && !IsNil(o.IdpCert) {
		return true
	}

	return false
}

// SetIdpCert gets a reference to the given string and assigns it to the IdpCert field.
func (o *Sso) SetIdpCert(v string) {
	o.IdpCert = &v
}

// GetIdpSignAlgo returns the IdpSignAlgo field value if set, zero value otherwise.
func (o *Sso) GetIdpSignAlgo() string {
	if o == nil || IsNil(o.IdpSignAlgo) {
		var ret string
		return ret
	}
	return *o.IdpSignAlgo
}

// GetIdpSignAlgoOk returns a tuple with the IdpSignAlgo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetIdpSignAlgoOk() (*string, bool) {
	if o == nil || IsNil(o.IdpSignAlgo) {
		return nil, false
	}
	return o.IdpSignAlgo, true
}

// HasIdpSignAlgo returns a boolean if a field has been set.
func (o *Sso) HasIdpSignAlgo() bool {
	if o != nil && !IsNil(o.IdpSignAlgo) {
		return true
	}

	return false
}

// SetIdpSignAlgo gets a reference to the given string and assigns it to the IdpSignAlgo field.
func (o *Sso) SetIdpSignAlgo(v string) {
	o.IdpSignAlgo = &v
}

// GetIdpSsoUrl returns the IdpSsoUrl field value if set, zero value otherwise.
func (o *Sso) GetIdpSsoUrl() string {
	if o == nil || IsNil(o.IdpSsoUrl) {
		var ret string
		return ret
	}
	return *o.IdpSsoUrl
}

// GetIdpSsoUrlOk returns a tuple with the IdpSsoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetIdpSsoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IdpSsoUrl) {
		return nil, false
	}
	return o.IdpSsoUrl, true
}

// HasIdpSsoUrl returns a boolean if a field has been set.
func (o *Sso) HasIdpSsoUrl() bool {
	if o != nil && !IsNil(o.IdpSsoUrl) {
		return true
	}

	return false
}

// SetIdpSsoUrl gets a reference to the given string and assigns it to the IdpSsoUrl field.
func (o *Sso) SetIdpSsoUrl(v string) {
	o.IdpSsoUrl = &v
}

// GetIdpType returns the IdpType field value if set, zero value otherwise.
func (o *Sso) GetIdpType() SsoIdpType {
	if o == nil || IsNil(o.IdpType) {
		var ret SsoIdpType
		return ret
	}
	return *o.IdpType
}

// GetIdpTypeOk returns a tuple with the IdpType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetIdpTypeOk() (*SsoIdpType, bool) {
	if o == nil || IsNil(o.IdpType) {
		return nil, false
	}
	return o.IdpType, true
}

// HasIdpType returns a boolean if a field has been set.
func (o *Sso) HasIdpType() bool {
	if o != nil && !IsNil(o.IdpType) {
		return true
	}

	return false
}

// SetIdpType gets a reference to the given SsoIdpType and assigns it to the IdpType field.
func (o *Sso) SetIdpType(v SsoIdpType) {
	o.IdpType = &v
}

// GetIgnoreUnmatchedRoles returns the IgnoreUnmatchedRoles field value if set, zero value otherwise.
func (o *Sso) GetIgnoreUnmatchedRoles() bool {
	if o == nil || IsNil(o.IgnoreUnmatchedRoles) {
		var ret bool
		return ret
	}
	return *o.IgnoreUnmatchedRoles
}

// GetIgnoreUnmatchedRolesOk returns a tuple with the IgnoreUnmatchedRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetIgnoreUnmatchedRolesOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreUnmatchedRoles) {
		return nil, false
	}
	return o.IgnoreUnmatchedRoles, true
}

// HasIgnoreUnmatchedRoles returns a boolean if a field has been set.
func (o *Sso) HasIgnoreUnmatchedRoles() bool {
	if o != nil && !IsNil(o.IgnoreUnmatchedRoles) {
		return true
	}

	return false
}

// SetIgnoreUnmatchedRoles gets a reference to the given bool and assigns it to the IgnoreUnmatchedRoles field.
func (o *Sso) SetIgnoreUnmatchedRoles(v bool) {
	o.IgnoreUnmatchedRoles = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *Sso) GetIssuer() string {
	if o == nil || IsNil(o.Issuer) {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetIssuerOk() (*string, bool) {
	if o == nil || IsNil(o.Issuer) {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *Sso) HasIssuer() bool {
	if o != nil && !IsNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *Sso) SetIssuer(v string) {
	o.Issuer = &v
}

// GetLdapBaseDn returns the LdapBaseDn field value if set, zero value otherwise.
func (o *Sso) GetLdapBaseDn() string {
	if o == nil || IsNil(o.LdapBaseDn) {
		var ret string
		return ret
	}
	return *o.LdapBaseDn
}

// GetLdapBaseDnOk returns a tuple with the LdapBaseDn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetLdapBaseDnOk() (*string, bool) {
	if o == nil || IsNil(o.LdapBaseDn) {
		return nil, false
	}
	return o.LdapBaseDn, true
}

// HasLdapBaseDn returns a boolean if a field has been set.
func (o *Sso) HasLdapBaseDn() bool {
	if o != nil && !IsNil(o.LdapBaseDn) {
		return true
	}

	return false
}

// SetLdapBaseDn gets a reference to the given string and assigns it to the LdapBaseDn field.
func (o *Sso) SetLdapBaseDn(v string) {
	o.LdapBaseDn = &v
}

// GetLdapBindDn returns the LdapBindDn field value if set, zero value otherwise.
func (o *Sso) GetLdapBindDn() string {
	if o == nil || IsNil(o.LdapBindDn) {
		var ret string
		return ret
	}
	return *o.LdapBindDn
}

// GetLdapBindDnOk returns a tuple with the LdapBindDn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetLdapBindDnOk() (*string, bool) {
	if o == nil || IsNil(o.LdapBindDn) {
		return nil, false
	}
	return o.LdapBindDn, true
}

// HasLdapBindDn returns a boolean if a field has been set.
func (o *Sso) HasLdapBindDn() bool {
	if o != nil && !IsNil(o.LdapBindDn) {
		return true
	}

	return false
}

// SetLdapBindDn gets a reference to the given string and assigns it to the LdapBindDn field.
func (o *Sso) SetLdapBindDn(v string) {
	o.LdapBindDn = &v
}

// GetLdapBindPassword returns the LdapBindPassword field value if set, zero value otherwise.
func (o *Sso) GetLdapBindPassword() string {
	if o == nil || IsNil(o.LdapBindPassword) {
		var ret string
		return ret
	}
	return *o.LdapBindPassword
}

// GetLdapBindPasswordOk returns a tuple with the LdapBindPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetLdapBindPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.LdapBindPassword) {
		return nil, false
	}
	return o.LdapBindPassword, true
}

// HasLdapBindPassword returns a boolean if a field has been set.
func (o *Sso) HasLdapBindPassword() bool {
	if o != nil && !IsNil(o.LdapBindPassword) {
		return true
	}

	return false
}

// SetLdapBindPassword gets a reference to the given string and assigns it to the LdapBindPassword field.
func (o *Sso) SetLdapBindPassword(v string) {
	o.LdapBindPassword = &v
}

// GetLdapCerts returns the LdapCerts field value if set, zero value otherwise.
func (o *Sso) GetLdapCerts() []string {
	if o == nil || IsNil(o.LdapCerts) {
		var ret []string
		return ret
	}
	return o.LdapCerts
}

// GetLdapCertsOk returns a tuple with the LdapCerts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetLdapCertsOk() ([]string, bool) {
	if o == nil || IsNil(o.LdapCerts) {
		return nil, false
	}
	return o.LdapCerts, true
}

// HasLdapCerts returns a boolean if a field has been set.
func (o *Sso) HasLdapCerts() bool {
	if o != nil && !IsNil(o.LdapCerts) {
		return true
	}

	return false
}

// SetLdapCerts gets a reference to the given []string and assigns it to the LdapCerts field.
func (o *Sso) SetLdapCerts(v []string) {
	o.LdapCerts = v
}

// GetLdapClientCert returns the LdapClientCert field value if set, zero value otherwise.
func (o *Sso) GetLdapClientCert() string {
	if o == nil || IsNil(o.LdapClientCert) {
		var ret string
		return ret
	}
	return *o.LdapClientCert
}

// GetLdapClientCertOk returns a tuple with the LdapClientCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetLdapClientCertOk() (*string, bool) {
	if o == nil || IsNil(o.LdapClientCert) {
		return nil, false
	}
	return o.LdapClientCert, true
}

// HasLdapClientCert returns a boolean if a field has been set.
func (o *Sso) HasLdapClientCert() bool {
	if o != nil && !IsNil(o.LdapClientCert) {
		return true
	}

	return false
}

// SetLdapClientCert gets a reference to the given string and assigns it to the LdapClientCert field.
func (o *Sso) SetLdapClientCert(v string) {
	o.LdapClientCert = &v
}

// GetLdapClientKey returns the LdapClientKey field value if set, zero value otherwise.
func (o *Sso) GetLdapClientKey() string {
	if o == nil || IsNil(o.LdapClientKey) {
		var ret string
		return ret
	}
	return *o.LdapClientKey
}

// GetLdapClientKeyOk returns a tuple with the LdapClientKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetLdapClientKeyOk() (*string, bool) {
	if o == nil || IsNil(o.LdapClientKey) {
		return nil, false
	}
	return o.LdapClientKey, true
}

// HasLdapClientKey returns a boolean if a field has been set.
func (o *Sso) HasLdapClientKey() bool {
	if o != nil && !IsNil(o.LdapClientKey) {
		return true
	}

	return false
}

// SetLdapClientKey gets a reference to the given string and assigns it to the LdapClientKey field.
func (o *Sso) SetLdapClientKey(v string) {
	o.LdapClientKey = &v
}

// GetLdapGroupAttr returns the LdapGroupAttr field value if set, zero value otherwise.
func (o *Sso) GetLdapGroupAttr() string {
	if o == nil || IsNil(o.LdapGroupAttr) {
		var ret string
		return ret
	}
	return *o.LdapGroupAttr
}

// GetLdapGroupAttrOk returns a tuple with the LdapGroupAttr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetLdapGroupAttrOk() (*string, bool) {
	if o == nil || IsNil(o.LdapGroupAttr) {
		return nil, false
	}
	return o.LdapGroupAttr, true
}

// HasLdapGroupAttr returns a boolean if a field has been set.
func (o *Sso) HasLdapGroupAttr() bool {
	if o != nil && !IsNil(o.LdapGroupAttr) {
		return true
	}

	return false
}

// SetLdapGroupAttr gets a reference to the given string and assigns it to the LdapGroupAttr field.
func (o *Sso) SetLdapGroupAttr(v string) {
	o.LdapGroupAttr = &v
}

// GetLdapGroupDn returns the LdapGroupDn field value if set, zero value otherwise.
func (o *Sso) GetLdapGroupDn() string {
	if o == nil || IsNil(o.LdapGroupDn) {
		var ret string
		return ret
	}
	return *o.LdapGroupDn
}

// GetLdapGroupDnOk returns a tuple with the LdapGroupDn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetLdapGroupDnOk() (*string, bool) {
	if o == nil || IsNil(o.LdapGroupDn) {
		return nil, false
	}
	return o.LdapGroupDn, true
}

// HasLdapGroupDn returns a boolean if a field has been set.
func (o *Sso) HasLdapGroupDn() bool {
	if o != nil && !IsNil(o.LdapGroupDn) {
		return true
	}

	return false
}

// SetLdapGroupDn gets a reference to the given string and assigns it to the LdapGroupDn field.
func (o *Sso) SetLdapGroupDn(v string) {
	o.LdapGroupDn = &v
}

// GetLdapGroupFilter returns the LdapGroupFilter field value if set, zero value otherwise.
func (o *Sso) GetLdapGroupFilter() string {
	if o == nil || IsNil(o.LdapGroupFilter) {
		var ret string
		return ret
	}
	return *o.LdapGroupFilter
}

// GetLdapGroupFilterOk returns a tuple with the LdapGroupFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetLdapGroupFilterOk() (*string, bool) {
	if o == nil || IsNil(o.LdapGroupFilter) {
		return nil, false
	}
	return o.LdapGroupFilter, true
}

// HasLdapGroupFilter returns a boolean if a field has been set.
func (o *Sso) HasLdapGroupFilter() bool {
	if o != nil && !IsNil(o.LdapGroupFilter) {
		return true
	}

	return false
}

// SetLdapGroupFilter gets a reference to the given string and assigns it to the LdapGroupFilter field.
func (o *Sso) SetLdapGroupFilter(v string) {
	o.LdapGroupFilter = &v
}

// GetLdapResolveGroups returns the LdapResolveGroups field value if set, zero value otherwise.
func (o *Sso) GetLdapResolveGroups() bool {
	if o == nil || IsNil(o.LdapResolveGroups) {
		var ret bool
		return ret
	}
	return *o.LdapResolveGroups
}

// GetLdapResolveGroupsOk returns a tuple with the LdapResolveGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetLdapResolveGroupsOk() (*bool, bool) {
	if o == nil || IsNil(o.LdapResolveGroups) {
		return nil, false
	}
	return o.LdapResolveGroups, true
}

// HasLdapResolveGroups returns a boolean if a field has been set.
func (o *Sso) HasLdapResolveGroups() bool {
	if o != nil && !IsNil(o.LdapResolveGroups) {
		return true
	}

	return false
}

// SetLdapResolveGroups gets a reference to the given bool and assigns it to the LdapResolveGroups field.
func (o *Sso) SetLdapResolveGroups(v bool) {
	o.LdapResolveGroups = &v
}

// GetLdapServerHosts returns the LdapServerHosts field value if set, zero value otherwise.
func (o *Sso) GetLdapServerHosts() []string {
	if o == nil || IsNil(o.LdapServerHosts) {
		var ret []string
		return ret
	}
	return o.LdapServerHosts
}

// GetLdapServerHostsOk returns a tuple with the LdapServerHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetLdapServerHostsOk() ([]string, bool) {
	if o == nil || IsNil(o.LdapServerHosts) {
		return nil, false
	}
	return o.LdapServerHosts, true
}

// HasLdapServerHosts returns a boolean if a field has been set.
func (o *Sso) HasLdapServerHosts() bool {
	if o != nil && !IsNil(o.LdapServerHosts) {
		return true
	}

	return false
}

// SetLdapServerHosts gets a reference to the given []string and assigns it to the LdapServerHosts field.
func (o *Sso) SetLdapServerHosts(v []string) {
	o.LdapServerHosts = v
}

// GetLdapType returns the LdapType field value if set, zero value otherwise.
func (o *Sso) GetLdapType() SsoLdapType {
	if o == nil || IsNil(o.LdapType) {
		var ret SsoLdapType
		return ret
	}
	return *o.LdapType
}

// GetLdapTypeOk returns a tuple with the LdapType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetLdapTypeOk() (*SsoLdapType, bool) {
	if o == nil || IsNil(o.LdapType) {
		return nil, false
	}
	return o.LdapType, true
}

// HasLdapType returns a boolean if a field has been set.
func (o *Sso) HasLdapType() bool {
	if o != nil && !IsNil(o.LdapType) {
		return true
	}

	return false
}

// SetLdapType gets a reference to the given SsoLdapType and assigns it to the LdapType field.
func (o *Sso) SetLdapType(v SsoLdapType) {
	o.LdapType = &v
}

// GetLdapUserFilter returns the LdapUserFilter field value if set, zero value otherwise.
func (o *Sso) GetLdapUserFilter() string {
	if o == nil || IsNil(o.LdapUserFilter) {
		var ret string
		return ret
	}
	return *o.LdapUserFilter
}

// GetLdapUserFilterOk returns a tuple with the LdapUserFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetLdapUserFilterOk() (*string, bool) {
	if o == nil || IsNil(o.LdapUserFilter) {
		return nil, false
	}
	return o.LdapUserFilter, true
}

// HasLdapUserFilter returns a boolean if a field has been set.
func (o *Sso) HasLdapUserFilter() bool {
	if o != nil && !IsNil(o.LdapUserFilter) {
		return true
	}

	return false
}

// SetLdapUserFilter gets a reference to the given string and assigns it to the LdapUserFilter field.
func (o *Sso) SetLdapUserFilter(v string) {
	o.LdapUserFilter = &v
}

// GetModifiedTime returns the ModifiedTime field value if set, zero value otherwise.
func (o *Sso) GetModifiedTime() float32 {
	if o == nil || IsNil(o.ModifiedTime) {
		var ret float32
		return ret
	}
	return *o.ModifiedTime
}

// GetModifiedTimeOk returns a tuple with the ModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetModifiedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.ModifiedTime) {
		return nil, false
	}
	return o.ModifiedTime, true
}

// HasModifiedTime returns a boolean if a field has been set.
func (o *Sso) HasModifiedTime() bool {
	if o != nil && !IsNil(o.ModifiedTime) {
		return true
	}

	return false
}

// SetModifiedTime gets a reference to the given float32 and assigns it to the ModifiedTime field.
func (o *Sso) SetModifiedTime(v float32) {
	o.ModifiedTime = &v
}

// GetMspId returns the MspId field value if set, zero value otherwise.
func (o *Sso) GetMspId() string {
	if o == nil || IsNil(o.MspId) {
		var ret string
		return ret
	}
	return *o.MspId
}

// GetMspIdOk returns a tuple with the MspId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetMspIdOk() (*string, bool) {
	if o == nil || IsNil(o.MspId) {
		return nil, false
	}
	return o.MspId, true
}

// HasMspId returns a boolean if a field has been set.
func (o *Sso) HasMspId() bool {
	if o != nil && !IsNil(o.MspId) {
		return true
	}

	return false
}

// SetMspId gets a reference to the given string and assigns it to the MspId field.
func (o *Sso) SetMspId(v string) {
	o.MspId = &v
}

// GetMxedgeProxy returns the MxedgeProxy field value if set, zero value otherwise.
func (o *Sso) GetMxedgeProxy() SsoMxedgeProxy {
	if o == nil || IsNil(o.MxedgeProxy) {
		var ret SsoMxedgeProxy
		return ret
	}
	return *o.MxedgeProxy
}

// GetMxedgeProxyOk returns a tuple with the MxedgeProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetMxedgeProxyOk() (*SsoMxedgeProxy, bool) {
	if o == nil || IsNil(o.MxedgeProxy) {
		return nil, false
	}
	return o.MxedgeProxy, true
}

// HasMxedgeProxy returns a boolean if a field has been set.
func (o *Sso) HasMxedgeProxy() bool {
	if o != nil && !IsNil(o.MxedgeProxy) {
		return true
	}

	return false
}

// SetMxedgeProxy gets a reference to the given SsoMxedgeProxy and assigns it to the MxedgeProxy field.
func (o *Sso) SetMxedgeProxy(v SsoMxedgeProxy) {
	o.MxedgeProxy = &v
}

// GetName returns the Name field value
func (o *Sso) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Sso) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Sso) SetName(v string) {
	o.Name = v
}

// GetNameidFormat returns the NameidFormat field value if set, zero value otherwise.
func (o *Sso) GetNameidFormat() SsoNameidFormat {
	if o == nil || IsNil(o.NameidFormat) {
		var ret SsoNameidFormat
		return ret
	}
	return *o.NameidFormat
}

// GetNameidFormatOk returns a tuple with the NameidFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetNameidFormatOk() (*SsoNameidFormat, bool) {
	if o == nil || IsNil(o.NameidFormat) {
		return nil, false
	}
	return o.NameidFormat, true
}

// HasNameidFormat returns a boolean if a field has been set.
func (o *Sso) HasNameidFormat() bool {
	if o != nil && !IsNil(o.NameidFormat) {
		return true
	}

	return false
}

// SetNameidFormat gets a reference to the given SsoNameidFormat and assigns it to the NameidFormat field.
func (o *Sso) SetNameidFormat(v SsoNameidFormat) {
	o.NameidFormat = &v
}

// GetOauthCcClientId returns the OauthCcClientId field value if set, zero value otherwise.
func (o *Sso) GetOauthCcClientId() string {
	if o == nil || IsNil(o.OauthCcClientId) {
		var ret string
		return ret
	}
	return *o.OauthCcClientId
}

// GetOauthCcClientIdOk returns a tuple with the OauthCcClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetOauthCcClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.OauthCcClientId) {
		return nil, false
	}
	return o.OauthCcClientId, true
}

// HasOauthCcClientId returns a boolean if a field has been set.
func (o *Sso) HasOauthCcClientId() bool {
	if o != nil && !IsNil(o.OauthCcClientId) {
		return true
	}

	return false
}

// SetOauthCcClientId gets a reference to the given string and assigns it to the OauthCcClientId field.
func (o *Sso) SetOauthCcClientId(v string) {
	o.OauthCcClientId = &v
}

// GetOauthCcClientSecret returns the OauthCcClientSecret field value if set, zero value otherwise.
func (o *Sso) GetOauthCcClientSecret() string {
	if o == nil || IsNil(o.OauthCcClientSecret) {
		var ret string
		return ret
	}
	return *o.OauthCcClientSecret
}

// GetOauthCcClientSecretOk returns a tuple with the OauthCcClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetOauthCcClientSecretOk() (*string, bool) {
	if o == nil || IsNil(o.OauthCcClientSecret) {
		return nil, false
	}
	return o.OauthCcClientSecret, true
}

// HasOauthCcClientSecret returns a boolean if a field has been set.
func (o *Sso) HasOauthCcClientSecret() bool {
	if o != nil && !IsNil(o.OauthCcClientSecret) {
		return true
	}

	return false
}

// SetOauthCcClientSecret gets a reference to the given string and assigns it to the OauthCcClientSecret field.
func (o *Sso) SetOauthCcClientSecret(v string) {
	o.OauthCcClientSecret = &v
}

// GetOauthDiscoveryUrl returns the OauthDiscoveryUrl field value if set, zero value otherwise.
func (o *Sso) GetOauthDiscoveryUrl() string {
	if o == nil || IsNil(o.OauthDiscoveryUrl) {
		var ret string
		return ret
	}
	return *o.OauthDiscoveryUrl
}

// GetOauthDiscoveryUrlOk returns a tuple with the OauthDiscoveryUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetOauthDiscoveryUrlOk() (*string, bool) {
	if o == nil || IsNil(o.OauthDiscoveryUrl) {
		return nil, false
	}
	return o.OauthDiscoveryUrl, true
}

// HasOauthDiscoveryUrl returns a boolean if a field has been set.
func (o *Sso) HasOauthDiscoveryUrl() bool {
	if o != nil && !IsNil(o.OauthDiscoveryUrl) {
		return true
	}

	return false
}

// SetOauthDiscoveryUrl gets a reference to the given string and assigns it to the OauthDiscoveryUrl field.
func (o *Sso) SetOauthDiscoveryUrl(v string) {
	o.OauthDiscoveryUrl = &v
}

// GetOauthRopcClientId returns the OauthRopcClientId field value if set, zero value otherwise.
func (o *Sso) GetOauthRopcClientId() string {
	if o == nil || IsNil(o.OauthRopcClientId) {
		var ret string
		return ret
	}
	return *o.OauthRopcClientId
}

// GetOauthRopcClientIdOk returns a tuple with the OauthRopcClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetOauthRopcClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.OauthRopcClientId) {
		return nil, false
	}
	return o.OauthRopcClientId, true
}

// HasOauthRopcClientId returns a boolean if a field has been set.
func (o *Sso) HasOauthRopcClientId() bool {
	if o != nil && !IsNil(o.OauthRopcClientId) {
		return true
	}

	return false
}

// SetOauthRopcClientId gets a reference to the given string and assigns it to the OauthRopcClientId field.
func (o *Sso) SetOauthRopcClientId(v string) {
	o.OauthRopcClientId = &v
}

// GetOauthRopcClientSecret returns the OauthRopcClientSecret field value if set, zero value otherwise.
func (o *Sso) GetOauthRopcClientSecret() string {
	if o == nil || IsNil(o.OauthRopcClientSecret) {
		var ret string
		return ret
	}
	return *o.OauthRopcClientSecret
}

// GetOauthRopcClientSecretOk returns a tuple with the OauthRopcClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetOauthRopcClientSecretOk() (*string, bool) {
	if o == nil || IsNil(o.OauthRopcClientSecret) {
		return nil, false
	}
	return o.OauthRopcClientSecret, true
}

// HasOauthRopcClientSecret returns a boolean if a field has been set.
func (o *Sso) HasOauthRopcClientSecret() bool {
	if o != nil && !IsNil(o.OauthRopcClientSecret) {
		return true
	}

	return false
}

// SetOauthRopcClientSecret gets a reference to the given string and assigns it to the OauthRopcClientSecret field.
func (o *Sso) SetOauthRopcClientSecret(v string) {
	o.OauthRopcClientSecret = &v
}

// GetOauthTenantId returns the OauthTenantId field value if set, zero value otherwise.
func (o *Sso) GetOauthTenantId() string {
	if o == nil || IsNil(o.OauthTenantId) {
		var ret string
		return ret
	}
	return *o.OauthTenantId
}

// GetOauthTenantIdOk returns a tuple with the OauthTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetOauthTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.OauthTenantId) {
		return nil, false
	}
	return o.OauthTenantId, true
}

// HasOauthTenantId returns a boolean if a field has been set.
func (o *Sso) HasOauthTenantId() bool {
	if o != nil && !IsNil(o.OauthTenantId) {
		return true
	}

	return false
}

// SetOauthTenantId gets a reference to the given string and assigns it to the OauthTenantId field.
func (o *Sso) SetOauthTenantId(v string) {
	o.OauthTenantId = &v
}

// GetOauthType returns the OauthType field value if set, zero value otherwise.
func (o *Sso) GetOauthType() SsoOauthType {
	if o == nil || IsNil(o.OauthType) {
		var ret SsoOauthType
		return ret
	}
	return *o.OauthType
}

// GetOauthTypeOk returns a tuple with the OauthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetOauthTypeOk() (*SsoOauthType, bool) {
	if o == nil || IsNil(o.OauthType) {
		return nil, false
	}
	return o.OauthType, true
}

// HasOauthType returns a boolean if a field has been set.
func (o *Sso) HasOauthType() bool {
	if o != nil && !IsNil(o.OauthType) {
		return true
	}

	return false
}

// SetOauthType gets a reference to the given SsoOauthType and assigns it to the OauthType field.
func (o *Sso) SetOauthType(v SsoOauthType) {
	o.OauthType = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *Sso) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *Sso) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *Sso) SetOrgId(v string) {
	o.OrgId = &v
}

// GetRoleAttrExtraction returns the RoleAttrExtraction field value if set, zero value otherwise.
func (o *Sso) GetRoleAttrExtraction() string {
	if o == nil || IsNil(o.RoleAttrExtraction) {
		var ret string
		return ret
	}
	return *o.RoleAttrExtraction
}

// GetRoleAttrExtractionOk returns a tuple with the RoleAttrExtraction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetRoleAttrExtractionOk() (*string, bool) {
	if o == nil || IsNil(o.RoleAttrExtraction) {
		return nil, false
	}
	return o.RoleAttrExtraction, true
}

// HasRoleAttrExtraction returns a boolean if a field has been set.
func (o *Sso) HasRoleAttrExtraction() bool {
	if o != nil && !IsNil(o.RoleAttrExtraction) {
		return true
	}

	return false
}

// SetRoleAttrExtraction gets a reference to the given string and assigns it to the RoleAttrExtraction field.
func (o *Sso) SetRoleAttrExtraction(v string) {
	o.RoleAttrExtraction = &v
}

// GetRoleAttrFrom returns the RoleAttrFrom field value if set, zero value otherwise.
func (o *Sso) GetRoleAttrFrom() string {
	if o == nil || IsNil(o.RoleAttrFrom) {
		var ret string
		return ret
	}
	return *o.RoleAttrFrom
}

// GetRoleAttrFromOk returns a tuple with the RoleAttrFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetRoleAttrFromOk() (*string, bool) {
	if o == nil || IsNil(o.RoleAttrFrom) {
		return nil, false
	}
	return o.RoleAttrFrom, true
}

// HasRoleAttrFrom returns a boolean if a field has been set.
func (o *Sso) HasRoleAttrFrom() bool {
	if o != nil && !IsNil(o.RoleAttrFrom) {
		return true
	}

	return false
}

// SetRoleAttrFrom gets a reference to the given string and assigns it to the RoleAttrFrom field.
func (o *Sso) SetRoleAttrFrom(v string) {
	o.RoleAttrFrom = &v
}

// GetScimEnabled returns the ScimEnabled field value if set, zero value otherwise.
func (o *Sso) GetScimEnabled() bool {
	if o == nil || IsNil(o.ScimEnabled) {
		var ret bool
		return ret
	}
	return *o.ScimEnabled
}

// GetScimEnabledOk returns a tuple with the ScimEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetScimEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ScimEnabled) {
		return nil, false
	}
	return o.ScimEnabled, true
}

// HasScimEnabled returns a boolean if a field has been set.
func (o *Sso) HasScimEnabled() bool {
	if o != nil && !IsNil(o.ScimEnabled) {
		return true
	}

	return false
}

// SetScimEnabled gets a reference to the given bool and assigns it to the ScimEnabled field.
func (o *Sso) SetScimEnabled(v bool) {
	o.ScimEnabled = &v
}

// GetScimSecretToken returns the ScimSecretToken field value if set, zero value otherwise.
func (o *Sso) GetScimSecretToken() string {
	if o == nil || IsNil(o.ScimSecretToken) {
		var ret string
		return ret
	}
	return *o.ScimSecretToken
}

// GetScimSecretTokenOk returns a tuple with the ScimSecretToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetScimSecretTokenOk() (*string, bool) {
	if o == nil || IsNil(o.ScimSecretToken) {
		return nil, false
	}
	return o.ScimSecretToken, true
}

// HasScimSecretToken returns a boolean if a field has been set.
func (o *Sso) HasScimSecretToken() bool {
	if o != nil && !IsNil(o.ScimSecretToken) {
		return true
	}

	return false
}

// SetScimSecretToken gets a reference to the given string and assigns it to the ScimSecretToken field.
func (o *Sso) SetScimSecretToken(v string) {
	o.ScimSecretToken = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *Sso) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *Sso) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *Sso) SetSiteId(v string) {
	o.SiteId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Sso) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sso) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Sso) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Sso) SetType(v string) {
	o.Type = &v
}

func (o Sso) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Sso) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.CustomLogoutUrl) {
		toSerialize["custom_logout_url"] = o.CustomLogoutUrl
	}
	if !IsNil(o.DefaultRole) {
		toSerialize["default_role"] = o.DefaultRole
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IdpCert) {
		toSerialize["idp_cert"] = o.IdpCert
	}
	if !IsNil(o.IdpSignAlgo) {
		toSerialize["idp_sign_algo"] = o.IdpSignAlgo
	}
	if !IsNil(o.IdpSsoUrl) {
		toSerialize["idp_sso_url"] = o.IdpSsoUrl
	}
	if !IsNil(o.IdpType) {
		toSerialize["idp_type"] = o.IdpType
	}
	if !IsNil(o.IgnoreUnmatchedRoles) {
		toSerialize["ignore_unmatched_roles"] = o.IgnoreUnmatchedRoles
	}
	if !IsNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	if !IsNil(o.LdapBaseDn) {
		toSerialize["ldap_base_dn"] = o.LdapBaseDn
	}
	if !IsNil(o.LdapBindDn) {
		toSerialize["ldap_bind_dn"] = o.LdapBindDn
	}
	if !IsNil(o.LdapBindPassword) {
		toSerialize["ldap_bind_password"] = o.LdapBindPassword
	}
	if !IsNil(o.LdapCerts) {
		toSerialize["ldap_certs"] = o.LdapCerts
	}
	if !IsNil(o.LdapClientCert) {
		toSerialize["ldap_client_cert"] = o.LdapClientCert
	}
	if !IsNil(o.LdapClientKey) {
		toSerialize["ldap_client_key"] = o.LdapClientKey
	}
	if !IsNil(o.LdapGroupAttr) {
		toSerialize["ldap_group_attr"] = o.LdapGroupAttr
	}
	if !IsNil(o.LdapGroupDn) {
		toSerialize["ldap_group_dn"] = o.LdapGroupDn
	}
	if !IsNil(o.LdapGroupFilter) {
		toSerialize["ldap_group_filter"] = o.LdapGroupFilter
	}
	if !IsNil(o.LdapResolveGroups) {
		toSerialize["ldap_resolve_groups"] = o.LdapResolveGroups
	}
	if !IsNil(o.LdapServerHosts) {
		toSerialize["ldap_server_hosts"] = o.LdapServerHosts
	}
	if !IsNil(o.LdapType) {
		toSerialize["ldap_type"] = o.LdapType
	}
	if !IsNil(o.LdapUserFilter) {
		toSerialize["ldap_user_filter"] = o.LdapUserFilter
	}
	if !IsNil(o.ModifiedTime) {
		toSerialize["modified_time"] = o.ModifiedTime
	}
	if !IsNil(o.MspId) {
		toSerialize["msp_id"] = o.MspId
	}
	if !IsNil(o.MxedgeProxy) {
		toSerialize["mxedge_proxy"] = o.MxedgeProxy
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.NameidFormat) {
		toSerialize["nameid_format"] = o.NameidFormat
	}
	if !IsNil(o.OauthCcClientId) {
		toSerialize["oauth_cc_client_id"] = o.OauthCcClientId
	}
	if !IsNil(o.OauthCcClientSecret) {
		toSerialize["oauth_cc_client_secret"] = o.OauthCcClientSecret
	}
	if !IsNil(o.OauthDiscoveryUrl) {
		toSerialize["oauth_discovery_url"] = o.OauthDiscoveryUrl
	}
	if !IsNil(o.OauthRopcClientId) {
		toSerialize["oauth_ropc_client_id"] = o.OauthRopcClientId
	}
	if !IsNil(o.OauthRopcClientSecret) {
		toSerialize["oauth_ropc_client_secret"] = o.OauthRopcClientSecret
	}
	if !IsNil(o.OauthTenantId) {
		toSerialize["oauth_tenant_id"] = o.OauthTenantId
	}
	if !IsNil(o.OauthType) {
		toSerialize["oauth_type"] = o.OauthType
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.RoleAttrExtraction) {
		toSerialize["role_attr_extraction"] = o.RoleAttrExtraction
	}
	if !IsNil(o.RoleAttrFrom) {
		toSerialize["role_attr_from"] = o.RoleAttrFrom
	}
	if !IsNil(o.ScimEnabled) {
		toSerialize["scim_enabled"] = o.ScimEnabled
	}
	if !IsNil(o.ScimSecretToken) {
		toSerialize["scim_secret_token"] = o.ScimSecretToken
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Sso) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSso := _Sso{}

	err = json.Unmarshal(data, &varSso)

	if err != nil {
		return err
	}

	*o = Sso(varSso)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "created_time")
		delete(additionalProperties, "custom_logout_url")
		delete(additionalProperties, "default_role")
		delete(additionalProperties, "domain")
		delete(additionalProperties, "id")
		delete(additionalProperties, "idp_cert")
		delete(additionalProperties, "idp_sign_algo")
		delete(additionalProperties, "idp_sso_url")
		delete(additionalProperties, "idp_type")
		delete(additionalProperties, "ignore_unmatched_roles")
		delete(additionalProperties, "issuer")
		delete(additionalProperties, "ldap_base_dn")
		delete(additionalProperties, "ldap_bind_dn")
		delete(additionalProperties, "ldap_bind_password")
		delete(additionalProperties, "ldap_certs")
		delete(additionalProperties, "ldap_client_cert")
		delete(additionalProperties, "ldap_client_key")
		delete(additionalProperties, "ldap_group_attr")
		delete(additionalProperties, "ldap_group_dn")
		delete(additionalProperties, "ldap_group_filter")
		delete(additionalProperties, "ldap_resolve_groups")
		delete(additionalProperties, "ldap_server_hosts")
		delete(additionalProperties, "ldap_type")
		delete(additionalProperties, "ldap_user_filter")
		delete(additionalProperties, "modified_time")
		delete(additionalProperties, "msp_id")
		delete(additionalProperties, "mxedge_proxy")
		delete(additionalProperties, "name")
		delete(additionalProperties, "nameid_format")
		delete(additionalProperties, "oauth_cc_client_id")
		delete(additionalProperties, "oauth_cc_client_secret")
		delete(additionalProperties, "oauth_discovery_url")
		delete(additionalProperties, "oauth_ropc_client_id")
		delete(additionalProperties, "oauth_ropc_client_secret")
		delete(additionalProperties, "oauth_tenant_id")
		delete(additionalProperties, "oauth_type")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "role_attr_extraction")
		delete(additionalProperties, "role_attr_from")
		delete(additionalProperties, "scim_enabled")
		delete(additionalProperties, "scim_secret_token")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSso struct {
	value *Sso
	isSet bool
}

func (v NullableSso) Get() *Sso {
	return v.value
}

func (v *NullableSso) Set(val *Sso) {
	v.value = val
	v.isSet = true
}

func (v NullableSso) IsSet() bool {
	return v.isSet
}

func (v *NullableSso) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSso(val *Sso) *NullableSso {
	return &NullableSso{value: val, isSet: true}
}

func (v NullableSso) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSso) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


