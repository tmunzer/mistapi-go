/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// GatewayWanType the model 'GatewayWanType'
type GatewayWanType string

// List of gateway_wan_type
const (
	GATEWAYWANTYPE_EMPTY GatewayWanType = ""
	GATEWAYWANTYPE_DHCP GatewayWanType = "dhcp"
	GATEWAYWANTYPE_STATIC GatewayWanType = "static"
	GATEWAYWANTYPE_PPPOE GatewayWanType = "pppoe"
)

// All allowed values of GatewayWanType enum
var AllowedGatewayWanTypeEnumValues = []GatewayWanType{
	"",
	"dhcp",
	"static",
	"pppoe",
}

func (v *GatewayWanType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GatewayWanType(value)
	for _, existing := range AllowedGatewayWanTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GatewayWanType", value)
}

// NewGatewayWanTypeFromValue returns a pointer to a valid GatewayWanType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGatewayWanTypeFromValue(v string) (*GatewayWanType, error) {
	ev := GatewayWanType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GatewayWanType: valid values are %v", v, AllowedGatewayWanTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GatewayWanType) IsValid() bool {
	for _, existing := range AllowedGatewayWanTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to gateway_wan_type value
func (v GatewayWanType) Ptr() *GatewayWanType {
	return &v
}

type NullableGatewayWanType struct {
	value *GatewayWanType
	isSet bool
}

func (v NullableGatewayWanType) Get() *GatewayWanType {
	return v.value
}

func (v *NullableGatewayWanType) Set(val *GatewayWanType) {
	v.value = val
	v.isSet = true
}

func (v NullableGatewayWanType) IsSet() bool {
	return v.isSet
}

func (v *NullableGatewayWanType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGatewayWanType(val *GatewayWanType) *NullableGatewayWanType {
	return &NullableGatewayWanType{value: val, isSet: true}
}

func (v NullableGatewayWanType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGatewayWanType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

