/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the TicketComment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TicketComment{}

// TicketComment struct for TicketComment
type TicketComment struct {
	AttachmentIds []string `json:"attachment_ids,omitempty"`
	Attachments []TicketCommentsAttachment `json:"attachments,omitempty"`
	Author string `json:"author"`
	Comment string `json:"comment"`
	CreatedAt int32 `json:"created_at"`
	AdditionalProperties map[string]interface{}
}

type _TicketComment TicketComment

// NewTicketComment instantiates a new TicketComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTicketComment(author string, comment string, createdAt int32) *TicketComment {
	this := TicketComment{}
	this.Author = author
	this.Comment = comment
	this.CreatedAt = createdAt
	return &this
}

// NewTicketCommentWithDefaults instantiates a new TicketComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTicketCommentWithDefaults() *TicketComment {
	this := TicketComment{}
	return &this
}

// GetAttachmentIds returns the AttachmentIds field value if set, zero value otherwise.
func (o *TicketComment) GetAttachmentIds() []string {
	if o == nil || IsNil(o.AttachmentIds) {
		var ret []string
		return ret
	}
	return o.AttachmentIds
}

// GetAttachmentIdsOk returns a tuple with the AttachmentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketComment) GetAttachmentIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AttachmentIds) {
		return nil, false
	}
	return o.AttachmentIds, true
}

// HasAttachmentIds returns a boolean if a field has been set.
func (o *TicketComment) HasAttachmentIds() bool {
	if o != nil && !IsNil(o.AttachmentIds) {
		return true
	}

	return false
}

// SetAttachmentIds gets a reference to the given []string and assigns it to the AttachmentIds field.
func (o *TicketComment) SetAttachmentIds(v []string) {
	o.AttachmentIds = v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *TicketComment) GetAttachments() []TicketCommentsAttachment {
	if o == nil || IsNil(o.Attachments) {
		var ret []TicketCommentsAttachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketComment) GetAttachmentsOk() ([]TicketCommentsAttachment, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *TicketComment) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []TicketCommentsAttachment and assigns it to the Attachments field.
func (o *TicketComment) SetAttachments(v []TicketCommentsAttachment) {
	o.Attachments = v
}

// GetAuthor returns the Author field value
func (o *TicketComment) GetAuthor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Author
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
func (o *TicketComment) GetAuthorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Author, true
}

// SetAuthor sets field value
func (o *TicketComment) SetAuthor(v string) {
	o.Author = v
}

// GetComment returns the Comment field value
func (o *TicketComment) GetComment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Comment
}

// GetCommentOk returns a tuple with the Comment field value
// and a boolean to check if the value has been set.
func (o *TicketComment) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Comment, true
}

// SetComment sets field value
func (o *TicketComment) SetComment(v string) {
	o.Comment = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *TicketComment) GetCreatedAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *TicketComment) GetCreatedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *TicketComment) SetCreatedAt(v int32) {
	o.CreatedAt = v
}

func (o TicketComment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TicketComment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttachmentIds) {
		toSerialize["attachment_ids"] = o.AttachmentIds
	}
	if !IsNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	toSerialize["author"] = o.Author
	toSerialize["comment"] = o.Comment
	toSerialize["created_at"] = o.CreatedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TicketComment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"author",
		"comment",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTicketComment := _TicketComment{}

	err = json.Unmarshal(data, &varTicketComment)

	if err != nil {
		return err
	}

	*o = TicketComment(varTicketComment)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "attachment_ids")
		delete(additionalProperties, "attachments")
		delete(additionalProperties, "author")
		delete(additionalProperties, "comment")
		delete(additionalProperties, "created_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTicketComment struct {
	value *TicketComment
	isSet bool
}

func (v NullableTicketComment) Get() *TicketComment {
	return v.value
}

func (v *NullableTicketComment) Set(val *TicketComment) {
	v.value = val
	v.isSet = true
}

func (v NullableTicketComment) IsSet() bool {
	return v.isSet
}

func (v *NullableTicketComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicketComment(val *TicketComment) *NullableTicketComment {
	return &NullableTicketComment{value: val, isSet: true}
}

func (v NullableTicketComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicketComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


