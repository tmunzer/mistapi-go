/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the MxclusterRadsecAuthServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MxclusterRadsecAuthServer{}

// MxclusterRadsecAuthServer struct for MxclusterRadsecAuthServer
type MxclusterRadsecAuthServer struct {
	// ip / hostname of RADIUS server
	Host *string `json:"host,omitempty"`
	// if used for Mist APs, enable keywrap algorithm. Default is false
	KeywrapEnabled *bool `json:"keywrap_enabled,omitempty"`
	KeywrapFormat NullableMxclusterRadAuthServerKeywrapFormat `json:"keywrap_format,omitempty"`
	// if used for Mist APs, encryption key
	KeywrapKek *string `json:"keywrap_kek,omitempty"`
	// if used for Mist APs, Message Authentication Code Key
	KeywrapMack *string `json:"keywrap_mack,omitempty"`
	// Auth port of RADIUS server
	Port *int32 `json:"port,omitempty"`
	// secret of RADIUS server
	Secret *string `json:"secret,omitempty"`
	// list of ssids that will use this server if match_ssid is true and match is found
	Ssids []string `json:"ssids,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MxclusterRadsecAuthServer MxclusterRadsecAuthServer

// NewMxclusterRadsecAuthServer instantiates a new MxclusterRadsecAuthServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMxclusterRadsecAuthServer() *MxclusterRadsecAuthServer {
	this := MxclusterRadsecAuthServer{}
	var keywrapFormat MxclusterRadAuthServerKeywrapFormat = MXCLUSTERRADAUTHSERVERKEYWRAPFORMAT_ASCII
	this.KeywrapFormat = *NewNullableMxclusterRadAuthServerKeywrapFormat(&keywrapFormat)
	var port int32 = 1812
	this.Port = &port
	return &this
}

// NewMxclusterRadsecAuthServerWithDefaults instantiates a new MxclusterRadsecAuthServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMxclusterRadsecAuthServerWithDefaults() *MxclusterRadsecAuthServer {
	this := MxclusterRadsecAuthServer{}
	var keywrapFormat MxclusterRadAuthServerKeywrapFormat = MXCLUSTERRADAUTHSERVERKEYWRAPFORMAT_ASCII
	this.KeywrapFormat = *NewNullableMxclusterRadAuthServerKeywrapFormat(&keywrapFormat)
	var port int32 = 1812
	this.Port = &port
	return &this
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *MxclusterRadsecAuthServer) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxclusterRadsecAuthServer) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *MxclusterRadsecAuthServer) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *MxclusterRadsecAuthServer) SetHost(v string) {
	o.Host = &v
}

// GetKeywrapEnabled returns the KeywrapEnabled field value if set, zero value otherwise.
func (o *MxclusterRadsecAuthServer) GetKeywrapEnabled() bool {
	if o == nil || IsNil(o.KeywrapEnabled) {
		var ret bool
		return ret
	}
	return *o.KeywrapEnabled
}

// GetKeywrapEnabledOk returns a tuple with the KeywrapEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxclusterRadsecAuthServer) GetKeywrapEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.KeywrapEnabled) {
		return nil, false
	}
	return o.KeywrapEnabled, true
}

// HasKeywrapEnabled returns a boolean if a field has been set.
func (o *MxclusterRadsecAuthServer) HasKeywrapEnabled() bool {
	if o != nil && !IsNil(o.KeywrapEnabled) {
		return true
	}

	return false
}

// SetKeywrapEnabled gets a reference to the given bool and assigns it to the KeywrapEnabled field.
func (o *MxclusterRadsecAuthServer) SetKeywrapEnabled(v bool) {
	o.KeywrapEnabled = &v
}

// GetKeywrapFormat returns the KeywrapFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MxclusterRadsecAuthServer) GetKeywrapFormat() MxclusterRadAuthServerKeywrapFormat {
	if o == nil || IsNil(o.KeywrapFormat.Get()) {
		var ret MxclusterRadAuthServerKeywrapFormat
		return ret
	}
	return *o.KeywrapFormat.Get()
}

// GetKeywrapFormatOk returns a tuple with the KeywrapFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MxclusterRadsecAuthServer) GetKeywrapFormatOk() (*MxclusterRadAuthServerKeywrapFormat, bool) {
	if o == nil {
		return nil, false
	}
	return o.KeywrapFormat.Get(), o.KeywrapFormat.IsSet()
}

// HasKeywrapFormat returns a boolean if a field has been set.
func (o *MxclusterRadsecAuthServer) HasKeywrapFormat() bool {
	if o != nil && o.KeywrapFormat.IsSet() {
		return true
	}

	return false
}

// SetKeywrapFormat gets a reference to the given NullableMxclusterRadAuthServerKeywrapFormat and assigns it to the KeywrapFormat field.
func (o *MxclusterRadsecAuthServer) SetKeywrapFormat(v MxclusterRadAuthServerKeywrapFormat) {
	o.KeywrapFormat.Set(&v)
}
// SetKeywrapFormatNil sets the value for KeywrapFormat to be an explicit nil
func (o *MxclusterRadsecAuthServer) SetKeywrapFormatNil() {
	o.KeywrapFormat.Set(nil)
}

// UnsetKeywrapFormat ensures that no value is present for KeywrapFormat, not even an explicit nil
func (o *MxclusterRadsecAuthServer) UnsetKeywrapFormat() {
	o.KeywrapFormat.Unset()
}

// GetKeywrapKek returns the KeywrapKek field value if set, zero value otherwise.
func (o *MxclusterRadsecAuthServer) GetKeywrapKek() string {
	if o == nil || IsNil(o.KeywrapKek) {
		var ret string
		return ret
	}
	return *o.KeywrapKek
}

// GetKeywrapKekOk returns a tuple with the KeywrapKek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxclusterRadsecAuthServer) GetKeywrapKekOk() (*string, bool) {
	if o == nil || IsNil(o.KeywrapKek) {
		return nil, false
	}
	return o.KeywrapKek, true
}

// HasKeywrapKek returns a boolean if a field has been set.
func (o *MxclusterRadsecAuthServer) HasKeywrapKek() bool {
	if o != nil && !IsNil(o.KeywrapKek) {
		return true
	}

	return false
}

// SetKeywrapKek gets a reference to the given string and assigns it to the KeywrapKek field.
func (o *MxclusterRadsecAuthServer) SetKeywrapKek(v string) {
	o.KeywrapKek = &v
}

// GetKeywrapMack returns the KeywrapMack field value if set, zero value otherwise.
func (o *MxclusterRadsecAuthServer) GetKeywrapMack() string {
	if o == nil || IsNil(o.KeywrapMack) {
		var ret string
		return ret
	}
	return *o.KeywrapMack
}

// GetKeywrapMackOk returns a tuple with the KeywrapMack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxclusterRadsecAuthServer) GetKeywrapMackOk() (*string, bool) {
	if o == nil || IsNil(o.KeywrapMack) {
		return nil, false
	}
	return o.KeywrapMack, true
}

// HasKeywrapMack returns a boolean if a field has been set.
func (o *MxclusterRadsecAuthServer) HasKeywrapMack() bool {
	if o != nil && !IsNil(o.KeywrapMack) {
		return true
	}

	return false
}

// SetKeywrapMack gets a reference to the given string and assigns it to the KeywrapMack field.
func (o *MxclusterRadsecAuthServer) SetKeywrapMack(v string) {
	o.KeywrapMack = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *MxclusterRadsecAuthServer) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxclusterRadsecAuthServer) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *MxclusterRadsecAuthServer) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *MxclusterRadsecAuthServer) SetPort(v int32) {
	o.Port = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *MxclusterRadsecAuthServer) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxclusterRadsecAuthServer) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *MxclusterRadsecAuthServer) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *MxclusterRadsecAuthServer) SetSecret(v string) {
	o.Secret = &v
}

// GetSsids returns the Ssids field value if set, zero value otherwise.
func (o *MxclusterRadsecAuthServer) GetSsids() []string {
	if o == nil || IsNil(o.Ssids) {
		var ret []string
		return ret
	}
	return o.Ssids
}

// GetSsidsOk returns a tuple with the Ssids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxclusterRadsecAuthServer) GetSsidsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ssids) {
		return nil, false
	}
	return o.Ssids, true
}

// HasSsids returns a boolean if a field has been set.
func (o *MxclusterRadsecAuthServer) HasSsids() bool {
	if o != nil && !IsNil(o.Ssids) {
		return true
	}

	return false
}

// SetSsids gets a reference to the given []string and assigns it to the Ssids field.
func (o *MxclusterRadsecAuthServer) SetSsids(v []string) {
	o.Ssids = v
}

func (o MxclusterRadsecAuthServer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MxclusterRadsecAuthServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.KeywrapEnabled) {
		toSerialize["keywrap_enabled"] = o.KeywrapEnabled
	}
	if o.KeywrapFormat.IsSet() {
		toSerialize["keywrap_format"] = o.KeywrapFormat.Get()
	}
	if !IsNil(o.KeywrapKek) {
		toSerialize["keywrap_kek"] = o.KeywrapKek
	}
	if !IsNil(o.KeywrapMack) {
		toSerialize["keywrap_mack"] = o.KeywrapMack
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	if !IsNil(o.Ssids) {
		toSerialize["ssids"] = o.Ssids
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MxclusterRadsecAuthServer) UnmarshalJSON(data []byte) (err error) {
	varMxclusterRadsecAuthServer := _MxclusterRadsecAuthServer{}

	err = json.Unmarshal(data, &varMxclusterRadsecAuthServer)

	if err != nil {
		return err
	}

	*o = MxclusterRadsecAuthServer(varMxclusterRadsecAuthServer)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "host")
		delete(additionalProperties, "keywrap_enabled")
		delete(additionalProperties, "keywrap_format")
		delete(additionalProperties, "keywrap_kek")
		delete(additionalProperties, "keywrap_mack")
		delete(additionalProperties, "port")
		delete(additionalProperties, "secret")
		delete(additionalProperties, "ssids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMxclusterRadsecAuthServer struct {
	value *MxclusterRadsecAuthServer
	isSet bool
}

func (v NullableMxclusterRadsecAuthServer) Get() *MxclusterRadsecAuthServer {
	return v.value
}

func (v *NullableMxclusterRadsecAuthServer) Set(val *MxclusterRadsecAuthServer) {
	v.value = val
	v.isSet = true
}

func (v NullableMxclusterRadsecAuthServer) IsSet() bool {
	return v.isSet
}

func (v *NullableMxclusterRadsecAuthServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMxclusterRadsecAuthServer(val *MxclusterRadsecAuthServer) *NullableMxclusterRadsecAuthServer {
	return &NullableMxclusterRadsecAuthServer{value: val, isSet: true}
}

func (v NullableMxclusterRadsecAuthServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMxclusterRadsecAuthServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


