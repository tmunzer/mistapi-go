/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the WxlanTag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WxlanTag{}

// WxlanTag WxLAN Tag * type: ** client: created manually (e.g. on wireless client table, when they spot a device of interest, they can create a wxlan tag for it ** resource: created automatically when we discover a network resource ** subnet: create automatically when a subnet is discovered  * match: ** wlan_id, ap_id: values are a list of Wlan / Device ids ** client_mac: values are a list of MAC addresses  * radius_group: this is a smart tag that matches RADIUS-Filter-ID, Airespace-ACL-Name (VendorID=14179, VendorType=6) / Aruba-User-Role (VendorID=14823, VendorType=1) * radius_username: this matches the ATTR-User-Name(1) * radius_class: thie matches the ATTR-Class(25) * radius_attr: the values are [ “6=1”, “26=10.2.3.4” ], this support other RADIUS attributes where we know the type * radius_vendor: the values are [ “14179.10=1”, “14178.16=1.2.3.4” ], this matches vendor attributes and will be dynamically evaluated
type WxlanTag struct {
	CreatedTime *float32 `json:"created_time,omitempty"`
	ForSite *bool `json:"for_site,omitempty"`
	Id *string `json:"id,omitempty"`
	LastIps []string `json:"last_ips,omitempty"`
	Mac NullableString `json:"mac,omitempty"`
	Match *WxlanTagMatch `json:"match,omitempty"`
	ModifiedTime *float32 `json:"modified_time,omitempty"`
	// The name
	Name string `json:"name"`
	Op *WxlanTagOperation `json:"op,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	ResourceMac NullableString `json:"resource_mac,omitempty"`
	Services []string `json:"services,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	// if `type`==`specs`
	Specs []WxlanTagSpec `json:"specs,omitempty"`
	Subnet *string `json:"subnet,omitempty"`
	Type WxlanTagType `json:"type"`
	// if `type`!=`vlan_id` and `type`!=`specs`, list of values to match
	Values []string `json:"values,omitempty"`
	// if `type`==`vlan_id`
	VlanId *int32 `json:"vlan_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WxlanTag WxlanTag

// NewWxlanTag instantiates a new WxlanTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWxlanTag(name string, type_ WxlanTagType) *WxlanTag {
	this := WxlanTag{}
	this.Name = name
	var op WxlanTagOperation = WXLANTAGOPERATION_IN
	this.Op = &op
	this.Type = type_
	return &this
}

// NewWxlanTagWithDefaults instantiates a new WxlanTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWxlanTagWithDefaults() *WxlanTag {
	this := WxlanTag{}
	var op WxlanTagOperation = WXLANTAGOPERATION_IN
	this.Op = &op
	return &this
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *WxlanTag) GetCreatedTime() float32 {
	if o == nil || IsNil(o.CreatedTime) {
		var ret float32
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanTag) GetCreatedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *WxlanTag) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given float32 and assigns it to the CreatedTime field.
func (o *WxlanTag) SetCreatedTime(v float32) {
	o.CreatedTime = &v
}

// GetForSite returns the ForSite field value if set, zero value otherwise.
func (o *WxlanTag) GetForSite() bool {
	if o == nil || IsNil(o.ForSite) {
		var ret bool
		return ret
	}
	return *o.ForSite
}

// GetForSiteOk returns a tuple with the ForSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanTag) GetForSiteOk() (*bool, bool) {
	if o == nil || IsNil(o.ForSite) {
		return nil, false
	}
	return o.ForSite, true
}

// HasForSite returns a boolean if a field has been set.
func (o *WxlanTag) HasForSite() bool {
	if o != nil && !IsNil(o.ForSite) {
		return true
	}

	return false
}

// SetForSite gets a reference to the given bool and assigns it to the ForSite field.
func (o *WxlanTag) SetForSite(v bool) {
	o.ForSite = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WxlanTag) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanTag) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WxlanTag) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WxlanTag) SetId(v string) {
	o.Id = &v
}

// GetLastIps returns the LastIps field value if set, zero value otherwise.
func (o *WxlanTag) GetLastIps() []string {
	if o == nil || IsNil(o.LastIps) {
		var ret []string
		return ret
	}
	return o.LastIps
}

// GetLastIpsOk returns a tuple with the LastIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanTag) GetLastIpsOk() ([]string, bool) {
	if o == nil || IsNil(o.LastIps) {
		return nil, false
	}
	return o.LastIps, true
}

// HasLastIps returns a boolean if a field has been set.
func (o *WxlanTag) HasLastIps() bool {
	if o != nil && !IsNil(o.LastIps) {
		return true
	}

	return false
}

// SetLastIps gets a reference to the given []string and assigns it to the LastIps field.
func (o *WxlanTag) SetLastIps(v []string) {
	o.LastIps = v
}

// GetMac returns the Mac field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WxlanTag) GetMac() string {
	if o == nil || IsNil(o.Mac.Get()) {
		var ret string
		return ret
	}
	return *o.Mac.Get()
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WxlanTag) GetMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mac.Get(), o.Mac.IsSet()
}

// HasMac returns a boolean if a field has been set.
func (o *WxlanTag) HasMac() bool {
	if o != nil && o.Mac.IsSet() {
		return true
	}

	return false
}

// SetMac gets a reference to the given NullableString and assigns it to the Mac field.
func (o *WxlanTag) SetMac(v string) {
	o.Mac.Set(&v)
}
// SetMacNil sets the value for Mac to be an explicit nil
func (o *WxlanTag) SetMacNil() {
	o.Mac.Set(nil)
}

// UnsetMac ensures that no value is present for Mac, not even an explicit nil
func (o *WxlanTag) UnsetMac() {
	o.Mac.Unset()
}

// GetMatch returns the Match field value if set, zero value otherwise.
func (o *WxlanTag) GetMatch() WxlanTagMatch {
	if o == nil || IsNil(o.Match) {
		var ret WxlanTagMatch
		return ret
	}
	return *o.Match
}

// GetMatchOk returns a tuple with the Match field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanTag) GetMatchOk() (*WxlanTagMatch, bool) {
	if o == nil || IsNil(o.Match) {
		return nil, false
	}
	return o.Match, true
}

// HasMatch returns a boolean if a field has been set.
func (o *WxlanTag) HasMatch() bool {
	if o != nil && !IsNil(o.Match) {
		return true
	}

	return false
}

// SetMatch gets a reference to the given WxlanTagMatch and assigns it to the Match field.
func (o *WxlanTag) SetMatch(v WxlanTagMatch) {
	o.Match = &v
}

// GetModifiedTime returns the ModifiedTime field value if set, zero value otherwise.
func (o *WxlanTag) GetModifiedTime() float32 {
	if o == nil || IsNil(o.ModifiedTime) {
		var ret float32
		return ret
	}
	return *o.ModifiedTime
}

// GetModifiedTimeOk returns a tuple with the ModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanTag) GetModifiedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.ModifiedTime) {
		return nil, false
	}
	return o.ModifiedTime, true
}

// HasModifiedTime returns a boolean if a field has been set.
func (o *WxlanTag) HasModifiedTime() bool {
	if o != nil && !IsNil(o.ModifiedTime) {
		return true
	}

	return false
}

// SetModifiedTime gets a reference to the given float32 and assigns it to the ModifiedTime field.
func (o *WxlanTag) SetModifiedTime(v float32) {
	o.ModifiedTime = &v
}

// GetName returns the Name field value
func (o *WxlanTag) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WxlanTag) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WxlanTag) SetName(v string) {
	o.Name = v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *WxlanTag) GetOp() WxlanTagOperation {
	if o == nil || IsNil(o.Op) {
		var ret WxlanTagOperation
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanTag) GetOpOk() (*WxlanTagOperation, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *WxlanTag) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given WxlanTagOperation and assigns it to the Op field.
func (o *WxlanTag) SetOp(v WxlanTagOperation) {
	o.Op = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *WxlanTag) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanTag) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *WxlanTag) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *WxlanTag) SetOrgId(v string) {
	o.OrgId = &v
}

// GetResourceMac returns the ResourceMac field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WxlanTag) GetResourceMac() string {
	if o == nil || IsNil(o.ResourceMac.Get()) {
		var ret string
		return ret
	}
	return *o.ResourceMac.Get()
}

// GetResourceMacOk returns a tuple with the ResourceMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WxlanTag) GetResourceMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceMac.Get(), o.ResourceMac.IsSet()
}

// HasResourceMac returns a boolean if a field has been set.
func (o *WxlanTag) HasResourceMac() bool {
	if o != nil && o.ResourceMac.IsSet() {
		return true
	}

	return false
}

// SetResourceMac gets a reference to the given NullableString and assigns it to the ResourceMac field.
func (o *WxlanTag) SetResourceMac(v string) {
	o.ResourceMac.Set(&v)
}
// SetResourceMacNil sets the value for ResourceMac to be an explicit nil
func (o *WxlanTag) SetResourceMacNil() {
	o.ResourceMac.Set(nil)
}

// UnsetResourceMac ensures that no value is present for ResourceMac, not even an explicit nil
func (o *WxlanTag) UnsetResourceMac() {
	o.ResourceMac.Unset()
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *WxlanTag) GetServices() []string {
	if o == nil || IsNil(o.Services) {
		var ret []string
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanTag) GetServicesOk() ([]string, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *WxlanTag) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []string and assigns it to the Services field.
func (o *WxlanTag) SetServices(v []string) {
	o.Services = v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *WxlanTag) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanTag) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *WxlanTag) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *WxlanTag) SetSiteId(v string) {
	o.SiteId = &v
}

// GetSpecs returns the Specs field value if set, zero value otherwise.
func (o *WxlanTag) GetSpecs() []WxlanTagSpec {
	if o == nil || IsNil(o.Specs) {
		var ret []WxlanTagSpec
		return ret
	}
	return o.Specs
}

// GetSpecsOk returns a tuple with the Specs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanTag) GetSpecsOk() ([]WxlanTagSpec, bool) {
	if o == nil || IsNil(o.Specs) {
		return nil, false
	}
	return o.Specs, true
}

// HasSpecs returns a boolean if a field has been set.
func (o *WxlanTag) HasSpecs() bool {
	if o != nil && !IsNil(o.Specs) {
		return true
	}

	return false
}

// SetSpecs gets a reference to the given []WxlanTagSpec and assigns it to the Specs field.
func (o *WxlanTag) SetSpecs(v []WxlanTagSpec) {
	o.Specs = v
}

// GetSubnet returns the Subnet field value if set, zero value otherwise.
func (o *WxlanTag) GetSubnet() string {
	if o == nil || IsNil(o.Subnet) {
		var ret string
		return ret
	}
	return *o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanTag) GetSubnetOk() (*string, bool) {
	if o == nil || IsNil(o.Subnet) {
		return nil, false
	}
	return o.Subnet, true
}

// HasSubnet returns a boolean if a field has been set.
func (o *WxlanTag) HasSubnet() bool {
	if o != nil && !IsNil(o.Subnet) {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given string and assigns it to the Subnet field.
func (o *WxlanTag) SetSubnet(v string) {
	o.Subnet = &v
}

// GetType returns the Type field value
func (o *WxlanTag) GetType() WxlanTagType {
	if o == nil {
		var ret WxlanTagType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *WxlanTag) GetTypeOk() (*WxlanTagType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *WxlanTag) SetType(v WxlanTagType) {
	o.Type = v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *WxlanTag) GetValues() []string {
	if o == nil || IsNil(o.Values) {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanTag) GetValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *WxlanTag) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *WxlanTag) SetValues(v []string) {
	o.Values = v
}

// GetVlanId returns the VlanId field value if set, zero value otherwise.
func (o *WxlanTag) GetVlanId() int32 {
	if o == nil || IsNil(o.VlanId) {
		var ret int32
		return ret
	}
	return *o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanTag) GetVlanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VlanId) {
		return nil, false
	}
	return o.VlanId, true
}

// HasVlanId returns a boolean if a field has been set.
func (o *WxlanTag) HasVlanId() bool {
	if o != nil && !IsNil(o.VlanId) {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given int32 and assigns it to the VlanId field.
func (o *WxlanTag) SetVlanId(v int32) {
	o.VlanId = &v
}

func (o WxlanTag) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WxlanTag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.ForSite) {
		toSerialize["for_site"] = o.ForSite
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastIps) {
		toSerialize["last_ips"] = o.LastIps
	}
	if o.Mac.IsSet() {
		toSerialize["mac"] = o.Mac.Get()
	}
	if !IsNil(o.Match) {
		toSerialize["match"] = o.Match
	}
	if !IsNil(o.ModifiedTime) {
		toSerialize["modified_time"] = o.ModifiedTime
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if o.ResourceMac.IsSet() {
		toSerialize["resource_mac"] = o.ResourceMac.Get()
	}
	if !IsNil(o.Services) {
		toSerialize["services"] = o.Services
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.Specs) {
		toSerialize["specs"] = o.Specs
	}
	if !IsNil(o.Subnet) {
		toSerialize["subnet"] = o.Subnet
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	if !IsNil(o.VlanId) {
		toSerialize["vlan_id"] = o.VlanId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WxlanTag) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWxlanTag := _WxlanTag{}

	err = json.Unmarshal(data, &varWxlanTag)

	if err != nil {
		return err
	}

	*o = WxlanTag(varWxlanTag)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "created_time")
		delete(additionalProperties, "for_site")
		delete(additionalProperties, "id")
		delete(additionalProperties, "last_ips")
		delete(additionalProperties, "mac")
		delete(additionalProperties, "match")
		delete(additionalProperties, "modified_time")
		delete(additionalProperties, "name")
		delete(additionalProperties, "op")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "resource_mac")
		delete(additionalProperties, "services")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "specs")
		delete(additionalProperties, "subnet")
		delete(additionalProperties, "type")
		delete(additionalProperties, "values")
		delete(additionalProperties, "vlan_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWxlanTag struct {
	value *WxlanTag
	isSet bool
}

func (v NullableWxlanTag) Get() *WxlanTag {
	return v.value
}

func (v *NullableWxlanTag) Set(val *WxlanTag) {
	v.value = val
	v.isSet = true
}

func (v NullableWxlanTag) IsSet() bool {
	return v.isSet
}

func (v *NullableWxlanTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWxlanTag(val *WxlanTag) *NullableWxlanTag {
	return &NullableWxlanTag{value: val, isSet: true}
}

func (v NullableWxlanTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWxlanTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


