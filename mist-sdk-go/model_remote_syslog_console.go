/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the RemoteSyslogConsole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoteSyslogConsole{}

// RemoteSyslogConsole struct for RemoteSyslogConsole
type RemoteSyslogConsole struct {
	Contents []RemoteSyslogContent `json:"contents,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RemoteSyslogConsole RemoteSyslogConsole

// NewRemoteSyslogConsole instantiates a new RemoteSyslogConsole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteSyslogConsole() *RemoteSyslogConsole {
	this := RemoteSyslogConsole{}
	return &this
}

// NewRemoteSyslogConsoleWithDefaults instantiates a new RemoteSyslogConsole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteSyslogConsoleWithDefaults() *RemoteSyslogConsole {
	this := RemoteSyslogConsole{}
	return &this
}

// GetContents returns the Contents field value if set, zero value otherwise.
func (o *RemoteSyslogConsole) GetContents() []RemoteSyslogContent {
	if o == nil || IsNil(o.Contents) {
		var ret []RemoteSyslogContent
		return ret
	}
	return o.Contents
}

// GetContentsOk returns a tuple with the Contents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSyslogConsole) GetContentsOk() ([]RemoteSyslogContent, bool) {
	if o == nil || IsNil(o.Contents) {
		return nil, false
	}
	return o.Contents, true
}

// HasContents returns a boolean if a field has been set.
func (o *RemoteSyslogConsole) HasContents() bool {
	if o != nil && !IsNil(o.Contents) {
		return true
	}

	return false
}

// SetContents gets a reference to the given []RemoteSyslogContent and assigns it to the Contents field.
func (o *RemoteSyslogConsole) SetContents(v []RemoteSyslogContent) {
	o.Contents = v
}

func (o RemoteSyslogConsole) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoteSyslogConsole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Contents) {
		toSerialize["contents"] = o.Contents
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RemoteSyslogConsole) UnmarshalJSON(data []byte) (err error) {
	varRemoteSyslogConsole := _RemoteSyslogConsole{}

	err = json.Unmarshal(data, &varRemoteSyslogConsole)

	if err != nil {
		return err
	}

	*o = RemoteSyslogConsole(varRemoteSyslogConsole)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "contents")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRemoteSyslogConsole struct {
	value *RemoteSyslogConsole
	isSet bool
}

func (v NullableRemoteSyslogConsole) Get() *RemoteSyslogConsole {
	return v.value
}

func (v *NullableRemoteSyslogConsole) Set(val *RemoteSyslogConsole) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteSyslogConsole) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteSyslogConsole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteSyslogConsole(val *RemoteSyslogConsole) *NullableRemoteSyslogConsole {
	return &NullableRemoteSyslogConsole{value: val, isSet: true}
}

func (v NullableRemoteSyslogConsole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteSyslogConsole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


