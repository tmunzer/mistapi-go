/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the NacRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NacRule{}

// NacRule struct for NacRule
type NacRule struct {
	Action NacRuleAction `json:"action"`
	// all optional, this goes into Access-Accept
	ApplyTags []string `json:"apply_tags,omitempty"`
	CreatedTime *int32 `json:"created_time,omitempty"`
	// enabled or not
	Enabled *bool `json:"enabled,omitempty"`
	Id *string `json:"id,omitempty"`
	Matching *NacRuleMatching `json:"matching,omitempty"`
	ModifiedTime *int32 `json:"modified_time,omitempty"`
	Name string `json:"name"`
	NotMatching *NacRuleMatching `json:"not_matching,omitempty"`
	// the order of the rule, lower value implies higher priority
	Order *int32 `json:"order,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NacRule NacRule

// NewNacRule instantiates a new NacRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNacRule(action NacRuleAction, name string) *NacRule {
	this := NacRule{}
	this.Action = action
	var enabled bool = true
	this.Enabled = &enabled
	this.Name = name
	return &this
}

// NewNacRuleWithDefaults instantiates a new NacRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNacRuleWithDefaults() *NacRule {
	this := NacRule{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// GetAction returns the Action field value
func (o *NacRule) GetAction() NacRuleAction {
	if o == nil {
		var ret NacRuleAction
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *NacRule) GetActionOk() (*NacRuleAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *NacRule) SetAction(v NacRuleAction) {
	o.Action = v
}

// GetApplyTags returns the ApplyTags field value if set, zero value otherwise.
func (o *NacRule) GetApplyTags() []string {
	if o == nil || IsNil(o.ApplyTags) {
		var ret []string
		return ret
	}
	return o.ApplyTags
}

// GetApplyTagsOk returns a tuple with the ApplyTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NacRule) GetApplyTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.ApplyTags) {
		return nil, false
	}
	return o.ApplyTags, true
}

// HasApplyTags returns a boolean if a field has been set.
func (o *NacRule) HasApplyTags() bool {
	if o != nil && !IsNil(o.ApplyTags) {
		return true
	}

	return false
}

// SetApplyTags gets a reference to the given []string and assigns it to the ApplyTags field.
func (o *NacRule) SetApplyTags(v []string) {
	o.ApplyTags = v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *NacRule) GetCreatedTime() int32 {
	if o == nil || IsNil(o.CreatedTime) {
		var ret int32
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NacRule) GetCreatedTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *NacRule) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given int32 and assigns it to the CreatedTime field.
func (o *NacRule) SetCreatedTime(v int32) {
	o.CreatedTime = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *NacRule) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NacRule) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *NacRule) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *NacRule) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NacRule) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NacRule) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NacRule) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NacRule) SetId(v string) {
	o.Id = &v
}

// GetMatching returns the Matching field value if set, zero value otherwise.
func (o *NacRule) GetMatching() NacRuleMatching {
	if o == nil || IsNil(o.Matching) {
		var ret NacRuleMatching
		return ret
	}
	return *o.Matching
}

// GetMatchingOk returns a tuple with the Matching field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NacRule) GetMatchingOk() (*NacRuleMatching, bool) {
	if o == nil || IsNil(o.Matching) {
		return nil, false
	}
	return o.Matching, true
}

// HasMatching returns a boolean if a field has been set.
func (o *NacRule) HasMatching() bool {
	if o != nil && !IsNil(o.Matching) {
		return true
	}

	return false
}

// SetMatching gets a reference to the given NacRuleMatching and assigns it to the Matching field.
func (o *NacRule) SetMatching(v NacRuleMatching) {
	o.Matching = &v
}

// GetModifiedTime returns the ModifiedTime field value if set, zero value otherwise.
func (o *NacRule) GetModifiedTime() int32 {
	if o == nil || IsNil(o.ModifiedTime) {
		var ret int32
		return ret
	}
	return *o.ModifiedTime
}

// GetModifiedTimeOk returns a tuple with the ModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NacRule) GetModifiedTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.ModifiedTime) {
		return nil, false
	}
	return o.ModifiedTime, true
}

// HasModifiedTime returns a boolean if a field has been set.
func (o *NacRule) HasModifiedTime() bool {
	if o != nil && !IsNil(o.ModifiedTime) {
		return true
	}

	return false
}

// SetModifiedTime gets a reference to the given int32 and assigns it to the ModifiedTime field.
func (o *NacRule) SetModifiedTime(v int32) {
	o.ModifiedTime = &v
}

// GetName returns the Name field value
func (o *NacRule) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NacRule) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NacRule) SetName(v string) {
	o.Name = v
}

// GetNotMatching returns the NotMatching field value if set, zero value otherwise.
func (o *NacRule) GetNotMatching() NacRuleMatching {
	if o == nil || IsNil(o.NotMatching) {
		var ret NacRuleMatching
		return ret
	}
	return *o.NotMatching
}

// GetNotMatchingOk returns a tuple with the NotMatching field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NacRule) GetNotMatchingOk() (*NacRuleMatching, bool) {
	if o == nil || IsNil(o.NotMatching) {
		return nil, false
	}
	return o.NotMatching, true
}

// HasNotMatching returns a boolean if a field has been set.
func (o *NacRule) HasNotMatching() bool {
	if o != nil && !IsNil(o.NotMatching) {
		return true
	}

	return false
}

// SetNotMatching gets a reference to the given NacRuleMatching and assigns it to the NotMatching field.
func (o *NacRule) SetNotMatching(v NacRuleMatching) {
	o.NotMatching = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *NacRule) GetOrder() int32 {
	if o == nil || IsNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NacRule) GetOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *NacRule) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *NacRule) SetOrder(v int32) {
	o.Order = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *NacRule) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NacRule) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *NacRule) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *NacRule) SetOrgId(v string) {
	o.OrgId = &v
}

func (o NacRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NacRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	if !IsNil(o.ApplyTags) {
		toSerialize["apply_tags"] = o.ApplyTags
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Matching) {
		toSerialize["matching"] = o.Matching
	}
	if !IsNil(o.ModifiedTime) {
		toSerialize["modified_time"] = o.ModifiedTime
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.NotMatching) {
		toSerialize["not_matching"] = o.NotMatching
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NacRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNacRule := _NacRule{}

	err = json.Unmarshal(data, &varNacRule)

	if err != nil {
		return err
	}

	*o = NacRule(varNacRule)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "action")
		delete(additionalProperties, "apply_tags")
		delete(additionalProperties, "created_time")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "id")
		delete(additionalProperties, "matching")
		delete(additionalProperties, "modified_time")
		delete(additionalProperties, "name")
		delete(additionalProperties, "not_matching")
		delete(additionalProperties, "order")
		delete(additionalProperties, "org_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNacRule struct {
	value *NacRule
	isSet bool
}

func (v NullableNacRule) Get() *NacRule {
	return v.value
}

func (v *NullableNacRule) Set(val *NacRule) {
	v.value = val
	v.isSet = true
}

func (v NullableNacRule) IsSet() bool {
	return v.isSet
}

func (v *NullableNacRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNacRule(val *NacRule) *NullableNacRule {
	return &NullableNacRule{value: val, isSet: true}
}

func (v NullableNacRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNacRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


