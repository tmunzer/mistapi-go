/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the DeviceOtherStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceOtherStats{}

// DeviceOtherStats struct for DeviceOtherStats
type DeviceOtherStats struct {
	ConfigStatus *string `json:"config_status,omitempty"`
	LastConfig *int32 `json:"last_config,omitempty"`
	LastSeen *int32 `json:"last_seen,omitempty"`
	Mac *string `json:"mac,omitempty"`
	Status *string `json:"status,omitempty"`
	Uptime *int32 `json:"uptime,omitempty"`
	Vendor *string `json:"vendor,omitempty"`
	VendorSpecific *DeviceOtherStatsVendorSpecific `json:"vendor_specific,omitempty"`
	Version *string `json:"version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeviceOtherStats DeviceOtherStats

// NewDeviceOtherStats instantiates a new DeviceOtherStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceOtherStats() *DeviceOtherStats {
	this := DeviceOtherStats{}
	return &this
}

// NewDeviceOtherStatsWithDefaults instantiates a new DeviceOtherStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceOtherStatsWithDefaults() *DeviceOtherStats {
	this := DeviceOtherStats{}
	return &this
}

// GetConfigStatus returns the ConfigStatus field value if set, zero value otherwise.
func (o *DeviceOtherStats) GetConfigStatus() string {
	if o == nil || IsNil(o.ConfigStatus) {
		var ret string
		return ret
	}
	return *o.ConfigStatus
}

// GetConfigStatusOk returns a tuple with the ConfigStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceOtherStats) GetConfigStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigStatus) {
		return nil, false
	}
	return o.ConfigStatus, true
}

// HasConfigStatus returns a boolean if a field has been set.
func (o *DeviceOtherStats) HasConfigStatus() bool {
	if o != nil && !IsNil(o.ConfigStatus) {
		return true
	}

	return false
}

// SetConfigStatus gets a reference to the given string and assigns it to the ConfigStatus field.
func (o *DeviceOtherStats) SetConfigStatus(v string) {
	o.ConfigStatus = &v
}

// GetLastConfig returns the LastConfig field value if set, zero value otherwise.
func (o *DeviceOtherStats) GetLastConfig() int32 {
	if o == nil || IsNil(o.LastConfig) {
		var ret int32
		return ret
	}
	return *o.LastConfig
}

// GetLastConfigOk returns a tuple with the LastConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceOtherStats) GetLastConfigOk() (*int32, bool) {
	if o == nil || IsNil(o.LastConfig) {
		return nil, false
	}
	return o.LastConfig, true
}

// HasLastConfig returns a boolean if a field has been set.
func (o *DeviceOtherStats) HasLastConfig() bool {
	if o != nil && !IsNil(o.LastConfig) {
		return true
	}

	return false
}

// SetLastConfig gets a reference to the given int32 and assigns it to the LastConfig field.
func (o *DeviceOtherStats) SetLastConfig(v int32) {
	o.LastConfig = &v
}

// GetLastSeen returns the LastSeen field value if set, zero value otherwise.
func (o *DeviceOtherStats) GetLastSeen() int32 {
	if o == nil || IsNil(o.LastSeen) {
		var ret int32
		return ret
	}
	return *o.LastSeen
}

// GetLastSeenOk returns a tuple with the LastSeen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceOtherStats) GetLastSeenOk() (*int32, bool) {
	if o == nil || IsNil(o.LastSeen) {
		return nil, false
	}
	return o.LastSeen, true
}

// HasLastSeen returns a boolean if a field has been set.
func (o *DeviceOtherStats) HasLastSeen() bool {
	if o != nil && !IsNil(o.LastSeen) {
		return true
	}

	return false
}

// SetLastSeen gets a reference to the given int32 and assigns it to the LastSeen field.
func (o *DeviceOtherStats) SetLastSeen(v int32) {
	o.LastSeen = &v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *DeviceOtherStats) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceOtherStats) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *DeviceOtherStats) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *DeviceOtherStats) SetMac(v string) {
	o.Mac = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DeviceOtherStats) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceOtherStats) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DeviceOtherStats) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DeviceOtherStats) SetStatus(v string) {
	o.Status = &v
}

// GetUptime returns the Uptime field value if set, zero value otherwise.
func (o *DeviceOtherStats) GetUptime() int32 {
	if o == nil || IsNil(o.Uptime) {
		var ret int32
		return ret
	}
	return *o.Uptime
}

// GetUptimeOk returns a tuple with the Uptime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceOtherStats) GetUptimeOk() (*int32, bool) {
	if o == nil || IsNil(o.Uptime) {
		return nil, false
	}
	return o.Uptime, true
}

// HasUptime returns a boolean if a field has been set.
func (o *DeviceOtherStats) HasUptime() bool {
	if o != nil && !IsNil(o.Uptime) {
		return true
	}

	return false
}

// SetUptime gets a reference to the given int32 and assigns it to the Uptime field.
func (o *DeviceOtherStats) SetUptime(v int32) {
	o.Uptime = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *DeviceOtherStats) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceOtherStats) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *DeviceOtherStats) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *DeviceOtherStats) SetVendor(v string) {
	o.Vendor = &v
}

// GetVendorSpecific returns the VendorSpecific field value if set, zero value otherwise.
func (o *DeviceOtherStats) GetVendorSpecific() DeviceOtherStatsVendorSpecific {
	if o == nil || IsNil(o.VendorSpecific) {
		var ret DeviceOtherStatsVendorSpecific
		return ret
	}
	return *o.VendorSpecific
}

// GetVendorSpecificOk returns a tuple with the VendorSpecific field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceOtherStats) GetVendorSpecificOk() (*DeviceOtherStatsVendorSpecific, bool) {
	if o == nil || IsNil(o.VendorSpecific) {
		return nil, false
	}
	return o.VendorSpecific, true
}

// HasVendorSpecific returns a boolean if a field has been set.
func (o *DeviceOtherStats) HasVendorSpecific() bool {
	if o != nil && !IsNil(o.VendorSpecific) {
		return true
	}

	return false
}

// SetVendorSpecific gets a reference to the given DeviceOtherStatsVendorSpecific and assigns it to the VendorSpecific field.
func (o *DeviceOtherStats) SetVendorSpecific(v DeviceOtherStatsVendorSpecific) {
	o.VendorSpecific = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *DeviceOtherStats) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceOtherStats) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *DeviceOtherStats) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *DeviceOtherStats) SetVersion(v string) {
	o.Version = &v
}

func (o DeviceOtherStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceOtherStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigStatus) {
		toSerialize["config_status"] = o.ConfigStatus
	}
	if !IsNil(o.LastConfig) {
		toSerialize["last_config"] = o.LastConfig
	}
	if !IsNil(o.LastSeen) {
		toSerialize["last_seen"] = o.LastSeen
	}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Uptime) {
		toSerialize["uptime"] = o.Uptime
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	if !IsNil(o.VendorSpecific) {
		toSerialize["vendor_specific"] = o.VendorSpecific
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceOtherStats) UnmarshalJSON(data []byte) (err error) {
	varDeviceOtherStats := _DeviceOtherStats{}

	err = json.Unmarshal(data, &varDeviceOtherStats)

	if err != nil {
		return err
	}

	*o = DeviceOtherStats(varDeviceOtherStats)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "config_status")
		delete(additionalProperties, "last_config")
		delete(additionalProperties, "last_seen")
		delete(additionalProperties, "mac")
		delete(additionalProperties, "status")
		delete(additionalProperties, "uptime")
		delete(additionalProperties, "vendor")
		delete(additionalProperties, "vendor_specific")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceOtherStats struct {
	value *DeviceOtherStats
	isSet bool
}

func (v NullableDeviceOtherStats) Get() *DeviceOtherStats {
	return v.value
}

func (v *NullableDeviceOtherStats) Set(val *DeviceOtherStats) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceOtherStats) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceOtherStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceOtherStats(val *DeviceOtherStats) *NullableDeviceOtherStats {
	return &NullableDeviceOtherStats{value: val, isSet: true}
}

func (v NullableDeviceOtherStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceOtherStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


