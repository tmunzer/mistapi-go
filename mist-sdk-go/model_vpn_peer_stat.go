/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the VpnPeerStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VpnPeerStat{}

// VpnPeerStat struct for VpnPeerStat
type VpnPeerStat struct {
	// Redundancy status of the associated interface
	IsActive *bool `json:"is_active,omitempty"`
	LastSeen *float32 `json:"last_seen,omitempty"`
	Latency *float32 `json:"latency,omitempty"`
	// router mac address
	Mac *string `json:"mac,omitempty"`
	Mos *float32 `json:"mos,omitempty"`
	Mtu *int32 `json:"mtu,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	// peer router mac address
	PeerMac *string `json:"peer_mac,omitempty"`
	// peer router device interface
	PeerPortId *string `json:"peer_port_id,omitempty"`
	PeerRouterName *string `json:"peer_router_name,omitempty"`
	PeerSiteId *string `json:"peer_site_id,omitempty"`
	// router device interface
	PortId *string `json:"port_id,omitempty"`
	RouterName *string `json:"router_name,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	// `ipsec`for SRX, `svr` for 128T
	Type *string `json:"type,omitempty"`
	Up *bool `json:"up,omitempty"`
	Uptime *int32 `json:"uptime,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VpnPeerStat VpnPeerStat

// NewVpnPeerStat instantiates a new VpnPeerStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVpnPeerStat() *VpnPeerStat {
	this := VpnPeerStat{}
	return &this
}

// NewVpnPeerStatWithDefaults instantiates a new VpnPeerStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVpnPeerStatWithDefaults() *VpnPeerStat {
	this := VpnPeerStat{}
	return &this
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *VpnPeerStat) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VpnPeerStat) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *VpnPeerStat) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *VpnPeerStat) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetLastSeen returns the LastSeen field value if set, zero value otherwise.
func (o *VpnPeerStat) GetLastSeen() float32 {
	if o == nil || IsNil(o.LastSeen) {
		var ret float32
		return ret
	}
	return *o.LastSeen
}

// GetLastSeenOk returns a tuple with the LastSeen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VpnPeerStat) GetLastSeenOk() (*float32, bool) {
	if o == nil || IsNil(o.LastSeen) {
		return nil, false
	}
	return o.LastSeen, true
}

// HasLastSeen returns a boolean if a field has been set.
func (o *VpnPeerStat) HasLastSeen() bool {
	if o != nil && !IsNil(o.LastSeen) {
		return true
	}

	return false
}

// SetLastSeen gets a reference to the given float32 and assigns it to the LastSeen field.
func (o *VpnPeerStat) SetLastSeen(v float32) {
	o.LastSeen = &v
}

// GetLatency returns the Latency field value if set, zero value otherwise.
func (o *VpnPeerStat) GetLatency() float32 {
	if o == nil || IsNil(o.Latency) {
		var ret float32
		return ret
	}
	return *o.Latency
}

// GetLatencyOk returns a tuple with the Latency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VpnPeerStat) GetLatencyOk() (*float32, bool) {
	if o == nil || IsNil(o.Latency) {
		return nil, false
	}
	return o.Latency, true
}

// HasLatency returns a boolean if a field has been set.
func (o *VpnPeerStat) HasLatency() bool {
	if o != nil && !IsNil(o.Latency) {
		return true
	}

	return false
}

// SetLatency gets a reference to the given float32 and assigns it to the Latency field.
func (o *VpnPeerStat) SetLatency(v float32) {
	o.Latency = &v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *VpnPeerStat) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VpnPeerStat) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *VpnPeerStat) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *VpnPeerStat) SetMac(v string) {
	o.Mac = &v
}

// GetMos returns the Mos field value if set, zero value otherwise.
func (o *VpnPeerStat) GetMos() float32 {
	if o == nil || IsNil(o.Mos) {
		var ret float32
		return ret
	}
	return *o.Mos
}

// GetMosOk returns a tuple with the Mos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VpnPeerStat) GetMosOk() (*float32, bool) {
	if o == nil || IsNil(o.Mos) {
		return nil, false
	}
	return o.Mos, true
}

// HasMos returns a boolean if a field has been set.
func (o *VpnPeerStat) HasMos() bool {
	if o != nil && !IsNil(o.Mos) {
		return true
	}

	return false
}

// SetMos gets a reference to the given float32 and assigns it to the Mos field.
func (o *VpnPeerStat) SetMos(v float32) {
	o.Mos = &v
}

// GetMtu returns the Mtu field value if set, zero value otherwise.
func (o *VpnPeerStat) GetMtu() int32 {
	if o == nil || IsNil(o.Mtu) {
		var ret int32
		return ret
	}
	return *o.Mtu
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VpnPeerStat) GetMtuOk() (*int32, bool) {
	if o == nil || IsNil(o.Mtu) {
		return nil, false
	}
	return o.Mtu, true
}

// HasMtu returns a boolean if a field has been set.
func (o *VpnPeerStat) HasMtu() bool {
	if o != nil && !IsNil(o.Mtu) {
		return true
	}

	return false
}

// SetMtu gets a reference to the given int32 and assigns it to the Mtu field.
func (o *VpnPeerStat) SetMtu(v int32) {
	o.Mtu = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *VpnPeerStat) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VpnPeerStat) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *VpnPeerStat) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *VpnPeerStat) SetOrgId(v string) {
	o.OrgId = &v
}

// GetPeerMac returns the PeerMac field value if set, zero value otherwise.
func (o *VpnPeerStat) GetPeerMac() string {
	if o == nil || IsNil(o.PeerMac) {
		var ret string
		return ret
	}
	return *o.PeerMac
}

// GetPeerMacOk returns a tuple with the PeerMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VpnPeerStat) GetPeerMacOk() (*string, bool) {
	if o == nil || IsNil(o.PeerMac) {
		return nil, false
	}
	return o.PeerMac, true
}

// HasPeerMac returns a boolean if a field has been set.
func (o *VpnPeerStat) HasPeerMac() bool {
	if o != nil && !IsNil(o.PeerMac) {
		return true
	}

	return false
}

// SetPeerMac gets a reference to the given string and assigns it to the PeerMac field.
func (o *VpnPeerStat) SetPeerMac(v string) {
	o.PeerMac = &v
}

// GetPeerPortId returns the PeerPortId field value if set, zero value otherwise.
func (o *VpnPeerStat) GetPeerPortId() string {
	if o == nil || IsNil(o.PeerPortId) {
		var ret string
		return ret
	}
	return *o.PeerPortId
}

// GetPeerPortIdOk returns a tuple with the PeerPortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VpnPeerStat) GetPeerPortIdOk() (*string, bool) {
	if o == nil || IsNil(o.PeerPortId) {
		return nil, false
	}
	return o.PeerPortId, true
}

// HasPeerPortId returns a boolean if a field has been set.
func (o *VpnPeerStat) HasPeerPortId() bool {
	if o != nil && !IsNil(o.PeerPortId) {
		return true
	}

	return false
}

// SetPeerPortId gets a reference to the given string and assigns it to the PeerPortId field.
func (o *VpnPeerStat) SetPeerPortId(v string) {
	o.PeerPortId = &v
}

// GetPeerRouterName returns the PeerRouterName field value if set, zero value otherwise.
func (o *VpnPeerStat) GetPeerRouterName() string {
	if o == nil || IsNil(o.PeerRouterName) {
		var ret string
		return ret
	}
	return *o.PeerRouterName
}

// GetPeerRouterNameOk returns a tuple with the PeerRouterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VpnPeerStat) GetPeerRouterNameOk() (*string, bool) {
	if o == nil || IsNil(o.PeerRouterName) {
		return nil, false
	}
	return o.PeerRouterName, true
}

// HasPeerRouterName returns a boolean if a field has been set.
func (o *VpnPeerStat) HasPeerRouterName() bool {
	if o != nil && !IsNil(o.PeerRouterName) {
		return true
	}

	return false
}

// SetPeerRouterName gets a reference to the given string and assigns it to the PeerRouterName field.
func (o *VpnPeerStat) SetPeerRouterName(v string) {
	o.PeerRouterName = &v
}

// GetPeerSiteId returns the PeerSiteId field value if set, zero value otherwise.
func (o *VpnPeerStat) GetPeerSiteId() string {
	if o == nil || IsNil(o.PeerSiteId) {
		var ret string
		return ret
	}
	return *o.PeerSiteId
}

// GetPeerSiteIdOk returns a tuple with the PeerSiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VpnPeerStat) GetPeerSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.PeerSiteId) {
		return nil, false
	}
	return o.PeerSiteId, true
}

// HasPeerSiteId returns a boolean if a field has been set.
func (o *VpnPeerStat) HasPeerSiteId() bool {
	if o != nil && !IsNil(o.PeerSiteId) {
		return true
	}

	return false
}

// SetPeerSiteId gets a reference to the given string and assigns it to the PeerSiteId field.
func (o *VpnPeerStat) SetPeerSiteId(v string) {
	o.PeerSiteId = &v
}

// GetPortId returns the PortId field value if set, zero value otherwise.
func (o *VpnPeerStat) GetPortId() string {
	if o == nil || IsNil(o.PortId) {
		var ret string
		return ret
	}
	return *o.PortId
}

// GetPortIdOk returns a tuple with the PortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VpnPeerStat) GetPortIdOk() (*string, bool) {
	if o == nil || IsNil(o.PortId) {
		return nil, false
	}
	return o.PortId, true
}

// HasPortId returns a boolean if a field has been set.
func (o *VpnPeerStat) HasPortId() bool {
	if o != nil && !IsNil(o.PortId) {
		return true
	}

	return false
}

// SetPortId gets a reference to the given string and assigns it to the PortId field.
func (o *VpnPeerStat) SetPortId(v string) {
	o.PortId = &v
}

// GetRouterName returns the RouterName field value if set, zero value otherwise.
func (o *VpnPeerStat) GetRouterName() string {
	if o == nil || IsNil(o.RouterName) {
		var ret string
		return ret
	}
	return *o.RouterName
}

// GetRouterNameOk returns a tuple with the RouterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VpnPeerStat) GetRouterNameOk() (*string, bool) {
	if o == nil || IsNil(o.RouterName) {
		return nil, false
	}
	return o.RouterName, true
}

// HasRouterName returns a boolean if a field has been set.
func (o *VpnPeerStat) HasRouterName() bool {
	if o != nil && !IsNil(o.RouterName) {
		return true
	}

	return false
}

// SetRouterName gets a reference to the given string and assigns it to the RouterName field.
func (o *VpnPeerStat) SetRouterName(v string) {
	o.RouterName = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *VpnPeerStat) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VpnPeerStat) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *VpnPeerStat) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *VpnPeerStat) SetSiteId(v string) {
	o.SiteId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VpnPeerStat) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VpnPeerStat) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VpnPeerStat) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *VpnPeerStat) SetType(v string) {
	o.Type = &v
}

// GetUp returns the Up field value if set, zero value otherwise.
func (o *VpnPeerStat) GetUp() bool {
	if o == nil || IsNil(o.Up) {
		var ret bool
		return ret
	}
	return *o.Up
}

// GetUpOk returns a tuple with the Up field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VpnPeerStat) GetUpOk() (*bool, bool) {
	if o == nil || IsNil(o.Up) {
		return nil, false
	}
	return o.Up, true
}

// HasUp returns a boolean if a field has been set.
func (o *VpnPeerStat) HasUp() bool {
	if o != nil && !IsNil(o.Up) {
		return true
	}

	return false
}

// SetUp gets a reference to the given bool and assigns it to the Up field.
func (o *VpnPeerStat) SetUp(v bool) {
	o.Up = &v
}

// GetUptime returns the Uptime field value if set, zero value otherwise.
func (o *VpnPeerStat) GetUptime() int32 {
	if o == nil || IsNil(o.Uptime) {
		var ret int32
		return ret
	}
	return *o.Uptime
}

// GetUptimeOk returns a tuple with the Uptime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VpnPeerStat) GetUptimeOk() (*int32, bool) {
	if o == nil || IsNil(o.Uptime) {
		return nil, false
	}
	return o.Uptime, true
}

// HasUptime returns a boolean if a field has been set.
func (o *VpnPeerStat) HasUptime() bool {
	if o != nil && !IsNil(o.Uptime) {
		return true
	}

	return false
}

// SetUptime gets a reference to the given int32 and assigns it to the Uptime field.
func (o *VpnPeerStat) SetUptime(v int32) {
	o.Uptime = &v
}

func (o VpnPeerStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VpnPeerStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsActive) {
		toSerialize["is_active"] = o.IsActive
	}
	if !IsNil(o.LastSeen) {
		toSerialize["last_seen"] = o.LastSeen
	}
	if !IsNil(o.Latency) {
		toSerialize["latency"] = o.Latency
	}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if !IsNil(o.Mos) {
		toSerialize["mos"] = o.Mos
	}
	if !IsNil(o.Mtu) {
		toSerialize["mtu"] = o.Mtu
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.PeerMac) {
		toSerialize["peer_mac"] = o.PeerMac
	}
	if !IsNil(o.PeerPortId) {
		toSerialize["peer_port_id"] = o.PeerPortId
	}
	if !IsNil(o.PeerRouterName) {
		toSerialize["peer_router_name"] = o.PeerRouterName
	}
	if !IsNil(o.PeerSiteId) {
		toSerialize["peer_site_id"] = o.PeerSiteId
	}
	if !IsNil(o.PortId) {
		toSerialize["port_id"] = o.PortId
	}
	if !IsNil(o.RouterName) {
		toSerialize["router_name"] = o.RouterName
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Up) {
		toSerialize["up"] = o.Up
	}
	if !IsNil(o.Uptime) {
		toSerialize["uptime"] = o.Uptime
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VpnPeerStat) UnmarshalJSON(data []byte) (err error) {
	varVpnPeerStat := _VpnPeerStat{}

	err = json.Unmarshal(data, &varVpnPeerStat)

	if err != nil {
		return err
	}

	*o = VpnPeerStat(varVpnPeerStat)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "is_active")
		delete(additionalProperties, "last_seen")
		delete(additionalProperties, "latency")
		delete(additionalProperties, "mac")
		delete(additionalProperties, "mos")
		delete(additionalProperties, "mtu")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "peer_mac")
		delete(additionalProperties, "peer_port_id")
		delete(additionalProperties, "peer_router_name")
		delete(additionalProperties, "peer_site_id")
		delete(additionalProperties, "port_id")
		delete(additionalProperties, "router_name")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "up")
		delete(additionalProperties, "uptime")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVpnPeerStat struct {
	value *VpnPeerStat
	isSet bool
}

func (v NullableVpnPeerStat) Get() *VpnPeerStat {
	return v.value
}

func (v *NullableVpnPeerStat) Set(val *VpnPeerStat) {
	v.value = val
	v.isSet = true
}

func (v NullableVpnPeerStat) IsSet() bool {
	return v.isSet
}

func (v *NullableVpnPeerStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpnPeerStat(val *VpnPeerStat) *NullableVpnPeerStat {
	return &NullableVpnPeerStat{value: val, isSet: true}
}

func (v NullableVpnPeerStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpnPeerStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


