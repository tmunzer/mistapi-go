/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the OrgAutoRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrgAutoRules{}

// OrgAutoRules auto_rules in org settings
type OrgAutoRules struct {
	// \"[0:3]\"            // \"abcdef\" -> \"abc\" \"split(.)[1]\"      // \"a.b.c\" -> \"b\" \"split(-)[1][0:3]\" // \"a1234-b5678-c90\" -> \"b56\"
	Expression NullableString `json:"expression,omitempty"`
	MatchDeviceType *OrgAutoRulesMatchDeviceType `json:"match_device_type,omitempty"`
	// optional/additional filter
	MatchModel *string `json:"match_model,omitempty"`
	Model *string `json:"model,omitempty"`
	Prefix NullableString `json:"prefix,omitempty"`
	Src OrgAutoRulesSrc `json:"src"`
	Subnet *string `json:"subnet,omitempty"`
	Suffix NullableString `json:"suffix,omitempty"`
	Value *string `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrgAutoRules OrgAutoRules

// NewOrgAutoRules instantiates a new OrgAutoRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgAutoRules(src OrgAutoRulesSrc) *OrgAutoRules {
	this := OrgAutoRules{}
	var matchDeviceType OrgAutoRulesMatchDeviceType = ORGAUTORULESMATCHDEVICETYPE_AP
	this.MatchDeviceType = &matchDeviceType
	this.Src = src
	return &this
}

// NewOrgAutoRulesWithDefaults instantiates a new OrgAutoRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgAutoRulesWithDefaults() *OrgAutoRules {
	this := OrgAutoRules{}
	var matchDeviceType OrgAutoRulesMatchDeviceType = ORGAUTORULESMATCHDEVICETYPE_AP
	this.MatchDeviceType = &matchDeviceType
	return &this
}

// GetExpression returns the Expression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrgAutoRules) GetExpression() string {
	if o == nil || IsNil(o.Expression.Get()) {
		var ret string
		return ret
	}
	return *o.Expression.Get()
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrgAutoRules) GetExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Expression.Get(), o.Expression.IsSet()
}

// HasExpression returns a boolean if a field has been set.
func (o *OrgAutoRules) HasExpression() bool {
	if o != nil && o.Expression.IsSet() {
		return true
	}

	return false
}

// SetExpression gets a reference to the given NullableString and assigns it to the Expression field.
func (o *OrgAutoRules) SetExpression(v string) {
	o.Expression.Set(&v)
}
// SetExpressionNil sets the value for Expression to be an explicit nil
func (o *OrgAutoRules) SetExpressionNil() {
	o.Expression.Set(nil)
}

// UnsetExpression ensures that no value is present for Expression, not even an explicit nil
func (o *OrgAutoRules) UnsetExpression() {
	o.Expression.Unset()
}

// GetMatchDeviceType returns the MatchDeviceType field value if set, zero value otherwise.
func (o *OrgAutoRules) GetMatchDeviceType() OrgAutoRulesMatchDeviceType {
	if o == nil || IsNil(o.MatchDeviceType) {
		var ret OrgAutoRulesMatchDeviceType
		return ret
	}
	return *o.MatchDeviceType
}

// GetMatchDeviceTypeOk returns a tuple with the MatchDeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgAutoRules) GetMatchDeviceTypeOk() (*OrgAutoRulesMatchDeviceType, bool) {
	if o == nil || IsNil(o.MatchDeviceType) {
		return nil, false
	}
	return o.MatchDeviceType, true
}

// HasMatchDeviceType returns a boolean if a field has been set.
func (o *OrgAutoRules) HasMatchDeviceType() bool {
	if o != nil && !IsNil(o.MatchDeviceType) {
		return true
	}

	return false
}

// SetMatchDeviceType gets a reference to the given OrgAutoRulesMatchDeviceType and assigns it to the MatchDeviceType field.
func (o *OrgAutoRules) SetMatchDeviceType(v OrgAutoRulesMatchDeviceType) {
	o.MatchDeviceType = &v
}

// GetMatchModel returns the MatchModel field value if set, zero value otherwise.
func (o *OrgAutoRules) GetMatchModel() string {
	if o == nil || IsNil(o.MatchModel) {
		var ret string
		return ret
	}
	return *o.MatchModel
}

// GetMatchModelOk returns a tuple with the MatchModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgAutoRules) GetMatchModelOk() (*string, bool) {
	if o == nil || IsNil(o.MatchModel) {
		return nil, false
	}
	return o.MatchModel, true
}

// HasMatchModel returns a boolean if a field has been set.
func (o *OrgAutoRules) HasMatchModel() bool {
	if o != nil && !IsNil(o.MatchModel) {
		return true
	}

	return false
}

// SetMatchModel gets a reference to the given string and assigns it to the MatchModel field.
func (o *OrgAutoRules) SetMatchModel(v string) {
	o.MatchModel = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *OrgAutoRules) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgAutoRules) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *OrgAutoRules) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *OrgAutoRules) SetModel(v string) {
	o.Model = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrgAutoRules) GetPrefix() string {
	if o == nil || IsNil(o.Prefix.Get()) {
		var ret string
		return ret
	}
	return *o.Prefix.Get()
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrgAutoRules) GetPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Prefix.Get(), o.Prefix.IsSet()
}

// HasPrefix returns a boolean if a field has been set.
func (o *OrgAutoRules) HasPrefix() bool {
	if o != nil && o.Prefix.IsSet() {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given NullableString and assigns it to the Prefix field.
func (o *OrgAutoRules) SetPrefix(v string) {
	o.Prefix.Set(&v)
}
// SetPrefixNil sets the value for Prefix to be an explicit nil
func (o *OrgAutoRules) SetPrefixNil() {
	o.Prefix.Set(nil)
}

// UnsetPrefix ensures that no value is present for Prefix, not even an explicit nil
func (o *OrgAutoRules) UnsetPrefix() {
	o.Prefix.Unset()
}

// GetSrc returns the Src field value
func (o *OrgAutoRules) GetSrc() OrgAutoRulesSrc {
	if o == nil {
		var ret OrgAutoRulesSrc
		return ret
	}

	return o.Src
}

// GetSrcOk returns a tuple with the Src field value
// and a boolean to check if the value has been set.
func (o *OrgAutoRules) GetSrcOk() (*OrgAutoRulesSrc, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Src, true
}

// SetSrc sets field value
func (o *OrgAutoRules) SetSrc(v OrgAutoRulesSrc) {
	o.Src = v
}

// GetSubnet returns the Subnet field value if set, zero value otherwise.
func (o *OrgAutoRules) GetSubnet() string {
	if o == nil || IsNil(o.Subnet) {
		var ret string
		return ret
	}
	return *o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgAutoRules) GetSubnetOk() (*string, bool) {
	if o == nil || IsNil(o.Subnet) {
		return nil, false
	}
	return o.Subnet, true
}

// HasSubnet returns a boolean if a field has been set.
func (o *OrgAutoRules) HasSubnet() bool {
	if o != nil && !IsNil(o.Subnet) {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given string and assigns it to the Subnet field.
func (o *OrgAutoRules) SetSubnet(v string) {
	o.Subnet = &v
}

// GetSuffix returns the Suffix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrgAutoRules) GetSuffix() string {
	if o == nil || IsNil(o.Suffix.Get()) {
		var ret string
		return ret
	}
	return *o.Suffix.Get()
}

// GetSuffixOk returns a tuple with the Suffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrgAutoRules) GetSuffixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Suffix.Get(), o.Suffix.IsSet()
}

// HasSuffix returns a boolean if a field has been set.
func (o *OrgAutoRules) HasSuffix() bool {
	if o != nil && o.Suffix.IsSet() {
		return true
	}

	return false
}

// SetSuffix gets a reference to the given NullableString and assigns it to the Suffix field.
func (o *OrgAutoRules) SetSuffix(v string) {
	o.Suffix.Set(&v)
}
// SetSuffixNil sets the value for Suffix to be an explicit nil
func (o *OrgAutoRules) SetSuffixNil() {
	o.Suffix.Set(nil)
}

// UnsetSuffix ensures that no value is present for Suffix, not even an explicit nil
func (o *OrgAutoRules) UnsetSuffix() {
	o.Suffix.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *OrgAutoRules) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgAutoRules) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *OrgAutoRules) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *OrgAutoRules) SetValue(v string) {
	o.Value = &v
}

func (o OrgAutoRules) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrgAutoRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Expression.IsSet() {
		toSerialize["expression"] = o.Expression.Get()
	}
	if !IsNil(o.MatchDeviceType) {
		toSerialize["match_device_type"] = o.MatchDeviceType
	}
	if !IsNil(o.MatchModel) {
		toSerialize["match_model"] = o.MatchModel
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if o.Prefix.IsSet() {
		toSerialize["prefix"] = o.Prefix.Get()
	}
	toSerialize["src"] = o.Src
	if !IsNil(o.Subnet) {
		toSerialize["subnet"] = o.Subnet
	}
	if o.Suffix.IsSet() {
		toSerialize["suffix"] = o.Suffix.Get()
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrgAutoRules) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"src",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrgAutoRules := _OrgAutoRules{}

	err = json.Unmarshal(data, &varOrgAutoRules)

	if err != nil {
		return err
	}

	*o = OrgAutoRules(varOrgAutoRules)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "expression")
		delete(additionalProperties, "match_device_type")
		delete(additionalProperties, "match_model")
		delete(additionalProperties, "model")
		delete(additionalProperties, "prefix")
		delete(additionalProperties, "src")
		delete(additionalProperties, "subnet")
		delete(additionalProperties, "suffix")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrgAutoRules struct {
	value *OrgAutoRules
	isSet bool
}

func (v NullableOrgAutoRules) Get() *OrgAutoRules {
	return v.value
}

func (v *NullableOrgAutoRules) Set(val *OrgAutoRules) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgAutoRules) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgAutoRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgAutoRules(val *OrgAutoRules) *NullableOrgAutoRules {
	return &NullableOrgAutoRules{value: val, isSet: true}
}

func (v NullableOrgAutoRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgAutoRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


