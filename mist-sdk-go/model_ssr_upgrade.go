/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the SsrUpgrade type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SsrUpgrade{}

// SsrUpgrade struct for SsrUpgrade
type SsrUpgrade struct {
	Channel *SsrUpgradeChannel `json:"channel,omitempty"`
	// eboot start time in epoch seconds, default is start_time, -1 disables reboot
	RebootAt *int32 `json:"reboot_at,omitempty"`
	// 128T firmware download start time in epoch seconds, default is now, -1 disables download
	StartTime *int32 `json:"start_time,omitempty"`
	// 128T firmware version to upgrade (e.g. 5.3.0-93)
	Version string `json:"version"`
	AdditionalProperties map[string]interface{}
}

type _SsrUpgrade SsrUpgrade

// NewSsrUpgrade instantiates a new SsrUpgrade object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSsrUpgrade(version string) *SsrUpgrade {
	this := SsrUpgrade{}
	var channel SsrUpgradeChannel = SSRUPGRADECHANNEL_STABLE
	this.Channel = &channel
	this.Version = version
	return &this
}

// NewSsrUpgradeWithDefaults instantiates a new SsrUpgrade object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSsrUpgradeWithDefaults() *SsrUpgrade {
	this := SsrUpgrade{}
	var channel SsrUpgradeChannel = SSRUPGRADECHANNEL_STABLE
	this.Channel = &channel
	var version string = "stable"
	this.Version = version
	return &this
}

// GetChannel returns the Channel field value if set, zero value otherwise.
func (o *SsrUpgrade) GetChannel() SsrUpgradeChannel {
	if o == nil || IsNil(o.Channel) {
		var ret SsrUpgradeChannel
		return ret
	}
	return *o.Channel
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsrUpgrade) GetChannelOk() (*SsrUpgradeChannel, bool) {
	if o == nil || IsNil(o.Channel) {
		return nil, false
	}
	return o.Channel, true
}

// HasChannel returns a boolean if a field has been set.
func (o *SsrUpgrade) HasChannel() bool {
	if o != nil && !IsNil(o.Channel) {
		return true
	}

	return false
}

// SetChannel gets a reference to the given SsrUpgradeChannel and assigns it to the Channel field.
func (o *SsrUpgrade) SetChannel(v SsrUpgradeChannel) {
	o.Channel = &v
}

// GetRebootAt returns the RebootAt field value if set, zero value otherwise.
func (o *SsrUpgrade) GetRebootAt() int32 {
	if o == nil || IsNil(o.RebootAt) {
		var ret int32
		return ret
	}
	return *o.RebootAt
}

// GetRebootAtOk returns a tuple with the RebootAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsrUpgrade) GetRebootAtOk() (*int32, bool) {
	if o == nil || IsNil(o.RebootAt) {
		return nil, false
	}
	return o.RebootAt, true
}

// HasRebootAt returns a boolean if a field has been set.
func (o *SsrUpgrade) HasRebootAt() bool {
	if o != nil && !IsNil(o.RebootAt) {
		return true
	}

	return false
}

// SetRebootAt gets a reference to the given int32 and assigns it to the RebootAt field.
func (o *SsrUpgrade) SetRebootAt(v int32) {
	o.RebootAt = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *SsrUpgrade) GetStartTime() int32 {
	if o == nil || IsNil(o.StartTime) {
		var ret int32
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsrUpgrade) GetStartTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *SsrUpgrade) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int32 and assigns it to the StartTime field.
func (o *SsrUpgrade) SetStartTime(v int32) {
	o.StartTime = &v
}

// GetVersion returns the Version field value
func (o *SsrUpgrade) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *SsrUpgrade) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *SsrUpgrade) SetVersion(v string) {
	o.Version = v
}

func (o SsrUpgrade) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SsrUpgrade) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Channel) {
		toSerialize["channel"] = o.Channel
	}
	if !IsNil(o.RebootAt) {
		toSerialize["reboot_at"] = o.RebootAt
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	toSerialize["version"] = o.Version

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SsrUpgrade) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSsrUpgrade := _SsrUpgrade{}

	err = json.Unmarshal(data, &varSsrUpgrade)

	if err != nil {
		return err
	}

	*o = SsrUpgrade(varSsrUpgrade)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "channel")
		delete(additionalProperties, "reboot_at")
		delete(additionalProperties, "start_time")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSsrUpgrade struct {
	value *SsrUpgrade
	isSet bool
}

func (v NullableSsrUpgrade) Get() *SsrUpgrade {
	return v.value
}

func (v *NullableSsrUpgrade) Set(val *SsrUpgrade) {
	v.value = val
	v.isSet = true
}

func (v NullableSsrUpgrade) IsSet() bool {
	return v.isSet
}

func (v *NullableSsrUpgrade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSsrUpgrade(val *SsrUpgrade) *NullableSsrUpgrade {
	return &NullableSsrUpgrade{value: val, isSet: true}
}

func (v NullableSsrUpgrade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSsrUpgrade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


