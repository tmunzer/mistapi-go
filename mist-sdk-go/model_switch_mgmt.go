/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the SwitchMgmt type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwitchMgmt{}

// SwitchMgmt struct for SwitchMgmt
type SwitchMgmt struct {
	ConfigRevert *int32 `json:"config_revert,omitempty"`
	ProtectRe *ProtectRe `json:"protect_re,omitempty"`
	RootPassword *string `json:"root_password,omitempty"`
	Tacacs *Tacacs `json:"tacacs,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SwitchMgmt SwitchMgmt

// NewSwitchMgmt instantiates a new SwitchMgmt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwitchMgmt() *SwitchMgmt {
	this := SwitchMgmt{}
	var configRevert int32 = 10
	this.ConfigRevert = &configRevert
	return &this
}

// NewSwitchMgmtWithDefaults instantiates a new SwitchMgmt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwitchMgmtWithDefaults() *SwitchMgmt {
	this := SwitchMgmt{}
	var configRevert int32 = 10
	this.ConfigRevert = &configRevert
	return &this
}

// GetConfigRevert returns the ConfigRevert field value if set, zero value otherwise.
func (o *SwitchMgmt) GetConfigRevert() int32 {
	if o == nil || IsNil(o.ConfigRevert) {
		var ret int32
		return ret
	}
	return *o.ConfigRevert
}

// GetConfigRevertOk returns a tuple with the ConfigRevert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchMgmt) GetConfigRevertOk() (*int32, bool) {
	if o == nil || IsNil(o.ConfigRevert) {
		return nil, false
	}
	return o.ConfigRevert, true
}

// HasConfigRevert returns a boolean if a field has been set.
func (o *SwitchMgmt) HasConfigRevert() bool {
	if o != nil && !IsNil(o.ConfigRevert) {
		return true
	}

	return false
}

// SetConfigRevert gets a reference to the given int32 and assigns it to the ConfigRevert field.
func (o *SwitchMgmt) SetConfigRevert(v int32) {
	o.ConfigRevert = &v
}

// GetProtectRe returns the ProtectRe field value if set, zero value otherwise.
func (o *SwitchMgmt) GetProtectRe() ProtectRe {
	if o == nil || IsNil(o.ProtectRe) {
		var ret ProtectRe
		return ret
	}
	return *o.ProtectRe
}

// GetProtectReOk returns a tuple with the ProtectRe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchMgmt) GetProtectReOk() (*ProtectRe, bool) {
	if o == nil || IsNil(o.ProtectRe) {
		return nil, false
	}
	return o.ProtectRe, true
}

// HasProtectRe returns a boolean if a field has been set.
func (o *SwitchMgmt) HasProtectRe() bool {
	if o != nil && !IsNil(o.ProtectRe) {
		return true
	}

	return false
}

// SetProtectRe gets a reference to the given ProtectRe and assigns it to the ProtectRe field.
func (o *SwitchMgmt) SetProtectRe(v ProtectRe) {
	o.ProtectRe = &v
}

// GetRootPassword returns the RootPassword field value if set, zero value otherwise.
func (o *SwitchMgmt) GetRootPassword() string {
	if o == nil || IsNil(o.RootPassword) {
		var ret string
		return ret
	}
	return *o.RootPassword
}

// GetRootPasswordOk returns a tuple with the RootPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchMgmt) GetRootPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.RootPassword) {
		return nil, false
	}
	return o.RootPassword, true
}

// HasRootPassword returns a boolean if a field has been set.
func (o *SwitchMgmt) HasRootPassword() bool {
	if o != nil && !IsNil(o.RootPassword) {
		return true
	}

	return false
}

// SetRootPassword gets a reference to the given string and assigns it to the RootPassword field.
func (o *SwitchMgmt) SetRootPassword(v string) {
	o.RootPassword = &v
}

// GetTacacs returns the Tacacs field value if set, zero value otherwise.
func (o *SwitchMgmt) GetTacacs() Tacacs {
	if o == nil || IsNil(o.Tacacs) {
		var ret Tacacs
		return ret
	}
	return *o.Tacacs
}

// GetTacacsOk returns a tuple with the Tacacs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchMgmt) GetTacacsOk() (*Tacacs, bool) {
	if o == nil || IsNil(o.Tacacs) {
		return nil, false
	}
	return o.Tacacs, true
}

// HasTacacs returns a boolean if a field has been set.
func (o *SwitchMgmt) HasTacacs() bool {
	if o != nil && !IsNil(o.Tacacs) {
		return true
	}

	return false
}

// SetTacacs gets a reference to the given Tacacs and assigns it to the Tacacs field.
func (o *SwitchMgmt) SetTacacs(v Tacacs) {
	o.Tacacs = &v
}

func (o SwitchMgmt) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwitchMgmt) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigRevert) {
		toSerialize["config_revert"] = o.ConfigRevert
	}
	if !IsNil(o.ProtectRe) {
		toSerialize["protect_re"] = o.ProtectRe
	}
	if !IsNil(o.RootPassword) {
		toSerialize["root_password"] = o.RootPassword
	}
	if !IsNil(o.Tacacs) {
		toSerialize["tacacs"] = o.Tacacs
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SwitchMgmt) UnmarshalJSON(data []byte) (err error) {
	varSwitchMgmt := _SwitchMgmt{}

	err = json.Unmarshal(data, &varSwitchMgmt)

	if err != nil {
		return err
	}

	*o = SwitchMgmt(varSwitchMgmt)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "config_revert")
		delete(additionalProperties, "protect_re")
		delete(additionalProperties, "root_password")
		delete(additionalProperties, "tacacs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSwitchMgmt struct {
	value *SwitchMgmt
	isSet bool
}

func (v NullableSwitchMgmt) Get() *SwitchMgmt {
	return v.value
}

func (v *NullableSwitchMgmt) Set(val *SwitchMgmt) {
	v.value = val
	v.isSet = true
}

func (v NullableSwitchMgmt) IsSet() bool {
	return v.isSet
}

func (v *NullableSwitchMgmt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwitchMgmt(val *SwitchMgmt) *NullableSwitchMgmt {
	return &NullableSwitchMgmt{value: val, isSet: true}
}

func (v NullableSwitchMgmt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwitchMgmt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


