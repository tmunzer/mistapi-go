/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the TuntermPortConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TuntermPortConfig{}

// TuntermPortConfig ethernet port configurations
type TuntermPortConfig struct {
	// list of ports to be used for downstream (to AP) purpose
	DownstreamPorts []string `json:"downstream_ports,omitempty"`
	// weather to separate upstream / downstream ports. default is false where all ports will be used.
	SeparateUpstreamDownstream *bool `json:"separate_upstream_downstream,omitempty"`
	// native VLAN id for upstream ports
	UpstreamPortVlanId *int32 `json:"upstream_port_vlan_id,omitempty"`
	// list of ports to be used for upstrea purpose (to LAN)
	UpstreamPorts []string `json:"upstream_ports,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TuntermPortConfig TuntermPortConfig

// NewTuntermPortConfig instantiates a new TuntermPortConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTuntermPortConfig() *TuntermPortConfig {
	this := TuntermPortConfig{}
	var separateUpstreamDownstream bool = false
	this.SeparateUpstreamDownstream = &separateUpstreamDownstream
	var upstreamPortVlanId int32 = 1
	this.UpstreamPortVlanId = &upstreamPortVlanId
	return &this
}

// NewTuntermPortConfigWithDefaults instantiates a new TuntermPortConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTuntermPortConfigWithDefaults() *TuntermPortConfig {
	this := TuntermPortConfig{}
	var separateUpstreamDownstream bool = false
	this.SeparateUpstreamDownstream = &separateUpstreamDownstream
	var upstreamPortVlanId int32 = 1
	this.UpstreamPortVlanId = &upstreamPortVlanId
	return &this
}

// GetDownstreamPorts returns the DownstreamPorts field value if set, zero value otherwise.
func (o *TuntermPortConfig) GetDownstreamPorts() []string {
	if o == nil || IsNil(o.DownstreamPorts) {
		var ret []string
		return ret
	}
	return o.DownstreamPorts
}

// GetDownstreamPortsOk returns a tuple with the DownstreamPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TuntermPortConfig) GetDownstreamPortsOk() ([]string, bool) {
	if o == nil || IsNil(o.DownstreamPorts) {
		return nil, false
	}
	return o.DownstreamPorts, true
}

// HasDownstreamPorts returns a boolean if a field has been set.
func (o *TuntermPortConfig) HasDownstreamPorts() bool {
	if o != nil && !IsNil(o.DownstreamPorts) {
		return true
	}

	return false
}

// SetDownstreamPorts gets a reference to the given []string and assigns it to the DownstreamPorts field.
func (o *TuntermPortConfig) SetDownstreamPorts(v []string) {
	o.DownstreamPorts = v
}

// GetSeparateUpstreamDownstream returns the SeparateUpstreamDownstream field value if set, zero value otherwise.
func (o *TuntermPortConfig) GetSeparateUpstreamDownstream() bool {
	if o == nil || IsNil(o.SeparateUpstreamDownstream) {
		var ret bool
		return ret
	}
	return *o.SeparateUpstreamDownstream
}

// GetSeparateUpstreamDownstreamOk returns a tuple with the SeparateUpstreamDownstream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TuntermPortConfig) GetSeparateUpstreamDownstreamOk() (*bool, bool) {
	if o == nil || IsNil(o.SeparateUpstreamDownstream) {
		return nil, false
	}
	return o.SeparateUpstreamDownstream, true
}

// HasSeparateUpstreamDownstream returns a boolean if a field has been set.
func (o *TuntermPortConfig) HasSeparateUpstreamDownstream() bool {
	if o != nil && !IsNil(o.SeparateUpstreamDownstream) {
		return true
	}

	return false
}

// SetSeparateUpstreamDownstream gets a reference to the given bool and assigns it to the SeparateUpstreamDownstream field.
func (o *TuntermPortConfig) SetSeparateUpstreamDownstream(v bool) {
	o.SeparateUpstreamDownstream = &v
}

// GetUpstreamPortVlanId returns the UpstreamPortVlanId field value if set, zero value otherwise.
func (o *TuntermPortConfig) GetUpstreamPortVlanId() int32 {
	if o == nil || IsNil(o.UpstreamPortVlanId) {
		var ret int32
		return ret
	}
	return *o.UpstreamPortVlanId
}

// GetUpstreamPortVlanIdOk returns a tuple with the UpstreamPortVlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TuntermPortConfig) GetUpstreamPortVlanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UpstreamPortVlanId) {
		return nil, false
	}
	return o.UpstreamPortVlanId, true
}

// HasUpstreamPortVlanId returns a boolean if a field has been set.
func (o *TuntermPortConfig) HasUpstreamPortVlanId() bool {
	if o != nil && !IsNil(o.UpstreamPortVlanId) {
		return true
	}

	return false
}

// SetUpstreamPortVlanId gets a reference to the given int32 and assigns it to the UpstreamPortVlanId field.
func (o *TuntermPortConfig) SetUpstreamPortVlanId(v int32) {
	o.UpstreamPortVlanId = &v
}

// GetUpstreamPorts returns the UpstreamPorts field value if set, zero value otherwise.
func (o *TuntermPortConfig) GetUpstreamPorts() []string {
	if o == nil || IsNil(o.UpstreamPorts) {
		var ret []string
		return ret
	}
	return o.UpstreamPorts
}

// GetUpstreamPortsOk returns a tuple with the UpstreamPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TuntermPortConfig) GetUpstreamPortsOk() ([]string, bool) {
	if o == nil || IsNil(o.UpstreamPorts) {
		return nil, false
	}
	return o.UpstreamPorts, true
}

// HasUpstreamPorts returns a boolean if a field has been set.
func (o *TuntermPortConfig) HasUpstreamPorts() bool {
	if o != nil && !IsNil(o.UpstreamPorts) {
		return true
	}

	return false
}

// SetUpstreamPorts gets a reference to the given []string and assigns it to the UpstreamPorts field.
func (o *TuntermPortConfig) SetUpstreamPorts(v []string) {
	o.UpstreamPorts = v
}

func (o TuntermPortConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TuntermPortConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DownstreamPorts) {
		toSerialize["downstream_ports"] = o.DownstreamPorts
	}
	if !IsNil(o.SeparateUpstreamDownstream) {
		toSerialize["separate_upstream_downstream"] = o.SeparateUpstreamDownstream
	}
	if !IsNil(o.UpstreamPortVlanId) {
		toSerialize["upstream_port_vlan_id"] = o.UpstreamPortVlanId
	}
	if !IsNil(o.UpstreamPorts) {
		toSerialize["upstream_ports"] = o.UpstreamPorts
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TuntermPortConfig) UnmarshalJSON(data []byte) (err error) {
	varTuntermPortConfig := _TuntermPortConfig{}

	err = json.Unmarshal(data, &varTuntermPortConfig)

	if err != nil {
		return err
	}

	*o = TuntermPortConfig(varTuntermPortConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "downstream_ports")
		delete(additionalProperties, "separate_upstream_downstream")
		delete(additionalProperties, "upstream_port_vlan_id")
		delete(additionalProperties, "upstream_ports")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTuntermPortConfig struct {
	value *TuntermPortConfig
	isSet bool
}

func (v NullableTuntermPortConfig) Get() *TuntermPortConfig {
	return v.value
}

func (v *NullableTuntermPortConfig) Set(val *TuntermPortConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTuntermPortConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTuntermPortConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTuntermPortConfig(val *TuntermPortConfig) *NullableTuntermPortConfig {
	return &NullableTuntermPortConfig{value: val, isSet: true}
}

func (v NullableTuntermPortConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTuntermPortConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


