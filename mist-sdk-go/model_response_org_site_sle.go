/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// ResponseOrgSiteSle struct for ResponseOrgSiteSle
type ResponseOrgSiteSle struct {
	OrgSiteSleWifi *OrgSiteSleWifi
	OrgSiteWanWifi *OrgSiteWanWifi
	OrgSiteWiredWifi *OrgSiteWiredWifi
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ResponseOrgSiteSle) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into OrgSiteSleWifi
	err = json.Unmarshal(data, &dst.OrgSiteSleWifi);
	if err == nil {
		jsonOrgSiteSleWifi, _ := json.Marshal(dst.OrgSiteSleWifi)
		if string(jsonOrgSiteSleWifi) == "{}" { // empty struct
			dst.OrgSiteSleWifi = nil
		} else {
			return nil // data stored in dst.OrgSiteSleWifi, return on the first match
		}
	} else {
		dst.OrgSiteSleWifi = nil
	}

	// try to unmarshal JSON data into OrgSiteWanWifi
	err = json.Unmarshal(data, &dst.OrgSiteWanWifi);
	if err == nil {
		jsonOrgSiteWanWifi, _ := json.Marshal(dst.OrgSiteWanWifi)
		if string(jsonOrgSiteWanWifi) == "{}" { // empty struct
			dst.OrgSiteWanWifi = nil
		} else {
			return nil // data stored in dst.OrgSiteWanWifi, return on the first match
		}
	} else {
		dst.OrgSiteWanWifi = nil
	}

	// try to unmarshal JSON data into OrgSiteWiredWifi
	err = json.Unmarshal(data, &dst.OrgSiteWiredWifi);
	if err == nil {
		jsonOrgSiteWiredWifi, _ := json.Marshal(dst.OrgSiteWiredWifi)
		if string(jsonOrgSiteWiredWifi) == "{}" { // empty struct
			dst.OrgSiteWiredWifi = nil
		} else {
			return nil // data stored in dst.OrgSiteWiredWifi, return on the first match
		}
	} else {
		dst.OrgSiteWiredWifi = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ResponseOrgSiteSle)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ResponseOrgSiteSle) MarshalJSON() ([]byte, error) {
	if src.OrgSiteSleWifi != nil {
		return json.Marshal(&src.OrgSiteSleWifi)
	}

	if src.OrgSiteWanWifi != nil {
		return json.Marshal(&src.OrgSiteWanWifi)
	}

	if src.OrgSiteWiredWifi != nil {
		return json.Marshal(&src.OrgSiteWiredWifi)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableResponseOrgSiteSle struct {
	value *ResponseOrgSiteSle
	isSet bool
}

func (v NullableResponseOrgSiteSle) Get() *ResponseOrgSiteSle {
	return v.value
}

func (v *NullableResponseOrgSiteSle) Set(val *ResponseOrgSiteSle) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseOrgSiteSle) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseOrgSiteSle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseOrgSiteSle(val *ResponseOrgSiteSle) *NullableResponseOrgSiteSle {
	return &NullableResponseOrgSiteSle{value: val, isSet: true}
}

func (v NullableResponseOrgSiteSle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseOrgSiteSle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


