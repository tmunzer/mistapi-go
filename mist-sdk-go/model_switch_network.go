/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the SwitchNetwork type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwitchNetwork{}

// SwitchNetwork A network represents a network segment. It can either represent a VLAN (then usually ties to a L3 subnet), optionally associate it with a subnet which can later be used to create addition routes. Used for ports doing `family ethernet-switching`. It can also be a pure L3-subnet that can then be used against a port that with `family inet`.
type SwitchNetwork struct {
	// whether to stop clients to talk to each other, default is false (when enabled, a unique isolation_vlan_id is required) NOTE: this features requires uplink device to also a be Juniper device and `inter_switch_link` to be set
	Isolation *bool `json:"isolation,omitempty"`
	IsolationVlanId *string `json:"isolation_vlan_id,omitempty"`
	// optional for pure switching, required when L3 / routing features are used
	Subnet *string `json:"subnet,omitempty"`
	VlanId int32 `json:"vlan_id"`
	AdditionalProperties map[string]interface{}
}

type _SwitchNetwork SwitchNetwork

// NewSwitchNetwork instantiates a new SwitchNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwitchNetwork(vlanId int32) *SwitchNetwork {
	this := SwitchNetwork{}
	var isolation bool = false
	this.Isolation = &isolation
	this.VlanId = vlanId
	return &this
}

// NewSwitchNetworkWithDefaults instantiates a new SwitchNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwitchNetworkWithDefaults() *SwitchNetwork {
	this := SwitchNetwork{}
	var isolation bool = false
	this.Isolation = &isolation
	return &this
}

// GetIsolation returns the Isolation field value if set, zero value otherwise.
func (o *SwitchNetwork) GetIsolation() bool {
	if o == nil || IsNil(o.Isolation) {
		var ret bool
		return ret
	}
	return *o.Isolation
}

// GetIsolationOk returns a tuple with the Isolation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchNetwork) GetIsolationOk() (*bool, bool) {
	if o == nil || IsNil(o.Isolation) {
		return nil, false
	}
	return o.Isolation, true
}

// HasIsolation returns a boolean if a field has been set.
func (o *SwitchNetwork) HasIsolation() bool {
	if o != nil && !IsNil(o.Isolation) {
		return true
	}

	return false
}

// SetIsolation gets a reference to the given bool and assigns it to the Isolation field.
func (o *SwitchNetwork) SetIsolation(v bool) {
	o.Isolation = &v
}

// GetIsolationVlanId returns the IsolationVlanId field value if set, zero value otherwise.
func (o *SwitchNetwork) GetIsolationVlanId() string {
	if o == nil || IsNil(o.IsolationVlanId) {
		var ret string
		return ret
	}
	return *o.IsolationVlanId
}

// GetIsolationVlanIdOk returns a tuple with the IsolationVlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchNetwork) GetIsolationVlanIdOk() (*string, bool) {
	if o == nil || IsNil(o.IsolationVlanId) {
		return nil, false
	}
	return o.IsolationVlanId, true
}

// HasIsolationVlanId returns a boolean if a field has been set.
func (o *SwitchNetwork) HasIsolationVlanId() bool {
	if o != nil && !IsNil(o.IsolationVlanId) {
		return true
	}

	return false
}

// SetIsolationVlanId gets a reference to the given string and assigns it to the IsolationVlanId field.
func (o *SwitchNetwork) SetIsolationVlanId(v string) {
	o.IsolationVlanId = &v
}

// GetSubnet returns the Subnet field value if set, zero value otherwise.
func (o *SwitchNetwork) GetSubnet() string {
	if o == nil || IsNil(o.Subnet) {
		var ret string
		return ret
	}
	return *o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchNetwork) GetSubnetOk() (*string, bool) {
	if o == nil || IsNil(o.Subnet) {
		return nil, false
	}
	return o.Subnet, true
}

// HasSubnet returns a boolean if a field has been set.
func (o *SwitchNetwork) HasSubnet() bool {
	if o != nil && !IsNil(o.Subnet) {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given string and assigns it to the Subnet field.
func (o *SwitchNetwork) SetSubnet(v string) {
	o.Subnet = &v
}

// GetVlanId returns the VlanId field value
func (o *SwitchNetwork) GetVlanId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value
// and a boolean to check if the value has been set.
func (o *SwitchNetwork) GetVlanIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VlanId, true
}

// SetVlanId sets field value
func (o *SwitchNetwork) SetVlanId(v int32) {
	o.VlanId = v
}

func (o SwitchNetwork) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwitchNetwork) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Isolation) {
		toSerialize["isolation"] = o.Isolation
	}
	if !IsNil(o.IsolationVlanId) {
		toSerialize["isolation_vlan_id"] = o.IsolationVlanId
	}
	if !IsNil(o.Subnet) {
		toSerialize["subnet"] = o.Subnet
	}
	toSerialize["vlan_id"] = o.VlanId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SwitchNetwork) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vlan_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSwitchNetwork := _SwitchNetwork{}

	err = json.Unmarshal(data, &varSwitchNetwork)

	if err != nil {
		return err
	}

	*o = SwitchNetwork(varSwitchNetwork)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "isolation")
		delete(additionalProperties, "isolation_vlan_id")
		delete(additionalProperties, "subnet")
		delete(additionalProperties, "vlan_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSwitchNetwork struct {
	value *SwitchNetwork
	isSet bool
}

func (v NullableSwitchNetwork) Get() *SwitchNetwork {
	return v.value
}

func (v *NullableSwitchNetwork) Set(val *SwitchNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableSwitchNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableSwitchNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwitchNetwork(val *SwitchNetwork) *NullableSwitchNetwork {
	return &NullableSwitchNetwork{value: val, isSet: true}
}

func (v NullableSwitchNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwitchNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


