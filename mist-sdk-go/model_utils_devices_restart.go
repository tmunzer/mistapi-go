/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the UtilsDevicesRestart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UtilsDevicesRestart{}

// UtilsDevicesRestart struct for UtilsDevicesRestart
type UtilsDevicesRestart struct {
	// optional for VC member
	Member *string `json:"member,omitempty"`
	// only for SSR: if node is not present, both nodes are restarted for other devices: node should not be present
	Node *string `json:"node,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UtilsDevicesRestart UtilsDevicesRestart

// NewUtilsDevicesRestart instantiates a new UtilsDevicesRestart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUtilsDevicesRestart() *UtilsDevicesRestart {
	this := UtilsDevicesRestart{}
	return &this
}

// NewUtilsDevicesRestartWithDefaults instantiates a new UtilsDevicesRestart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUtilsDevicesRestartWithDefaults() *UtilsDevicesRestart {
	this := UtilsDevicesRestart{}
	return &this
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *UtilsDevicesRestart) GetMember() string {
	if o == nil || IsNil(o.Member) {
		var ret string
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsDevicesRestart) GetMemberOk() (*string, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *UtilsDevicesRestart) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given string and assigns it to the Member field.
func (o *UtilsDevicesRestart) SetMember(v string) {
	o.Member = &v
}

// GetNode returns the Node field value if set, zero value otherwise.
func (o *UtilsDevicesRestart) GetNode() string {
	if o == nil || IsNil(o.Node) {
		var ret string
		return ret
	}
	return *o.Node
}

// GetNodeOk returns a tuple with the Node field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsDevicesRestart) GetNodeOk() (*string, bool) {
	if o == nil || IsNil(o.Node) {
		return nil, false
	}
	return o.Node, true
}

// HasNode returns a boolean if a field has been set.
func (o *UtilsDevicesRestart) HasNode() bool {
	if o != nil && !IsNil(o.Node) {
		return true
	}

	return false
}

// SetNode gets a reference to the given string and assigns it to the Node field.
func (o *UtilsDevicesRestart) SetNode(v string) {
	o.Node = &v
}

func (o UtilsDevicesRestart) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UtilsDevicesRestart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.Node) {
		toSerialize["node"] = o.Node
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UtilsDevicesRestart) UnmarshalJSON(data []byte) (err error) {
	varUtilsDevicesRestart := _UtilsDevicesRestart{}

	err = json.Unmarshal(data, &varUtilsDevicesRestart)

	if err != nil {
		return err
	}

	*o = UtilsDevicesRestart(varUtilsDevicesRestart)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "member")
		delete(additionalProperties, "node")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUtilsDevicesRestart struct {
	value *UtilsDevicesRestart
	isSet bool
}

func (v NullableUtilsDevicesRestart) Get() *UtilsDevicesRestart {
	return v.value
}

func (v *NullableUtilsDevicesRestart) Set(val *UtilsDevicesRestart) {
	v.value = val
	v.isSet = true
}

func (v NullableUtilsDevicesRestart) IsSet() bool {
	return v.isSet
}

func (v *NullableUtilsDevicesRestart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUtilsDevicesRestart(val *UtilsDevicesRestart) *NullableUtilsDevicesRestart {
	return &NullableUtilsDevicesRestart{value: val, isSet: true}
}

func (v NullableUtilsDevicesRestart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUtilsDevicesRestart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


