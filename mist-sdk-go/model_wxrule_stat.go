/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the WxruleStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WxruleStat{}

// WxruleStat Wxrule statistics
type WxruleStat struct {
	Action WxruleStatsAction `json:"action"`
	ClientMac []string `json:"client_mac"`
	DstAllowWxtags []string `json:"dst_allow_wxtags"`
	DstDenyWxtags []string `json:"dst_deny_wxtags"`
	DstWxtags []string `json:"dst_wxtags"`
	Name string `json:"name"`
	Order int32 `json:"order"`
	SrcWxtags []string `json:"src_wxtags"`
	Usage map[string]WxruleStatsUsageProperties `json:"usage"`
	AdditionalProperties map[string]interface{}
}

type _WxruleStat WxruleStat

// NewWxruleStat instantiates a new WxruleStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWxruleStat(action WxruleStatsAction, clientMac []string, dstAllowWxtags []string, dstDenyWxtags []string, dstWxtags []string, name string, order int32, srcWxtags []string, usage map[string]WxruleStatsUsageProperties) *WxruleStat {
	this := WxruleStat{}
	this.Action = action
	this.ClientMac = clientMac
	this.DstAllowWxtags = dstAllowWxtags
	this.DstDenyWxtags = dstDenyWxtags
	this.DstWxtags = dstWxtags
	this.Name = name
	this.Order = order
	this.SrcWxtags = srcWxtags
	this.Usage = usage
	return &this
}

// NewWxruleStatWithDefaults instantiates a new WxruleStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWxruleStatWithDefaults() *WxruleStat {
	this := WxruleStat{}
	return &this
}

// GetAction returns the Action field value
func (o *WxruleStat) GetAction() WxruleStatsAction {
	if o == nil {
		var ret WxruleStatsAction
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *WxruleStat) GetActionOk() (*WxruleStatsAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *WxruleStat) SetAction(v WxruleStatsAction) {
	o.Action = v
}

// GetClientMac returns the ClientMac field value
func (o *WxruleStat) GetClientMac() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ClientMac
}

// GetClientMacOk returns a tuple with the ClientMac field value
// and a boolean to check if the value has been set.
func (o *WxruleStat) GetClientMacOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClientMac, true
}

// SetClientMac sets field value
func (o *WxruleStat) SetClientMac(v []string) {
	o.ClientMac = v
}

// GetDstAllowWxtags returns the DstAllowWxtags field value
func (o *WxruleStat) GetDstAllowWxtags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DstAllowWxtags
}

// GetDstAllowWxtagsOk returns a tuple with the DstAllowWxtags field value
// and a boolean to check if the value has been set.
func (o *WxruleStat) GetDstAllowWxtagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DstAllowWxtags, true
}

// SetDstAllowWxtags sets field value
func (o *WxruleStat) SetDstAllowWxtags(v []string) {
	o.DstAllowWxtags = v
}

// GetDstDenyWxtags returns the DstDenyWxtags field value
func (o *WxruleStat) GetDstDenyWxtags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DstDenyWxtags
}

// GetDstDenyWxtagsOk returns a tuple with the DstDenyWxtags field value
// and a boolean to check if the value has been set.
func (o *WxruleStat) GetDstDenyWxtagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DstDenyWxtags, true
}

// SetDstDenyWxtags sets field value
func (o *WxruleStat) SetDstDenyWxtags(v []string) {
	o.DstDenyWxtags = v
}

// GetDstWxtags returns the DstWxtags field value
func (o *WxruleStat) GetDstWxtags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DstWxtags
}

// GetDstWxtagsOk returns a tuple with the DstWxtags field value
// and a boolean to check if the value has been set.
func (o *WxruleStat) GetDstWxtagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DstWxtags, true
}

// SetDstWxtags sets field value
func (o *WxruleStat) SetDstWxtags(v []string) {
	o.DstWxtags = v
}

// GetName returns the Name field value
func (o *WxruleStat) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WxruleStat) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WxruleStat) SetName(v string) {
	o.Name = v
}

// GetOrder returns the Order field value
func (o *WxruleStat) GetOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *WxruleStat) GetOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Order, true
}

// SetOrder sets field value
func (o *WxruleStat) SetOrder(v int32) {
	o.Order = v
}

// GetSrcWxtags returns the SrcWxtags field value
func (o *WxruleStat) GetSrcWxtags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SrcWxtags
}

// GetSrcWxtagsOk returns a tuple with the SrcWxtags field value
// and a boolean to check if the value has been set.
func (o *WxruleStat) GetSrcWxtagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SrcWxtags, true
}

// SetSrcWxtags sets field value
func (o *WxruleStat) SetSrcWxtags(v []string) {
	o.SrcWxtags = v
}

// GetUsage returns the Usage field value
func (o *WxruleStat) GetUsage() map[string]WxruleStatsUsageProperties {
	if o == nil {
		var ret map[string]WxruleStatsUsageProperties
		return ret
	}

	return o.Usage
}

// GetUsageOk returns a tuple with the Usage field value
// and a boolean to check if the value has been set.
func (o *WxruleStat) GetUsageOk() (*map[string]WxruleStatsUsageProperties, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Usage, true
}

// SetUsage sets field value
func (o *WxruleStat) SetUsage(v map[string]WxruleStatsUsageProperties) {
	o.Usage = v
}

func (o WxruleStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WxruleStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	toSerialize["client_mac"] = o.ClientMac
	toSerialize["dst_allow_wxtags"] = o.DstAllowWxtags
	toSerialize["dst_deny_wxtags"] = o.DstDenyWxtags
	toSerialize["dst_wxtags"] = o.DstWxtags
	toSerialize["name"] = o.Name
	toSerialize["order"] = o.Order
	toSerialize["src_wxtags"] = o.SrcWxtags
	toSerialize["usage"] = o.Usage

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WxruleStat) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"client_mac",
		"dst_allow_wxtags",
		"dst_deny_wxtags",
		"dst_wxtags",
		"name",
		"order",
		"src_wxtags",
		"usage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWxruleStat := _WxruleStat{}

	err = json.Unmarshal(data, &varWxruleStat)

	if err != nil {
		return err
	}

	*o = WxruleStat(varWxruleStat)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "action")
		delete(additionalProperties, "client_mac")
		delete(additionalProperties, "dst_allow_wxtags")
		delete(additionalProperties, "dst_deny_wxtags")
		delete(additionalProperties, "dst_wxtags")
		delete(additionalProperties, "name")
		delete(additionalProperties, "order")
		delete(additionalProperties, "src_wxtags")
		delete(additionalProperties, "usage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWxruleStat struct {
	value *WxruleStat
	isSet bool
}

func (v NullableWxruleStat) Get() *WxruleStat {
	return v.value
}

func (v *NullableWxruleStat) Set(val *WxruleStat) {
	v.value = val
	v.isSet = true
}

func (v NullableWxruleStat) IsSet() bool {
	return v.isSet
}

func (v *NullableWxruleStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWxruleStat(val *WxruleStat) *NullableWxruleStat {
	return &NullableWxruleStat{value: val, isSet: true}
}

func (v NullableWxruleStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWxruleStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


