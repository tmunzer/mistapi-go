/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the PrivilegeMsp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivilegeMsp{}

// PrivilegeMsp Privilieges settings
type PrivilegeMsp struct {
	// if `scope`==`org`
	OrgId *string `json:"org_id,omitempty"`
	// name of the org (for a site belonging to org)
	OrgName *string `json:"org_name,omitempty"`
	// if `scope`==`orggroup`
	OrggroupId *string `json:"orggroup_id,omitempty"`
	Role PrivilegeMspRole `json:"role"`
	Scope PrivilegeMspScope `json:"scope"`
	Views *PrivilegeMspView `json:"views,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PrivilegeMsp PrivilegeMsp

// NewPrivilegeMsp instantiates a new PrivilegeMsp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivilegeMsp(role PrivilegeMspRole, scope PrivilegeMspScope) *PrivilegeMsp {
	this := PrivilegeMsp{}
	this.Role = role
	this.Scope = scope
	return &this
}

// NewPrivilegeMspWithDefaults instantiates a new PrivilegeMsp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivilegeMspWithDefaults() *PrivilegeMsp {
	this := PrivilegeMsp{}
	return &this
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *PrivilegeMsp) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegeMsp) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *PrivilegeMsp) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *PrivilegeMsp) SetOrgId(v string) {
	o.OrgId = &v
}

// GetOrgName returns the OrgName field value if set, zero value otherwise.
func (o *PrivilegeMsp) GetOrgName() string {
	if o == nil || IsNil(o.OrgName) {
		var ret string
		return ret
	}
	return *o.OrgName
}

// GetOrgNameOk returns a tuple with the OrgName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegeMsp) GetOrgNameOk() (*string, bool) {
	if o == nil || IsNil(o.OrgName) {
		return nil, false
	}
	return o.OrgName, true
}

// HasOrgName returns a boolean if a field has been set.
func (o *PrivilegeMsp) HasOrgName() bool {
	if o != nil && !IsNil(o.OrgName) {
		return true
	}

	return false
}

// SetOrgName gets a reference to the given string and assigns it to the OrgName field.
func (o *PrivilegeMsp) SetOrgName(v string) {
	o.OrgName = &v
}

// GetOrggroupId returns the OrggroupId field value if set, zero value otherwise.
func (o *PrivilegeMsp) GetOrggroupId() string {
	if o == nil || IsNil(o.OrggroupId) {
		var ret string
		return ret
	}
	return *o.OrggroupId
}

// GetOrggroupIdOk returns a tuple with the OrggroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegeMsp) GetOrggroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrggroupId) {
		return nil, false
	}
	return o.OrggroupId, true
}

// HasOrggroupId returns a boolean if a field has been set.
func (o *PrivilegeMsp) HasOrggroupId() bool {
	if o != nil && !IsNil(o.OrggroupId) {
		return true
	}

	return false
}

// SetOrggroupId gets a reference to the given string and assigns it to the OrggroupId field.
func (o *PrivilegeMsp) SetOrggroupId(v string) {
	o.OrggroupId = &v
}

// GetRole returns the Role field value
func (o *PrivilegeMsp) GetRole() PrivilegeMspRole {
	if o == nil {
		var ret PrivilegeMspRole
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *PrivilegeMsp) GetRoleOk() (*PrivilegeMspRole, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *PrivilegeMsp) SetRole(v PrivilegeMspRole) {
	o.Role = v
}

// GetScope returns the Scope field value
func (o *PrivilegeMsp) GetScope() PrivilegeMspScope {
	if o == nil {
		var ret PrivilegeMspScope
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *PrivilegeMsp) GetScopeOk() (*PrivilegeMspScope, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *PrivilegeMsp) SetScope(v PrivilegeMspScope) {
	o.Scope = v
}

// GetViews returns the Views field value if set, zero value otherwise.
func (o *PrivilegeMsp) GetViews() PrivilegeMspView {
	if o == nil || IsNil(o.Views) {
		var ret PrivilegeMspView
		return ret
	}
	return *o.Views
}

// GetViewsOk returns a tuple with the Views field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegeMsp) GetViewsOk() (*PrivilegeMspView, bool) {
	if o == nil || IsNil(o.Views) {
		return nil, false
	}
	return o.Views, true
}

// HasViews returns a boolean if a field has been set.
func (o *PrivilegeMsp) HasViews() bool {
	if o != nil && !IsNil(o.Views) {
		return true
	}

	return false
}

// SetViews gets a reference to the given PrivilegeMspView and assigns it to the Views field.
func (o *PrivilegeMsp) SetViews(v PrivilegeMspView) {
	o.Views = &v
}

func (o PrivilegeMsp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivilegeMsp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.OrgName) {
		toSerialize["org_name"] = o.OrgName
	}
	if !IsNil(o.OrggroupId) {
		toSerialize["orggroup_id"] = o.OrggroupId
	}
	toSerialize["role"] = o.Role
	toSerialize["scope"] = o.Scope
	if !IsNil(o.Views) {
		toSerialize["views"] = o.Views
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PrivilegeMsp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"role",
		"scope",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrivilegeMsp := _PrivilegeMsp{}

	err = json.Unmarshal(data, &varPrivilegeMsp)

	if err != nil {
		return err
	}

	*o = PrivilegeMsp(varPrivilegeMsp)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "org_name")
		delete(additionalProperties, "orggroup_id")
		delete(additionalProperties, "role")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "views")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePrivilegeMsp struct {
	value *PrivilegeMsp
	isSet bool
}

func (v NullablePrivilegeMsp) Get() *PrivilegeMsp {
	return v.value
}

func (v *NullablePrivilegeMsp) Set(val *PrivilegeMsp) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivilegeMsp) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivilegeMsp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivilegeMsp(val *PrivilegeMsp) *NullablePrivilegeMsp {
	return &NullablePrivilegeMsp{value: val, isSet: true}
}

func (v NullablePrivilegeMsp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivilegeMsp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


