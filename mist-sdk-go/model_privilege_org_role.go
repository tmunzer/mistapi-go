/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// PrivilegeOrgRole access permissions
type PrivilegeOrgRole string

// List of privilege_org_role
const (
	PRIVILEGEORGROLE_EMPTY PrivilegeOrgRole = ""
	PRIVILEGEORGROLE_ADMIN PrivilegeOrgRole = "admin"
	PRIVILEGEORGROLE_WRITE PrivilegeOrgRole = "write"
	PRIVILEGEORGROLE_READ PrivilegeOrgRole = "read"
	PRIVILEGEORGROLE_HELPDESK PrivilegeOrgRole = "helpdesk"
	PRIVILEGEORGROLE_INSTALLER PrivilegeOrgRole = "installer"
)

// All allowed values of PrivilegeOrgRole enum
var AllowedPrivilegeOrgRoleEnumValues = []PrivilegeOrgRole{
	"",
	"admin",
	"write",
	"read",
	"helpdesk",
	"installer",
}

func (v *PrivilegeOrgRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PrivilegeOrgRole(value)
	for _, existing := range AllowedPrivilegeOrgRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PrivilegeOrgRole", value)
}

// NewPrivilegeOrgRoleFromValue returns a pointer to a valid PrivilegeOrgRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrivilegeOrgRoleFromValue(v string) (*PrivilegeOrgRole, error) {
	ev := PrivilegeOrgRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PrivilegeOrgRole: valid values are %v", v, AllowedPrivilegeOrgRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrivilegeOrgRole) IsValid() bool {
	for _, existing := range AllowedPrivilegeOrgRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to privilege_org_role value
func (v PrivilegeOrgRole) Ptr() *PrivilegeOrgRole {
	return &v
}

type NullablePrivilegeOrgRole struct {
	value *PrivilegeOrgRole
	isSet bool
}

func (v NullablePrivilegeOrgRole) Get() *PrivilegeOrgRole {
	return v.value
}

func (v *NullablePrivilegeOrgRole) Set(val *PrivilegeOrgRole) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivilegeOrgRole) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivilegeOrgRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivilegeOrgRole(val *PrivilegeOrgRole) *NullablePrivilegeOrgRole {
	return &NullablePrivilegeOrgRole{value: val, isSet: true}
}

func (v NullablePrivilegeOrgRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivilegeOrgRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

