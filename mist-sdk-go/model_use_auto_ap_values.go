/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the UseAutoApValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UseAutoApValues{}

// UseAutoApValues struct for UseAutoApValues
type UseAutoApValues struct {
	// If accept is true, accepts placement for devices in list otherwise. If false, reject for devices in list.
	Accept *bool `json:"accept,omitempty"`
	For *UseAutoApValuesFor `json:"for,omitempty"`
	// A list of macs to accept/reject. If a list is not provided the API will accept/reject for the full map.
	Macs []string `json:"macs,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UseAutoApValues UseAutoApValues

// NewUseAutoApValues instantiates a new UseAutoApValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUseAutoApValues() *UseAutoApValues {
	this := UseAutoApValues{}
	var accept bool = false
	this.Accept = &accept
	var for_ UseAutoApValuesFor = USEAUTOAPVALUESFOR_PLACEMENT
	this.For = &for_
	return &this
}

// NewUseAutoApValuesWithDefaults instantiates a new UseAutoApValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUseAutoApValuesWithDefaults() *UseAutoApValues {
	this := UseAutoApValues{}
	var accept bool = false
	this.Accept = &accept
	var for_ UseAutoApValuesFor = USEAUTOAPVALUESFOR_PLACEMENT
	this.For = &for_
	return &this
}

// GetAccept returns the Accept field value if set, zero value otherwise.
func (o *UseAutoApValues) GetAccept() bool {
	if o == nil || IsNil(o.Accept) {
		var ret bool
		return ret
	}
	return *o.Accept
}

// GetAcceptOk returns a tuple with the Accept field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UseAutoApValues) GetAcceptOk() (*bool, bool) {
	if o == nil || IsNil(o.Accept) {
		return nil, false
	}
	return o.Accept, true
}

// HasAccept returns a boolean if a field has been set.
func (o *UseAutoApValues) HasAccept() bool {
	if o != nil && !IsNil(o.Accept) {
		return true
	}

	return false
}

// SetAccept gets a reference to the given bool and assigns it to the Accept field.
func (o *UseAutoApValues) SetAccept(v bool) {
	o.Accept = &v
}

// GetFor returns the For field value if set, zero value otherwise.
func (o *UseAutoApValues) GetFor() UseAutoApValuesFor {
	if o == nil || IsNil(o.For) {
		var ret UseAutoApValuesFor
		return ret
	}
	return *o.For
}

// GetForOk returns a tuple with the For field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UseAutoApValues) GetForOk() (*UseAutoApValuesFor, bool) {
	if o == nil || IsNil(o.For) {
		return nil, false
	}
	return o.For, true
}

// HasFor returns a boolean if a field has been set.
func (o *UseAutoApValues) HasFor() bool {
	if o != nil && !IsNil(o.For) {
		return true
	}

	return false
}

// SetFor gets a reference to the given UseAutoApValuesFor and assigns it to the For field.
func (o *UseAutoApValues) SetFor(v UseAutoApValuesFor) {
	o.For = &v
}

// GetMacs returns the Macs field value if set, zero value otherwise.
func (o *UseAutoApValues) GetMacs() []string {
	if o == nil || IsNil(o.Macs) {
		var ret []string
		return ret
	}
	return o.Macs
}

// GetMacsOk returns a tuple with the Macs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UseAutoApValues) GetMacsOk() ([]string, bool) {
	if o == nil || IsNil(o.Macs) {
		return nil, false
	}
	return o.Macs, true
}

// HasMacs returns a boolean if a field has been set.
func (o *UseAutoApValues) HasMacs() bool {
	if o != nil && !IsNil(o.Macs) {
		return true
	}

	return false
}

// SetMacs gets a reference to the given []string and assigns it to the Macs field.
func (o *UseAutoApValues) SetMacs(v []string) {
	o.Macs = v
}

func (o UseAutoApValues) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UseAutoApValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Accept) {
		toSerialize["accept"] = o.Accept
	}
	if !IsNil(o.For) {
		toSerialize["for"] = o.For
	}
	if !IsNil(o.Macs) {
		toSerialize["macs"] = o.Macs
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UseAutoApValues) UnmarshalJSON(data []byte) (err error) {
	varUseAutoApValues := _UseAutoApValues{}

	err = json.Unmarshal(data, &varUseAutoApValues)

	if err != nil {
		return err
	}

	*o = UseAutoApValues(varUseAutoApValues)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accept")
		delete(additionalProperties, "for")
		delete(additionalProperties, "macs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUseAutoApValues struct {
	value *UseAutoApValues
	isSet bool
}

func (v NullableUseAutoApValues) Get() *UseAutoApValues {
	return v.value
}

func (v *NullableUseAutoApValues) Set(val *UseAutoApValues) {
	v.value = val
	v.isSet = true
}

func (v NullableUseAutoApValues) IsSet() bool {
	return v.isSet
}

func (v *NullableUseAutoApValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUseAutoApValues(val *UseAutoApValues) *NullableUseAutoApValues {
	return &NullableUseAutoApValues{value: val, isSet: true}
}

func (v NullableUseAutoApValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUseAutoApValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


