/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the SiteEngagementDwellTags type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteEngagementDwellTags{}

// SiteEngagementDwellTags add tags to visits within the duration (in seconds), available tags (passerby, bounce, engaged, stationed)
type SiteEngagementDwellTags struct {
	Bounce NullableString `json:"bounce,omitempty"`
	Engaged NullableString `json:"engaged,omitempty"`
	Passerby NullableString `json:"passerby,omitempty"`
	Stationed NullableString `json:"stationed,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SiteEngagementDwellTags SiteEngagementDwellTags

// NewSiteEngagementDwellTags instantiates a new SiteEngagementDwellTags object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteEngagementDwellTags() *SiteEngagementDwellTags {
	this := SiteEngagementDwellTags{}
	return &this
}

// NewSiteEngagementDwellTagsWithDefaults instantiates a new SiteEngagementDwellTags object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteEngagementDwellTagsWithDefaults() *SiteEngagementDwellTags {
	this := SiteEngagementDwellTags{}
	return &this
}

// GetBounce returns the Bounce field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteEngagementDwellTags) GetBounce() string {
	if o == nil || IsNil(o.Bounce.Get()) {
		var ret string
		return ret
	}
	return *o.Bounce.Get()
}

// GetBounceOk returns a tuple with the Bounce field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteEngagementDwellTags) GetBounceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bounce.Get(), o.Bounce.IsSet()
}

// HasBounce returns a boolean if a field has been set.
func (o *SiteEngagementDwellTags) HasBounce() bool {
	if o != nil && o.Bounce.IsSet() {
		return true
	}

	return false
}

// SetBounce gets a reference to the given NullableString and assigns it to the Bounce field.
func (o *SiteEngagementDwellTags) SetBounce(v string) {
	o.Bounce.Set(&v)
}
// SetBounceNil sets the value for Bounce to be an explicit nil
func (o *SiteEngagementDwellTags) SetBounceNil() {
	o.Bounce.Set(nil)
}

// UnsetBounce ensures that no value is present for Bounce, not even an explicit nil
func (o *SiteEngagementDwellTags) UnsetBounce() {
	o.Bounce.Unset()
}

// GetEngaged returns the Engaged field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteEngagementDwellTags) GetEngaged() string {
	if o == nil || IsNil(o.Engaged.Get()) {
		var ret string
		return ret
	}
	return *o.Engaged.Get()
}

// GetEngagedOk returns a tuple with the Engaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteEngagementDwellTags) GetEngagedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Engaged.Get(), o.Engaged.IsSet()
}

// HasEngaged returns a boolean if a field has been set.
func (o *SiteEngagementDwellTags) HasEngaged() bool {
	if o != nil && o.Engaged.IsSet() {
		return true
	}

	return false
}

// SetEngaged gets a reference to the given NullableString and assigns it to the Engaged field.
func (o *SiteEngagementDwellTags) SetEngaged(v string) {
	o.Engaged.Set(&v)
}
// SetEngagedNil sets the value for Engaged to be an explicit nil
func (o *SiteEngagementDwellTags) SetEngagedNil() {
	o.Engaged.Set(nil)
}

// UnsetEngaged ensures that no value is present for Engaged, not even an explicit nil
func (o *SiteEngagementDwellTags) UnsetEngaged() {
	o.Engaged.Unset()
}

// GetPasserby returns the Passerby field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteEngagementDwellTags) GetPasserby() string {
	if o == nil || IsNil(o.Passerby.Get()) {
		var ret string
		return ret
	}
	return *o.Passerby.Get()
}

// GetPasserbyOk returns a tuple with the Passerby field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteEngagementDwellTags) GetPasserbyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Passerby.Get(), o.Passerby.IsSet()
}

// HasPasserby returns a boolean if a field has been set.
func (o *SiteEngagementDwellTags) HasPasserby() bool {
	if o != nil && o.Passerby.IsSet() {
		return true
	}

	return false
}

// SetPasserby gets a reference to the given NullableString and assigns it to the Passerby field.
func (o *SiteEngagementDwellTags) SetPasserby(v string) {
	o.Passerby.Set(&v)
}
// SetPasserbyNil sets the value for Passerby to be an explicit nil
func (o *SiteEngagementDwellTags) SetPasserbyNil() {
	o.Passerby.Set(nil)
}

// UnsetPasserby ensures that no value is present for Passerby, not even an explicit nil
func (o *SiteEngagementDwellTags) UnsetPasserby() {
	o.Passerby.Unset()
}

// GetStationed returns the Stationed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteEngagementDwellTags) GetStationed() string {
	if o == nil || IsNil(o.Stationed.Get()) {
		var ret string
		return ret
	}
	return *o.Stationed.Get()
}

// GetStationedOk returns a tuple with the Stationed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteEngagementDwellTags) GetStationedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stationed.Get(), o.Stationed.IsSet()
}

// HasStationed returns a boolean if a field has been set.
func (o *SiteEngagementDwellTags) HasStationed() bool {
	if o != nil && o.Stationed.IsSet() {
		return true
	}

	return false
}

// SetStationed gets a reference to the given NullableString and assigns it to the Stationed field.
func (o *SiteEngagementDwellTags) SetStationed(v string) {
	o.Stationed.Set(&v)
}
// SetStationedNil sets the value for Stationed to be an explicit nil
func (o *SiteEngagementDwellTags) SetStationedNil() {
	o.Stationed.Set(nil)
}

// UnsetStationed ensures that no value is present for Stationed, not even an explicit nil
func (o *SiteEngagementDwellTags) UnsetStationed() {
	o.Stationed.Unset()
}

func (o SiteEngagementDwellTags) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteEngagementDwellTags) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Bounce.IsSet() {
		toSerialize["bounce"] = o.Bounce.Get()
	}
	if o.Engaged.IsSet() {
		toSerialize["engaged"] = o.Engaged.Get()
	}
	if o.Passerby.IsSet() {
		toSerialize["passerby"] = o.Passerby.Get()
	}
	if o.Stationed.IsSet() {
		toSerialize["stationed"] = o.Stationed.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SiteEngagementDwellTags) UnmarshalJSON(data []byte) (err error) {
	varSiteEngagementDwellTags := _SiteEngagementDwellTags{}

	err = json.Unmarshal(data, &varSiteEngagementDwellTags)

	if err != nil {
		return err
	}

	*o = SiteEngagementDwellTags(varSiteEngagementDwellTags)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "bounce")
		delete(additionalProperties, "engaged")
		delete(additionalProperties, "passerby")
		delete(additionalProperties, "stationed")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSiteEngagementDwellTags struct {
	value *SiteEngagementDwellTags
	isSet bool
}

func (v NullableSiteEngagementDwellTags) Get() *SiteEngagementDwellTags {
	return v.value
}

func (v *NullableSiteEngagementDwellTags) Set(val *SiteEngagementDwellTags) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteEngagementDwellTags) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteEngagementDwellTags) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteEngagementDwellTags(val *SiteEngagementDwellTags) *NullableSiteEngagementDwellTags {
	return &NullableSiteEngagementDwellTags{value: val, isSet: true}
}

func (v NullableSiteEngagementDwellTags) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteEngagementDwellTags) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


