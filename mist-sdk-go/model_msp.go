/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the Msp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Msp{}

// Msp struct for Msp
type Msp struct {
	AllowMist *bool `json:"allow_mist,omitempty"`
	CreatedTime *int32 `json:"created_time,omitempty"`
	Id *string `json:"id,omitempty"`
	// For advanced tier (uMSPs) only
	LogoUrl *string `json:"logo_url,omitempty"`
	ModifiedTime *int32 `json:"modified_time,omitempty"`
	Name *string `json:"name,omitempty"`
	Tier *MspTier `json:"tier,omitempty"`
	// For advanced tier (uMSPs) only
	Url *string `json:"url,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Msp Msp

// NewMsp instantiates a new Msp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMsp() *Msp {
	this := Msp{}
	var tier MspTier = MSPTIER_BASE
	this.Tier = &tier
	return &this
}

// NewMspWithDefaults instantiates a new Msp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMspWithDefaults() *Msp {
	this := Msp{}
	var tier MspTier = MSPTIER_BASE
	this.Tier = &tier
	return &this
}

// GetAllowMist returns the AllowMist field value if set, zero value otherwise.
func (o *Msp) GetAllowMist() bool {
	if o == nil || IsNil(o.AllowMist) {
		var ret bool
		return ret
	}
	return *o.AllowMist
}

// GetAllowMistOk returns a tuple with the AllowMist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Msp) GetAllowMistOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowMist) {
		return nil, false
	}
	return o.AllowMist, true
}

// HasAllowMist returns a boolean if a field has been set.
func (o *Msp) HasAllowMist() bool {
	if o != nil && !IsNil(o.AllowMist) {
		return true
	}

	return false
}

// SetAllowMist gets a reference to the given bool and assigns it to the AllowMist field.
func (o *Msp) SetAllowMist(v bool) {
	o.AllowMist = &v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *Msp) GetCreatedTime() int32 {
	if o == nil || IsNil(o.CreatedTime) {
		var ret int32
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Msp) GetCreatedTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *Msp) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given int32 and assigns it to the CreatedTime field.
func (o *Msp) SetCreatedTime(v int32) {
	o.CreatedTime = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Msp) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Msp) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Msp) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Msp) SetId(v string) {
	o.Id = &v
}

// GetLogoUrl returns the LogoUrl field value if set, zero value otherwise.
func (o *Msp) GetLogoUrl() string {
	if o == nil || IsNil(o.LogoUrl) {
		var ret string
		return ret
	}
	return *o.LogoUrl
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Msp) GetLogoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LogoUrl) {
		return nil, false
	}
	return o.LogoUrl, true
}

// HasLogoUrl returns a boolean if a field has been set.
func (o *Msp) HasLogoUrl() bool {
	if o != nil && !IsNil(o.LogoUrl) {
		return true
	}

	return false
}

// SetLogoUrl gets a reference to the given string and assigns it to the LogoUrl field.
func (o *Msp) SetLogoUrl(v string) {
	o.LogoUrl = &v
}

// GetModifiedTime returns the ModifiedTime field value if set, zero value otherwise.
func (o *Msp) GetModifiedTime() int32 {
	if o == nil || IsNil(o.ModifiedTime) {
		var ret int32
		return ret
	}
	return *o.ModifiedTime
}

// GetModifiedTimeOk returns a tuple with the ModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Msp) GetModifiedTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.ModifiedTime) {
		return nil, false
	}
	return o.ModifiedTime, true
}

// HasModifiedTime returns a boolean if a field has been set.
func (o *Msp) HasModifiedTime() bool {
	if o != nil && !IsNil(o.ModifiedTime) {
		return true
	}

	return false
}

// SetModifiedTime gets a reference to the given int32 and assigns it to the ModifiedTime field.
func (o *Msp) SetModifiedTime(v int32) {
	o.ModifiedTime = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Msp) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Msp) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Msp) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Msp) SetName(v string) {
	o.Name = &v
}

// GetTier returns the Tier field value if set, zero value otherwise.
func (o *Msp) GetTier() MspTier {
	if o == nil || IsNil(o.Tier) {
		var ret MspTier
		return ret
	}
	return *o.Tier
}

// GetTierOk returns a tuple with the Tier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Msp) GetTierOk() (*MspTier, bool) {
	if o == nil || IsNil(o.Tier) {
		return nil, false
	}
	return o.Tier, true
}

// HasTier returns a boolean if a field has been set.
func (o *Msp) HasTier() bool {
	if o != nil && !IsNil(o.Tier) {
		return true
	}

	return false
}

// SetTier gets a reference to the given MspTier and assigns it to the Tier field.
func (o *Msp) SetTier(v MspTier) {
	o.Tier = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Msp) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Msp) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Msp) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Msp) SetUrl(v string) {
	o.Url = &v
}

func (o Msp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Msp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowMist) {
		toSerialize["allow_mist"] = o.AllowMist
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LogoUrl) {
		toSerialize["logo_url"] = o.LogoUrl
	}
	if !IsNil(o.ModifiedTime) {
		toSerialize["modified_time"] = o.ModifiedTime
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Tier) {
		toSerialize["tier"] = o.Tier
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Msp) UnmarshalJSON(data []byte) (err error) {
	varMsp := _Msp{}

	err = json.Unmarshal(data, &varMsp)

	if err != nil {
		return err
	}

	*o = Msp(varMsp)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "allow_mist")
		delete(additionalProperties, "created_time")
		delete(additionalProperties, "id")
		delete(additionalProperties, "logo_url")
		delete(additionalProperties, "modified_time")
		delete(additionalProperties, "name")
		delete(additionalProperties, "tier")
		delete(additionalProperties, "url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMsp struct {
	value *Msp
	isSet bool
}

func (v NullableMsp) Get() *Msp {
	return v.value
}

func (v *NullableMsp) Set(val *Msp) {
	v.value = val
	v.isSet = true
}

func (v NullableMsp) IsSet() bool {
	return v.isSet
}

func (v *NullableMsp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMsp(val *Msp) *NullableMsp {
	return &NullableMsp{value: val, isSet: true}
}

func (v NullableMsp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMsp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


