/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the Vbeacon type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Vbeacon{}

// Vbeacon vBeacon
type Vbeacon struct {
	CreatedTime *float32 `json:"created_time,omitempty"`
	ForSite *bool `json:"for_site,omitempty"`
	Id *string `json:"id,omitempty"`
	// bluetooth tag major
	Major *int32 `json:"major,omitempty"`
	// map where the device belongs to
	MapId *string `json:"map_id,omitempty"`
	// a message that can be displayed when the sdkclient gets near the vbeacon
	Message *string `json:"message,omitempty"`
	// bluetooth tag minor
	Minor *int32 `json:"minor,omitempty"`
	ModifiedTime *float32 `json:"modified_time,omitempty"`
	// name / label of the device
	Name *string `json:"name,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	// required if `power_mode`==`custom`, -30 - 100, in dBm. For default power_mode, power = 4 dBm.
	Power *int32 `json:"power,omitempty"`
	PowerMode *BleConfigPowerMode `json:"power_mode,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	// URL to show, optional
	Url *string `json:"url,omitempty"`
	// bluetooth tag UUID
	Uuid *string `json:"uuid,omitempty"`
	// the name to be used in wayfinding_path or wayfinding_grid blob
	WayfindingNodename *string `json:"wayfinding_nodename,omitempty"`
	// x in pixel
	X *float32 `json:"x,omitempty"`
	// y in pixel
	Y *float32 `json:"y,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Vbeacon Vbeacon

// NewVbeacon instantiates a new Vbeacon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVbeacon() *Vbeacon {
	this := Vbeacon{}
	var power int32 = 4
	this.Power = &power
	var powerMode BleConfigPowerMode = BLECONFIGPOWERMODE_DEFAULT
	this.PowerMode = &powerMode
	return &this
}

// NewVbeaconWithDefaults instantiates a new Vbeacon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVbeaconWithDefaults() *Vbeacon {
	this := Vbeacon{}
	var power int32 = 4
	this.Power = &power
	var powerMode BleConfigPowerMode = BLECONFIGPOWERMODE_DEFAULT
	this.PowerMode = &powerMode
	return &this
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *Vbeacon) GetCreatedTime() float32 {
	if o == nil || IsNil(o.CreatedTime) {
		var ret float32
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vbeacon) GetCreatedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *Vbeacon) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given float32 and assigns it to the CreatedTime field.
func (o *Vbeacon) SetCreatedTime(v float32) {
	o.CreatedTime = &v
}

// GetForSite returns the ForSite field value if set, zero value otherwise.
func (o *Vbeacon) GetForSite() bool {
	if o == nil || IsNil(o.ForSite) {
		var ret bool
		return ret
	}
	return *o.ForSite
}

// GetForSiteOk returns a tuple with the ForSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vbeacon) GetForSiteOk() (*bool, bool) {
	if o == nil || IsNil(o.ForSite) {
		return nil, false
	}
	return o.ForSite, true
}

// HasForSite returns a boolean if a field has been set.
func (o *Vbeacon) HasForSite() bool {
	if o != nil && !IsNil(o.ForSite) {
		return true
	}

	return false
}

// SetForSite gets a reference to the given bool and assigns it to the ForSite field.
func (o *Vbeacon) SetForSite(v bool) {
	o.ForSite = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Vbeacon) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vbeacon) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Vbeacon) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Vbeacon) SetId(v string) {
	o.Id = &v
}

// GetMajor returns the Major field value if set, zero value otherwise.
func (o *Vbeacon) GetMajor() int32 {
	if o == nil || IsNil(o.Major) {
		var ret int32
		return ret
	}
	return *o.Major
}

// GetMajorOk returns a tuple with the Major field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vbeacon) GetMajorOk() (*int32, bool) {
	if o == nil || IsNil(o.Major) {
		return nil, false
	}
	return o.Major, true
}

// HasMajor returns a boolean if a field has been set.
func (o *Vbeacon) HasMajor() bool {
	if o != nil && !IsNil(o.Major) {
		return true
	}

	return false
}

// SetMajor gets a reference to the given int32 and assigns it to the Major field.
func (o *Vbeacon) SetMajor(v int32) {
	o.Major = &v
}

// GetMapId returns the MapId field value if set, zero value otherwise.
func (o *Vbeacon) GetMapId() string {
	if o == nil || IsNil(o.MapId) {
		var ret string
		return ret
	}
	return *o.MapId
}

// GetMapIdOk returns a tuple with the MapId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vbeacon) GetMapIdOk() (*string, bool) {
	if o == nil || IsNil(o.MapId) {
		return nil, false
	}
	return o.MapId, true
}

// HasMapId returns a boolean if a field has been set.
func (o *Vbeacon) HasMapId() bool {
	if o != nil && !IsNil(o.MapId) {
		return true
	}

	return false
}

// SetMapId gets a reference to the given string and assigns it to the MapId field.
func (o *Vbeacon) SetMapId(v string) {
	o.MapId = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *Vbeacon) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vbeacon) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *Vbeacon) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *Vbeacon) SetMessage(v string) {
	o.Message = &v
}

// GetMinor returns the Minor field value if set, zero value otherwise.
func (o *Vbeacon) GetMinor() int32 {
	if o == nil || IsNil(o.Minor) {
		var ret int32
		return ret
	}
	return *o.Minor
}

// GetMinorOk returns a tuple with the Minor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vbeacon) GetMinorOk() (*int32, bool) {
	if o == nil || IsNil(o.Minor) {
		return nil, false
	}
	return o.Minor, true
}

// HasMinor returns a boolean if a field has been set.
func (o *Vbeacon) HasMinor() bool {
	if o != nil && !IsNil(o.Minor) {
		return true
	}

	return false
}

// SetMinor gets a reference to the given int32 and assigns it to the Minor field.
func (o *Vbeacon) SetMinor(v int32) {
	o.Minor = &v
}

// GetModifiedTime returns the ModifiedTime field value if set, zero value otherwise.
func (o *Vbeacon) GetModifiedTime() float32 {
	if o == nil || IsNil(o.ModifiedTime) {
		var ret float32
		return ret
	}
	return *o.ModifiedTime
}

// GetModifiedTimeOk returns a tuple with the ModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vbeacon) GetModifiedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.ModifiedTime) {
		return nil, false
	}
	return o.ModifiedTime, true
}

// HasModifiedTime returns a boolean if a field has been set.
func (o *Vbeacon) HasModifiedTime() bool {
	if o != nil && !IsNil(o.ModifiedTime) {
		return true
	}

	return false
}

// SetModifiedTime gets a reference to the given float32 and assigns it to the ModifiedTime field.
func (o *Vbeacon) SetModifiedTime(v float32) {
	o.ModifiedTime = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Vbeacon) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vbeacon) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Vbeacon) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Vbeacon) SetName(v string) {
	o.Name = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *Vbeacon) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vbeacon) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *Vbeacon) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *Vbeacon) SetOrgId(v string) {
	o.OrgId = &v
}

// GetPower returns the Power field value if set, zero value otherwise.
func (o *Vbeacon) GetPower() int32 {
	if o == nil || IsNil(o.Power) {
		var ret int32
		return ret
	}
	return *o.Power
}

// GetPowerOk returns a tuple with the Power field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vbeacon) GetPowerOk() (*int32, bool) {
	if o == nil || IsNil(o.Power) {
		return nil, false
	}
	return o.Power, true
}

// HasPower returns a boolean if a field has been set.
func (o *Vbeacon) HasPower() bool {
	if o != nil && !IsNil(o.Power) {
		return true
	}

	return false
}

// SetPower gets a reference to the given int32 and assigns it to the Power field.
func (o *Vbeacon) SetPower(v int32) {
	o.Power = &v
}

// GetPowerMode returns the PowerMode field value if set, zero value otherwise.
func (o *Vbeacon) GetPowerMode() BleConfigPowerMode {
	if o == nil || IsNil(o.PowerMode) {
		var ret BleConfigPowerMode
		return ret
	}
	return *o.PowerMode
}

// GetPowerModeOk returns a tuple with the PowerMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vbeacon) GetPowerModeOk() (*BleConfigPowerMode, bool) {
	if o == nil || IsNil(o.PowerMode) {
		return nil, false
	}
	return o.PowerMode, true
}

// HasPowerMode returns a boolean if a field has been set.
func (o *Vbeacon) HasPowerMode() bool {
	if o != nil && !IsNil(o.PowerMode) {
		return true
	}

	return false
}

// SetPowerMode gets a reference to the given BleConfigPowerMode and assigns it to the PowerMode field.
func (o *Vbeacon) SetPowerMode(v BleConfigPowerMode) {
	o.PowerMode = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *Vbeacon) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vbeacon) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *Vbeacon) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *Vbeacon) SetSiteId(v string) {
	o.SiteId = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Vbeacon) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vbeacon) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Vbeacon) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Vbeacon) SetUrl(v string) {
	o.Url = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Vbeacon) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vbeacon) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Vbeacon) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Vbeacon) SetUuid(v string) {
	o.Uuid = &v
}

// GetWayfindingNodename returns the WayfindingNodename field value if set, zero value otherwise.
func (o *Vbeacon) GetWayfindingNodename() string {
	if o == nil || IsNil(o.WayfindingNodename) {
		var ret string
		return ret
	}
	return *o.WayfindingNodename
}

// GetWayfindingNodenameOk returns a tuple with the WayfindingNodename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vbeacon) GetWayfindingNodenameOk() (*string, bool) {
	if o == nil || IsNil(o.WayfindingNodename) {
		return nil, false
	}
	return o.WayfindingNodename, true
}

// HasWayfindingNodename returns a boolean if a field has been set.
func (o *Vbeacon) HasWayfindingNodename() bool {
	if o != nil && !IsNil(o.WayfindingNodename) {
		return true
	}

	return false
}

// SetWayfindingNodename gets a reference to the given string and assigns it to the WayfindingNodename field.
func (o *Vbeacon) SetWayfindingNodename(v string) {
	o.WayfindingNodename = &v
}

// GetX returns the X field value if set, zero value otherwise.
func (o *Vbeacon) GetX() float32 {
	if o == nil || IsNil(o.X) {
		var ret float32
		return ret
	}
	return *o.X
}

// GetXOk returns a tuple with the X field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vbeacon) GetXOk() (*float32, bool) {
	if o == nil || IsNil(o.X) {
		return nil, false
	}
	return o.X, true
}

// HasX returns a boolean if a field has been set.
func (o *Vbeacon) HasX() bool {
	if o != nil && !IsNil(o.X) {
		return true
	}

	return false
}

// SetX gets a reference to the given float32 and assigns it to the X field.
func (o *Vbeacon) SetX(v float32) {
	o.X = &v
}

// GetY returns the Y field value if set, zero value otherwise.
func (o *Vbeacon) GetY() float32 {
	if o == nil || IsNil(o.Y) {
		var ret float32
		return ret
	}
	return *o.Y
}

// GetYOk returns a tuple with the Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vbeacon) GetYOk() (*float32, bool) {
	if o == nil || IsNil(o.Y) {
		return nil, false
	}
	return o.Y, true
}

// HasY returns a boolean if a field has been set.
func (o *Vbeacon) HasY() bool {
	if o != nil && !IsNil(o.Y) {
		return true
	}

	return false
}

// SetY gets a reference to the given float32 and assigns it to the Y field.
func (o *Vbeacon) SetY(v float32) {
	o.Y = &v
}

func (o Vbeacon) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Vbeacon) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.ForSite) {
		toSerialize["for_site"] = o.ForSite
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Major) {
		toSerialize["major"] = o.Major
	}
	if !IsNil(o.MapId) {
		toSerialize["map_id"] = o.MapId
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Minor) {
		toSerialize["minor"] = o.Minor
	}
	if !IsNil(o.ModifiedTime) {
		toSerialize["modified_time"] = o.ModifiedTime
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.Power) {
		toSerialize["power"] = o.Power
	}
	if !IsNil(o.PowerMode) {
		toSerialize["power_mode"] = o.PowerMode
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.WayfindingNodename) {
		toSerialize["wayfinding_nodename"] = o.WayfindingNodename
	}
	if !IsNil(o.X) {
		toSerialize["x"] = o.X
	}
	if !IsNil(o.Y) {
		toSerialize["y"] = o.Y
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Vbeacon) UnmarshalJSON(data []byte) (err error) {
	varVbeacon := _Vbeacon{}

	err = json.Unmarshal(data, &varVbeacon)

	if err != nil {
		return err
	}

	*o = Vbeacon(varVbeacon)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "created_time")
		delete(additionalProperties, "for_site")
		delete(additionalProperties, "id")
		delete(additionalProperties, "major")
		delete(additionalProperties, "map_id")
		delete(additionalProperties, "message")
		delete(additionalProperties, "minor")
		delete(additionalProperties, "modified_time")
		delete(additionalProperties, "name")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "power")
		delete(additionalProperties, "power_mode")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "url")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "wayfinding_nodename")
		delete(additionalProperties, "x")
		delete(additionalProperties, "y")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVbeacon struct {
	value *Vbeacon
	isSet bool
}

func (v NullableVbeacon) Get() *Vbeacon {
	return v.value
}

func (v *NullableVbeacon) Set(val *Vbeacon) {
	v.value = val
	v.isSet = true
}

func (v NullableVbeacon) IsSet() bool {
	return v.isSet
}

func (v *NullableVbeacon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVbeacon(val *Vbeacon) *NullableVbeacon {
	return &NullableVbeacon{value: val, isSet: true}
}

func (v NullableVbeacon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVbeacon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


