/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the MxtunnelStatsSession type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MxtunnelStatsSession{}

// MxtunnelStatsSession struct for MxtunnelStatsSession
type MxtunnelStatsSession struct {
	// remote sessions id (dynamically unless Tunnel is said to be static)
	LocalSid int32 `json:"local_sid"`
	// WxlanTunnel Remote ID
	RemoteId string `json:"remote_id"`
	// remote sessions id (dynamically unless Tunnel is said to be static)
	RemoteSid int32 `json:"remote_sid"`
	State string `json:"state"`
	AdditionalProperties map[string]interface{}
}

type _MxtunnelStatsSession MxtunnelStatsSession

// NewMxtunnelStatsSession instantiates a new MxtunnelStatsSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMxtunnelStatsSession(localSid int32, remoteId string, remoteSid int32, state string) *MxtunnelStatsSession {
	this := MxtunnelStatsSession{}
	this.LocalSid = localSid
	this.RemoteId = remoteId
	this.RemoteSid = remoteSid
	this.State = state
	return &this
}

// NewMxtunnelStatsSessionWithDefaults instantiates a new MxtunnelStatsSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMxtunnelStatsSessionWithDefaults() *MxtunnelStatsSession {
	this := MxtunnelStatsSession{}
	return &this
}

// GetLocalSid returns the LocalSid field value
func (o *MxtunnelStatsSession) GetLocalSid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LocalSid
}

// GetLocalSidOk returns a tuple with the LocalSid field value
// and a boolean to check if the value has been set.
func (o *MxtunnelStatsSession) GetLocalSidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocalSid, true
}

// SetLocalSid sets field value
func (o *MxtunnelStatsSession) SetLocalSid(v int32) {
	o.LocalSid = v
}

// GetRemoteId returns the RemoteId field value
func (o *MxtunnelStatsSession) GetRemoteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteId
}

// GetRemoteIdOk returns a tuple with the RemoteId field value
// and a boolean to check if the value has been set.
func (o *MxtunnelStatsSession) GetRemoteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteId, true
}

// SetRemoteId sets field value
func (o *MxtunnelStatsSession) SetRemoteId(v string) {
	o.RemoteId = v
}

// GetRemoteSid returns the RemoteSid field value
func (o *MxtunnelStatsSession) GetRemoteSid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RemoteSid
}

// GetRemoteSidOk returns a tuple with the RemoteSid field value
// and a boolean to check if the value has been set.
func (o *MxtunnelStatsSession) GetRemoteSidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteSid, true
}

// SetRemoteSid sets field value
func (o *MxtunnelStatsSession) SetRemoteSid(v int32) {
	o.RemoteSid = v
}

// GetState returns the State field value
func (o *MxtunnelStatsSession) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *MxtunnelStatsSession) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *MxtunnelStatsSession) SetState(v string) {
	o.State = v
}

func (o MxtunnelStatsSession) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MxtunnelStatsSession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["local_sid"] = o.LocalSid
	toSerialize["remote_id"] = o.RemoteId
	toSerialize["remote_sid"] = o.RemoteSid
	toSerialize["state"] = o.State

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MxtunnelStatsSession) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"local_sid",
		"remote_id",
		"remote_sid",
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMxtunnelStatsSession := _MxtunnelStatsSession{}

	err = json.Unmarshal(data, &varMxtunnelStatsSession)

	if err != nil {
		return err
	}

	*o = MxtunnelStatsSession(varMxtunnelStatsSession)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "local_sid")
		delete(additionalProperties, "remote_id")
		delete(additionalProperties, "remote_sid")
		delete(additionalProperties, "state")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMxtunnelStatsSession struct {
	value *MxtunnelStatsSession
	isSet bool
}

func (v NullableMxtunnelStatsSession) Get() *MxtunnelStatsSession {
	return v.value
}

func (v *NullableMxtunnelStatsSession) Set(val *MxtunnelStatsSession) {
	v.value = val
	v.isSet = true
}

func (v NullableMxtunnelStatsSession) IsSet() bool {
	return v.isSet
}

func (v *NullableMxtunnelStatsSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMxtunnelStatsSession(val *MxtunnelStatsSession) *NullableMxtunnelStatsSession {
	return &NullableMxtunnelStatsSession{value: val, isSet: true}
}

func (v NullableMxtunnelStatsSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMxtunnelStatsSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


