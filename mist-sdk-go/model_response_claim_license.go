/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the ResponseClaimLicense type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseClaimLicense{}

// ResponseClaimLicense struct for ResponseClaimLicense
type ResponseClaimLicense struct {
	InventoryAdded []ResponseClaimLicenseInventoryItem `json:"inventory_added"`
	InventoryDuplicated []ResponseClaimLicenseInventoryItem `json:"inventory_duplicated"`
	LicenseAdded []ResponseClaimLicenseLicenseItem `json:"license_added"`
	LicenseDuplicated []ResponseClaimLicenseLicenseItem `json:"license_duplicated"`
	LicenseError []ResponseClaimLicenseLicenseErrorItem `json:"license_error"`
	AdditionalProperties map[string]interface{}
}

type _ResponseClaimLicense ResponseClaimLicense

// NewResponseClaimLicense instantiates a new ResponseClaimLicense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseClaimLicense(inventoryAdded []ResponseClaimLicenseInventoryItem, inventoryDuplicated []ResponseClaimLicenseInventoryItem, licenseAdded []ResponseClaimLicenseLicenseItem, licenseDuplicated []ResponseClaimLicenseLicenseItem, licenseError []ResponseClaimLicenseLicenseErrorItem) *ResponseClaimLicense {
	this := ResponseClaimLicense{}
	this.InventoryAdded = inventoryAdded
	this.InventoryDuplicated = inventoryDuplicated
	this.LicenseAdded = licenseAdded
	this.LicenseDuplicated = licenseDuplicated
	this.LicenseError = licenseError
	return &this
}

// NewResponseClaimLicenseWithDefaults instantiates a new ResponseClaimLicense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseClaimLicenseWithDefaults() *ResponseClaimLicense {
	this := ResponseClaimLicense{}
	return &this
}

// GetInventoryAdded returns the InventoryAdded field value
func (o *ResponseClaimLicense) GetInventoryAdded() []ResponseClaimLicenseInventoryItem {
	if o == nil {
		var ret []ResponseClaimLicenseInventoryItem
		return ret
	}

	return o.InventoryAdded
}

// GetInventoryAddedOk returns a tuple with the InventoryAdded field value
// and a boolean to check if the value has been set.
func (o *ResponseClaimLicense) GetInventoryAddedOk() ([]ResponseClaimLicenseInventoryItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryAdded, true
}

// SetInventoryAdded sets field value
func (o *ResponseClaimLicense) SetInventoryAdded(v []ResponseClaimLicenseInventoryItem) {
	o.InventoryAdded = v
}

// GetInventoryDuplicated returns the InventoryDuplicated field value
func (o *ResponseClaimLicense) GetInventoryDuplicated() []ResponseClaimLicenseInventoryItem {
	if o == nil {
		var ret []ResponseClaimLicenseInventoryItem
		return ret
	}

	return o.InventoryDuplicated
}

// GetInventoryDuplicatedOk returns a tuple with the InventoryDuplicated field value
// and a boolean to check if the value has been set.
func (o *ResponseClaimLicense) GetInventoryDuplicatedOk() ([]ResponseClaimLicenseInventoryItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryDuplicated, true
}

// SetInventoryDuplicated sets field value
func (o *ResponseClaimLicense) SetInventoryDuplicated(v []ResponseClaimLicenseInventoryItem) {
	o.InventoryDuplicated = v
}

// GetLicenseAdded returns the LicenseAdded field value
func (o *ResponseClaimLicense) GetLicenseAdded() []ResponseClaimLicenseLicenseItem {
	if o == nil {
		var ret []ResponseClaimLicenseLicenseItem
		return ret
	}

	return o.LicenseAdded
}

// GetLicenseAddedOk returns a tuple with the LicenseAdded field value
// and a boolean to check if the value has been set.
func (o *ResponseClaimLicense) GetLicenseAddedOk() ([]ResponseClaimLicenseLicenseItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.LicenseAdded, true
}

// SetLicenseAdded sets field value
func (o *ResponseClaimLicense) SetLicenseAdded(v []ResponseClaimLicenseLicenseItem) {
	o.LicenseAdded = v
}

// GetLicenseDuplicated returns the LicenseDuplicated field value
func (o *ResponseClaimLicense) GetLicenseDuplicated() []ResponseClaimLicenseLicenseItem {
	if o == nil {
		var ret []ResponseClaimLicenseLicenseItem
		return ret
	}

	return o.LicenseDuplicated
}

// GetLicenseDuplicatedOk returns a tuple with the LicenseDuplicated field value
// and a boolean to check if the value has been set.
func (o *ResponseClaimLicense) GetLicenseDuplicatedOk() ([]ResponseClaimLicenseLicenseItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.LicenseDuplicated, true
}

// SetLicenseDuplicated sets field value
func (o *ResponseClaimLicense) SetLicenseDuplicated(v []ResponseClaimLicenseLicenseItem) {
	o.LicenseDuplicated = v
}

// GetLicenseError returns the LicenseError field value
func (o *ResponseClaimLicense) GetLicenseError() []ResponseClaimLicenseLicenseErrorItem {
	if o == nil {
		var ret []ResponseClaimLicenseLicenseErrorItem
		return ret
	}

	return o.LicenseError
}

// GetLicenseErrorOk returns a tuple with the LicenseError field value
// and a boolean to check if the value has been set.
func (o *ResponseClaimLicense) GetLicenseErrorOk() ([]ResponseClaimLicenseLicenseErrorItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.LicenseError, true
}

// SetLicenseError sets field value
func (o *ResponseClaimLicense) SetLicenseError(v []ResponseClaimLicenseLicenseErrorItem) {
	o.LicenseError = v
}

func (o ResponseClaimLicense) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseClaimLicense) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["inventory_added"] = o.InventoryAdded
	toSerialize["inventory_duplicated"] = o.InventoryDuplicated
	toSerialize["license_added"] = o.LicenseAdded
	toSerialize["license_duplicated"] = o.LicenseDuplicated
	toSerialize["license_error"] = o.LicenseError

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResponseClaimLicense) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"inventory_added",
		"inventory_duplicated",
		"license_added",
		"license_duplicated",
		"license_error",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResponseClaimLicense := _ResponseClaimLicense{}

	err = json.Unmarshal(data, &varResponseClaimLicense)

	if err != nil {
		return err
	}

	*o = ResponseClaimLicense(varResponseClaimLicense)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "inventory_added")
		delete(additionalProperties, "inventory_duplicated")
		delete(additionalProperties, "license_added")
		delete(additionalProperties, "license_duplicated")
		delete(additionalProperties, "license_error")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResponseClaimLicense struct {
	value *ResponseClaimLicense
	isSet bool
}

func (v NullableResponseClaimLicense) Get() *ResponseClaimLicense {
	return v.value
}

func (v *NullableResponseClaimLicense) Set(val *ResponseClaimLicense) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseClaimLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseClaimLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseClaimLicense(val *ResponseClaimLicense) *NullableResponseClaimLicense {
	return &NullableResponseClaimLicense{value: val, isSet: true}
}

func (v NullableResponseClaimLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseClaimLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


