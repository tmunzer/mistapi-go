/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the ResponseDeviceSnapshot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseDeviceSnapshot{}

// ResponseDeviceSnapshot struct for ResponseDeviceSnapshot
type ResponseDeviceSnapshot struct {
	// the internal status id
	StatusId *string `json:"status_id,omitempty"`
	Staus *ResponseDeviceSnapshotStatus `json:"staus,omitempty"`
	Timestamp *float32 `json:"timestamp,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ResponseDeviceSnapshot ResponseDeviceSnapshot

// NewResponseDeviceSnapshot instantiates a new ResponseDeviceSnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseDeviceSnapshot() *ResponseDeviceSnapshot {
	this := ResponseDeviceSnapshot{}
	return &this
}

// NewResponseDeviceSnapshotWithDefaults instantiates a new ResponseDeviceSnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseDeviceSnapshotWithDefaults() *ResponseDeviceSnapshot {
	this := ResponseDeviceSnapshot{}
	return &this
}

// GetStatusId returns the StatusId field value if set, zero value otherwise.
func (o *ResponseDeviceSnapshot) GetStatusId() string {
	if o == nil || IsNil(o.StatusId) {
		var ret string
		return ret
	}
	return *o.StatusId
}

// GetStatusIdOk returns a tuple with the StatusId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseDeviceSnapshot) GetStatusIdOk() (*string, bool) {
	if o == nil || IsNil(o.StatusId) {
		return nil, false
	}
	return o.StatusId, true
}

// HasStatusId returns a boolean if a field has been set.
func (o *ResponseDeviceSnapshot) HasStatusId() bool {
	if o != nil && !IsNil(o.StatusId) {
		return true
	}

	return false
}

// SetStatusId gets a reference to the given string and assigns it to the StatusId field.
func (o *ResponseDeviceSnapshot) SetStatusId(v string) {
	o.StatusId = &v
}

// GetStaus returns the Staus field value if set, zero value otherwise.
func (o *ResponseDeviceSnapshot) GetStaus() ResponseDeviceSnapshotStatus {
	if o == nil || IsNil(o.Staus) {
		var ret ResponseDeviceSnapshotStatus
		return ret
	}
	return *o.Staus
}

// GetStausOk returns a tuple with the Staus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseDeviceSnapshot) GetStausOk() (*ResponseDeviceSnapshotStatus, bool) {
	if o == nil || IsNil(o.Staus) {
		return nil, false
	}
	return o.Staus, true
}

// HasStaus returns a boolean if a field has been set.
func (o *ResponseDeviceSnapshot) HasStaus() bool {
	if o != nil && !IsNil(o.Staus) {
		return true
	}

	return false
}

// SetStaus gets a reference to the given ResponseDeviceSnapshotStatus and assigns it to the Staus field.
func (o *ResponseDeviceSnapshot) SetStaus(v ResponseDeviceSnapshotStatus) {
	o.Staus = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *ResponseDeviceSnapshot) GetTimestamp() float32 {
	if o == nil || IsNil(o.Timestamp) {
		var ret float32
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseDeviceSnapshot) GetTimestampOk() (*float32, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ResponseDeviceSnapshot) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given float32 and assigns it to the Timestamp field.
func (o *ResponseDeviceSnapshot) SetTimestamp(v float32) {
	o.Timestamp = &v
}

func (o ResponseDeviceSnapshot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseDeviceSnapshot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StatusId) {
		toSerialize["status_id"] = o.StatusId
	}
	if !IsNil(o.Staus) {
		toSerialize["staus"] = o.Staus
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResponseDeviceSnapshot) UnmarshalJSON(data []byte) (err error) {
	varResponseDeviceSnapshot := _ResponseDeviceSnapshot{}

	err = json.Unmarshal(data, &varResponseDeviceSnapshot)

	if err != nil {
		return err
	}

	*o = ResponseDeviceSnapshot(varResponseDeviceSnapshot)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "status_id")
		delete(additionalProperties, "staus")
		delete(additionalProperties, "timestamp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResponseDeviceSnapshot struct {
	value *ResponseDeviceSnapshot
	isSet bool
}

func (v NullableResponseDeviceSnapshot) Get() *ResponseDeviceSnapshot {
	return v.value
}

func (v *NullableResponseDeviceSnapshot) Set(val *ResponseDeviceSnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseDeviceSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseDeviceSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseDeviceSnapshot(val *ResponseDeviceSnapshot) *NullableResponseDeviceSnapshot {
	return &NullableResponseDeviceSnapshot{value: val, isSet: true}
}

func (v NullableResponseDeviceSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseDeviceSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


