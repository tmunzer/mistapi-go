/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the ApStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApStats{}

// ApStats AP statistics
type ApStats struct {
	AutoPlacement *ApStatsAutoPlacement `json:"auto_placement,omitempty"`
	BleConfig *ApStatsBleConfig `json:"ble_config,omitempty"`
	BleStat *ApStatsBleStat `json:"ble_stat,omitempty"`
	CertExpiry *float32 `json:"cert_expiry,omitempty"`
	EnvStat *ApStatsEnvStat `json:"env_stat,omitempty"`
	EslStat *ApStatsEslStat `json:"esl_stat,omitempty"`
	ExtIp *string `json:"ext_ip,omitempty"`
	Fwupdate *ApStatsFwupdate `json:"fwupdate,omitempty"`
	IotStat *map[string]ApStatsIotStatAdditionalProperties `json:"iot_stat,omitempty"`
	Ip *string `json:"ip,omitempty"`
	IpConfig *ApIpConfig `json:"ip_config,omitempty"`
	IpStat *IpStat `json:"ip_stat,omitempty"`
	// l2tp tunnel status (key is the wxtunnel_id)
	L2tpStat *map[string]ApStatsL2tpStat `json:"l2tp_stat,omitempty"`
	// last seen timestamp
	LastSeen *float32 `json:"last_seen,omitempty"`
	LastTrouble *LastTrouble `json:"last_trouble,omitempty"`
	Led *ApLed `json:"led,omitempty"`
	LldpStat *ApStatsLldpStat `json:"lldp_stat,omitempty"`
	Locating *bool `json:"locating,omitempty"`
	// whether this AP is considered locked (placement / orientation has been vetted)
	Locked *bool `json:"locked,omitempty"`
	// device mac
	Mac string `json:"mac"`
	MapId *string `json:"map_id,omitempty"`
	// Property key is the mesh downlink id (e.g `00000000-0000-0000-1000-5c5b35000010`)
	MeshDownlinks *map[string]ApStatMeshDownlink `json:"mesh_downlinks,omitempty"`
	MeshUplink *ApStatMeshUplink `json:"mesh_uplink,omitempty"`
	// device model
	Model string `json:"model"`
	Mount *string `json:"mount,omitempty"`
	Name *string `json:"name,omitempty"`
	// how many wireless clients are currently connected
	NumClients *int32 `json:"num_clients,omitempty"`
	// Property key is the port name (e.g. `eth0`)
	PortStat *map[string]ApStatsPortStat `json:"port_stat,omitempty"`
	// in mW, surplus if positive or deficit if negative
	PowerBudget *float32 `json:"power_budget,omitempty"`
	// whether insufficient power
	PowerConstrained *bool `json:"power_constrained,omitempty"`
	// constrained mode
	PowerOpmode *string `json:"power_opmode,omitempty"`
	// DC Input / PoE 802.3at / PoE 802.3af / LLDP / ? (unknown)
	PowerSrc *string `json:"power_src,omitempty"`
	RadioConfig *ApStatsRadioConfig `json:"radio_config,omitempty"`
	RadioStat *ApStatsRadioStat `json:"radio_stat,omitempty"`
	RxBps *float32 `json:"rx_bps,omitempty"`
	RxBytes *int32 `json:"rx_bytes,omitempty"`
	RxPkts *int32 `json:"rx_pkts,omitempty"`
	// serial
	Serial *string `json:"serial,omitempty"`
	Status *ApStatsStatus `json:"status,omitempty"`
	SwitchRedundancy *ApStatsSwitchRedundancy `json:"switch_redundancy,omitempty"`
	TxBps *float32 `json:"tx_bps,omitempty"`
	TxBytes *float32 `json:"tx_bytes,omitempty"`
	TxPkts *float32 `json:"tx_pkts,omitempty"`
	// device type, ap / ble
	Type *string `json:"type,omitempty"`
	// how long, in seconds, has the device been up (or rebooted)
	Uptime *float32 `json:"uptime,omitempty"`
	UsbStat *ApStatsUsbStat `json:"usb_stat,omitempty"`
	Version *string `json:"version,omitempty"`
	X *float32 `json:"x,omitempty"`
	Y *float32 `json:"y,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApStats ApStats

// NewApStats instantiates a new ApStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApStats(mac string, model string) *ApStats {
	this := ApStats{}
	this.Mac = mac
	this.Model = model
	return &this
}

// NewApStatsWithDefaults instantiates a new ApStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApStatsWithDefaults() *ApStats {
	this := ApStats{}
	return &this
}

// GetAutoPlacement returns the AutoPlacement field value if set, zero value otherwise.
func (o *ApStats) GetAutoPlacement() ApStatsAutoPlacement {
	if o == nil || IsNil(o.AutoPlacement) {
		var ret ApStatsAutoPlacement
		return ret
	}
	return *o.AutoPlacement
}

// GetAutoPlacementOk returns a tuple with the AutoPlacement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetAutoPlacementOk() (*ApStatsAutoPlacement, bool) {
	if o == nil || IsNil(o.AutoPlacement) {
		return nil, false
	}
	return o.AutoPlacement, true
}

// HasAutoPlacement returns a boolean if a field has been set.
func (o *ApStats) HasAutoPlacement() bool {
	if o != nil && !IsNil(o.AutoPlacement) {
		return true
	}

	return false
}

// SetAutoPlacement gets a reference to the given ApStatsAutoPlacement and assigns it to the AutoPlacement field.
func (o *ApStats) SetAutoPlacement(v ApStatsAutoPlacement) {
	o.AutoPlacement = &v
}

// GetBleConfig returns the BleConfig field value if set, zero value otherwise.
func (o *ApStats) GetBleConfig() ApStatsBleConfig {
	if o == nil || IsNil(o.BleConfig) {
		var ret ApStatsBleConfig
		return ret
	}
	return *o.BleConfig
}

// GetBleConfigOk returns a tuple with the BleConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetBleConfigOk() (*ApStatsBleConfig, bool) {
	if o == nil || IsNil(o.BleConfig) {
		return nil, false
	}
	return o.BleConfig, true
}

// HasBleConfig returns a boolean if a field has been set.
func (o *ApStats) HasBleConfig() bool {
	if o != nil && !IsNil(o.BleConfig) {
		return true
	}

	return false
}

// SetBleConfig gets a reference to the given ApStatsBleConfig and assigns it to the BleConfig field.
func (o *ApStats) SetBleConfig(v ApStatsBleConfig) {
	o.BleConfig = &v
}

// GetBleStat returns the BleStat field value if set, zero value otherwise.
func (o *ApStats) GetBleStat() ApStatsBleStat {
	if o == nil || IsNil(o.BleStat) {
		var ret ApStatsBleStat
		return ret
	}
	return *o.BleStat
}

// GetBleStatOk returns a tuple with the BleStat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetBleStatOk() (*ApStatsBleStat, bool) {
	if o == nil || IsNil(o.BleStat) {
		return nil, false
	}
	return o.BleStat, true
}

// HasBleStat returns a boolean if a field has been set.
func (o *ApStats) HasBleStat() bool {
	if o != nil && !IsNil(o.BleStat) {
		return true
	}

	return false
}

// SetBleStat gets a reference to the given ApStatsBleStat and assigns it to the BleStat field.
func (o *ApStats) SetBleStat(v ApStatsBleStat) {
	o.BleStat = &v
}

// GetCertExpiry returns the CertExpiry field value if set, zero value otherwise.
func (o *ApStats) GetCertExpiry() float32 {
	if o == nil || IsNil(o.CertExpiry) {
		var ret float32
		return ret
	}
	return *o.CertExpiry
}

// GetCertExpiryOk returns a tuple with the CertExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetCertExpiryOk() (*float32, bool) {
	if o == nil || IsNil(o.CertExpiry) {
		return nil, false
	}
	return o.CertExpiry, true
}

// HasCertExpiry returns a boolean if a field has been set.
func (o *ApStats) HasCertExpiry() bool {
	if o != nil && !IsNil(o.CertExpiry) {
		return true
	}

	return false
}

// SetCertExpiry gets a reference to the given float32 and assigns it to the CertExpiry field.
func (o *ApStats) SetCertExpiry(v float32) {
	o.CertExpiry = &v
}

// GetEnvStat returns the EnvStat field value if set, zero value otherwise.
func (o *ApStats) GetEnvStat() ApStatsEnvStat {
	if o == nil || IsNil(o.EnvStat) {
		var ret ApStatsEnvStat
		return ret
	}
	return *o.EnvStat
}

// GetEnvStatOk returns a tuple with the EnvStat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetEnvStatOk() (*ApStatsEnvStat, bool) {
	if o == nil || IsNil(o.EnvStat) {
		return nil, false
	}
	return o.EnvStat, true
}

// HasEnvStat returns a boolean if a field has been set.
func (o *ApStats) HasEnvStat() bool {
	if o != nil && !IsNil(o.EnvStat) {
		return true
	}

	return false
}

// SetEnvStat gets a reference to the given ApStatsEnvStat and assigns it to the EnvStat field.
func (o *ApStats) SetEnvStat(v ApStatsEnvStat) {
	o.EnvStat = &v
}

// GetEslStat returns the EslStat field value if set, zero value otherwise.
func (o *ApStats) GetEslStat() ApStatsEslStat {
	if o == nil || IsNil(o.EslStat) {
		var ret ApStatsEslStat
		return ret
	}
	return *o.EslStat
}

// GetEslStatOk returns a tuple with the EslStat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetEslStatOk() (*ApStatsEslStat, bool) {
	if o == nil || IsNil(o.EslStat) {
		return nil, false
	}
	return o.EslStat, true
}

// HasEslStat returns a boolean if a field has been set.
func (o *ApStats) HasEslStat() bool {
	if o != nil && !IsNil(o.EslStat) {
		return true
	}

	return false
}

// SetEslStat gets a reference to the given ApStatsEslStat and assigns it to the EslStat field.
func (o *ApStats) SetEslStat(v ApStatsEslStat) {
	o.EslStat = &v
}

// GetExtIp returns the ExtIp field value if set, zero value otherwise.
func (o *ApStats) GetExtIp() string {
	if o == nil || IsNil(o.ExtIp) {
		var ret string
		return ret
	}
	return *o.ExtIp
}

// GetExtIpOk returns a tuple with the ExtIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetExtIpOk() (*string, bool) {
	if o == nil || IsNil(o.ExtIp) {
		return nil, false
	}
	return o.ExtIp, true
}

// HasExtIp returns a boolean if a field has been set.
func (o *ApStats) HasExtIp() bool {
	if o != nil && !IsNil(o.ExtIp) {
		return true
	}

	return false
}

// SetExtIp gets a reference to the given string and assigns it to the ExtIp field.
func (o *ApStats) SetExtIp(v string) {
	o.ExtIp = &v
}

// GetFwupdate returns the Fwupdate field value if set, zero value otherwise.
func (o *ApStats) GetFwupdate() ApStatsFwupdate {
	if o == nil || IsNil(o.Fwupdate) {
		var ret ApStatsFwupdate
		return ret
	}
	return *o.Fwupdate
}

// GetFwupdateOk returns a tuple with the Fwupdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetFwupdateOk() (*ApStatsFwupdate, bool) {
	if o == nil || IsNil(o.Fwupdate) {
		return nil, false
	}
	return o.Fwupdate, true
}

// HasFwupdate returns a boolean if a field has been set.
func (o *ApStats) HasFwupdate() bool {
	if o != nil && !IsNil(o.Fwupdate) {
		return true
	}

	return false
}

// SetFwupdate gets a reference to the given ApStatsFwupdate and assigns it to the Fwupdate field.
func (o *ApStats) SetFwupdate(v ApStatsFwupdate) {
	o.Fwupdate = &v
}

// GetIotStat returns the IotStat field value if set, zero value otherwise.
func (o *ApStats) GetIotStat() map[string]ApStatsIotStatAdditionalProperties {
	if o == nil || IsNil(o.IotStat) {
		var ret map[string]ApStatsIotStatAdditionalProperties
		return ret
	}
	return *o.IotStat
}

// GetIotStatOk returns a tuple with the IotStat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetIotStatOk() (*map[string]ApStatsIotStatAdditionalProperties, bool) {
	if o == nil || IsNil(o.IotStat) {
		return nil, false
	}
	return o.IotStat, true
}

// HasIotStat returns a boolean if a field has been set.
func (o *ApStats) HasIotStat() bool {
	if o != nil && !IsNil(o.IotStat) {
		return true
	}

	return false
}

// SetIotStat gets a reference to the given map[string]ApStatsIotStatAdditionalProperties and assigns it to the IotStat field.
func (o *ApStats) SetIotStat(v map[string]ApStatsIotStatAdditionalProperties) {
	o.IotStat = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *ApStats) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *ApStats) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *ApStats) SetIp(v string) {
	o.Ip = &v
}

// GetIpConfig returns the IpConfig field value if set, zero value otherwise.
func (o *ApStats) GetIpConfig() ApIpConfig {
	if o == nil || IsNil(o.IpConfig) {
		var ret ApIpConfig
		return ret
	}
	return *o.IpConfig
}

// GetIpConfigOk returns a tuple with the IpConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetIpConfigOk() (*ApIpConfig, bool) {
	if o == nil || IsNil(o.IpConfig) {
		return nil, false
	}
	return o.IpConfig, true
}

// HasIpConfig returns a boolean if a field has been set.
func (o *ApStats) HasIpConfig() bool {
	if o != nil && !IsNil(o.IpConfig) {
		return true
	}

	return false
}

// SetIpConfig gets a reference to the given ApIpConfig and assigns it to the IpConfig field.
func (o *ApStats) SetIpConfig(v ApIpConfig) {
	o.IpConfig = &v
}

// GetIpStat returns the IpStat field value if set, zero value otherwise.
func (o *ApStats) GetIpStat() IpStat {
	if o == nil || IsNil(o.IpStat) {
		var ret IpStat
		return ret
	}
	return *o.IpStat
}

// GetIpStatOk returns a tuple with the IpStat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetIpStatOk() (*IpStat, bool) {
	if o == nil || IsNil(o.IpStat) {
		return nil, false
	}
	return o.IpStat, true
}

// HasIpStat returns a boolean if a field has been set.
func (o *ApStats) HasIpStat() bool {
	if o != nil && !IsNil(o.IpStat) {
		return true
	}

	return false
}

// SetIpStat gets a reference to the given IpStat and assigns it to the IpStat field.
func (o *ApStats) SetIpStat(v IpStat) {
	o.IpStat = &v
}

// GetL2tpStat returns the L2tpStat field value if set, zero value otherwise.
func (o *ApStats) GetL2tpStat() map[string]ApStatsL2tpStat {
	if o == nil || IsNil(o.L2tpStat) {
		var ret map[string]ApStatsL2tpStat
		return ret
	}
	return *o.L2tpStat
}

// GetL2tpStatOk returns a tuple with the L2tpStat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetL2tpStatOk() (*map[string]ApStatsL2tpStat, bool) {
	if o == nil || IsNil(o.L2tpStat) {
		return nil, false
	}
	return o.L2tpStat, true
}

// HasL2tpStat returns a boolean if a field has been set.
func (o *ApStats) HasL2tpStat() bool {
	if o != nil && !IsNil(o.L2tpStat) {
		return true
	}

	return false
}

// SetL2tpStat gets a reference to the given map[string]ApStatsL2tpStat and assigns it to the L2tpStat field.
func (o *ApStats) SetL2tpStat(v map[string]ApStatsL2tpStat) {
	o.L2tpStat = &v
}

// GetLastSeen returns the LastSeen field value if set, zero value otherwise.
func (o *ApStats) GetLastSeen() float32 {
	if o == nil || IsNil(o.LastSeen) {
		var ret float32
		return ret
	}
	return *o.LastSeen
}

// GetLastSeenOk returns a tuple with the LastSeen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetLastSeenOk() (*float32, bool) {
	if o == nil || IsNil(o.LastSeen) {
		return nil, false
	}
	return o.LastSeen, true
}

// HasLastSeen returns a boolean if a field has been set.
func (o *ApStats) HasLastSeen() bool {
	if o != nil && !IsNil(o.LastSeen) {
		return true
	}

	return false
}

// SetLastSeen gets a reference to the given float32 and assigns it to the LastSeen field.
func (o *ApStats) SetLastSeen(v float32) {
	o.LastSeen = &v
}

// GetLastTrouble returns the LastTrouble field value if set, zero value otherwise.
func (o *ApStats) GetLastTrouble() LastTrouble {
	if o == nil || IsNil(o.LastTrouble) {
		var ret LastTrouble
		return ret
	}
	return *o.LastTrouble
}

// GetLastTroubleOk returns a tuple with the LastTrouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetLastTroubleOk() (*LastTrouble, bool) {
	if o == nil || IsNil(o.LastTrouble) {
		return nil, false
	}
	return o.LastTrouble, true
}

// HasLastTrouble returns a boolean if a field has been set.
func (o *ApStats) HasLastTrouble() bool {
	if o != nil && !IsNil(o.LastTrouble) {
		return true
	}

	return false
}

// SetLastTrouble gets a reference to the given LastTrouble and assigns it to the LastTrouble field.
func (o *ApStats) SetLastTrouble(v LastTrouble) {
	o.LastTrouble = &v
}

// GetLed returns the Led field value if set, zero value otherwise.
func (o *ApStats) GetLed() ApLed {
	if o == nil || IsNil(o.Led) {
		var ret ApLed
		return ret
	}
	return *o.Led
}

// GetLedOk returns a tuple with the Led field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetLedOk() (*ApLed, bool) {
	if o == nil || IsNil(o.Led) {
		return nil, false
	}
	return o.Led, true
}

// HasLed returns a boolean if a field has been set.
func (o *ApStats) HasLed() bool {
	if o != nil && !IsNil(o.Led) {
		return true
	}

	return false
}

// SetLed gets a reference to the given ApLed and assigns it to the Led field.
func (o *ApStats) SetLed(v ApLed) {
	o.Led = &v
}

// GetLldpStat returns the LldpStat field value if set, zero value otherwise.
func (o *ApStats) GetLldpStat() ApStatsLldpStat {
	if o == nil || IsNil(o.LldpStat) {
		var ret ApStatsLldpStat
		return ret
	}
	return *o.LldpStat
}

// GetLldpStatOk returns a tuple with the LldpStat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetLldpStatOk() (*ApStatsLldpStat, bool) {
	if o == nil || IsNil(o.LldpStat) {
		return nil, false
	}
	return o.LldpStat, true
}

// HasLldpStat returns a boolean if a field has been set.
func (o *ApStats) HasLldpStat() bool {
	if o != nil && !IsNil(o.LldpStat) {
		return true
	}

	return false
}

// SetLldpStat gets a reference to the given ApStatsLldpStat and assigns it to the LldpStat field.
func (o *ApStats) SetLldpStat(v ApStatsLldpStat) {
	o.LldpStat = &v
}

// GetLocating returns the Locating field value if set, zero value otherwise.
func (o *ApStats) GetLocating() bool {
	if o == nil || IsNil(o.Locating) {
		var ret bool
		return ret
	}
	return *o.Locating
}

// GetLocatingOk returns a tuple with the Locating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetLocatingOk() (*bool, bool) {
	if o == nil || IsNil(o.Locating) {
		return nil, false
	}
	return o.Locating, true
}

// HasLocating returns a boolean if a field has been set.
func (o *ApStats) HasLocating() bool {
	if o != nil && !IsNil(o.Locating) {
		return true
	}

	return false
}

// SetLocating gets a reference to the given bool and assigns it to the Locating field.
func (o *ApStats) SetLocating(v bool) {
	o.Locating = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *ApStats) GetLocked() bool {
	if o == nil || IsNil(o.Locked) {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.Locked) {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *ApStats) HasLocked() bool {
	if o != nil && !IsNil(o.Locked) {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *ApStats) SetLocked(v bool) {
	o.Locked = &v
}

// GetMac returns the Mac field value
func (o *ApStats) GetMac() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mac
}

// GetMacOk returns a tuple with the Mac field value
// and a boolean to check if the value has been set.
func (o *ApStats) GetMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mac, true
}

// SetMac sets field value
func (o *ApStats) SetMac(v string) {
	o.Mac = v
}

// GetMapId returns the MapId field value if set, zero value otherwise.
func (o *ApStats) GetMapId() string {
	if o == nil || IsNil(o.MapId) {
		var ret string
		return ret
	}
	return *o.MapId
}

// GetMapIdOk returns a tuple with the MapId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetMapIdOk() (*string, bool) {
	if o == nil || IsNil(o.MapId) {
		return nil, false
	}
	return o.MapId, true
}

// HasMapId returns a boolean if a field has been set.
func (o *ApStats) HasMapId() bool {
	if o != nil && !IsNil(o.MapId) {
		return true
	}

	return false
}

// SetMapId gets a reference to the given string and assigns it to the MapId field.
func (o *ApStats) SetMapId(v string) {
	o.MapId = &v
}

// GetMeshDownlinks returns the MeshDownlinks field value if set, zero value otherwise.
func (o *ApStats) GetMeshDownlinks() map[string]ApStatMeshDownlink {
	if o == nil || IsNil(o.MeshDownlinks) {
		var ret map[string]ApStatMeshDownlink
		return ret
	}
	return *o.MeshDownlinks
}

// GetMeshDownlinksOk returns a tuple with the MeshDownlinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetMeshDownlinksOk() (*map[string]ApStatMeshDownlink, bool) {
	if o == nil || IsNil(o.MeshDownlinks) {
		return nil, false
	}
	return o.MeshDownlinks, true
}

// HasMeshDownlinks returns a boolean if a field has been set.
func (o *ApStats) HasMeshDownlinks() bool {
	if o != nil && !IsNil(o.MeshDownlinks) {
		return true
	}

	return false
}

// SetMeshDownlinks gets a reference to the given map[string]ApStatMeshDownlink and assigns it to the MeshDownlinks field.
func (o *ApStats) SetMeshDownlinks(v map[string]ApStatMeshDownlink) {
	o.MeshDownlinks = &v
}

// GetMeshUplink returns the MeshUplink field value if set, zero value otherwise.
func (o *ApStats) GetMeshUplink() ApStatMeshUplink {
	if o == nil || IsNil(o.MeshUplink) {
		var ret ApStatMeshUplink
		return ret
	}
	return *o.MeshUplink
}

// GetMeshUplinkOk returns a tuple with the MeshUplink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetMeshUplinkOk() (*ApStatMeshUplink, bool) {
	if o == nil || IsNil(o.MeshUplink) {
		return nil, false
	}
	return o.MeshUplink, true
}

// HasMeshUplink returns a boolean if a field has been set.
func (o *ApStats) HasMeshUplink() bool {
	if o != nil && !IsNil(o.MeshUplink) {
		return true
	}

	return false
}

// SetMeshUplink gets a reference to the given ApStatMeshUplink and assigns it to the MeshUplink field.
func (o *ApStats) SetMeshUplink(v ApStatMeshUplink) {
	o.MeshUplink = &v
}

// GetModel returns the Model field value
func (o *ApStats) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *ApStats) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *ApStats) SetModel(v string) {
	o.Model = v
}

// GetMount returns the Mount field value if set, zero value otherwise.
func (o *ApStats) GetMount() string {
	if o == nil || IsNil(o.Mount) {
		var ret string
		return ret
	}
	return *o.Mount
}

// GetMountOk returns a tuple with the Mount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetMountOk() (*string, bool) {
	if o == nil || IsNil(o.Mount) {
		return nil, false
	}
	return o.Mount, true
}

// HasMount returns a boolean if a field has been set.
func (o *ApStats) HasMount() bool {
	if o != nil && !IsNil(o.Mount) {
		return true
	}

	return false
}

// SetMount gets a reference to the given string and assigns it to the Mount field.
func (o *ApStats) SetMount(v string) {
	o.Mount = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApStats) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApStats) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApStats) SetName(v string) {
	o.Name = &v
}

// GetNumClients returns the NumClients field value if set, zero value otherwise.
func (o *ApStats) GetNumClients() int32 {
	if o == nil || IsNil(o.NumClients) {
		var ret int32
		return ret
	}
	return *o.NumClients
}

// GetNumClientsOk returns a tuple with the NumClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetNumClientsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumClients) {
		return nil, false
	}
	return o.NumClients, true
}

// HasNumClients returns a boolean if a field has been set.
func (o *ApStats) HasNumClients() bool {
	if o != nil && !IsNil(o.NumClients) {
		return true
	}

	return false
}

// SetNumClients gets a reference to the given int32 and assigns it to the NumClients field.
func (o *ApStats) SetNumClients(v int32) {
	o.NumClients = &v
}

// GetPortStat returns the PortStat field value if set, zero value otherwise.
func (o *ApStats) GetPortStat() map[string]ApStatsPortStat {
	if o == nil || IsNil(o.PortStat) {
		var ret map[string]ApStatsPortStat
		return ret
	}
	return *o.PortStat
}

// GetPortStatOk returns a tuple with the PortStat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetPortStatOk() (*map[string]ApStatsPortStat, bool) {
	if o == nil || IsNil(o.PortStat) {
		return nil, false
	}
	return o.PortStat, true
}

// HasPortStat returns a boolean if a field has been set.
func (o *ApStats) HasPortStat() bool {
	if o != nil && !IsNil(o.PortStat) {
		return true
	}

	return false
}

// SetPortStat gets a reference to the given map[string]ApStatsPortStat and assigns it to the PortStat field.
func (o *ApStats) SetPortStat(v map[string]ApStatsPortStat) {
	o.PortStat = &v
}

// GetPowerBudget returns the PowerBudget field value if set, zero value otherwise.
func (o *ApStats) GetPowerBudget() float32 {
	if o == nil || IsNil(o.PowerBudget) {
		var ret float32
		return ret
	}
	return *o.PowerBudget
}

// GetPowerBudgetOk returns a tuple with the PowerBudget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetPowerBudgetOk() (*float32, bool) {
	if o == nil || IsNil(o.PowerBudget) {
		return nil, false
	}
	return o.PowerBudget, true
}

// HasPowerBudget returns a boolean if a field has been set.
func (o *ApStats) HasPowerBudget() bool {
	if o != nil && !IsNil(o.PowerBudget) {
		return true
	}

	return false
}

// SetPowerBudget gets a reference to the given float32 and assigns it to the PowerBudget field.
func (o *ApStats) SetPowerBudget(v float32) {
	o.PowerBudget = &v
}

// GetPowerConstrained returns the PowerConstrained field value if set, zero value otherwise.
func (o *ApStats) GetPowerConstrained() bool {
	if o == nil || IsNil(o.PowerConstrained) {
		var ret bool
		return ret
	}
	return *o.PowerConstrained
}

// GetPowerConstrainedOk returns a tuple with the PowerConstrained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetPowerConstrainedOk() (*bool, bool) {
	if o == nil || IsNil(o.PowerConstrained) {
		return nil, false
	}
	return o.PowerConstrained, true
}

// HasPowerConstrained returns a boolean if a field has been set.
func (o *ApStats) HasPowerConstrained() bool {
	if o != nil && !IsNil(o.PowerConstrained) {
		return true
	}

	return false
}

// SetPowerConstrained gets a reference to the given bool and assigns it to the PowerConstrained field.
func (o *ApStats) SetPowerConstrained(v bool) {
	o.PowerConstrained = &v
}

// GetPowerOpmode returns the PowerOpmode field value if set, zero value otherwise.
func (o *ApStats) GetPowerOpmode() string {
	if o == nil || IsNil(o.PowerOpmode) {
		var ret string
		return ret
	}
	return *o.PowerOpmode
}

// GetPowerOpmodeOk returns a tuple with the PowerOpmode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetPowerOpmodeOk() (*string, bool) {
	if o == nil || IsNil(o.PowerOpmode) {
		return nil, false
	}
	return o.PowerOpmode, true
}

// HasPowerOpmode returns a boolean if a field has been set.
func (o *ApStats) HasPowerOpmode() bool {
	if o != nil && !IsNil(o.PowerOpmode) {
		return true
	}

	return false
}

// SetPowerOpmode gets a reference to the given string and assigns it to the PowerOpmode field.
func (o *ApStats) SetPowerOpmode(v string) {
	o.PowerOpmode = &v
}

// GetPowerSrc returns the PowerSrc field value if set, zero value otherwise.
func (o *ApStats) GetPowerSrc() string {
	if o == nil || IsNil(o.PowerSrc) {
		var ret string
		return ret
	}
	return *o.PowerSrc
}

// GetPowerSrcOk returns a tuple with the PowerSrc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetPowerSrcOk() (*string, bool) {
	if o == nil || IsNil(o.PowerSrc) {
		return nil, false
	}
	return o.PowerSrc, true
}

// HasPowerSrc returns a boolean if a field has been set.
func (o *ApStats) HasPowerSrc() bool {
	if o != nil && !IsNil(o.PowerSrc) {
		return true
	}

	return false
}

// SetPowerSrc gets a reference to the given string and assigns it to the PowerSrc field.
func (o *ApStats) SetPowerSrc(v string) {
	o.PowerSrc = &v
}

// GetRadioConfig returns the RadioConfig field value if set, zero value otherwise.
func (o *ApStats) GetRadioConfig() ApStatsRadioConfig {
	if o == nil || IsNil(o.RadioConfig) {
		var ret ApStatsRadioConfig
		return ret
	}
	return *o.RadioConfig
}

// GetRadioConfigOk returns a tuple with the RadioConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetRadioConfigOk() (*ApStatsRadioConfig, bool) {
	if o == nil || IsNil(o.RadioConfig) {
		return nil, false
	}
	return o.RadioConfig, true
}

// HasRadioConfig returns a boolean if a field has been set.
func (o *ApStats) HasRadioConfig() bool {
	if o != nil && !IsNil(o.RadioConfig) {
		return true
	}

	return false
}

// SetRadioConfig gets a reference to the given ApStatsRadioConfig and assigns it to the RadioConfig field.
func (o *ApStats) SetRadioConfig(v ApStatsRadioConfig) {
	o.RadioConfig = &v
}

// GetRadioStat returns the RadioStat field value if set, zero value otherwise.
func (o *ApStats) GetRadioStat() ApStatsRadioStat {
	if o == nil || IsNil(o.RadioStat) {
		var ret ApStatsRadioStat
		return ret
	}
	return *o.RadioStat
}

// GetRadioStatOk returns a tuple with the RadioStat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetRadioStatOk() (*ApStatsRadioStat, bool) {
	if o == nil || IsNil(o.RadioStat) {
		return nil, false
	}
	return o.RadioStat, true
}

// HasRadioStat returns a boolean if a field has been set.
func (o *ApStats) HasRadioStat() bool {
	if o != nil && !IsNil(o.RadioStat) {
		return true
	}

	return false
}

// SetRadioStat gets a reference to the given ApStatsRadioStat and assigns it to the RadioStat field.
func (o *ApStats) SetRadioStat(v ApStatsRadioStat) {
	o.RadioStat = &v
}

// GetRxBps returns the RxBps field value if set, zero value otherwise.
func (o *ApStats) GetRxBps() float32 {
	if o == nil || IsNil(o.RxBps) {
		var ret float32
		return ret
	}
	return *o.RxBps
}

// GetRxBpsOk returns a tuple with the RxBps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetRxBpsOk() (*float32, bool) {
	if o == nil || IsNil(o.RxBps) {
		return nil, false
	}
	return o.RxBps, true
}

// HasRxBps returns a boolean if a field has been set.
func (o *ApStats) HasRxBps() bool {
	if o != nil && !IsNil(o.RxBps) {
		return true
	}

	return false
}

// SetRxBps gets a reference to the given float32 and assigns it to the RxBps field.
func (o *ApStats) SetRxBps(v float32) {
	o.RxBps = &v
}

// GetRxBytes returns the RxBytes field value if set, zero value otherwise.
func (o *ApStats) GetRxBytes() int32 {
	if o == nil || IsNil(o.RxBytes) {
		var ret int32
		return ret
	}
	return *o.RxBytes
}

// GetRxBytesOk returns a tuple with the RxBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetRxBytesOk() (*int32, bool) {
	if o == nil || IsNil(o.RxBytes) {
		return nil, false
	}
	return o.RxBytes, true
}

// HasRxBytes returns a boolean if a field has been set.
func (o *ApStats) HasRxBytes() bool {
	if o != nil && !IsNil(o.RxBytes) {
		return true
	}

	return false
}

// SetRxBytes gets a reference to the given int32 and assigns it to the RxBytes field.
func (o *ApStats) SetRxBytes(v int32) {
	o.RxBytes = &v
}

// GetRxPkts returns the RxPkts field value if set, zero value otherwise.
func (o *ApStats) GetRxPkts() int32 {
	if o == nil || IsNil(o.RxPkts) {
		var ret int32
		return ret
	}
	return *o.RxPkts
}

// GetRxPktsOk returns a tuple with the RxPkts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetRxPktsOk() (*int32, bool) {
	if o == nil || IsNil(o.RxPkts) {
		return nil, false
	}
	return o.RxPkts, true
}

// HasRxPkts returns a boolean if a field has been set.
func (o *ApStats) HasRxPkts() bool {
	if o != nil && !IsNil(o.RxPkts) {
		return true
	}

	return false
}

// SetRxPkts gets a reference to the given int32 and assigns it to the RxPkts field.
func (o *ApStats) SetRxPkts(v int32) {
	o.RxPkts = &v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *ApStats) GetSerial() string {
	if o == nil || IsNil(o.Serial) {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetSerialOk() (*string, bool) {
	if o == nil || IsNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *ApStats) HasSerial() bool {
	if o != nil && !IsNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *ApStats) SetSerial(v string) {
	o.Serial = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ApStats) GetStatus() ApStatsStatus {
	if o == nil || IsNil(o.Status) {
		var ret ApStatsStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetStatusOk() (*ApStatsStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ApStats) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ApStatsStatus and assigns it to the Status field.
func (o *ApStats) SetStatus(v ApStatsStatus) {
	o.Status = &v
}

// GetSwitchRedundancy returns the SwitchRedundancy field value if set, zero value otherwise.
func (o *ApStats) GetSwitchRedundancy() ApStatsSwitchRedundancy {
	if o == nil || IsNil(o.SwitchRedundancy) {
		var ret ApStatsSwitchRedundancy
		return ret
	}
	return *o.SwitchRedundancy
}

// GetSwitchRedundancyOk returns a tuple with the SwitchRedundancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetSwitchRedundancyOk() (*ApStatsSwitchRedundancy, bool) {
	if o == nil || IsNil(o.SwitchRedundancy) {
		return nil, false
	}
	return o.SwitchRedundancy, true
}

// HasSwitchRedundancy returns a boolean if a field has been set.
func (o *ApStats) HasSwitchRedundancy() bool {
	if o != nil && !IsNil(o.SwitchRedundancy) {
		return true
	}

	return false
}

// SetSwitchRedundancy gets a reference to the given ApStatsSwitchRedundancy and assigns it to the SwitchRedundancy field.
func (o *ApStats) SetSwitchRedundancy(v ApStatsSwitchRedundancy) {
	o.SwitchRedundancy = &v
}

// GetTxBps returns the TxBps field value if set, zero value otherwise.
func (o *ApStats) GetTxBps() float32 {
	if o == nil || IsNil(o.TxBps) {
		var ret float32
		return ret
	}
	return *o.TxBps
}

// GetTxBpsOk returns a tuple with the TxBps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetTxBpsOk() (*float32, bool) {
	if o == nil || IsNil(o.TxBps) {
		return nil, false
	}
	return o.TxBps, true
}

// HasTxBps returns a boolean if a field has been set.
func (o *ApStats) HasTxBps() bool {
	if o != nil && !IsNil(o.TxBps) {
		return true
	}

	return false
}

// SetTxBps gets a reference to the given float32 and assigns it to the TxBps field.
func (o *ApStats) SetTxBps(v float32) {
	o.TxBps = &v
}

// GetTxBytes returns the TxBytes field value if set, zero value otherwise.
func (o *ApStats) GetTxBytes() float32 {
	if o == nil || IsNil(o.TxBytes) {
		var ret float32
		return ret
	}
	return *o.TxBytes
}

// GetTxBytesOk returns a tuple with the TxBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetTxBytesOk() (*float32, bool) {
	if o == nil || IsNil(o.TxBytes) {
		return nil, false
	}
	return o.TxBytes, true
}

// HasTxBytes returns a boolean if a field has been set.
func (o *ApStats) HasTxBytes() bool {
	if o != nil && !IsNil(o.TxBytes) {
		return true
	}

	return false
}

// SetTxBytes gets a reference to the given float32 and assigns it to the TxBytes field.
func (o *ApStats) SetTxBytes(v float32) {
	o.TxBytes = &v
}

// GetTxPkts returns the TxPkts field value if set, zero value otherwise.
func (o *ApStats) GetTxPkts() float32 {
	if o == nil || IsNil(o.TxPkts) {
		var ret float32
		return ret
	}
	return *o.TxPkts
}

// GetTxPktsOk returns a tuple with the TxPkts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetTxPktsOk() (*float32, bool) {
	if o == nil || IsNil(o.TxPkts) {
		return nil, false
	}
	return o.TxPkts, true
}

// HasTxPkts returns a boolean if a field has been set.
func (o *ApStats) HasTxPkts() bool {
	if o != nil && !IsNil(o.TxPkts) {
		return true
	}

	return false
}

// SetTxPkts gets a reference to the given float32 and assigns it to the TxPkts field.
func (o *ApStats) SetTxPkts(v float32) {
	o.TxPkts = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ApStats) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ApStats) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ApStats) SetType(v string) {
	o.Type = &v
}

// GetUptime returns the Uptime field value if set, zero value otherwise.
func (o *ApStats) GetUptime() float32 {
	if o == nil || IsNil(o.Uptime) {
		var ret float32
		return ret
	}
	return *o.Uptime
}

// GetUptimeOk returns a tuple with the Uptime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetUptimeOk() (*float32, bool) {
	if o == nil || IsNil(o.Uptime) {
		return nil, false
	}
	return o.Uptime, true
}

// HasUptime returns a boolean if a field has been set.
func (o *ApStats) HasUptime() bool {
	if o != nil && !IsNil(o.Uptime) {
		return true
	}

	return false
}

// SetUptime gets a reference to the given float32 and assigns it to the Uptime field.
func (o *ApStats) SetUptime(v float32) {
	o.Uptime = &v
}

// GetUsbStat returns the UsbStat field value if set, zero value otherwise.
func (o *ApStats) GetUsbStat() ApStatsUsbStat {
	if o == nil || IsNil(o.UsbStat) {
		var ret ApStatsUsbStat
		return ret
	}
	return *o.UsbStat
}

// GetUsbStatOk returns a tuple with the UsbStat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetUsbStatOk() (*ApStatsUsbStat, bool) {
	if o == nil || IsNil(o.UsbStat) {
		return nil, false
	}
	return o.UsbStat, true
}

// HasUsbStat returns a boolean if a field has been set.
func (o *ApStats) HasUsbStat() bool {
	if o != nil && !IsNil(o.UsbStat) {
		return true
	}

	return false
}

// SetUsbStat gets a reference to the given ApStatsUsbStat and assigns it to the UsbStat field.
func (o *ApStats) SetUsbStat(v ApStatsUsbStat) {
	o.UsbStat = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ApStats) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ApStats) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ApStats) SetVersion(v string) {
	o.Version = &v
}

// GetX returns the X field value if set, zero value otherwise.
func (o *ApStats) GetX() float32 {
	if o == nil || IsNil(o.X) {
		var ret float32
		return ret
	}
	return *o.X
}

// GetXOk returns a tuple with the X field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetXOk() (*float32, bool) {
	if o == nil || IsNil(o.X) {
		return nil, false
	}
	return o.X, true
}

// HasX returns a boolean if a field has been set.
func (o *ApStats) HasX() bool {
	if o != nil && !IsNil(o.X) {
		return true
	}

	return false
}

// SetX gets a reference to the given float32 and assigns it to the X field.
func (o *ApStats) SetX(v float32) {
	o.X = &v
}

// GetY returns the Y field value if set, zero value otherwise.
func (o *ApStats) GetY() float32 {
	if o == nil || IsNil(o.Y) {
		var ret float32
		return ret
	}
	return *o.Y
}

// GetYOk returns a tuple with the Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStats) GetYOk() (*float32, bool) {
	if o == nil || IsNil(o.Y) {
		return nil, false
	}
	return o.Y, true
}

// HasY returns a boolean if a field has been set.
func (o *ApStats) HasY() bool {
	if o != nil && !IsNil(o.Y) {
		return true
	}

	return false
}

// SetY gets a reference to the given float32 and assigns it to the Y field.
func (o *ApStats) SetY(v float32) {
	o.Y = &v
}

func (o ApStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AutoPlacement) {
		toSerialize["auto_placement"] = o.AutoPlacement
	}
	if !IsNil(o.BleConfig) {
		toSerialize["ble_config"] = o.BleConfig
	}
	if !IsNil(o.BleStat) {
		toSerialize["ble_stat"] = o.BleStat
	}
	if !IsNil(o.CertExpiry) {
		toSerialize["cert_expiry"] = o.CertExpiry
	}
	if !IsNil(o.EnvStat) {
		toSerialize["env_stat"] = o.EnvStat
	}
	if !IsNil(o.EslStat) {
		toSerialize["esl_stat"] = o.EslStat
	}
	if !IsNil(o.ExtIp) {
		toSerialize["ext_ip"] = o.ExtIp
	}
	if !IsNil(o.Fwupdate) {
		toSerialize["fwupdate"] = o.Fwupdate
	}
	if !IsNil(o.IotStat) {
		toSerialize["iot_stat"] = o.IotStat
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.IpConfig) {
		toSerialize["ip_config"] = o.IpConfig
	}
	if !IsNil(o.IpStat) {
		toSerialize["ip_stat"] = o.IpStat
	}
	if !IsNil(o.L2tpStat) {
		toSerialize["l2tp_stat"] = o.L2tpStat
	}
	if !IsNil(o.LastSeen) {
		toSerialize["last_seen"] = o.LastSeen
	}
	if !IsNil(o.LastTrouble) {
		toSerialize["last_trouble"] = o.LastTrouble
	}
	if !IsNil(o.Led) {
		toSerialize["led"] = o.Led
	}
	if !IsNil(o.LldpStat) {
		toSerialize["lldp_stat"] = o.LldpStat
	}
	if !IsNil(o.Locating) {
		toSerialize["locating"] = o.Locating
	}
	if !IsNil(o.Locked) {
		toSerialize["locked"] = o.Locked
	}
	toSerialize["mac"] = o.Mac
	if !IsNil(o.MapId) {
		toSerialize["map_id"] = o.MapId
	}
	if !IsNil(o.MeshDownlinks) {
		toSerialize["mesh_downlinks"] = o.MeshDownlinks
	}
	if !IsNil(o.MeshUplink) {
		toSerialize["mesh_uplink"] = o.MeshUplink
	}
	toSerialize["model"] = o.Model
	if !IsNil(o.Mount) {
		toSerialize["mount"] = o.Mount
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NumClients) {
		toSerialize["num_clients"] = o.NumClients
	}
	if !IsNil(o.PortStat) {
		toSerialize["port_stat"] = o.PortStat
	}
	if !IsNil(o.PowerBudget) {
		toSerialize["power_budget"] = o.PowerBudget
	}
	if !IsNil(o.PowerConstrained) {
		toSerialize["power_constrained"] = o.PowerConstrained
	}
	if !IsNil(o.PowerOpmode) {
		toSerialize["power_opmode"] = o.PowerOpmode
	}
	if !IsNil(o.PowerSrc) {
		toSerialize["power_src"] = o.PowerSrc
	}
	if !IsNil(o.RadioConfig) {
		toSerialize["radio_config"] = o.RadioConfig
	}
	if !IsNil(o.RadioStat) {
		toSerialize["radio_stat"] = o.RadioStat
	}
	if !IsNil(o.RxBps) {
		toSerialize["rx_bps"] = o.RxBps
	}
	if !IsNil(o.RxBytes) {
		toSerialize["rx_bytes"] = o.RxBytes
	}
	if !IsNil(o.RxPkts) {
		toSerialize["rx_pkts"] = o.RxPkts
	}
	if !IsNil(o.Serial) {
		toSerialize["serial"] = o.Serial
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.SwitchRedundancy) {
		toSerialize["switch_redundancy"] = o.SwitchRedundancy
	}
	if !IsNil(o.TxBps) {
		toSerialize["tx_bps"] = o.TxBps
	}
	if !IsNil(o.TxBytes) {
		toSerialize["tx_bytes"] = o.TxBytes
	}
	if !IsNil(o.TxPkts) {
		toSerialize["tx_pkts"] = o.TxPkts
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Uptime) {
		toSerialize["uptime"] = o.Uptime
	}
	if !IsNil(o.UsbStat) {
		toSerialize["usb_stat"] = o.UsbStat
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.X) {
		toSerialize["x"] = o.X
	}
	if !IsNil(o.Y) {
		toSerialize["y"] = o.Y
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mac",
		"model",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApStats := _ApStats{}

	err = json.Unmarshal(data, &varApStats)

	if err != nil {
		return err
	}

	*o = ApStats(varApStats)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "auto_placement")
		delete(additionalProperties, "ble_config")
		delete(additionalProperties, "ble_stat")
		delete(additionalProperties, "cert_expiry")
		delete(additionalProperties, "env_stat")
		delete(additionalProperties, "esl_stat")
		delete(additionalProperties, "ext_ip")
		delete(additionalProperties, "fwupdate")
		delete(additionalProperties, "iot_stat")
		delete(additionalProperties, "ip")
		delete(additionalProperties, "ip_config")
		delete(additionalProperties, "ip_stat")
		delete(additionalProperties, "l2tp_stat")
		delete(additionalProperties, "last_seen")
		delete(additionalProperties, "last_trouble")
		delete(additionalProperties, "led")
		delete(additionalProperties, "lldp_stat")
		delete(additionalProperties, "locating")
		delete(additionalProperties, "locked")
		delete(additionalProperties, "mac")
		delete(additionalProperties, "map_id")
		delete(additionalProperties, "mesh_downlinks")
		delete(additionalProperties, "mesh_uplink")
		delete(additionalProperties, "model")
		delete(additionalProperties, "mount")
		delete(additionalProperties, "name")
		delete(additionalProperties, "num_clients")
		delete(additionalProperties, "port_stat")
		delete(additionalProperties, "power_budget")
		delete(additionalProperties, "power_constrained")
		delete(additionalProperties, "power_opmode")
		delete(additionalProperties, "power_src")
		delete(additionalProperties, "radio_config")
		delete(additionalProperties, "radio_stat")
		delete(additionalProperties, "rx_bps")
		delete(additionalProperties, "rx_bytes")
		delete(additionalProperties, "rx_pkts")
		delete(additionalProperties, "serial")
		delete(additionalProperties, "status")
		delete(additionalProperties, "switch_redundancy")
		delete(additionalProperties, "tx_bps")
		delete(additionalProperties, "tx_bytes")
		delete(additionalProperties, "tx_pkts")
		delete(additionalProperties, "type")
		delete(additionalProperties, "uptime")
		delete(additionalProperties, "usb_stat")
		delete(additionalProperties, "version")
		delete(additionalProperties, "x")
		delete(additionalProperties, "y")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApStats struct {
	value *ApStats
	isSet bool
}

func (v NullableApStats) Get() *ApStats {
	return v.value
}

func (v *NullableApStats) Set(val *ApStats) {
	v.value = val
	v.isSet = true
}

func (v NullableApStats) IsSet() bool {
	return v.isSet
}

func (v *NullableApStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApStats(val *ApStats) *NullableApStats {
	return &NullableApStats{value: val, isSet: true}
}

func (v NullableApStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


