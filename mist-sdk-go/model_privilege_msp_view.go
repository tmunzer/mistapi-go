/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// PrivilegeMspView Custom roles restrict Org users to specific UI views. This is useful for limiting UI access of Org users.  You can invite a new user or update existing users in your Org to this custom role. For this, specify view along with role when assigning privileges.  Below are the list of supported UI views. Note that this is UI only feature Custom roles restrict Org users to specific UI views. This is useful for limiting UI access of Org users.  You can invite a new user or update existing users in your Org to this custom role. For this, specify `view` along with `role` when assigning privileges.  Below are the list of supported UI views. Note that this is UI only feature  | UI View | Description | | --- | --- | | `reporting` | full access to all analytics tools | | `marketing` | can view analytics and location maps | | `location` | can view and manage location maps | | `security` | can view and manage WLAN, rogues and authentication | | `switch_admin` | can view and manage Switch ports | | `mxedge_admin` | can view and manage Mist edges and Mist tunnels | | `lobby_admin` | full access to Org and Site Pre-shared keys |
type PrivilegeMspView string

// List of privilege_msp_view
const (
	PRIVILEGEMSPVIEW_EMPTY PrivilegeMspView = ""
	PRIVILEGEMSPVIEW_REPORTING PrivilegeMspView = "reporting"
	PRIVILEGEMSPVIEW_MARKETING PrivilegeMspView = "marketing"
	PRIVILEGEMSPVIEW_LOCATION PrivilegeMspView = "location"
	PRIVILEGEMSPVIEW_SECURITY PrivilegeMspView = "security"
	PRIVILEGEMSPVIEW_SWITCH_ADMIN PrivilegeMspView = "switch_admin"
	PRIVILEGEMSPVIEW_MXEDGE_ADMIN PrivilegeMspView = "mxedge_admin"
	PRIVILEGEMSPVIEW_LOBBY_ADMIN PrivilegeMspView = "lobby_admin"
)

// All allowed values of PrivilegeMspView enum
var AllowedPrivilegeMspViewEnumValues = []PrivilegeMspView{
	"",
	"reporting",
	"marketing",
	"location",
	"security",
	"switch_admin",
	"mxedge_admin",
	"lobby_admin",
}

func (v *PrivilegeMspView) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PrivilegeMspView(value)
	for _, existing := range AllowedPrivilegeMspViewEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PrivilegeMspView", value)
}

// NewPrivilegeMspViewFromValue returns a pointer to a valid PrivilegeMspView
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrivilegeMspViewFromValue(v string) (*PrivilegeMspView, error) {
	ev := PrivilegeMspView(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PrivilegeMspView: valid values are %v", v, AllowedPrivilegeMspViewEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrivilegeMspView) IsValid() bool {
	for _, existing := range AllowedPrivilegeMspViewEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to privilege_msp_view value
func (v PrivilegeMspView) Ptr() *PrivilegeMspView {
	return &v
}

type NullablePrivilegeMspView struct {
	value *PrivilegeMspView
	isSet bool
}

func (v NullablePrivilegeMspView) Get() *PrivilegeMspView {
	return v.value
}

func (v *NullablePrivilegeMspView) Set(val *PrivilegeMspView) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivilegeMspView) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivilegeMspView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivilegeMspView(val *PrivilegeMspView) *NullablePrivilegeMspView {
	return &NullablePrivilegeMspView{value: val, isSet: true}
}

func (v NullablePrivilegeMspView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivilegeMspView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

