/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the MspLicenseAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MspLicenseAction{}

// MspLicenseAction struct for MspLicenseAction
type MspLicenseAction struct {
	// required if `op`==`unamend`
	AmendmentId *string `json:"amendment_id,omitempty"`
	// required if `op`==`amend`, destination org id
	DstOrgId *string `json:"dst_org_id,omitempty"`
	// required if `op`== `annotate`
	Notes *string `json:"notes,omitempty"`
	Op MspLicenseActionOperation `json:"op"`
	// required if `op`==`amend`
	Quantity *float32 `json:"quantity,omitempty"`
	// required if `op`== `annotate`
	SubscriptionId *string `json:"subscription_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MspLicenseAction MspLicenseAction

// NewMspLicenseAction instantiates a new MspLicenseAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMspLicenseAction(op MspLicenseActionOperation) *MspLicenseAction {
	this := MspLicenseAction{}
	this.Op = op
	return &this
}

// NewMspLicenseActionWithDefaults instantiates a new MspLicenseAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMspLicenseActionWithDefaults() *MspLicenseAction {
	this := MspLicenseAction{}
	return &this
}

// GetAmendmentId returns the AmendmentId field value if set, zero value otherwise.
func (o *MspLicenseAction) GetAmendmentId() string {
	if o == nil || IsNil(o.AmendmentId) {
		var ret string
		return ret
	}
	return *o.AmendmentId
}

// GetAmendmentIdOk returns a tuple with the AmendmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MspLicenseAction) GetAmendmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.AmendmentId) {
		return nil, false
	}
	return o.AmendmentId, true
}

// HasAmendmentId returns a boolean if a field has been set.
func (o *MspLicenseAction) HasAmendmentId() bool {
	if o != nil && !IsNil(o.AmendmentId) {
		return true
	}

	return false
}

// SetAmendmentId gets a reference to the given string and assigns it to the AmendmentId field.
func (o *MspLicenseAction) SetAmendmentId(v string) {
	o.AmendmentId = &v
}

// GetDstOrgId returns the DstOrgId field value if set, zero value otherwise.
func (o *MspLicenseAction) GetDstOrgId() string {
	if o == nil || IsNil(o.DstOrgId) {
		var ret string
		return ret
	}
	return *o.DstOrgId
}

// GetDstOrgIdOk returns a tuple with the DstOrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MspLicenseAction) GetDstOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.DstOrgId) {
		return nil, false
	}
	return o.DstOrgId, true
}

// HasDstOrgId returns a boolean if a field has been set.
func (o *MspLicenseAction) HasDstOrgId() bool {
	if o != nil && !IsNil(o.DstOrgId) {
		return true
	}

	return false
}

// SetDstOrgId gets a reference to the given string and assigns it to the DstOrgId field.
func (o *MspLicenseAction) SetDstOrgId(v string) {
	o.DstOrgId = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *MspLicenseAction) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MspLicenseAction) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *MspLicenseAction) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *MspLicenseAction) SetNotes(v string) {
	o.Notes = &v
}

// GetOp returns the Op field value
func (o *MspLicenseAction) GetOp() MspLicenseActionOperation {
	if o == nil {
		var ret MspLicenseActionOperation
		return ret
	}

	return o.Op
}

// GetOpOk returns a tuple with the Op field value
// and a boolean to check if the value has been set.
func (o *MspLicenseAction) GetOpOk() (*MspLicenseActionOperation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Op, true
}

// SetOp sets field value
func (o *MspLicenseAction) SetOp(v MspLicenseActionOperation) {
	o.Op = v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *MspLicenseAction) GetQuantity() float32 {
	if o == nil || IsNil(o.Quantity) {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MspLicenseAction) GetQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *MspLicenseAction) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *MspLicenseAction) SetQuantity(v float32) {
	o.Quantity = &v
}

// GetSubscriptionId returns the SubscriptionId field value if set, zero value otherwise.
func (o *MspLicenseAction) GetSubscriptionId() string {
	if o == nil || IsNil(o.SubscriptionId) {
		var ret string
		return ret
	}
	return *o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MspLicenseAction) GetSubscriptionIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionId) {
		return nil, false
	}
	return o.SubscriptionId, true
}

// HasSubscriptionId returns a boolean if a field has been set.
func (o *MspLicenseAction) HasSubscriptionId() bool {
	if o != nil && !IsNil(o.SubscriptionId) {
		return true
	}

	return false
}

// SetSubscriptionId gets a reference to the given string and assigns it to the SubscriptionId field.
func (o *MspLicenseAction) SetSubscriptionId(v string) {
	o.SubscriptionId = &v
}

func (o MspLicenseAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MspLicenseAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AmendmentId) {
		toSerialize["amendment_id"] = o.AmendmentId
	}
	if !IsNil(o.DstOrgId) {
		toSerialize["dst_org_id"] = o.DstOrgId
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	toSerialize["op"] = o.Op
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.SubscriptionId) {
		toSerialize["subscription_id"] = o.SubscriptionId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MspLicenseAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"op",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMspLicenseAction := _MspLicenseAction{}

	err = json.Unmarshal(data, &varMspLicenseAction)

	if err != nil {
		return err
	}

	*o = MspLicenseAction(varMspLicenseAction)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "amendment_id")
		delete(additionalProperties, "dst_org_id")
		delete(additionalProperties, "notes")
		delete(additionalProperties, "op")
		delete(additionalProperties, "quantity")
		delete(additionalProperties, "subscription_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMspLicenseAction struct {
	value *MspLicenseAction
	isSet bool
}

func (v NullableMspLicenseAction) Get() *MspLicenseAction {
	return v.value
}

func (v *NullableMspLicenseAction) Set(val *MspLicenseAction) {
	v.value = val
	v.isSet = true
}

func (v NullableMspLicenseAction) IsSet() bool {
	return v.isSet
}

func (v *NullableMspLicenseAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMspLicenseAction(val *MspLicenseAction) *NullableMspLicenseAction {
	return &NullableMspLicenseAction{value: val, isSet: true}
}

func (v NullableMspLicenseAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMspLicenseAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


