/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the ResponseMapImportFloorplan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseMapImportFloorplan{}

// ResponseMapImportFloorplan struct for ResponseMapImportFloorplan
type ResponseMapImportFloorplan struct {
	Action string `json:"action"`
	Id string `json:"id"`
	MapId string `json:"map_id"`
	Name string `json:"name"`
	Reason *string `json:"reason,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ResponseMapImportFloorplan ResponseMapImportFloorplan

// NewResponseMapImportFloorplan instantiates a new ResponseMapImportFloorplan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseMapImportFloorplan(action string, id string, mapId string, name string) *ResponseMapImportFloorplan {
	this := ResponseMapImportFloorplan{}
	this.Action = action
	this.Id = id
	this.MapId = mapId
	this.Name = name
	return &this
}

// NewResponseMapImportFloorplanWithDefaults instantiates a new ResponseMapImportFloorplan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseMapImportFloorplanWithDefaults() *ResponseMapImportFloorplan {
	this := ResponseMapImportFloorplan{}
	return &this
}

// GetAction returns the Action field value
func (o *ResponseMapImportFloorplan) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *ResponseMapImportFloorplan) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *ResponseMapImportFloorplan) SetAction(v string) {
	o.Action = v
}

// GetId returns the Id field value
func (o *ResponseMapImportFloorplan) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ResponseMapImportFloorplan) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ResponseMapImportFloorplan) SetId(v string) {
	o.Id = v
}

// GetMapId returns the MapId field value
func (o *ResponseMapImportFloorplan) GetMapId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MapId
}

// GetMapIdOk returns a tuple with the MapId field value
// and a boolean to check if the value has been set.
func (o *ResponseMapImportFloorplan) GetMapIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MapId, true
}

// SetMapId sets field value
func (o *ResponseMapImportFloorplan) SetMapId(v string) {
	o.MapId = v
}

// GetName returns the Name field value
func (o *ResponseMapImportFloorplan) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ResponseMapImportFloorplan) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ResponseMapImportFloorplan) SetName(v string) {
	o.Name = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ResponseMapImportFloorplan) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseMapImportFloorplan) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ResponseMapImportFloorplan) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ResponseMapImportFloorplan) SetReason(v string) {
	o.Reason = &v
}

func (o ResponseMapImportFloorplan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseMapImportFloorplan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	toSerialize["id"] = o.Id
	toSerialize["map_id"] = o.MapId
	toSerialize["name"] = o.Name
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResponseMapImportFloorplan) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"id",
		"map_id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResponseMapImportFloorplan := _ResponseMapImportFloorplan{}

	err = json.Unmarshal(data, &varResponseMapImportFloorplan)

	if err != nil {
		return err
	}

	*o = ResponseMapImportFloorplan(varResponseMapImportFloorplan)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "action")
		delete(additionalProperties, "id")
		delete(additionalProperties, "map_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "reason")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResponseMapImportFloorplan struct {
	value *ResponseMapImportFloorplan
	isSet bool
}

func (v NullableResponseMapImportFloorplan) Get() *ResponseMapImportFloorplan {
	return v.value
}

func (v *NullableResponseMapImportFloorplan) Set(val *ResponseMapImportFloorplan) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseMapImportFloorplan) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseMapImportFloorplan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseMapImportFloorplan(val *ResponseMapImportFloorplan) *NullableResponseMapImportFloorplan {
	return &NullableResponseMapImportFloorplan{value: val, isSet: true}
}

func (v NullableResponseMapImportFloorplan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseMapImportFloorplan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


