/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the ConstInsightMetricsProperty type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConstInsightMetricsProperty{}

// ConstInsightMetricsProperty struct for ConstInsightMetricsProperty
type ConstInsightMetricsProperty struct {
	Ctype []string `json:"ctype,omitempty"`
	Description *string `json:"description,omitempty"`
	Example []ConstInsightMetricsPropertyExample `json:"example,omitempty"`
	// Property key is the interval (e.g. 10m, 1h, ...)
	Intervals *map[string]ConstInsightMetricsPropertyInterval `json:"intervals,omitempty"`
	Keys map[string]interface{} `json:"keys,omitempty"`
	// Property key is the parameter name
	Params *map[string]ConstInsightMetricsPropertyParam `json:"params,omitempty"`
	// Property key is the duration (e.g. 1d, 1w, ...)
	ReportDuration *map[string]ConstInsightMetricsPropertyReportDuration `json:"report_duration,omitempty"`
	ReportScopes []string `json:"report_scopes,omitempty"`
	Scopes []ConstInsightMetricsPropertyScope `json:"scopes,omitempty"`
	SleBaselined *bool `json:"sle_baselined,omitempty"`
	SleClassifiers []string `json:"sle_classifiers,omitempty"`
	Type *string `json:"type,omitempty"`
	Unit *string `json:"unit,omitempty"`
	Values map[string]interface{} `json:"values,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConstInsightMetricsProperty ConstInsightMetricsProperty

// NewConstInsightMetricsProperty instantiates a new ConstInsightMetricsProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConstInsightMetricsProperty() *ConstInsightMetricsProperty {
	this := ConstInsightMetricsProperty{}
	return &this
}

// NewConstInsightMetricsPropertyWithDefaults instantiates a new ConstInsightMetricsProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConstInsightMetricsPropertyWithDefaults() *ConstInsightMetricsProperty {
	this := ConstInsightMetricsProperty{}
	return &this
}

// GetCtype returns the Ctype field value if set, zero value otherwise.
func (o *ConstInsightMetricsProperty) GetCtype() []string {
	if o == nil || IsNil(o.Ctype) {
		var ret []string
		return ret
	}
	return o.Ctype
}

// GetCtypeOk returns a tuple with the Ctype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstInsightMetricsProperty) GetCtypeOk() ([]string, bool) {
	if o == nil || IsNil(o.Ctype) {
		return nil, false
	}
	return o.Ctype, true
}

// HasCtype returns a boolean if a field has been set.
func (o *ConstInsightMetricsProperty) HasCtype() bool {
	if o != nil && !IsNil(o.Ctype) {
		return true
	}

	return false
}

// SetCtype gets a reference to the given []string and assigns it to the Ctype field.
func (o *ConstInsightMetricsProperty) SetCtype(v []string) {
	o.Ctype = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ConstInsightMetricsProperty) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstInsightMetricsProperty) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ConstInsightMetricsProperty) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ConstInsightMetricsProperty) SetDescription(v string) {
	o.Description = &v
}

// GetExample returns the Example field value if set, zero value otherwise.
func (o *ConstInsightMetricsProperty) GetExample() []ConstInsightMetricsPropertyExample {
	if o == nil || IsNil(o.Example) {
		var ret []ConstInsightMetricsPropertyExample
		return ret
	}
	return o.Example
}

// GetExampleOk returns a tuple with the Example field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstInsightMetricsProperty) GetExampleOk() ([]ConstInsightMetricsPropertyExample, bool) {
	if o == nil || IsNil(o.Example) {
		return nil, false
	}
	return o.Example, true
}

// HasExample returns a boolean if a field has been set.
func (o *ConstInsightMetricsProperty) HasExample() bool {
	if o != nil && !IsNil(o.Example) {
		return true
	}

	return false
}

// SetExample gets a reference to the given []ConstInsightMetricsPropertyExample and assigns it to the Example field.
func (o *ConstInsightMetricsProperty) SetExample(v []ConstInsightMetricsPropertyExample) {
	o.Example = v
}

// GetIntervals returns the Intervals field value if set, zero value otherwise.
func (o *ConstInsightMetricsProperty) GetIntervals() map[string]ConstInsightMetricsPropertyInterval {
	if o == nil || IsNil(o.Intervals) {
		var ret map[string]ConstInsightMetricsPropertyInterval
		return ret
	}
	return *o.Intervals
}

// GetIntervalsOk returns a tuple with the Intervals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstInsightMetricsProperty) GetIntervalsOk() (*map[string]ConstInsightMetricsPropertyInterval, bool) {
	if o == nil || IsNil(o.Intervals) {
		return nil, false
	}
	return o.Intervals, true
}

// HasIntervals returns a boolean if a field has been set.
func (o *ConstInsightMetricsProperty) HasIntervals() bool {
	if o != nil && !IsNil(o.Intervals) {
		return true
	}

	return false
}

// SetIntervals gets a reference to the given map[string]ConstInsightMetricsPropertyInterval and assigns it to the Intervals field.
func (o *ConstInsightMetricsProperty) SetIntervals(v map[string]ConstInsightMetricsPropertyInterval) {
	o.Intervals = &v
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *ConstInsightMetricsProperty) GetKeys() map[string]interface{} {
	if o == nil || IsNil(o.Keys) {
		var ret map[string]interface{}
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstInsightMetricsProperty) GetKeysOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Keys) {
		return map[string]interface{}{}, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *ConstInsightMetricsProperty) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given map[string]interface{} and assigns it to the Keys field.
func (o *ConstInsightMetricsProperty) SetKeys(v map[string]interface{}) {
	o.Keys = v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *ConstInsightMetricsProperty) GetParams() map[string]ConstInsightMetricsPropertyParam {
	if o == nil || IsNil(o.Params) {
		var ret map[string]ConstInsightMetricsPropertyParam
		return ret
	}
	return *o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstInsightMetricsProperty) GetParamsOk() (*map[string]ConstInsightMetricsPropertyParam, bool) {
	if o == nil || IsNil(o.Params) {
		return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *ConstInsightMetricsProperty) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given map[string]ConstInsightMetricsPropertyParam and assigns it to the Params field.
func (o *ConstInsightMetricsProperty) SetParams(v map[string]ConstInsightMetricsPropertyParam) {
	o.Params = &v
}

// GetReportDuration returns the ReportDuration field value if set, zero value otherwise.
func (o *ConstInsightMetricsProperty) GetReportDuration() map[string]ConstInsightMetricsPropertyReportDuration {
	if o == nil || IsNil(o.ReportDuration) {
		var ret map[string]ConstInsightMetricsPropertyReportDuration
		return ret
	}
	return *o.ReportDuration
}

// GetReportDurationOk returns a tuple with the ReportDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstInsightMetricsProperty) GetReportDurationOk() (*map[string]ConstInsightMetricsPropertyReportDuration, bool) {
	if o == nil || IsNil(o.ReportDuration) {
		return nil, false
	}
	return o.ReportDuration, true
}

// HasReportDuration returns a boolean if a field has been set.
func (o *ConstInsightMetricsProperty) HasReportDuration() bool {
	if o != nil && !IsNil(o.ReportDuration) {
		return true
	}

	return false
}

// SetReportDuration gets a reference to the given map[string]ConstInsightMetricsPropertyReportDuration and assigns it to the ReportDuration field.
func (o *ConstInsightMetricsProperty) SetReportDuration(v map[string]ConstInsightMetricsPropertyReportDuration) {
	o.ReportDuration = &v
}

// GetReportScopes returns the ReportScopes field value if set, zero value otherwise.
func (o *ConstInsightMetricsProperty) GetReportScopes() []string {
	if o == nil || IsNil(o.ReportScopes) {
		var ret []string
		return ret
	}
	return o.ReportScopes
}

// GetReportScopesOk returns a tuple with the ReportScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstInsightMetricsProperty) GetReportScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.ReportScopes) {
		return nil, false
	}
	return o.ReportScopes, true
}

// HasReportScopes returns a boolean if a field has been set.
func (o *ConstInsightMetricsProperty) HasReportScopes() bool {
	if o != nil && !IsNil(o.ReportScopes) {
		return true
	}

	return false
}

// SetReportScopes gets a reference to the given []string and assigns it to the ReportScopes field.
func (o *ConstInsightMetricsProperty) SetReportScopes(v []string) {
	o.ReportScopes = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *ConstInsightMetricsProperty) GetScopes() []ConstInsightMetricsPropertyScope {
	if o == nil || IsNil(o.Scopes) {
		var ret []ConstInsightMetricsPropertyScope
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstInsightMetricsProperty) GetScopesOk() ([]ConstInsightMetricsPropertyScope, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *ConstInsightMetricsProperty) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []ConstInsightMetricsPropertyScope and assigns it to the Scopes field.
func (o *ConstInsightMetricsProperty) SetScopes(v []ConstInsightMetricsPropertyScope) {
	o.Scopes = v
}

// GetSleBaselined returns the SleBaselined field value if set, zero value otherwise.
func (o *ConstInsightMetricsProperty) GetSleBaselined() bool {
	if o == nil || IsNil(o.SleBaselined) {
		var ret bool
		return ret
	}
	return *o.SleBaselined
}

// GetSleBaselinedOk returns a tuple with the SleBaselined field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstInsightMetricsProperty) GetSleBaselinedOk() (*bool, bool) {
	if o == nil || IsNil(o.SleBaselined) {
		return nil, false
	}
	return o.SleBaselined, true
}

// HasSleBaselined returns a boolean if a field has been set.
func (o *ConstInsightMetricsProperty) HasSleBaselined() bool {
	if o != nil && !IsNil(o.SleBaselined) {
		return true
	}

	return false
}

// SetSleBaselined gets a reference to the given bool and assigns it to the SleBaselined field.
func (o *ConstInsightMetricsProperty) SetSleBaselined(v bool) {
	o.SleBaselined = &v
}

// GetSleClassifiers returns the SleClassifiers field value if set, zero value otherwise.
func (o *ConstInsightMetricsProperty) GetSleClassifiers() []string {
	if o == nil || IsNil(o.SleClassifiers) {
		var ret []string
		return ret
	}
	return o.SleClassifiers
}

// GetSleClassifiersOk returns a tuple with the SleClassifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstInsightMetricsProperty) GetSleClassifiersOk() ([]string, bool) {
	if o == nil || IsNil(o.SleClassifiers) {
		return nil, false
	}
	return o.SleClassifiers, true
}

// HasSleClassifiers returns a boolean if a field has been set.
func (o *ConstInsightMetricsProperty) HasSleClassifiers() bool {
	if o != nil && !IsNil(o.SleClassifiers) {
		return true
	}

	return false
}

// SetSleClassifiers gets a reference to the given []string and assigns it to the SleClassifiers field.
func (o *ConstInsightMetricsProperty) SetSleClassifiers(v []string) {
	o.SleClassifiers = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConstInsightMetricsProperty) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstInsightMetricsProperty) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConstInsightMetricsProperty) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ConstInsightMetricsProperty) SetType(v string) {
	o.Type = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *ConstInsightMetricsProperty) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstInsightMetricsProperty) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *ConstInsightMetricsProperty) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *ConstInsightMetricsProperty) SetUnit(v string) {
	o.Unit = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *ConstInsightMetricsProperty) GetValues() map[string]interface{} {
	if o == nil || IsNil(o.Values) {
		var ret map[string]interface{}
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstInsightMetricsProperty) GetValuesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Values) {
		return map[string]interface{}{}, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *ConstInsightMetricsProperty) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given map[string]interface{} and assigns it to the Values field.
func (o *ConstInsightMetricsProperty) SetValues(v map[string]interface{}) {
	o.Values = v
}

func (o ConstInsightMetricsProperty) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConstInsightMetricsProperty) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ctype) {
		toSerialize["ctype"] = o.Ctype
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Example) {
		toSerialize["example"] = o.Example
	}
	if !IsNil(o.Intervals) {
		toSerialize["intervals"] = o.Intervals
	}
	if !IsNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}
	if !IsNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	if !IsNil(o.ReportDuration) {
		toSerialize["report_duration"] = o.ReportDuration
	}
	if !IsNil(o.ReportScopes) {
		toSerialize["report_scopes"] = o.ReportScopes
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.SleBaselined) {
		toSerialize["sle_baselined"] = o.SleBaselined
	}
	if !IsNil(o.SleClassifiers) {
		toSerialize["sle_classifiers"] = o.SleClassifiers
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConstInsightMetricsProperty) UnmarshalJSON(data []byte) (err error) {
	varConstInsightMetricsProperty := _ConstInsightMetricsProperty{}

	err = json.Unmarshal(data, &varConstInsightMetricsProperty)

	if err != nil {
		return err
	}

	*o = ConstInsightMetricsProperty(varConstInsightMetricsProperty)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ctype")
		delete(additionalProperties, "description")
		delete(additionalProperties, "example")
		delete(additionalProperties, "intervals")
		delete(additionalProperties, "keys")
		delete(additionalProperties, "params")
		delete(additionalProperties, "report_duration")
		delete(additionalProperties, "report_scopes")
		delete(additionalProperties, "scopes")
		delete(additionalProperties, "sle_baselined")
		delete(additionalProperties, "sle_classifiers")
		delete(additionalProperties, "type")
		delete(additionalProperties, "unit")
		delete(additionalProperties, "values")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConstInsightMetricsProperty struct {
	value *ConstInsightMetricsProperty
	isSet bool
}

func (v NullableConstInsightMetricsProperty) Get() *ConstInsightMetricsProperty {
	return v.value
}

func (v *NullableConstInsightMetricsProperty) Set(val *ConstInsightMetricsProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableConstInsightMetricsProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableConstInsightMetricsProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConstInsightMetricsProperty(val *ConstInsightMetricsProperty) *NullableConstInsightMetricsProperty {
	return &NullableConstInsightMetricsProperty{value: val, isSet: true}
}

func (v NullableConstInsightMetricsProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConstInsightMetricsProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


