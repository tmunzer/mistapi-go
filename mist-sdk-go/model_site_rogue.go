/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the SiteRogue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteRogue{}

// SiteRogue Rogue site settings
type SiteRogue struct {
	// whether or not rogue detection is enabled
	Enabled *bool `json:"enabled,omitempty"`
	// whether or not honeypot detection is enabled
	HoneypotEnabled *bool `json:"honeypot_enabled,omitempty"`
	// minimum duration for a bssid to be considered rogue
	MinDuration *int32 `json:"min_duration,omitempty"`
	// minimum RSSI for an AP to be considered rogue (ignoring APs thatâ€™s far away)
	MinRssi *int32 `json:"min_rssi,omitempty"`
	// list of BSSIDs to whitelist. Ex: \"cc-:8e-:6f-:d4-:bf-:16\", \"cc-8e-6f-d4-bf-16\", \"cc-73-*\", \"cc:82:*\"
	WhitelistedBssids []string `json:"whitelisted_bssids,omitempty"`
	// list of SSIDs to whitelist
	WhitelistedSsids []string `json:"whitelisted_ssids,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SiteRogue SiteRogue

// NewSiteRogue instantiates a new SiteRogue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteRogue() *SiteRogue {
	this := SiteRogue{}
	var enabled bool = false
	this.Enabled = &enabled
	var honeypotEnabled bool = false
	this.HoneypotEnabled = &honeypotEnabled
	var minDuration int32 = 10
	this.MinDuration = &minDuration
	var minRssi int32 = -80
	this.MinRssi = &minRssi
	return &this
}

// NewSiteRogueWithDefaults instantiates a new SiteRogue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteRogueWithDefaults() *SiteRogue {
	this := SiteRogue{}
	var enabled bool = false
	this.Enabled = &enabled
	var honeypotEnabled bool = false
	this.HoneypotEnabled = &honeypotEnabled
	var minDuration int32 = 10
	this.MinDuration = &minDuration
	var minRssi int32 = -80
	this.MinRssi = &minRssi
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SiteRogue) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteRogue) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SiteRogue) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SiteRogue) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetHoneypotEnabled returns the HoneypotEnabled field value if set, zero value otherwise.
func (o *SiteRogue) GetHoneypotEnabled() bool {
	if o == nil || IsNil(o.HoneypotEnabled) {
		var ret bool
		return ret
	}
	return *o.HoneypotEnabled
}

// GetHoneypotEnabledOk returns a tuple with the HoneypotEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteRogue) GetHoneypotEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.HoneypotEnabled) {
		return nil, false
	}
	return o.HoneypotEnabled, true
}

// HasHoneypotEnabled returns a boolean if a field has been set.
func (o *SiteRogue) HasHoneypotEnabled() bool {
	if o != nil && !IsNil(o.HoneypotEnabled) {
		return true
	}

	return false
}

// SetHoneypotEnabled gets a reference to the given bool and assigns it to the HoneypotEnabled field.
func (o *SiteRogue) SetHoneypotEnabled(v bool) {
	o.HoneypotEnabled = &v
}

// GetMinDuration returns the MinDuration field value if set, zero value otherwise.
func (o *SiteRogue) GetMinDuration() int32 {
	if o == nil || IsNil(o.MinDuration) {
		var ret int32
		return ret
	}
	return *o.MinDuration
}

// GetMinDurationOk returns a tuple with the MinDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteRogue) GetMinDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.MinDuration) {
		return nil, false
	}
	return o.MinDuration, true
}

// HasMinDuration returns a boolean if a field has been set.
func (o *SiteRogue) HasMinDuration() bool {
	if o != nil && !IsNil(o.MinDuration) {
		return true
	}

	return false
}

// SetMinDuration gets a reference to the given int32 and assigns it to the MinDuration field.
func (o *SiteRogue) SetMinDuration(v int32) {
	o.MinDuration = &v
}

// GetMinRssi returns the MinRssi field value if set, zero value otherwise.
func (o *SiteRogue) GetMinRssi() int32 {
	if o == nil || IsNil(o.MinRssi) {
		var ret int32
		return ret
	}
	return *o.MinRssi
}

// GetMinRssiOk returns a tuple with the MinRssi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteRogue) GetMinRssiOk() (*int32, bool) {
	if o == nil || IsNil(o.MinRssi) {
		return nil, false
	}
	return o.MinRssi, true
}

// HasMinRssi returns a boolean if a field has been set.
func (o *SiteRogue) HasMinRssi() bool {
	if o != nil && !IsNil(o.MinRssi) {
		return true
	}

	return false
}

// SetMinRssi gets a reference to the given int32 and assigns it to the MinRssi field.
func (o *SiteRogue) SetMinRssi(v int32) {
	o.MinRssi = &v
}

// GetWhitelistedBssids returns the WhitelistedBssids field value if set, zero value otherwise.
func (o *SiteRogue) GetWhitelistedBssids() []string {
	if o == nil || IsNil(o.WhitelistedBssids) {
		var ret []string
		return ret
	}
	return o.WhitelistedBssids
}

// GetWhitelistedBssidsOk returns a tuple with the WhitelistedBssids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteRogue) GetWhitelistedBssidsOk() ([]string, bool) {
	if o == nil || IsNil(o.WhitelistedBssids) {
		return nil, false
	}
	return o.WhitelistedBssids, true
}

// HasWhitelistedBssids returns a boolean if a field has been set.
func (o *SiteRogue) HasWhitelistedBssids() bool {
	if o != nil && !IsNil(o.WhitelistedBssids) {
		return true
	}

	return false
}

// SetWhitelistedBssids gets a reference to the given []string and assigns it to the WhitelistedBssids field.
func (o *SiteRogue) SetWhitelistedBssids(v []string) {
	o.WhitelistedBssids = v
}

// GetWhitelistedSsids returns the WhitelistedSsids field value if set, zero value otherwise.
func (o *SiteRogue) GetWhitelistedSsids() []string {
	if o == nil || IsNil(o.WhitelistedSsids) {
		var ret []string
		return ret
	}
	return o.WhitelistedSsids
}

// GetWhitelistedSsidsOk returns a tuple with the WhitelistedSsids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteRogue) GetWhitelistedSsidsOk() ([]string, bool) {
	if o == nil || IsNil(o.WhitelistedSsids) {
		return nil, false
	}
	return o.WhitelistedSsids, true
}

// HasWhitelistedSsids returns a boolean if a field has been set.
func (o *SiteRogue) HasWhitelistedSsids() bool {
	if o != nil && !IsNil(o.WhitelistedSsids) {
		return true
	}

	return false
}

// SetWhitelistedSsids gets a reference to the given []string and assigns it to the WhitelistedSsids field.
func (o *SiteRogue) SetWhitelistedSsids(v []string) {
	o.WhitelistedSsids = v
}

func (o SiteRogue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteRogue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.HoneypotEnabled) {
		toSerialize["honeypot_enabled"] = o.HoneypotEnabled
	}
	if !IsNil(o.MinDuration) {
		toSerialize["min_duration"] = o.MinDuration
	}
	if !IsNil(o.MinRssi) {
		toSerialize["min_rssi"] = o.MinRssi
	}
	if !IsNil(o.WhitelistedBssids) {
		toSerialize["whitelisted_bssids"] = o.WhitelistedBssids
	}
	if !IsNil(o.WhitelistedSsids) {
		toSerialize["whitelisted_ssids"] = o.WhitelistedSsids
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SiteRogue) UnmarshalJSON(data []byte) (err error) {
	varSiteRogue := _SiteRogue{}

	err = json.Unmarshal(data, &varSiteRogue)

	if err != nil {
		return err
	}

	*o = SiteRogue(varSiteRogue)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "honeypot_enabled")
		delete(additionalProperties, "min_duration")
		delete(additionalProperties, "min_rssi")
		delete(additionalProperties, "whitelisted_bssids")
		delete(additionalProperties, "whitelisted_ssids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSiteRogue struct {
	value *SiteRogue
	isSet bool
}

func (v NullableSiteRogue) Get() *SiteRogue {
	return v.value
}

func (v *NullableSiteRogue) Set(val *SiteRogue) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteRogue) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteRogue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteRogue(val *SiteRogue) *NullableSiteRogue {
	return &NullableSiteRogue{value: val, isSet: true}
}

func (v NullableSiteRogue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteRogue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


