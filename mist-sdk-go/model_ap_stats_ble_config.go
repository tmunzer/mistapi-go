/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the ApStatsBleConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApStatsBleConfig{}

// ApStatsBleConfig struct for ApStatsBleConfig
type ApStatsBleConfig struct {
	BeaconRate *int32 `json:"beacon_rate,omitempty"`
	BeaconRateModel *string `json:"beacon_rate_model,omitempty"`
	BeamDisabled []int32 `json:"beam_disabled,omitempty"`
	Power *int32 `json:"power,omitempty"`
	PowerMode *string `json:"power_mode,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApStatsBleConfig ApStatsBleConfig

// NewApStatsBleConfig instantiates a new ApStatsBleConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApStatsBleConfig() *ApStatsBleConfig {
	this := ApStatsBleConfig{}
	return &this
}

// NewApStatsBleConfigWithDefaults instantiates a new ApStatsBleConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApStatsBleConfigWithDefaults() *ApStatsBleConfig {
	this := ApStatsBleConfig{}
	return &this
}

// GetBeaconRate returns the BeaconRate field value if set, zero value otherwise.
func (o *ApStatsBleConfig) GetBeaconRate() int32 {
	if o == nil || IsNil(o.BeaconRate) {
		var ret int32
		return ret
	}
	return *o.BeaconRate
}

// GetBeaconRateOk returns a tuple with the BeaconRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleConfig) GetBeaconRateOk() (*int32, bool) {
	if o == nil || IsNil(o.BeaconRate) {
		return nil, false
	}
	return o.BeaconRate, true
}

// HasBeaconRate returns a boolean if a field has been set.
func (o *ApStatsBleConfig) HasBeaconRate() bool {
	if o != nil && !IsNil(o.BeaconRate) {
		return true
	}

	return false
}

// SetBeaconRate gets a reference to the given int32 and assigns it to the BeaconRate field.
func (o *ApStatsBleConfig) SetBeaconRate(v int32) {
	o.BeaconRate = &v
}

// GetBeaconRateModel returns the BeaconRateModel field value if set, zero value otherwise.
func (o *ApStatsBleConfig) GetBeaconRateModel() string {
	if o == nil || IsNil(o.BeaconRateModel) {
		var ret string
		return ret
	}
	return *o.BeaconRateModel
}

// GetBeaconRateModelOk returns a tuple with the BeaconRateModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleConfig) GetBeaconRateModelOk() (*string, bool) {
	if o == nil || IsNil(o.BeaconRateModel) {
		return nil, false
	}
	return o.BeaconRateModel, true
}

// HasBeaconRateModel returns a boolean if a field has been set.
func (o *ApStatsBleConfig) HasBeaconRateModel() bool {
	if o != nil && !IsNil(o.BeaconRateModel) {
		return true
	}

	return false
}

// SetBeaconRateModel gets a reference to the given string and assigns it to the BeaconRateModel field.
func (o *ApStatsBleConfig) SetBeaconRateModel(v string) {
	o.BeaconRateModel = &v
}

// GetBeamDisabled returns the BeamDisabled field value if set, zero value otherwise.
func (o *ApStatsBleConfig) GetBeamDisabled() []int32 {
	if o == nil || IsNil(o.BeamDisabled) {
		var ret []int32
		return ret
	}
	return o.BeamDisabled
}

// GetBeamDisabledOk returns a tuple with the BeamDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleConfig) GetBeamDisabledOk() ([]int32, bool) {
	if o == nil || IsNil(o.BeamDisabled) {
		return nil, false
	}
	return o.BeamDisabled, true
}

// HasBeamDisabled returns a boolean if a field has been set.
func (o *ApStatsBleConfig) HasBeamDisabled() bool {
	if o != nil && !IsNil(o.BeamDisabled) {
		return true
	}

	return false
}

// SetBeamDisabled gets a reference to the given []int32 and assigns it to the BeamDisabled field.
func (o *ApStatsBleConfig) SetBeamDisabled(v []int32) {
	o.BeamDisabled = v
}

// GetPower returns the Power field value if set, zero value otherwise.
func (o *ApStatsBleConfig) GetPower() int32 {
	if o == nil || IsNil(o.Power) {
		var ret int32
		return ret
	}
	return *o.Power
}

// GetPowerOk returns a tuple with the Power field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleConfig) GetPowerOk() (*int32, bool) {
	if o == nil || IsNil(o.Power) {
		return nil, false
	}
	return o.Power, true
}

// HasPower returns a boolean if a field has been set.
func (o *ApStatsBleConfig) HasPower() bool {
	if o != nil && !IsNil(o.Power) {
		return true
	}

	return false
}

// SetPower gets a reference to the given int32 and assigns it to the Power field.
func (o *ApStatsBleConfig) SetPower(v int32) {
	o.Power = &v
}

// GetPowerMode returns the PowerMode field value if set, zero value otherwise.
func (o *ApStatsBleConfig) GetPowerMode() string {
	if o == nil || IsNil(o.PowerMode) {
		var ret string
		return ret
	}
	return *o.PowerMode
}

// GetPowerModeOk returns a tuple with the PowerMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleConfig) GetPowerModeOk() (*string, bool) {
	if o == nil || IsNil(o.PowerMode) {
		return nil, false
	}
	return o.PowerMode, true
}

// HasPowerMode returns a boolean if a field has been set.
func (o *ApStatsBleConfig) HasPowerMode() bool {
	if o != nil && !IsNil(o.PowerMode) {
		return true
	}

	return false
}

// SetPowerMode gets a reference to the given string and assigns it to the PowerMode field.
func (o *ApStatsBleConfig) SetPowerMode(v string) {
	o.PowerMode = &v
}

func (o ApStatsBleConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApStatsBleConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BeaconRate) {
		toSerialize["beacon_rate"] = o.BeaconRate
	}
	if !IsNil(o.BeaconRateModel) {
		toSerialize["beacon_rate_model"] = o.BeaconRateModel
	}
	if !IsNil(o.BeamDisabled) {
		toSerialize["beam_disabled"] = o.BeamDisabled
	}
	if !IsNil(o.Power) {
		toSerialize["power"] = o.Power
	}
	if !IsNil(o.PowerMode) {
		toSerialize["power_mode"] = o.PowerMode
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApStatsBleConfig) UnmarshalJSON(data []byte) (err error) {
	varApStatsBleConfig := _ApStatsBleConfig{}

	err = json.Unmarshal(data, &varApStatsBleConfig)

	if err != nil {
		return err
	}

	*o = ApStatsBleConfig(varApStatsBleConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "beacon_rate")
		delete(additionalProperties, "beacon_rate_model")
		delete(additionalProperties, "beam_disabled")
		delete(additionalProperties, "power")
		delete(additionalProperties, "power_mode")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApStatsBleConfig struct {
	value *ApStatsBleConfig
	isSet bool
}

func (v NullableApStatsBleConfig) Get() *ApStatsBleConfig {
	return v.value
}

func (v *NullableApStatsBleConfig) Set(val *ApStatsBleConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableApStatsBleConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableApStatsBleConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApStatsBleConfig(val *ApStatsBleConfig) *NullableApStatsBleConfig {
	return &NullableApStatsBleConfig{value: val, isSet: true}
}

func (v NullableApStatsBleConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApStatsBleConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


