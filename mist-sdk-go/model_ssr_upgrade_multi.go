/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the SsrUpgradeMulti type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SsrUpgradeMulti{}

// SsrUpgradeMulti struct for SsrUpgradeMulti
type SsrUpgradeMulti struct {
	Channel *SsrUpgradeChannel `json:"channel,omitempty"`
	// list of 128T device IDs to upgrade
	DeviceIds []string `json:"device_ids"`
	// reboot start time in epoch seconds, default is start_time, -1 disables reboot
	RebootAt *int32 `json:"reboot_at,omitempty"`
	// 128T firmware download start time in epoch seconds, default is now, -1 disables download
	StartTime *int32 `json:"start_time,omitempty"`
	Strategy *SsrUpgradeStrategy `json:"strategy,omitempty"`
	// 128T firmware version to upgrade (e.g. 5.3.0-93)
	Version *string `json:"version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SsrUpgradeMulti SsrUpgradeMulti

// NewSsrUpgradeMulti instantiates a new SsrUpgradeMulti object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSsrUpgradeMulti(deviceIds []string) *SsrUpgradeMulti {
	this := SsrUpgradeMulti{}
	var channel SsrUpgradeChannel = SSRUPGRADECHANNEL_STABLE
	this.Channel = &channel
	this.DeviceIds = deviceIds
	var strategy SsrUpgradeStrategy = SSRUPGRADESTRATEGY_BIG_BANG
	this.Strategy = &strategy
	return &this
}

// NewSsrUpgradeMultiWithDefaults instantiates a new SsrUpgradeMulti object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSsrUpgradeMultiWithDefaults() *SsrUpgradeMulti {
	this := SsrUpgradeMulti{}
	var channel SsrUpgradeChannel = SSRUPGRADECHANNEL_STABLE
	this.Channel = &channel
	var strategy SsrUpgradeStrategy = SSRUPGRADESTRATEGY_BIG_BANG
	this.Strategy = &strategy
	return &this
}

// GetChannel returns the Channel field value if set, zero value otherwise.
func (o *SsrUpgradeMulti) GetChannel() SsrUpgradeChannel {
	if o == nil || IsNil(o.Channel) {
		var ret SsrUpgradeChannel
		return ret
	}
	return *o.Channel
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsrUpgradeMulti) GetChannelOk() (*SsrUpgradeChannel, bool) {
	if o == nil || IsNil(o.Channel) {
		return nil, false
	}
	return o.Channel, true
}

// HasChannel returns a boolean if a field has been set.
func (o *SsrUpgradeMulti) HasChannel() bool {
	if o != nil && !IsNil(o.Channel) {
		return true
	}

	return false
}

// SetChannel gets a reference to the given SsrUpgradeChannel and assigns it to the Channel field.
func (o *SsrUpgradeMulti) SetChannel(v SsrUpgradeChannel) {
	o.Channel = &v
}

// GetDeviceIds returns the DeviceIds field value
func (o *SsrUpgradeMulti) GetDeviceIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DeviceIds
}

// GetDeviceIdsOk returns a tuple with the DeviceIds field value
// and a boolean to check if the value has been set.
func (o *SsrUpgradeMulti) GetDeviceIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceIds, true
}

// SetDeviceIds sets field value
func (o *SsrUpgradeMulti) SetDeviceIds(v []string) {
	o.DeviceIds = v
}

// GetRebootAt returns the RebootAt field value if set, zero value otherwise.
func (o *SsrUpgradeMulti) GetRebootAt() int32 {
	if o == nil || IsNil(o.RebootAt) {
		var ret int32
		return ret
	}
	return *o.RebootAt
}

// GetRebootAtOk returns a tuple with the RebootAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsrUpgradeMulti) GetRebootAtOk() (*int32, bool) {
	if o == nil || IsNil(o.RebootAt) {
		return nil, false
	}
	return o.RebootAt, true
}

// HasRebootAt returns a boolean if a field has been set.
func (o *SsrUpgradeMulti) HasRebootAt() bool {
	if o != nil && !IsNil(o.RebootAt) {
		return true
	}

	return false
}

// SetRebootAt gets a reference to the given int32 and assigns it to the RebootAt field.
func (o *SsrUpgradeMulti) SetRebootAt(v int32) {
	o.RebootAt = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *SsrUpgradeMulti) GetStartTime() int32 {
	if o == nil || IsNil(o.StartTime) {
		var ret int32
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsrUpgradeMulti) GetStartTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *SsrUpgradeMulti) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int32 and assigns it to the StartTime field.
func (o *SsrUpgradeMulti) SetStartTime(v int32) {
	o.StartTime = &v
}

// GetStrategy returns the Strategy field value if set, zero value otherwise.
func (o *SsrUpgradeMulti) GetStrategy() SsrUpgradeStrategy {
	if o == nil || IsNil(o.Strategy) {
		var ret SsrUpgradeStrategy
		return ret
	}
	return *o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsrUpgradeMulti) GetStrategyOk() (*SsrUpgradeStrategy, bool) {
	if o == nil || IsNil(o.Strategy) {
		return nil, false
	}
	return o.Strategy, true
}

// HasStrategy returns a boolean if a field has been set.
func (o *SsrUpgradeMulti) HasStrategy() bool {
	if o != nil && !IsNil(o.Strategy) {
		return true
	}

	return false
}

// SetStrategy gets a reference to the given SsrUpgradeStrategy and assigns it to the Strategy field.
func (o *SsrUpgradeMulti) SetStrategy(v SsrUpgradeStrategy) {
	o.Strategy = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *SsrUpgradeMulti) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SsrUpgradeMulti) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *SsrUpgradeMulti) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *SsrUpgradeMulti) SetVersion(v string) {
	o.Version = &v
}

func (o SsrUpgradeMulti) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SsrUpgradeMulti) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Channel) {
		toSerialize["channel"] = o.Channel
	}
	toSerialize["device_ids"] = o.DeviceIds
	if !IsNil(o.RebootAt) {
		toSerialize["reboot_at"] = o.RebootAt
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.Strategy) {
		toSerialize["strategy"] = o.Strategy
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SsrUpgradeMulti) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"device_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSsrUpgradeMulti := _SsrUpgradeMulti{}

	err = json.Unmarshal(data, &varSsrUpgradeMulti)

	if err != nil {
		return err
	}

	*o = SsrUpgradeMulti(varSsrUpgradeMulti)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "channel")
		delete(additionalProperties, "device_ids")
		delete(additionalProperties, "reboot_at")
		delete(additionalProperties, "start_time")
		delete(additionalProperties, "strategy")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSsrUpgradeMulti struct {
	value *SsrUpgradeMulti
	isSet bool
}

func (v NullableSsrUpgradeMulti) Get() *SsrUpgradeMulti {
	return v.value
}

func (v *NullableSsrUpgradeMulti) Set(val *SsrUpgradeMulti) {
	v.value = val
	v.isSet = true
}

func (v NullableSsrUpgradeMulti) IsSet() bool {
	return v.isSet
}

func (v *NullableSsrUpgradeMulti) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSsrUpgradeMulti(val *SsrUpgradeMulti) *NullableSsrUpgradeMulti {
	return &NullableSsrUpgradeMulti{value: val, isSet: true}
}

func (v NullableSsrUpgradeMulti) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSsrUpgradeMulti) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


