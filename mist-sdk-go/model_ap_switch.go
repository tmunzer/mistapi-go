/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the ApSwitch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApSwitch{}

// ApSwitch for people who want to fully control the vlans (advanced)
type ApSwitch struct {
	Enabled *bool `json:"enabled,omitempty"`
	Eth0 *ApSwitchSetting `json:"eth0,omitempty"`
	Eth1 *ApSwitchSetting `json:"eth1,omitempty"`
	Eth2 *ApSwitchSetting `json:"eth2,omitempty"`
	Eth3 *ApSwitchSetting `json:"eth3,omitempty"`
	Module *ApSwitchSetting `json:"module,omitempty"`
	Wds *ApSwitchSetting `json:"wds,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApSwitch ApSwitch

// NewApSwitch instantiates a new ApSwitch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApSwitch() *ApSwitch {
	this := ApSwitch{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// NewApSwitchWithDefaults instantiates a new ApSwitch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApSwitchWithDefaults() *ApSwitch {
	this := ApSwitch{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ApSwitch) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApSwitch) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ApSwitch) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ApSwitch) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetEth0 returns the Eth0 field value if set, zero value otherwise.
func (o *ApSwitch) GetEth0() ApSwitchSetting {
	if o == nil || IsNil(o.Eth0) {
		var ret ApSwitchSetting
		return ret
	}
	return *o.Eth0
}

// GetEth0Ok returns a tuple with the Eth0 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApSwitch) GetEth0Ok() (*ApSwitchSetting, bool) {
	if o == nil || IsNil(o.Eth0) {
		return nil, false
	}
	return o.Eth0, true
}

// HasEth0 returns a boolean if a field has been set.
func (o *ApSwitch) HasEth0() bool {
	if o != nil && !IsNil(o.Eth0) {
		return true
	}

	return false
}

// SetEth0 gets a reference to the given ApSwitchSetting and assigns it to the Eth0 field.
func (o *ApSwitch) SetEth0(v ApSwitchSetting) {
	o.Eth0 = &v
}

// GetEth1 returns the Eth1 field value if set, zero value otherwise.
func (o *ApSwitch) GetEth1() ApSwitchSetting {
	if o == nil || IsNil(o.Eth1) {
		var ret ApSwitchSetting
		return ret
	}
	return *o.Eth1
}

// GetEth1Ok returns a tuple with the Eth1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApSwitch) GetEth1Ok() (*ApSwitchSetting, bool) {
	if o == nil || IsNil(o.Eth1) {
		return nil, false
	}
	return o.Eth1, true
}

// HasEth1 returns a boolean if a field has been set.
func (o *ApSwitch) HasEth1() bool {
	if o != nil && !IsNil(o.Eth1) {
		return true
	}

	return false
}

// SetEth1 gets a reference to the given ApSwitchSetting and assigns it to the Eth1 field.
func (o *ApSwitch) SetEth1(v ApSwitchSetting) {
	o.Eth1 = &v
}

// GetEth2 returns the Eth2 field value if set, zero value otherwise.
func (o *ApSwitch) GetEth2() ApSwitchSetting {
	if o == nil || IsNil(o.Eth2) {
		var ret ApSwitchSetting
		return ret
	}
	return *o.Eth2
}

// GetEth2Ok returns a tuple with the Eth2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApSwitch) GetEth2Ok() (*ApSwitchSetting, bool) {
	if o == nil || IsNil(o.Eth2) {
		return nil, false
	}
	return o.Eth2, true
}

// HasEth2 returns a boolean if a field has been set.
func (o *ApSwitch) HasEth2() bool {
	if o != nil && !IsNil(o.Eth2) {
		return true
	}

	return false
}

// SetEth2 gets a reference to the given ApSwitchSetting and assigns it to the Eth2 field.
func (o *ApSwitch) SetEth2(v ApSwitchSetting) {
	o.Eth2 = &v
}

// GetEth3 returns the Eth3 field value if set, zero value otherwise.
func (o *ApSwitch) GetEth3() ApSwitchSetting {
	if o == nil || IsNil(o.Eth3) {
		var ret ApSwitchSetting
		return ret
	}
	return *o.Eth3
}

// GetEth3Ok returns a tuple with the Eth3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApSwitch) GetEth3Ok() (*ApSwitchSetting, bool) {
	if o == nil || IsNil(o.Eth3) {
		return nil, false
	}
	return o.Eth3, true
}

// HasEth3 returns a boolean if a field has been set.
func (o *ApSwitch) HasEth3() bool {
	if o != nil && !IsNil(o.Eth3) {
		return true
	}

	return false
}

// SetEth3 gets a reference to the given ApSwitchSetting and assigns it to the Eth3 field.
func (o *ApSwitch) SetEth3(v ApSwitchSetting) {
	o.Eth3 = &v
}

// GetModule returns the Module field value if set, zero value otherwise.
func (o *ApSwitch) GetModule() ApSwitchSetting {
	if o == nil || IsNil(o.Module) {
		var ret ApSwitchSetting
		return ret
	}
	return *o.Module
}

// GetModuleOk returns a tuple with the Module field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApSwitch) GetModuleOk() (*ApSwitchSetting, bool) {
	if o == nil || IsNil(o.Module) {
		return nil, false
	}
	return o.Module, true
}

// HasModule returns a boolean if a field has been set.
func (o *ApSwitch) HasModule() bool {
	if o != nil && !IsNil(o.Module) {
		return true
	}

	return false
}

// SetModule gets a reference to the given ApSwitchSetting and assigns it to the Module field.
func (o *ApSwitch) SetModule(v ApSwitchSetting) {
	o.Module = &v
}

// GetWds returns the Wds field value if set, zero value otherwise.
func (o *ApSwitch) GetWds() ApSwitchSetting {
	if o == nil || IsNil(o.Wds) {
		var ret ApSwitchSetting
		return ret
	}
	return *o.Wds
}

// GetWdsOk returns a tuple with the Wds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApSwitch) GetWdsOk() (*ApSwitchSetting, bool) {
	if o == nil || IsNil(o.Wds) {
		return nil, false
	}
	return o.Wds, true
}

// HasWds returns a boolean if a field has been set.
func (o *ApSwitch) HasWds() bool {
	if o != nil && !IsNil(o.Wds) {
		return true
	}

	return false
}

// SetWds gets a reference to the given ApSwitchSetting and assigns it to the Wds field.
func (o *ApSwitch) SetWds(v ApSwitchSetting) {
	o.Wds = &v
}

func (o ApSwitch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApSwitch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Eth0) {
		toSerialize["eth0"] = o.Eth0
	}
	if !IsNil(o.Eth1) {
		toSerialize["eth1"] = o.Eth1
	}
	if !IsNil(o.Eth2) {
		toSerialize["eth2"] = o.Eth2
	}
	if !IsNil(o.Eth3) {
		toSerialize["eth3"] = o.Eth3
	}
	if !IsNil(o.Module) {
		toSerialize["module"] = o.Module
	}
	if !IsNil(o.Wds) {
		toSerialize["wds"] = o.Wds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApSwitch) UnmarshalJSON(data []byte) (err error) {
	varApSwitch := _ApSwitch{}

	err = json.Unmarshal(data, &varApSwitch)

	if err != nil {
		return err
	}

	*o = ApSwitch(varApSwitch)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "eth0")
		delete(additionalProperties, "eth1")
		delete(additionalProperties, "eth2")
		delete(additionalProperties, "eth3")
		delete(additionalProperties, "module")
		delete(additionalProperties, "wds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApSwitch struct {
	value *ApSwitch
	isSet bool
}

func (v NullableApSwitch) Get() *ApSwitch {
	return v.value
}

func (v *NullableApSwitch) Set(val *ApSwitch) {
	v.value = val
	v.isSet = true
}

func (v NullableApSwitch) IsSet() bool {
	return v.isSet
}

func (v *NullableApSwitch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApSwitch(val *ApSwitch) *NullableApSwitch {
	return &NullableApSwitch{value: val, isSet: true}
}

func (v NullableApSwitch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApSwitch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


