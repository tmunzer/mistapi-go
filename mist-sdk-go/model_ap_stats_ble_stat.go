/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the ApStatsBleStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApStatsBleStat{}

// ApStatsBleStat struct for ApStatsBleStat
type ApStatsBleStat struct {
	BeaconRate *int32 `json:"beacon_rate,omitempty"`
	EddystoneUidEnabled *bool `json:"eddystone_uid_enabled,omitempty"`
	EddystoneUidFreqMsec *int32 `json:"eddystone_uid_freq_msec,omitempty"`
	EddystoneUidInstance *string `json:"eddystone_uid_instance,omitempty"`
	EddystoneUidNamespace *string `json:"eddystone_uid_namespace,omitempty"`
	EddystoneUrlEnabled *bool `json:"eddystone_url_enabled,omitempty"`
	// Frequency (msec) of data emmit by Eddystone-UID beacon
	EddystoneUrlFreqMsec *int32 `json:"eddystone_url_freq_msec,omitempty"`
	EddystoneUrlUrl *string `json:"eddystone_url_url,omitempty"`
	IbeaconEnabled *bool `json:"ibeacon_enabled,omitempty"`
	IbeaconMajor *int32 `json:"ibeacon_major,omitempty"`
	IbeaconMinor *int32 `json:"ibeacon_minor,omitempty"`
	IbeaconUuid *string `json:"ibeacon_uuid,omitempty"`
	Major *int32 `json:"major,omitempty"`
	Minors []int32 `json:"minors,omitempty"`
	Power *int32 `json:"power,omitempty"`
	RxBytes *int32 `json:"rx_bytes,omitempty"`
	RxPkts *int32 `json:"rx_pkts,omitempty"`
	TxBytes *int32 `json:"tx_bytes,omitempty"`
	TxPkts *int32 `json:"tx_pkts,omitempty"`
	// resets due to tx hung
	TxResets *int32 `json:"tx_resets,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApStatsBleStat ApStatsBleStat

// NewApStatsBleStat instantiates a new ApStatsBleStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApStatsBleStat() *ApStatsBleStat {
	this := ApStatsBleStat{}
	var beaconRate int32 = 0
	this.BeaconRate = &beaconRate
	var eddystoneUidEnabled bool = false
	this.EddystoneUidEnabled = &eddystoneUidEnabled
	var eddystoneUidFreqMsec int32 = 0
	this.EddystoneUidFreqMsec = &eddystoneUidFreqMsec
	var eddystoneUidInstance string = ""
	this.EddystoneUidInstance = &eddystoneUidInstance
	var eddystoneUidNamespace string = ""
	this.EddystoneUidNamespace = &eddystoneUidNamespace
	var eddystoneUrlEnabled bool = false
	this.EddystoneUrlEnabled = &eddystoneUrlEnabled
	var eddystoneUrlFreqMsec int32 = 0
	this.EddystoneUrlFreqMsec = &eddystoneUrlFreqMsec
	var eddystoneUrlUrl string = ""
	this.EddystoneUrlUrl = &eddystoneUrlUrl
	var ibeaconEnabled bool = false
	this.IbeaconEnabled = &ibeaconEnabled
	var ibeaconMajor int32 = 0
	this.IbeaconMajor = &ibeaconMajor
	var ibeaconMinor int32 = 0
	this.IbeaconMinor = &ibeaconMinor
	var major int32 = 0
	this.Major = &major
	var power int32 = 9
	this.Power = &power
	var rxBytes int32 = 0
	this.RxBytes = &rxBytes
	var rxPkts int32 = 0
	this.RxPkts = &rxPkts
	var txBytes int32 = 0
	this.TxBytes = &txBytes
	var txPkts int32 = 0
	this.TxPkts = &txPkts
	var txResets int32 = 0
	this.TxResets = &txResets
	return &this
}

// NewApStatsBleStatWithDefaults instantiates a new ApStatsBleStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApStatsBleStatWithDefaults() *ApStatsBleStat {
	this := ApStatsBleStat{}
	var beaconRate int32 = 0
	this.BeaconRate = &beaconRate
	var eddystoneUidEnabled bool = false
	this.EddystoneUidEnabled = &eddystoneUidEnabled
	var eddystoneUidFreqMsec int32 = 0
	this.EddystoneUidFreqMsec = &eddystoneUidFreqMsec
	var eddystoneUidInstance string = ""
	this.EddystoneUidInstance = &eddystoneUidInstance
	var eddystoneUidNamespace string = ""
	this.EddystoneUidNamespace = &eddystoneUidNamespace
	var eddystoneUrlEnabled bool = false
	this.EddystoneUrlEnabled = &eddystoneUrlEnabled
	var eddystoneUrlFreqMsec int32 = 0
	this.EddystoneUrlFreqMsec = &eddystoneUrlFreqMsec
	var eddystoneUrlUrl string = ""
	this.EddystoneUrlUrl = &eddystoneUrlUrl
	var ibeaconEnabled bool = false
	this.IbeaconEnabled = &ibeaconEnabled
	var ibeaconMajor int32 = 0
	this.IbeaconMajor = &ibeaconMajor
	var ibeaconMinor int32 = 0
	this.IbeaconMinor = &ibeaconMinor
	var major int32 = 0
	this.Major = &major
	var power int32 = 9
	this.Power = &power
	var rxBytes int32 = 0
	this.RxBytes = &rxBytes
	var rxPkts int32 = 0
	this.RxPkts = &rxPkts
	var txBytes int32 = 0
	this.TxBytes = &txBytes
	var txPkts int32 = 0
	this.TxPkts = &txPkts
	var txResets int32 = 0
	this.TxResets = &txResets
	return &this
}

// GetBeaconRate returns the BeaconRate field value if set, zero value otherwise.
func (o *ApStatsBleStat) GetBeaconRate() int32 {
	if o == nil || IsNil(o.BeaconRate) {
		var ret int32
		return ret
	}
	return *o.BeaconRate
}

// GetBeaconRateOk returns a tuple with the BeaconRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleStat) GetBeaconRateOk() (*int32, bool) {
	if o == nil || IsNil(o.BeaconRate) {
		return nil, false
	}
	return o.BeaconRate, true
}

// HasBeaconRate returns a boolean if a field has been set.
func (o *ApStatsBleStat) HasBeaconRate() bool {
	if o != nil && !IsNil(o.BeaconRate) {
		return true
	}

	return false
}

// SetBeaconRate gets a reference to the given int32 and assigns it to the BeaconRate field.
func (o *ApStatsBleStat) SetBeaconRate(v int32) {
	o.BeaconRate = &v
}

// GetEddystoneUidEnabled returns the EddystoneUidEnabled field value if set, zero value otherwise.
func (o *ApStatsBleStat) GetEddystoneUidEnabled() bool {
	if o == nil || IsNil(o.EddystoneUidEnabled) {
		var ret bool
		return ret
	}
	return *o.EddystoneUidEnabled
}

// GetEddystoneUidEnabledOk returns a tuple with the EddystoneUidEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleStat) GetEddystoneUidEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.EddystoneUidEnabled) {
		return nil, false
	}
	return o.EddystoneUidEnabled, true
}

// HasEddystoneUidEnabled returns a boolean if a field has been set.
func (o *ApStatsBleStat) HasEddystoneUidEnabled() bool {
	if o != nil && !IsNil(o.EddystoneUidEnabled) {
		return true
	}

	return false
}

// SetEddystoneUidEnabled gets a reference to the given bool and assigns it to the EddystoneUidEnabled field.
func (o *ApStatsBleStat) SetEddystoneUidEnabled(v bool) {
	o.EddystoneUidEnabled = &v
}

// GetEddystoneUidFreqMsec returns the EddystoneUidFreqMsec field value if set, zero value otherwise.
func (o *ApStatsBleStat) GetEddystoneUidFreqMsec() int32 {
	if o == nil || IsNil(o.EddystoneUidFreqMsec) {
		var ret int32
		return ret
	}
	return *o.EddystoneUidFreqMsec
}

// GetEddystoneUidFreqMsecOk returns a tuple with the EddystoneUidFreqMsec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleStat) GetEddystoneUidFreqMsecOk() (*int32, bool) {
	if o == nil || IsNil(o.EddystoneUidFreqMsec) {
		return nil, false
	}
	return o.EddystoneUidFreqMsec, true
}

// HasEddystoneUidFreqMsec returns a boolean if a field has been set.
func (o *ApStatsBleStat) HasEddystoneUidFreqMsec() bool {
	if o != nil && !IsNil(o.EddystoneUidFreqMsec) {
		return true
	}

	return false
}

// SetEddystoneUidFreqMsec gets a reference to the given int32 and assigns it to the EddystoneUidFreqMsec field.
func (o *ApStatsBleStat) SetEddystoneUidFreqMsec(v int32) {
	o.EddystoneUidFreqMsec = &v
}

// GetEddystoneUidInstance returns the EddystoneUidInstance field value if set, zero value otherwise.
func (o *ApStatsBleStat) GetEddystoneUidInstance() string {
	if o == nil || IsNil(o.EddystoneUidInstance) {
		var ret string
		return ret
	}
	return *o.EddystoneUidInstance
}

// GetEddystoneUidInstanceOk returns a tuple with the EddystoneUidInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleStat) GetEddystoneUidInstanceOk() (*string, bool) {
	if o == nil || IsNil(o.EddystoneUidInstance) {
		return nil, false
	}
	return o.EddystoneUidInstance, true
}

// HasEddystoneUidInstance returns a boolean if a field has been set.
func (o *ApStatsBleStat) HasEddystoneUidInstance() bool {
	if o != nil && !IsNil(o.EddystoneUidInstance) {
		return true
	}

	return false
}

// SetEddystoneUidInstance gets a reference to the given string and assigns it to the EddystoneUidInstance field.
func (o *ApStatsBleStat) SetEddystoneUidInstance(v string) {
	o.EddystoneUidInstance = &v
}

// GetEddystoneUidNamespace returns the EddystoneUidNamespace field value if set, zero value otherwise.
func (o *ApStatsBleStat) GetEddystoneUidNamespace() string {
	if o == nil || IsNil(o.EddystoneUidNamespace) {
		var ret string
		return ret
	}
	return *o.EddystoneUidNamespace
}

// GetEddystoneUidNamespaceOk returns a tuple with the EddystoneUidNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleStat) GetEddystoneUidNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.EddystoneUidNamespace) {
		return nil, false
	}
	return o.EddystoneUidNamespace, true
}

// HasEddystoneUidNamespace returns a boolean if a field has been set.
func (o *ApStatsBleStat) HasEddystoneUidNamespace() bool {
	if o != nil && !IsNil(o.EddystoneUidNamespace) {
		return true
	}

	return false
}

// SetEddystoneUidNamespace gets a reference to the given string and assigns it to the EddystoneUidNamespace field.
func (o *ApStatsBleStat) SetEddystoneUidNamespace(v string) {
	o.EddystoneUidNamespace = &v
}

// GetEddystoneUrlEnabled returns the EddystoneUrlEnabled field value if set, zero value otherwise.
func (o *ApStatsBleStat) GetEddystoneUrlEnabled() bool {
	if o == nil || IsNil(o.EddystoneUrlEnabled) {
		var ret bool
		return ret
	}
	return *o.EddystoneUrlEnabled
}

// GetEddystoneUrlEnabledOk returns a tuple with the EddystoneUrlEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleStat) GetEddystoneUrlEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.EddystoneUrlEnabled) {
		return nil, false
	}
	return o.EddystoneUrlEnabled, true
}

// HasEddystoneUrlEnabled returns a boolean if a field has been set.
func (o *ApStatsBleStat) HasEddystoneUrlEnabled() bool {
	if o != nil && !IsNil(o.EddystoneUrlEnabled) {
		return true
	}

	return false
}

// SetEddystoneUrlEnabled gets a reference to the given bool and assigns it to the EddystoneUrlEnabled field.
func (o *ApStatsBleStat) SetEddystoneUrlEnabled(v bool) {
	o.EddystoneUrlEnabled = &v
}

// GetEddystoneUrlFreqMsec returns the EddystoneUrlFreqMsec field value if set, zero value otherwise.
func (o *ApStatsBleStat) GetEddystoneUrlFreqMsec() int32 {
	if o == nil || IsNil(o.EddystoneUrlFreqMsec) {
		var ret int32
		return ret
	}
	return *o.EddystoneUrlFreqMsec
}

// GetEddystoneUrlFreqMsecOk returns a tuple with the EddystoneUrlFreqMsec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleStat) GetEddystoneUrlFreqMsecOk() (*int32, bool) {
	if o == nil || IsNil(o.EddystoneUrlFreqMsec) {
		return nil, false
	}
	return o.EddystoneUrlFreqMsec, true
}

// HasEddystoneUrlFreqMsec returns a boolean if a field has been set.
func (o *ApStatsBleStat) HasEddystoneUrlFreqMsec() bool {
	if o != nil && !IsNil(o.EddystoneUrlFreqMsec) {
		return true
	}

	return false
}

// SetEddystoneUrlFreqMsec gets a reference to the given int32 and assigns it to the EddystoneUrlFreqMsec field.
func (o *ApStatsBleStat) SetEddystoneUrlFreqMsec(v int32) {
	o.EddystoneUrlFreqMsec = &v
}

// GetEddystoneUrlUrl returns the EddystoneUrlUrl field value if set, zero value otherwise.
func (o *ApStatsBleStat) GetEddystoneUrlUrl() string {
	if o == nil || IsNil(o.EddystoneUrlUrl) {
		var ret string
		return ret
	}
	return *o.EddystoneUrlUrl
}

// GetEddystoneUrlUrlOk returns a tuple with the EddystoneUrlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleStat) GetEddystoneUrlUrlOk() (*string, bool) {
	if o == nil || IsNil(o.EddystoneUrlUrl) {
		return nil, false
	}
	return o.EddystoneUrlUrl, true
}

// HasEddystoneUrlUrl returns a boolean if a field has been set.
func (o *ApStatsBleStat) HasEddystoneUrlUrl() bool {
	if o != nil && !IsNil(o.EddystoneUrlUrl) {
		return true
	}

	return false
}

// SetEddystoneUrlUrl gets a reference to the given string and assigns it to the EddystoneUrlUrl field.
func (o *ApStatsBleStat) SetEddystoneUrlUrl(v string) {
	o.EddystoneUrlUrl = &v
}

// GetIbeaconEnabled returns the IbeaconEnabled field value if set, zero value otherwise.
func (o *ApStatsBleStat) GetIbeaconEnabled() bool {
	if o == nil || IsNil(o.IbeaconEnabled) {
		var ret bool
		return ret
	}
	return *o.IbeaconEnabled
}

// GetIbeaconEnabledOk returns a tuple with the IbeaconEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleStat) GetIbeaconEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IbeaconEnabled) {
		return nil, false
	}
	return o.IbeaconEnabled, true
}

// HasIbeaconEnabled returns a boolean if a field has been set.
func (o *ApStatsBleStat) HasIbeaconEnabled() bool {
	if o != nil && !IsNil(o.IbeaconEnabled) {
		return true
	}

	return false
}

// SetIbeaconEnabled gets a reference to the given bool and assigns it to the IbeaconEnabled field.
func (o *ApStatsBleStat) SetIbeaconEnabled(v bool) {
	o.IbeaconEnabled = &v
}

// GetIbeaconMajor returns the IbeaconMajor field value if set, zero value otherwise.
func (o *ApStatsBleStat) GetIbeaconMajor() int32 {
	if o == nil || IsNil(o.IbeaconMajor) {
		var ret int32
		return ret
	}
	return *o.IbeaconMajor
}

// GetIbeaconMajorOk returns a tuple with the IbeaconMajor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleStat) GetIbeaconMajorOk() (*int32, bool) {
	if o == nil || IsNil(o.IbeaconMajor) {
		return nil, false
	}
	return o.IbeaconMajor, true
}

// HasIbeaconMajor returns a boolean if a field has been set.
func (o *ApStatsBleStat) HasIbeaconMajor() bool {
	if o != nil && !IsNil(o.IbeaconMajor) {
		return true
	}

	return false
}

// SetIbeaconMajor gets a reference to the given int32 and assigns it to the IbeaconMajor field.
func (o *ApStatsBleStat) SetIbeaconMajor(v int32) {
	o.IbeaconMajor = &v
}

// GetIbeaconMinor returns the IbeaconMinor field value if set, zero value otherwise.
func (o *ApStatsBleStat) GetIbeaconMinor() int32 {
	if o == nil || IsNil(o.IbeaconMinor) {
		var ret int32
		return ret
	}
	return *o.IbeaconMinor
}

// GetIbeaconMinorOk returns a tuple with the IbeaconMinor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleStat) GetIbeaconMinorOk() (*int32, bool) {
	if o == nil || IsNil(o.IbeaconMinor) {
		return nil, false
	}
	return o.IbeaconMinor, true
}

// HasIbeaconMinor returns a boolean if a field has been set.
func (o *ApStatsBleStat) HasIbeaconMinor() bool {
	if o != nil && !IsNil(o.IbeaconMinor) {
		return true
	}

	return false
}

// SetIbeaconMinor gets a reference to the given int32 and assigns it to the IbeaconMinor field.
func (o *ApStatsBleStat) SetIbeaconMinor(v int32) {
	o.IbeaconMinor = &v
}

// GetIbeaconUuid returns the IbeaconUuid field value if set, zero value otherwise.
func (o *ApStatsBleStat) GetIbeaconUuid() string {
	if o == nil || IsNil(o.IbeaconUuid) {
		var ret string
		return ret
	}
	return *o.IbeaconUuid
}

// GetIbeaconUuidOk returns a tuple with the IbeaconUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleStat) GetIbeaconUuidOk() (*string, bool) {
	if o == nil || IsNil(o.IbeaconUuid) {
		return nil, false
	}
	return o.IbeaconUuid, true
}

// HasIbeaconUuid returns a boolean if a field has been set.
func (o *ApStatsBleStat) HasIbeaconUuid() bool {
	if o != nil && !IsNil(o.IbeaconUuid) {
		return true
	}

	return false
}

// SetIbeaconUuid gets a reference to the given string and assigns it to the IbeaconUuid field.
func (o *ApStatsBleStat) SetIbeaconUuid(v string) {
	o.IbeaconUuid = &v
}

// GetMajor returns the Major field value if set, zero value otherwise.
func (o *ApStatsBleStat) GetMajor() int32 {
	if o == nil || IsNil(o.Major) {
		var ret int32
		return ret
	}
	return *o.Major
}

// GetMajorOk returns a tuple with the Major field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleStat) GetMajorOk() (*int32, bool) {
	if o == nil || IsNil(o.Major) {
		return nil, false
	}
	return o.Major, true
}

// HasMajor returns a boolean if a field has been set.
func (o *ApStatsBleStat) HasMajor() bool {
	if o != nil && !IsNil(o.Major) {
		return true
	}

	return false
}

// SetMajor gets a reference to the given int32 and assigns it to the Major field.
func (o *ApStatsBleStat) SetMajor(v int32) {
	o.Major = &v
}

// GetMinors returns the Minors field value if set, zero value otherwise.
func (o *ApStatsBleStat) GetMinors() []int32 {
	if o == nil || IsNil(o.Minors) {
		var ret []int32
		return ret
	}
	return o.Minors
}

// GetMinorsOk returns a tuple with the Minors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleStat) GetMinorsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Minors) {
		return nil, false
	}
	return o.Minors, true
}

// HasMinors returns a boolean if a field has been set.
func (o *ApStatsBleStat) HasMinors() bool {
	if o != nil && !IsNil(o.Minors) {
		return true
	}

	return false
}

// SetMinors gets a reference to the given []int32 and assigns it to the Minors field.
func (o *ApStatsBleStat) SetMinors(v []int32) {
	o.Minors = v
}

// GetPower returns the Power field value if set, zero value otherwise.
func (o *ApStatsBleStat) GetPower() int32 {
	if o == nil || IsNil(o.Power) {
		var ret int32
		return ret
	}
	return *o.Power
}

// GetPowerOk returns a tuple with the Power field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleStat) GetPowerOk() (*int32, bool) {
	if o == nil || IsNil(o.Power) {
		return nil, false
	}
	return o.Power, true
}

// HasPower returns a boolean if a field has been set.
func (o *ApStatsBleStat) HasPower() bool {
	if o != nil && !IsNil(o.Power) {
		return true
	}

	return false
}

// SetPower gets a reference to the given int32 and assigns it to the Power field.
func (o *ApStatsBleStat) SetPower(v int32) {
	o.Power = &v
}

// GetRxBytes returns the RxBytes field value if set, zero value otherwise.
func (o *ApStatsBleStat) GetRxBytes() int32 {
	if o == nil || IsNil(o.RxBytes) {
		var ret int32
		return ret
	}
	return *o.RxBytes
}

// GetRxBytesOk returns a tuple with the RxBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleStat) GetRxBytesOk() (*int32, bool) {
	if o == nil || IsNil(o.RxBytes) {
		return nil, false
	}
	return o.RxBytes, true
}

// HasRxBytes returns a boolean if a field has been set.
func (o *ApStatsBleStat) HasRxBytes() bool {
	if o != nil && !IsNil(o.RxBytes) {
		return true
	}

	return false
}

// SetRxBytes gets a reference to the given int32 and assigns it to the RxBytes field.
func (o *ApStatsBleStat) SetRxBytes(v int32) {
	o.RxBytes = &v
}

// GetRxPkts returns the RxPkts field value if set, zero value otherwise.
func (o *ApStatsBleStat) GetRxPkts() int32 {
	if o == nil || IsNil(o.RxPkts) {
		var ret int32
		return ret
	}
	return *o.RxPkts
}

// GetRxPktsOk returns a tuple with the RxPkts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleStat) GetRxPktsOk() (*int32, bool) {
	if o == nil || IsNil(o.RxPkts) {
		return nil, false
	}
	return o.RxPkts, true
}

// HasRxPkts returns a boolean if a field has been set.
func (o *ApStatsBleStat) HasRxPkts() bool {
	if o != nil && !IsNil(o.RxPkts) {
		return true
	}

	return false
}

// SetRxPkts gets a reference to the given int32 and assigns it to the RxPkts field.
func (o *ApStatsBleStat) SetRxPkts(v int32) {
	o.RxPkts = &v
}

// GetTxBytes returns the TxBytes field value if set, zero value otherwise.
func (o *ApStatsBleStat) GetTxBytes() int32 {
	if o == nil || IsNil(o.TxBytes) {
		var ret int32
		return ret
	}
	return *o.TxBytes
}

// GetTxBytesOk returns a tuple with the TxBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleStat) GetTxBytesOk() (*int32, bool) {
	if o == nil || IsNil(o.TxBytes) {
		return nil, false
	}
	return o.TxBytes, true
}

// HasTxBytes returns a boolean if a field has been set.
func (o *ApStatsBleStat) HasTxBytes() bool {
	if o != nil && !IsNil(o.TxBytes) {
		return true
	}

	return false
}

// SetTxBytes gets a reference to the given int32 and assigns it to the TxBytes field.
func (o *ApStatsBleStat) SetTxBytes(v int32) {
	o.TxBytes = &v
}

// GetTxPkts returns the TxPkts field value if set, zero value otherwise.
func (o *ApStatsBleStat) GetTxPkts() int32 {
	if o == nil || IsNil(o.TxPkts) {
		var ret int32
		return ret
	}
	return *o.TxPkts
}

// GetTxPktsOk returns a tuple with the TxPkts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleStat) GetTxPktsOk() (*int32, bool) {
	if o == nil || IsNil(o.TxPkts) {
		return nil, false
	}
	return o.TxPkts, true
}

// HasTxPkts returns a boolean if a field has been set.
func (o *ApStatsBleStat) HasTxPkts() bool {
	if o != nil && !IsNil(o.TxPkts) {
		return true
	}

	return false
}

// SetTxPkts gets a reference to the given int32 and assigns it to the TxPkts field.
func (o *ApStatsBleStat) SetTxPkts(v int32) {
	o.TxPkts = &v
}

// GetTxResets returns the TxResets field value if set, zero value otherwise.
func (o *ApStatsBleStat) GetTxResets() int32 {
	if o == nil || IsNil(o.TxResets) {
		var ret int32
		return ret
	}
	return *o.TxResets
}

// GetTxResetsOk returns a tuple with the TxResets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleStat) GetTxResetsOk() (*int32, bool) {
	if o == nil || IsNil(o.TxResets) {
		return nil, false
	}
	return o.TxResets, true
}

// HasTxResets returns a boolean if a field has been set.
func (o *ApStatsBleStat) HasTxResets() bool {
	if o != nil && !IsNil(o.TxResets) {
		return true
	}

	return false
}

// SetTxResets gets a reference to the given int32 and assigns it to the TxResets field.
func (o *ApStatsBleStat) SetTxResets(v int32) {
	o.TxResets = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *ApStatsBleStat) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsBleStat) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *ApStatsBleStat) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *ApStatsBleStat) SetUuid(v string) {
	o.Uuid = &v
}

func (o ApStatsBleStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApStatsBleStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BeaconRate) {
		toSerialize["beacon_rate"] = o.BeaconRate
	}
	if !IsNil(o.EddystoneUidEnabled) {
		toSerialize["eddystone_uid_enabled"] = o.EddystoneUidEnabled
	}
	if !IsNil(o.EddystoneUidFreqMsec) {
		toSerialize["eddystone_uid_freq_msec"] = o.EddystoneUidFreqMsec
	}
	if !IsNil(o.EddystoneUidInstance) {
		toSerialize["eddystone_uid_instance"] = o.EddystoneUidInstance
	}
	if !IsNil(o.EddystoneUidNamespace) {
		toSerialize["eddystone_uid_namespace"] = o.EddystoneUidNamespace
	}
	if !IsNil(o.EddystoneUrlEnabled) {
		toSerialize["eddystone_url_enabled"] = o.EddystoneUrlEnabled
	}
	if !IsNil(o.EddystoneUrlFreqMsec) {
		toSerialize["eddystone_url_freq_msec"] = o.EddystoneUrlFreqMsec
	}
	if !IsNil(o.EddystoneUrlUrl) {
		toSerialize["eddystone_url_url"] = o.EddystoneUrlUrl
	}
	if !IsNil(o.IbeaconEnabled) {
		toSerialize["ibeacon_enabled"] = o.IbeaconEnabled
	}
	if !IsNil(o.IbeaconMajor) {
		toSerialize["ibeacon_major"] = o.IbeaconMajor
	}
	if !IsNil(o.IbeaconMinor) {
		toSerialize["ibeacon_minor"] = o.IbeaconMinor
	}
	if !IsNil(o.IbeaconUuid) {
		toSerialize["ibeacon_uuid"] = o.IbeaconUuid
	}
	if !IsNil(o.Major) {
		toSerialize["major"] = o.Major
	}
	if !IsNil(o.Minors) {
		toSerialize["minors"] = o.Minors
	}
	if !IsNil(o.Power) {
		toSerialize["power"] = o.Power
	}
	if !IsNil(o.RxBytes) {
		toSerialize["rx_bytes"] = o.RxBytes
	}
	if !IsNil(o.RxPkts) {
		toSerialize["rx_pkts"] = o.RxPkts
	}
	if !IsNil(o.TxBytes) {
		toSerialize["tx_bytes"] = o.TxBytes
	}
	if !IsNil(o.TxPkts) {
		toSerialize["tx_pkts"] = o.TxPkts
	}
	if !IsNil(o.TxResets) {
		toSerialize["tx_resets"] = o.TxResets
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApStatsBleStat) UnmarshalJSON(data []byte) (err error) {
	varApStatsBleStat := _ApStatsBleStat{}

	err = json.Unmarshal(data, &varApStatsBleStat)

	if err != nil {
		return err
	}

	*o = ApStatsBleStat(varApStatsBleStat)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "beacon_rate")
		delete(additionalProperties, "eddystone_uid_enabled")
		delete(additionalProperties, "eddystone_uid_freq_msec")
		delete(additionalProperties, "eddystone_uid_instance")
		delete(additionalProperties, "eddystone_uid_namespace")
		delete(additionalProperties, "eddystone_url_enabled")
		delete(additionalProperties, "eddystone_url_freq_msec")
		delete(additionalProperties, "eddystone_url_url")
		delete(additionalProperties, "ibeacon_enabled")
		delete(additionalProperties, "ibeacon_major")
		delete(additionalProperties, "ibeacon_minor")
		delete(additionalProperties, "ibeacon_uuid")
		delete(additionalProperties, "major")
		delete(additionalProperties, "minors")
		delete(additionalProperties, "power")
		delete(additionalProperties, "rx_bytes")
		delete(additionalProperties, "rx_pkts")
		delete(additionalProperties, "tx_bytes")
		delete(additionalProperties, "tx_pkts")
		delete(additionalProperties, "tx_resets")
		delete(additionalProperties, "uuid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApStatsBleStat struct {
	value *ApStatsBleStat
	isSet bool
}

func (v NullableApStatsBleStat) Get() *ApStatsBleStat {
	return v.value
}

func (v *NullableApStatsBleStat) Set(val *ApStatsBleStat) {
	v.value = val
	v.isSet = true
}

func (v NullableApStatsBleStat) IsSet() bool {
	return v.isSet
}

func (v *NullableApStatsBleStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApStatsBleStat(val *ApStatsBleStat) *NullableApStatsBleStat {
	return &NullableApStatsBleStat{value: val, isSet: true}
}

func (v NullableApStatsBleStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApStatsBleStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


