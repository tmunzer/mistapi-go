/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the SiteSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteSetting{}

// SiteSetting Site Settings
type SiteSetting struct {
	AclPolicies []AclPolicy `json:"acl_policies,omitempty"`
	// ACL Tags to identify traffic source or destination. Key name is the tag name
	AclTags *map[string]AclTag `json:"acl_tags,omitempty"`
	// additional CLI commands to append to the generated Junos config  **Note**: no check is done
	AdditionalConfigCmds []string `json:"additional_config_cmds,omitempty"`
	Analytic *SiteSettingAnalytic `json:"analytic,omitempty"`
	ApMatching *SiteSettingApMatching `json:"ap_matching,omitempty"`
	ApPortConfig *SiteSettingApPortConfig `json:"ap_port_config,omitempty"`
	// enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and `device_updown_threshold` is ignored.
	ApUpdownThreshold NullableInt32 `json:"ap_updown_threshold,omitempty"`
	AutoPlacement *SiteSettingAutoPlacement `json:"auto_placement,omitempty"`
	AutoUpgrade *SiteSettingAutoUpgrade `json:"auto_upgrade,omitempty"`
	BlacklistUrl *string `json:"blacklist_url,omitempty"`
	BleConfig *BleConfig `json:"ble_config,omitempty"`
	// whether to enable ap auto config revert
	ConfigAutoRevert *bool `json:"config_auto_revert,omitempty"`
	ConfigPushPolicy *SiteSettingConfigPushPolicy `json:"config_push_policy,omitempty"`
	CreatedTime *float32 `json:"created_time,omitempty"`
	CriticalUrlMonitoring *SiteSettingCriticalUrlMonitoring `json:"critical_url_monitoring,omitempty"`
	// sending AP_DISCONNECTED event in device-updowns only if AP_CONNECTED is not seen within the threshold, in minutes
	DeviceUpdownThreshold *int32 `json:"device_updown_threshold,omitempty"`
	DhcpSnooping *DhcpSnooping `json:"dhcp_snooping,omitempty"`
	// if some system-default port usages are not desired - namely, ap / iot / uplink
	DisabledSystemDefinedPortUsages []string `json:"disabled_system_defined_port_usages,omitempty"`
	// Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
	DnsServers []string `json:"dns_servers,omitempty"`
	// Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
	DnsSuffix []string `json:"dns_suffix,omitempty"`
	Engagement *SiteEngagement `json:"engagement,omitempty"`
	EvpnOptions *EvpnOptions `json:"evpn_options,omitempty"`
	ExtraRoutes *map[string]ExtraRouteProperties `json:"extra_routes,omitempty"`
	// Property key is the destination CIDR (e.g. \"2a02:1234:420a:10c9::/64\")
	ExtraRoutes6 *map[string]ExtraRoute6Properties `json:"extra_routes6,omitempty"`
	// name/val pair objects for location engine to use
	Flags *map[string]string `json:"flags,omitempty"`
	ForSite *bool `json:"for_site,omitempty"`
	Gateway *GatewayTemplate `json:"gateway,omitempty"`
	// additional CLI commands to append to the generated Junos config  **Note**: no check is done
	GatewayAdditionalConfigCmds []string `json:"gateway_additional_config_cmds,omitempty"`
	GatewayMgmt *SiteSettingGatewayMgmt `json:"gateway_mgmt,omitempty"`
	// enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and `device_updown_threshold` is ignored.
	GatewayUpdownThreshold NullableInt32 `json:"gateway_updown_threshold,omitempty"`
	Id *string `json:"id,omitempty"`
	Led *ApLed `json:"led,omitempty"`
	MistNac *NetworkTemplateMistNac `json:"mist_nac,omitempty"`
	ModifiedTime *float32 `json:"modified_time,omitempty"`
	Mxedge *SiteSettingMxedge `json:"mxedge,omitempty"`
	MxedgeMgmt *MxedgeMgmt `json:"mxedge_mgmt,omitempty"`
	Mxtunnels *SiteMxtunnel `json:"mxtunnels,omitempty"`
	// Property key is network name
	Networks *map[string]SwitchNetwork `json:"networks,omitempty"`
	// list of NTP servers
	NtpServers []string `json:"ntp_servers,omitempty"`
	Occupancy *SiteOccupancyAnalytics `json:"occupancy,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	// OSPF Areas can be configured both in Site Level (Switch/Gateway Template) or Device (Switch/Gateway) Level
	OspfAreas *map[string]OspfAreas `json:"ospf_areas,omitempty"`
	PaloaltoNetworks *SiteSettingPaloaltoNetworks `json:"paloalto_networks,omitempty"`
	// whether to store the config on AP
	PersistConfigOnDevice *bool `json:"persist_config_on_device,omitempty"`
	// Property key is the port mirroring instance name port_mirroring can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
	PortMirrorings *map[string]SwitchPortMirroring `json:"port_mirrorings,omitempty"`
	PortUsages *map[string]SwitchPortUsage `json:"port_usages,omitempty"`
	Proxy *Proxy `json:"proxy,omitempty"`
	RadioConfig *ApRadio `json:"radio_config,omitempty"`
	RadiusConfig *RadiusConfig `json:"radius_config,omitempty"`
	RemoteSyslog *RemoteSyslog `json:"remote_syslog,omitempty"`
	// whether AP should periodically connect to BLE devices and report GATT device info (device name, manufacturer name, serial number, battery %, temperature, humidity)
	ReportGatt *bool `json:"report_gatt,omitempty"`
	Rogue *SiteRogue `json:"rogue,omitempty"`
	Rtsa *SiteSettingRtsa `json:"rtsa,omitempty"`
	SimpleAlert *SimpleAlert `json:"simple_alert,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	Skyatp *SiteSettingSkyatp `json:"skyatp,omitempty"`
	SnmpConfig *SnmpConfig `json:"snmp_config,omitempty"`
	SrxApp *SiteSettingSrxApp `json:"srx_app,omitempty"`
	// when limit_ssh_access = true in Org Setting, list of SSH public keys provided by Mist Support to install onto APs (see Org:Setting)
	SshKeys []string `json:"ssh_keys,omitempty"`
	Ssr *SiteSettingSsr `json:"ssr,omitempty"`
	StatusPortal *SiteSettingStatusPortal `json:"status_portal,omitempty"`
	Switch *NetworkTemplate `json:"switch,omitempty"`
	SwitchMatching *SwitchMatching `json:"switch_matching,omitempty"`
	SwitchMgmt *SwitchMgmt `json:"switch_mgmt,omitempty"`
	// enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and `device_updown_threshold` is ignored.
	SwitchUpdownThreshold NullableInt32 `json:"switch_updown_threshold,omitempty"`
	SyntheticTest *SyntheticTestConfig `json:"synthetic_test,omitempty"`
	// whether to track anonymous BLE assets (requires ‘track_asset’ enabled)
	TrackAnonymousDevices *bool `json:"track_anonymous_devices,omitempty"`
	TuntermMonitoring []TuntermMonitoringItem `json:"tunterm_monitoring,omitempty"`
	TuntermMonitoringDisabled *bool `json:"tunterm_monitoring_disabled,omitempty"`
	TuntermMulticastConfig *SiteSettingTuntermMulticastConfig `json:"tunterm_multicast_config,omitempty"`
	// a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
	Vars *map[string]string `json:"vars,omitempty"`
	Vna *SiteSettingVna `json:"vna,omitempty"`
	VrfConfig *VrfConfig `json:"vrf_config,omitempty"`
	// Property key is the network name
	VrfInstances *map[string]VrfInstance `json:"vrf_instances,omitempty"`
	// Property key is the vrrp group
	VrrpGroups *map[string]VrrpGroup `json:"vrrp_groups,omitempty"`
	WanVna *SiteSettingWanVna `json:"wan_vna,omitempty"`
	WatchedStationUrl *string `json:"watched_station_url,omitempty"`
	WhitelistUrl *string `json:"whitelist_url,omitempty"`
	Wids *SiteWids `json:"wids,omitempty"`
	Wifi *SiteWifi `json:"wifi,omitempty"`
	WiredVna *SiteSettingWiredVna `json:"wired_vna,omitempty"`
	ZoneOccupancyAlert *SiteZoneOccupancyAlert `json:"zone_occupancy_alert,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SiteSetting SiteSetting

// NewSiteSetting instantiates a new SiteSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteSetting() *SiteSetting {
	this := SiteSetting{}
	var configAutoRevert bool = false
	this.ConfigAutoRevert = &configAutoRevert
	var deviceUpdownThreshold int32 = 0
	this.DeviceUpdownThreshold = &deviceUpdownThreshold
	var persistConfigOnDevice bool = false
	this.PersistConfigOnDevice = &persistConfigOnDevice
	var reportGatt bool = false
	this.ReportGatt = &reportGatt
	var trackAnonymousDevices bool = false
	this.TrackAnonymousDevices = &trackAnonymousDevices
	var tuntermMonitoringDisabled bool = false
	this.TuntermMonitoringDisabled = &tuntermMonitoringDisabled
	return &this
}

// NewSiteSettingWithDefaults instantiates a new SiteSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteSettingWithDefaults() *SiteSetting {
	this := SiteSetting{}
	var configAutoRevert bool = false
	this.ConfigAutoRevert = &configAutoRevert
	var deviceUpdownThreshold int32 = 0
	this.DeviceUpdownThreshold = &deviceUpdownThreshold
	var persistConfigOnDevice bool = false
	this.PersistConfigOnDevice = &persistConfigOnDevice
	var reportGatt bool = false
	this.ReportGatt = &reportGatt
	var trackAnonymousDevices bool = false
	this.TrackAnonymousDevices = &trackAnonymousDevices
	var tuntermMonitoringDisabled bool = false
	this.TuntermMonitoringDisabled = &tuntermMonitoringDisabled
	return &this
}

// GetAclPolicies returns the AclPolicies field value if set, zero value otherwise.
func (o *SiteSetting) GetAclPolicies() []AclPolicy {
	if o == nil || IsNil(o.AclPolicies) {
		var ret []AclPolicy
		return ret
	}
	return o.AclPolicies
}

// GetAclPoliciesOk returns a tuple with the AclPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetAclPoliciesOk() ([]AclPolicy, bool) {
	if o == nil || IsNil(o.AclPolicies) {
		return nil, false
	}
	return o.AclPolicies, true
}

// HasAclPolicies returns a boolean if a field has been set.
func (o *SiteSetting) HasAclPolicies() bool {
	if o != nil && !IsNil(o.AclPolicies) {
		return true
	}

	return false
}

// SetAclPolicies gets a reference to the given []AclPolicy and assigns it to the AclPolicies field.
func (o *SiteSetting) SetAclPolicies(v []AclPolicy) {
	o.AclPolicies = v
}

// GetAclTags returns the AclTags field value if set, zero value otherwise.
func (o *SiteSetting) GetAclTags() map[string]AclTag {
	if o == nil || IsNil(o.AclTags) {
		var ret map[string]AclTag
		return ret
	}
	return *o.AclTags
}

// GetAclTagsOk returns a tuple with the AclTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetAclTagsOk() (*map[string]AclTag, bool) {
	if o == nil || IsNil(o.AclTags) {
		return nil, false
	}
	return o.AclTags, true
}

// HasAclTags returns a boolean if a field has been set.
func (o *SiteSetting) HasAclTags() bool {
	if o != nil && !IsNil(o.AclTags) {
		return true
	}

	return false
}

// SetAclTags gets a reference to the given map[string]AclTag and assigns it to the AclTags field.
func (o *SiteSetting) SetAclTags(v map[string]AclTag) {
	o.AclTags = &v
}

// GetAdditionalConfigCmds returns the AdditionalConfigCmds field value if set, zero value otherwise.
func (o *SiteSetting) GetAdditionalConfigCmds() []string {
	if o == nil || IsNil(o.AdditionalConfigCmds) {
		var ret []string
		return ret
	}
	return o.AdditionalConfigCmds
}

// GetAdditionalConfigCmdsOk returns a tuple with the AdditionalConfigCmds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetAdditionalConfigCmdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AdditionalConfigCmds) {
		return nil, false
	}
	return o.AdditionalConfigCmds, true
}

// HasAdditionalConfigCmds returns a boolean if a field has been set.
func (o *SiteSetting) HasAdditionalConfigCmds() bool {
	if o != nil && !IsNil(o.AdditionalConfigCmds) {
		return true
	}

	return false
}

// SetAdditionalConfigCmds gets a reference to the given []string and assigns it to the AdditionalConfigCmds field.
func (o *SiteSetting) SetAdditionalConfigCmds(v []string) {
	o.AdditionalConfigCmds = v
}

// GetAnalytic returns the Analytic field value if set, zero value otherwise.
func (o *SiteSetting) GetAnalytic() SiteSettingAnalytic {
	if o == nil || IsNil(o.Analytic) {
		var ret SiteSettingAnalytic
		return ret
	}
	return *o.Analytic
}

// GetAnalyticOk returns a tuple with the Analytic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetAnalyticOk() (*SiteSettingAnalytic, bool) {
	if o == nil || IsNil(o.Analytic) {
		return nil, false
	}
	return o.Analytic, true
}

// HasAnalytic returns a boolean if a field has been set.
func (o *SiteSetting) HasAnalytic() bool {
	if o != nil && !IsNil(o.Analytic) {
		return true
	}

	return false
}

// SetAnalytic gets a reference to the given SiteSettingAnalytic and assigns it to the Analytic field.
func (o *SiteSetting) SetAnalytic(v SiteSettingAnalytic) {
	o.Analytic = &v
}

// GetApMatching returns the ApMatching field value if set, zero value otherwise.
func (o *SiteSetting) GetApMatching() SiteSettingApMatching {
	if o == nil || IsNil(o.ApMatching) {
		var ret SiteSettingApMatching
		return ret
	}
	return *o.ApMatching
}

// GetApMatchingOk returns a tuple with the ApMatching field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetApMatchingOk() (*SiteSettingApMatching, bool) {
	if o == nil || IsNil(o.ApMatching) {
		return nil, false
	}
	return o.ApMatching, true
}

// HasApMatching returns a boolean if a field has been set.
func (o *SiteSetting) HasApMatching() bool {
	if o != nil && !IsNil(o.ApMatching) {
		return true
	}

	return false
}

// SetApMatching gets a reference to the given SiteSettingApMatching and assigns it to the ApMatching field.
func (o *SiteSetting) SetApMatching(v SiteSettingApMatching) {
	o.ApMatching = &v
}

// GetApPortConfig returns the ApPortConfig field value if set, zero value otherwise.
func (o *SiteSetting) GetApPortConfig() SiteSettingApPortConfig {
	if o == nil || IsNil(o.ApPortConfig) {
		var ret SiteSettingApPortConfig
		return ret
	}
	return *o.ApPortConfig
}

// GetApPortConfigOk returns a tuple with the ApPortConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetApPortConfigOk() (*SiteSettingApPortConfig, bool) {
	if o == nil || IsNil(o.ApPortConfig) {
		return nil, false
	}
	return o.ApPortConfig, true
}

// HasApPortConfig returns a boolean if a field has been set.
func (o *SiteSetting) HasApPortConfig() bool {
	if o != nil && !IsNil(o.ApPortConfig) {
		return true
	}

	return false
}

// SetApPortConfig gets a reference to the given SiteSettingApPortConfig and assigns it to the ApPortConfig field.
func (o *SiteSetting) SetApPortConfig(v SiteSettingApPortConfig) {
	o.ApPortConfig = &v
}

// GetApUpdownThreshold returns the ApUpdownThreshold field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteSetting) GetApUpdownThreshold() int32 {
	if o == nil || IsNil(o.ApUpdownThreshold.Get()) {
		var ret int32
		return ret
	}
	return *o.ApUpdownThreshold.Get()
}

// GetApUpdownThresholdOk returns a tuple with the ApUpdownThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteSetting) GetApUpdownThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApUpdownThreshold.Get(), o.ApUpdownThreshold.IsSet()
}

// HasApUpdownThreshold returns a boolean if a field has been set.
func (o *SiteSetting) HasApUpdownThreshold() bool {
	if o != nil && o.ApUpdownThreshold.IsSet() {
		return true
	}

	return false
}

// SetApUpdownThreshold gets a reference to the given NullableInt32 and assigns it to the ApUpdownThreshold field.
func (o *SiteSetting) SetApUpdownThreshold(v int32) {
	o.ApUpdownThreshold.Set(&v)
}
// SetApUpdownThresholdNil sets the value for ApUpdownThreshold to be an explicit nil
func (o *SiteSetting) SetApUpdownThresholdNil() {
	o.ApUpdownThreshold.Set(nil)
}

// UnsetApUpdownThreshold ensures that no value is present for ApUpdownThreshold, not even an explicit nil
func (o *SiteSetting) UnsetApUpdownThreshold() {
	o.ApUpdownThreshold.Unset()
}

// GetAutoPlacement returns the AutoPlacement field value if set, zero value otherwise.
func (o *SiteSetting) GetAutoPlacement() SiteSettingAutoPlacement {
	if o == nil || IsNil(o.AutoPlacement) {
		var ret SiteSettingAutoPlacement
		return ret
	}
	return *o.AutoPlacement
}

// GetAutoPlacementOk returns a tuple with the AutoPlacement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetAutoPlacementOk() (*SiteSettingAutoPlacement, bool) {
	if o == nil || IsNil(o.AutoPlacement) {
		return nil, false
	}
	return o.AutoPlacement, true
}

// HasAutoPlacement returns a boolean if a field has been set.
func (o *SiteSetting) HasAutoPlacement() bool {
	if o != nil && !IsNil(o.AutoPlacement) {
		return true
	}

	return false
}

// SetAutoPlacement gets a reference to the given SiteSettingAutoPlacement and assigns it to the AutoPlacement field.
func (o *SiteSetting) SetAutoPlacement(v SiteSettingAutoPlacement) {
	o.AutoPlacement = &v
}

// GetAutoUpgrade returns the AutoUpgrade field value if set, zero value otherwise.
func (o *SiteSetting) GetAutoUpgrade() SiteSettingAutoUpgrade {
	if o == nil || IsNil(o.AutoUpgrade) {
		var ret SiteSettingAutoUpgrade
		return ret
	}
	return *o.AutoUpgrade
}

// GetAutoUpgradeOk returns a tuple with the AutoUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetAutoUpgradeOk() (*SiteSettingAutoUpgrade, bool) {
	if o == nil || IsNil(o.AutoUpgrade) {
		return nil, false
	}
	return o.AutoUpgrade, true
}

// HasAutoUpgrade returns a boolean if a field has been set.
func (o *SiteSetting) HasAutoUpgrade() bool {
	if o != nil && !IsNil(o.AutoUpgrade) {
		return true
	}

	return false
}

// SetAutoUpgrade gets a reference to the given SiteSettingAutoUpgrade and assigns it to the AutoUpgrade field.
func (o *SiteSetting) SetAutoUpgrade(v SiteSettingAutoUpgrade) {
	o.AutoUpgrade = &v
}

// GetBlacklistUrl returns the BlacklistUrl field value if set, zero value otherwise.
func (o *SiteSetting) GetBlacklistUrl() string {
	if o == nil || IsNil(o.BlacklistUrl) {
		var ret string
		return ret
	}
	return *o.BlacklistUrl
}

// GetBlacklistUrlOk returns a tuple with the BlacklistUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetBlacklistUrlOk() (*string, bool) {
	if o == nil || IsNil(o.BlacklistUrl) {
		return nil, false
	}
	return o.BlacklistUrl, true
}

// HasBlacklistUrl returns a boolean if a field has been set.
func (o *SiteSetting) HasBlacklistUrl() bool {
	if o != nil && !IsNil(o.BlacklistUrl) {
		return true
	}

	return false
}

// SetBlacklistUrl gets a reference to the given string and assigns it to the BlacklistUrl field.
func (o *SiteSetting) SetBlacklistUrl(v string) {
	o.BlacklistUrl = &v
}

// GetBleConfig returns the BleConfig field value if set, zero value otherwise.
func (o *SiteSetting) GetBleConfig() BleConfig {
	if o == nil || IsNil(o.BleConfig) {
		var ret BleConfig
		return ret
	}
	return *o.BleConfig
}

// GetBleConfigOk returns a tuple with the BleConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetBleConfigOk() (*BleConfig, bool) {
	if o == nil || IsNil(o.BleConfig) {
		return nil, false
	}
	return o.BleConfig, true
}

// HasBleConfig returns a boolean if a field has been set.
func (o *SiteSetting) HasBleConfig() bool {
	if o != nil && !IsNil(o.BleConfig) {
		return true
	}

	return false
}

// SetBleConfig gets a reference to the given BleConfig and assigns it to the BleConfig field.
func (o *SiteSetting) SetBleConfig(v BleConfig) {
	o.BleConfig = &v
}

// GetConfigAutoRevert returns the ConfigAutoRevert field value if set, zero value otherwise.
func (o *SiteSetting) GetConfigAutoRevert() bool {
	if o == nil || IsNil(o.ConfigAutoRevert) {
		var ret bool
		return ret
	}
	return *o.ConfigAutoRevert
}

// GetConfigAutoRevertOk returns a tuple with the ConfigAutoRevert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetConfigAutoRevertOk() (*bool, bool) {
	if o == nil || IsNil(o.ConfigAutoRevert) {
		return nil, false
	}
	return o.ConfigAutoRevert, true
}

// HasConfigAutoRevert returns a boolean if a field has been set.
func (o *SiteSetting) HasConfigAutoRevert() bool {
	if o != nil && !IsNil(o.ConfigAutoRevert) {
		return true
	}

	return false
}

// SetConfigAutoRevert gets a reference to the given bool and assigns it to the ConfigAutoRevert field.
func (o *SiteSetting) SetConfigAutoRevert(v bool) {
	o.ConfigAutoRevert = &v
}

// GetConfigPushPolicy returns the ConfigPushPolicy field value if set, zero value otherwise.
func (o *SiteSetting) GetConfigPushPolicy() SiteSettingConfigPushPolicy {
	if o == nil || IsNil(o.ConfigPushPolicy) {
		var ret SiteSettingConfigPushPolicy
		return ret
	}
	return *o.ConfigPushPolicy
}

// GetConfigPushPolicyOk returns a tuple with the ConfigPushPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetConfigPushPolicyOk() (*SiteSettingConfigPushPolicy, bool) {
	if o == nil || IsNil(o.ConfigPushPolicy) {
		return nil, false
	}
	return o.ConfigPushPolicy, true
}

// HasConfigPushPolicy returns a boolean if a field has been set.
func (o *SiteSetting) HasConfigPushPolicy() bool {
	if o != nil && !IsNil(o.ConfigPushPolicy) {
		return true
	}

	return false
}

// SetConfigPushPolicy gets a reference to the given SiteSettingConfigPushPolicy and assigns it to the ConfigPushPolicy field.
func (o *SiteSetting) SetConfigPushPolicy(v SiteSettingConfigPushPolicy) {
	o.ConfigPushPolicy = &v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *SiteSetting) GetCreatedTime() float32 {
	if o == nil || IsNil(o.CreatedTime) {
		var ret float32
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetCreatedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *SiteSetting) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given float32 and assigns it to the CreatedTime field.
func (o *SiteSetting) SetCreatedTime(v float32) {
	o.CreatedTime = &v
}

// GetCriticalUrlMonitoring returns the CriticalUrlMonitoring field value if set, zero value otherwise.
func (o *SiteSetting) GetCriticalUrlMonitoring() SiteSettingCriticalUrlMonitoring {
	if o == nil || IsNil(o.CriticalUrlMonitoring) {
		var ret SiteSettingCriticalUrlMonitoring
		return ret
	}
	return *o.CriticalUrlMonitoring
}

// GetCriticalUrlMonitoringOk returns a tuple with the CriticalUrlMonitoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetCriticalUrlMonitoringOk() (*SiteSettingCriticalUrlMonitoring, bool) {
	if o == nil || IsNil(o.CriticalUrlMonitoring) {
		return nil, false
	}
	return o.CriticalUrlMonitoring, true
}

// HasCriticalUrlMonitoring returns a boolean if a field has been set.
func (o *SiteSetting) HasCriticalUrlMonitoring() bool {
	if o != nil && !IsNil(o.CriticalUrlMonitoring) {
		return true
	}

	return false
}

// SetCriticalUrlMonitoring gets a reference to the given SiteSettingCriticalUrlMonitoring and assigns it to the CriticalUrlMonitoring field.
func (o *SiteSetting) SetCriticalUrlMonitoring(v SiteSettingCriticalUrlMonitoring) {
	o.CriticalUrlMonitoring = &v
}

// GetDeviceUpdownThreshold returns the DeviceUpdownThreshold field value if set, zero value otherwise.
func (o *SiteSetting) GetDeviceUpdownThreshold() int32 {
	if o == nil || IsNil(o.DeviceUpdownThreshold) {
		var ret int32
		return ret
	}
	return *o.DeviceUpdownThreshold
}

// GetDeviceUpdownThresholdOk returns a tuple with the DeviceUpdownThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetDeviceUpdownThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.DeviceUpdownThreshold) {
		return nil, false
	}
	return o.DeviceUpdownThreshold, true
}

// HasDeviceUpdownThreshold returns a boolean if a field has been set.
func (o *SiteSetting) HasDeviceUpdownThreshold() bool {
	if o != nil && !IsNil(o.DeviceUpdownThreshold) {
		return true
	}

	return false
}

// SetDeviceUpdownThreshold gets a reference to the given int32 and assigns it to the DeviceUpdownThreshold field.
func (o *SiteSetting) SetDeviceUpdownThreshold(v int32) {
	o.DeviceUpdownThreshold = &v
}

// GetDhcpSnooping returns the DhcpSnooping field value if set, zero value otherwise.
func (o *SiteSetting) GetDhcpSnooping() DhcpSnooping {
	if o == nil || IsNil(o.DhcpSnooping) {
		var ret DhcpSnooping
		return ret
	}
	return *o.DhcpSnooping
}

// GetDhcpSnoopingOk returns a tuple with the DhcpSnooping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetDhcpSnoopingOk() (*DhcpSnooping, bool) {
	if o == nil || IsNil(o.DhcpSnooping) {
		return nil, false
	}
	return o.DhcpSnooping, true
}

// HasDhcpSnooping returns a boolean if a field has been set.
func (o *SiteSetting) HasDhcpSnooping() bool {
	if o != nil && !IsNil(o.DhcpSnooping) {
		return true
	}

	return false
}

// SetDhcpSnooping gets a reference to the given DhcpSnooping and assigns it to the DhcpSnooping field.
func (o *SiteSetting) SetDhcpSnooping(v DhcpSnooping) {
	o.DhcpSnooping = &v
}

// GetDisabledSystemDefinedPortUsages returns the DisabledSystemDefinedPortUsages field value if set, zero value otherwise.
func (o *SiteSetting) GetDisabledSystemDefinedPortUsages() []string {
	if o == nil || IsNil(o.DisabledSystemDefinedPortUsages) {
		var ret []string
		return ret
	}
	return o.DisabledSystemDefinedPortUsages
}

// GetDisabledSystemDefinedPortUsagesOk returns a tuple with the DisabledSystemDefinedPortUsages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetDisabledSystemDefinedPortUsagesOk() ([]string, bool) {
	if o == nil || IsNil(o.DisabledSystemDefinedPortUsages) {
		return nil, false
	}
	return o.DisabledSystemDefinedPortUsages, true
}

// HasDisabledSystemDefinedPortUsages returns a boolean if a field has been set.
func (o *SiteSetting) HasDisabledSystemDefinedPortUsages() bool {
	if o != nil && !IsNil(o.DisabledSystemDefinedPortUsages) {
		return true
	}

	return false
}

// SetDisabledSystemDefinedPortUsages gets a reference to the given []string and assigns it to the DisabledSystemDefinedPortUsages field.
func (o *SiteSetting) SetDisabledSystemDefinedPortUsages(v []string) {
	o.DisabledSystemDefinedPortUsages = v
}

// GetDnsServers returns the DnsServers field value if set, zero value otherwise.
func (o *SiteSetting) GetDnsServers() []string {
	if o == nil || IsNil(o.DnsServers) {
		var ret []string
		return ret
	}
	return o.DnsServers
}

// GetDnsServersOk returns a tuple with the DnsServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetDnsServersOk() ([]string, bool) {
	if o == nil || IsNil(o.DnsServers) {
		return nil, false
	}
	return o.DnsServers, true
}

// HasDnsServers returns a boolean if a field has been set.
func (o *SiteSetting) HasDnsServers() bool {
	if o != nil && !IsNil(o.DnsServers) {
		return true
	}

	return false
}

// SetDnsServers gets a reference to the given []string and assigns it to the DnsServers field.
func (o *SiteSetting) SetDnsServers(v []string) {
	o.DnsServers = v
}

// GetDnsSuffix returns the DnsSuffix field value if set, zero value otherwise.
func (o *SiteSetting) GetDnsSuffix() []string {
	if o == nil || IsNil(o.DnsSuffix) {
		var ret []string
		return ret
	}
	return o.DnsSuffix
}

// GetDnsSuffixOk returns a tuple with the DnsSuffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetDnsSuffixOk() ([]string, bool) {
	if o == nil || IsNil(o.DnsSuffix) {
		return nil, false
	}
	return o.DnsSuffix, true
}

// HasDnsSuffix returns a boolean if a field has been set.
func (o *SiteSetting) HasDnsSuffix() bool {
	if o != nil && !IsNil(o.DnsSuffix) {
		return true
	}

	return false
}

// SetDnsSuffix gets a reference to the given []string and assigns it to the DnsSuffix field.
func (o *SiteSetting) SetDnsSuffix(v []string) {
	o.DnsSuffix = v
}

// GetEngagement returns the Engagement field value if set, zero value otherwise.
func (o *SiteSetting) GetEngagement() SiteEngagement {
	if o == nil || IsNil(o.Engagement) {
		var ret SiteEngagement
		return ret
	}
	return *o.Engagement
}

// GetEngagementOk returns a tuple with the Engagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetEngagementOk() (*SiteEngagement, bool) {
	if o == nil || IsNil(o.Engagement) {
		return nil, false
	}
	return o.Engagement, true
}

// HasEngagement returns a boolean if a field has been set.
func (o *SiteSetting) HasEngagement() bool {
	if o != nil && !IsNil(o.Engagement) {
		return true
	}

	return false
}

// SetEngagement gets a reference to the given SiteEngagement and assigns it to the Engagement field.
func (o *SiteSetting) SetEngagement(v SiteEngagement) {
	o.Engagement = &v
}

// GetEvpnOptions returns the EvpnOptions field value if set, zero value otherwise.
func (o *SiteSetting) GetEvpnOptions() EvpnOptions {
	if o == nil || IsNil(o.EvpnOptions) {
		var ret EvpnOptions
		return ret
	}
	return *o.EvpnOptions
}

// GetEvpnOptionsOk returns a tuple with the EvpnOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetEvpnOptionsOk() (*EvpnOptions, bool) {
	if o == nil || IsNil(o.EvpnOptions) {
		return nil, false
	}
	return o.EvpnOptions, true
}

// HasEvpnOptions returns a boolean if a field has been set.
func (o *SiteSetting) HasEvpnOptions() bool {
	if o != nil && !IsNil(o.EvpnOptions) {
		return true
	}

	return false
}

// SetEvpnOptions gets a reference to the given EvpnOptions and assigns it to the EvpnOptions field.
func (o *SiteSetting) SetEvpnOptions(v EvpnOptions) {
	o.EvpnOptions = &v
}

// GetExtraRoutes returns the ExtraRoutes field value if set, zero value otherwise.
func (o *SiteSetting) GetExtraRoutes() map[string]ExtraRouteProperties {
	if o == nil || IsNil(o.ExtraRoutes) {
		var ret map[string]ExtraRouteProperties
		return ret
	}
	return *o.ExtraRoutes
}

// GetExtraRoutesOk returns a tuple with the ExtraRoutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetExtraRoutesOk() (*map[string]ExtraRouteProperties, bool) {
	if o == nil || IsNil(o.ExtraRoutes) {
		return nil, false
	}
	return o.ExtraRoutes, true
}

// HasExtraRoutes returns a boolean if a field has been set.
func (o *SiteSetting) HasExtraRoutes() bool {
	if o != nil && !IsNil(o.ExtraRoutes) {
		return true
	}

	return false
}

// SetExtraRoutes gets a reference to the given map[string]ExtraRouteProperties and assigns it to the ExtraRoutes field.
func (o *SiteSetting) SetExtraRoutes(v map[string]ExtraRouteProperties) {
	o.ExtraRoutes = &v
}

// GetExtraRoutes6 returns the ExtraRoutes6 field value if set, zero value otherwise.
func (o *SiteSetting) GetExtraRoutes6() map[string]ExtraRoute6Properties {
	if o == nil || IsNil(o.ExtraRoutes6) {
		var ret map[string]ExtraRoute6Properties
		return ret
	}
	return *o.ExtraRoutes6
}

// GetExtraRoutes6Ok returns a tuple with the ExtraRoutes6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetExtraRoutes6Ok() (*map[string]ExtraRoute6Properties, bool) {
	if o == nil || IsNil(o.ExtraRoutes6) {
		return nil, false
	}
	return o.ExtraRoutes6, true
}

// HasExtraRoutes6 returns a boolean if a field has been set.
func (o *SiteSetting) HasExtraRoutes6() bool {
	if o != nil && !IsNil(o.ExtraRoutes6) {
		return true
	}

	return false
}

// SetExtraRoutes6 gets a reference to the given map[string]ExtraRoute6Properties and assigns it to the ExtraRoutes6 field.
func (o *SiteSetting) SetExtraRoutes6(v map[string]ExtraRoute6Properties) {
	o.ExtraRoutes6 = &v
}

// GetFlags returns the Flags field value if set, zero value otherwise.
func (o *SiteSetting) GetFlags() map[string]string {
	if o == nil || IsNil(o.Flags) {
		var ret map[string]string
		return ret
	}
	return *o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetFlagsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Flags) {
		return nil, false
	}
	return o.Flags, true
}

// HasFlags returns a boolean if a field has been set.
func (o *SiteSetting) HasFlags() bool {
	if o != nil && !IsNil(o.Flags) {
		return true
	}

	return false
}

// SetFlags gets a reference to the given map[string]string and assigns it to the Flags field.
func (o *SiteSetting) SetFlags(v map[string]string) {
	o.Flags = &v
}

// GetForSite returns the ForSite field value if set, zero value otherwise.
func (o *SiteSetting) GetForSite() bool {
	if o == nil || IsNil(o.ForSite) {
		var ret bool
		return ret
	}
	return *o.ForSite
}

// GetForSiteOk returns a tuple with the ForSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetForSiteOk() (*bool, bool) {
	if o == nil || IsNil(o.ForSite) {
		return nil, false
	}
	return o.ForSite, true
}

// HasForSite returns a boolean if a field has been set.
func (o *SiteSetting) HasForSite() bool {
	if o != nil && !IsNil(o.ForSite) {
		return true
	}

	return false
}

// SetForSite gets a reference to the given bool and assigns it to the ForSite field.
func (o *SiteSetting) SetForSite(v bool) {
	o.ForSite = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *SiteSetting) GetGateway() GatewayTemplate {
	if o == nil || IsNil(o.Gateway) {
		var ret GatewayTemplate
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetGatewayOk() (*GatewayTemplate, bool) {
	if o == nil || IsNil(o.Gateway) {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *SiteSetting) HasGateway() bool {
	if o != nil && !IsNil(o.Gateway) {
		return true
	}

	return false
}

// SetGateway gets a reference to the given GatewayTemplate and assigns it to the Gateway field.
func (o *SiteSetting) SetGateway(v GatewayTemplate) {
	o.Gateway = &v
}

// GetGatewayAdditionalConfigCmds returns the GatewayAdditionalConfigCmds field value if set, zero value otherwise.
func (o *SiteSetting) GetGatewayAdditionalConfigCmds() []string {
	if o == nil || IsNil(o.GatewayAdditionalConfigCmds) {
		var ret []string
		return ret
	}
	return o.GatewayAdditionalConfigCmds
}

// GetGatewayAdditionalConfigCmdsOk returns a tuple with the GatewayAdditionalConfigCmds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetGatewayAdditionalConfigCmdsOk() ([]string, bool) {
	if o == nil || IsNil(o.GatewayAdditionalConfigCmds) {
		return nil, false
	}
	return o.GatewayAdditionalConfigCmds, true
}

// HasGatewayAdditionalConfigCmds returns a boolean if a field has been set.
func (o *SiteSetting) HasGatewayAdditionalConfigCmds() bool {
	if o != nil && !IsNil(o.GatewayAdditionalConfigCmds) {
		return true
	}

	return false
}

// SetGatewayAdditionalConfigCmds gets a reference to the given []string and assigns it to the GatewayAdditionalConfigCmds field.
func (o *SiteSetting) SetGatewayAdditionalConfigCmds(v []string) {
	o.GatewayAdditionalConfigCmds = v
}

// GetGatewayMgmt returns the GatewayMgmt field value if set, zero value otherwise.
func (o *SiteSetting) GetGatewayMgmt() SiteSettingGatewayMgmt {
	if o == nil || IsNil(o.GatewayMgmt) {
		var ret SiteSettingGatewayMgmt
		return ret
	}
	return *o.GatewayMgmt
}

// GetGatewayMgmtOk returns a tuple with the GatewayMgmt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetGatewayMgmtOk() (*SiteSettingGatewayMgmt, bool) {
	if o == nil || IsNil(o.GatewayMgmt) {
		return nil, false
	}
	return o.GatewayMgmt, true
}

// HasGatewayMgmt returns a boolean if a field has been set.
func (o *SiteSetting) HasGatewayMgmt() bool {
	if o != nil && !IsNil(o.GatewayMgmt) {
		return true
	}

	return false
}

// SetGatewayMgmt gets a reference to the given SiteSettingGatewayMgmt and assigns it to the GatewayMgmt field.
func (o *SiteSetting) SetGatewayMgmt(v SiteSettingGatewayMgmt) {
	o.GatewayMgmt = &v
}

// GetGatewayUpdownThreshold returns the GatewayUpdownThreshold field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteSetting) GetGatewayUpdownThreshold() int32 {
	if o == nil || IsNil(o.GatewayUpdownThreshold.Get()) {
		var ret int32
		return ret
	}
	return *o.GatewayUpdownThreshold.Get()
}

// GetGatewayUpdownThresholdOk returns a tuple with the GatewayUpdownThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteSetting) GetGatewayUpdownThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.GatewayUpdownThreshold.Get(), o.GatewayUpdownThreshold.IsSet()
}

// HasGatewayUpdownThreshold returns a boolean if a field has been set.
func (o *SiteSetting) HasGatewayUpdownThreshold() bool {
	if o != nil && o.GatewayUpdownThreshold.IsSet() {
		return true
	}

	return false
}

// SetGatewayUpdownThreshold gets a reference to the given NullableInt32 and assigns it to the GatewayUpdownThreshold field.
func (o *SiteSetting) SetGatewayUpdownThreshold(v int32) {
	o.GatewayUpdownThreshold.Set(&v)
}
// SetGatewayUpdownThresholdNil sets the value for GatewayUpdownThreshold to be an explicit nil
func (o *SiteSetting) SetGatewayUpdownThresholdNil() {
	o.GatewayUpdownThreshold.Set(nil)
}

// UnsetGatewayUpdownThreshold ensures that no value is present for GatewayUpdownThreshold, not even an explicit nil
func (o *SiteSetting) UnsetGatewayUpdownThreshold() {
	o.GatewayUpdownThreshold.Unset()
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SiteSetting) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SiteSetting) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SiteSetting) SetId(v string) {
	o.Id = &v
}

// GetLed returns the Led field value if set, zero value otherwise.
func (o *SiteSetting) GetLed() ApLed {
	if o == nil || IsNil(o.Led) {
		var ret ApLed
		return ret
	}
	return *o.Led
}

// GetLedOk returns a tuple with the Led field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetLedOk() (*ApLed, bool) {
	if o == nil || IsNil(o.Led) {
		return nil, false
	}
	return o.Led, true
}

// HasLed returns a boolean if a field has been set.
func (o *SiteSetting) HasLed() bool {
	if o != nil && !IsNil(o.Led) {
		return true
	}

	return false
}

// SetLed gets a reference to the given ApLed and assigns it to the Led field.
func (o *SiteSetting) SetLed(v ApLed) {
	o.Led = &v
}

// GetMistNac returns the MistNac field value if set, zero value otherwise.
func (o *SiteSetting) GetMistNac() NetworkTemplateMistNac {
	if o == nil || IsNil(o.MistNac) {
		var ret NetworkTemplateMistNac
		return ret
	}
	return *o.MistNac
}

// GetMistNacOk returns a tuple with the MistNac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetMistNacOk() (*NetworkTemplateMistNac, bool) {
	if o == nil || IsNil(o.MistNac) {
		return nil, false
	}
	return o.MistNac, true
}

// HasMistNac returns a boolean if a field has been set.
func (o *SiteSetting) HasMistNac() bool {
	if o != nil && !IsNil(o.MistNac) {
		return true
	}

	return false
}

// SetMistNac gets a reference to the given NetworkTemplateMistNac and assigns it to the MistNac field.
func (o *SiteSetting) SetMistNac(v NetworkTemplateMistNac) {
	o.MistNac = &v
}

// GetModifiedTime returns the ModifiedTime field value if set, zero value otherwise.
func (o *SiteSetting) GetModifiedTime() float32 {
	if o == nil || IsNil(o.ModifiedTime) {
		var ret float32
		return ret
	}
	return *o.ModifiedTime
}

// GetModifiedTimeOk returns a tuple with the ModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetModifiedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.ModifiedTime) {
		return nil, false
	}
	return o.ModifiedTime, true
}

// HasModifiedTime returns a boolean if a field has been set.
func (o *SiteSetting) HasModifiedTime() bool {
	if o != nil && !IsNil(o.ModifiedTime) {
		return true
	}

	return false
}

// SetModifiedTime gets a reference to the given float32 and assigns it to the ModifiedTime field.
func (o *SiteSetting) SetModifiedTime(v float32) {
	o.ModifiedTime = &v
}

// GetMxedge returns the Mxedge field value if set, zero value otherwise.
func (o *SiteSetting) GetMxedge() SiteSettingMxedge {
	if o == nil || IsNil(o.Mxedge) {
		var ret SiteSettingMxedge
		return ret
	}
	return *o.Mxedge
}

// GetMxedgeOk returns a tuple with the Mxedge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetMxedgeOk() (*SiteSettingMxedge, bool) {
	if o == nil || IsNil(o.Mxedge) {
		return nil, false
	}
	return o.Mxedge, true
}

// HasMxedge returns a boolean if a field has been set.
func (o *SiteSetting) HasMxedge() bool {
	if o != nil && !IsNil(o.Mxedge) {
		return true
	}

	return false
}

// SetMxedge gets a reference to the given SiteSettingMxedge and assigns it to the Mxedge field.
func (o *SiteSetting) SetMxedge(v SiteSettingMxedge) {
	o.Mxedge = &v
}

// GetMxedgeMgmt returns the MxedgeMgmt field value if set, zero value otherwise.
func (o *SiteSetting) GetMxedgeMgmt() MxedgeMgmt {
	if o == nil || IsNil(o.MxedgeMgmt) {
		var ret MxedgeMgmt
		return ret
	}
	return *o.MxedgeMgmt
}

// GetMxedgeMgmtOk returns a tuple with the MxedgeMgmt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetMxedgeMgmtOk() (*MxedgeMgmt, bool) {
	if o == nil || IsNil(o.MxedgeMgmt) {
		return nil, false
	}
	return o.MxedgeMgmt, true
}

// HasMxedgeMgmt returns a boolean if a field has been set.
func (o *SiteSetting) HasMxedgeMgmt() bool {
	if o != nil && !IsNil(o.MxedgeMgmt) {
		return true
	}

	return false
}

// SetMxedgeMgmt gets a reference to the given MxedgeMgmt and assigns it to the MxedgeMgmt field.
func (o *SiteSetting) SetMxedgeMgmt(v MxedgeMgmt) {
	o.MxedgeMgmt = &v
}

// GetMxtunnels returns the Mxtunnels field value if set, zero value otherwise.
func (o *SiteSetting) GetMxtunnels() SiteMxtunnel {
	if o == nil || IsNil(o.Mxtunnels) {
		var ret SiteMxtunnel
		return ret
	}
	return *o.Mxtunnels
}

// GetMxtunnelsOk returns a tuple with the Mxtunnels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetMxtunnelsOk() (*SiteMxtunnel, bool) {
	if o == nil || IsNil(o.Mxtunnels) {
		return nil, false
	}
	return o.Mxtunnels, true
}

// HasMxtunnels returns a boolean if a field has been set.
func (o *SiteSetting) HasMxtunnels() bool {
	if o != nil && !IsNil(o.Mxtunnels) {
		return true
	}

	return false
}

// SetMxtunnels gets a reference to the given SiteMxtunnel and assigns it to the Mxtunnels field.
func (o *SiteSetting) SetMxtunnels(v SiteMxtunnel) {
	o.Mxtunnels = &v
}

// GetNetworks returns the Networks field value if set, zero value otherwise.
func (o *SiteSetting) GetNetworks() map[string]SwitchNetwork {
	if o == nil || IsNil(o.Networks) {
		var ret map[string]SwitchNetwork
		return ret
	}
	return *o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetNetworksOk() (*map[string]SwitchNetwork, bool) {
	if o == nil || IsNil(o.Networks) {
		return nil, false
	}
	return o.Networks, true
}

// HasNetworks returns a boolean if a field has been set.
func (o *SiteSetting) HasNetworks() bool {
	if o != nil && !IsNil(o.Networks) {
		return true
	}

	return false
}

// SetNetworks gets a reference to the given map[string]SwitchNetwork and assigns it to the Networks field.
func (o *SiteSetting) SetNetworks(v map[string]SwitchNetwork) {
	o.Networks = &v
}

// GetNtpServers returns the NtpServers field value if set, zero value otherwise.
func (o *SiteSetting) GetNtpServers() []string {
	if o == nil || IsNil(o.NtpServers) {
		var ret []string
		return ret
	}
	return o.NtpServers
}

// GetNtpServersOk returns a tuple with the NtpServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetNtpServersOk() ([]string, bool) {
	if o == nil || IsNil(o.NtpServers) {
		return nil, false
	}
	return o.NtpServers, true
}

// HasNtpServers returns a boolean if a field has been set.
func (o *SiteSetting) HasNtpServers() bool {
	if o != nil && !IsNil(o.NtpServers) {
		return true
	}

	return false
}

// SetNtpServers gets a reference to the given []string and assigns it to the NtpServers field.
func (o *SiteSetting) SetNtpServers(v []string) {
	o.NtpServers = v
}

// GetOccupancy returns the Occupancy field value if set, zero value otherwise.
func (o *SiteSetting) GetOccupancy() SiteOccupancyAnalytics {
	if o == nil || IsNil(o.Occupancy) {
		var ret SiteOccupancyAnalytics
		return ret
	}
	return *o.Occupancy
}

// GetOccupancyOk returns a tuple with the Occupancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetOccupancyOk() (*SiteOccupancyAnalytics, bool) {
	if o == nil || IsNil(o.Occupancy) {
		return nil, false
	}
	return o.Occupancy, true
}

// HasOccupancy returns a boolean if a field has been set.
func (o *SiteSetting) HasOccupancy() bool {
	if o != nil && !IsNil(o.Occupancy) {
		return true
	}

	return false
}

// SetOccupancy gets a reference to the given SiteOccupancyAnalytics and assigns it to the Occupancy field.
func (o *SiteSetting) SetOccupancy(v SiteOccupancyAnalytics) {
	o.Occupancy = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *SiteSetting) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *SiteSetting) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *SiteSetting) SetOrgId(v string) {
	o.OrgId = &v
}

// GetOspfAreas returns the OspfAreas field value if set, zero value otherwise.
func (o *SiteSetting) GetOspfAreas() map[string]OspfAreas {
	if o == nil || IsNil(o.OspfAreas) {
		var ret map[string]OspfAreas
		return ret
	}
	return *o.OspfAreas
}

// GetOspfAreasOk returns a tuple with the OspfAreas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetOspfAreasOk() (*map[string]OspfAreas, bool) {
	if o == nil || IsNil(o.OspfAreas) {
		return nil, false
	}
	return o.OspfAreas, true
}

// HasOspfAreas returns a boolean if a field has been set.
func (o *SiteSetting) HasOspfAreas() bool {
	if o != nil && !IsNil(o.OspfAreas) {
		return true
	}

	return false
}

// SetOspfAreas gets a reference to the given map[string]OspfAreas and assigns it to the OspfAreas field.
func (o *SiteSetting) SetOspfAreas(v map[string]OspfAreas) {
	o.OspfAreas = &v
}

// GetPaloaltoNetworks returns the PaloaltoNetworks field value if set, zero value otherwise.
func (o *SiteSetting) GetPaloaltoNetworks() SiteSettingPaloaltoNetworks {
	if o == nil || IsNil(o.PaloaltoNetworks) {
		var ret SiteSettingPaloaltoNetworks
		return ret
	}
	return *o.PaloaltoNetworks
}

// GetPaloaltoNetworksOk returns a tuple with the PaloaltoNetworks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetPaloaltoNetworksOk() (*SiteSettingPaloaltoNetworks, bool) {
	if o == nil || IsNil(o.PaloaltoNetworks) {
		return nil, false
	}
	return o.PaloaltoNetworks, true
}

// HasPaloaltoNetworks returns a boolean if a field has been set.
func (o *SiteSetting) HasPaloaltoNetworks() bool {
	if o != nil && !IsNil(o.PaloaltoNetworks) {
		return true
	}

	return false
}

// SetPaloaltoNetworks gets a reference to the given SiteSettingPaloaltoNetworks and assigns it to the PaloaltoNetworks field.
func (o *SiteSetting) SetPaloaltoNetworks(v SiteSettingPaloaltoNetworks) {
	o.PaloaltoNetworks = &v
}

// GetPersistConfigOnDevice returns the PersistConfigOnDevice field value if set, zero value otherwise.
func (o *SiteSetting) GetPersistConfigOnDevice() bool {
	if o == nil || IsNil(o.PersistConfigOnDevice) {
		var ret bool
		return ret
	}
	return *o.PersistConfigOnDevice
}

// GetPersistConfigOnDeviceOk returns a tuple with the PersistConfigOnDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetPersistConfigOnDeviceOk() (*bool, bool) {
	if o == nil || IsNil(o.PersistConfigOnDevice) {
		return nil, false
	}
	return o.PersistConfigOnDevice, true
}

// HasPersistConfigOnDevice returns a boolean if a field has been set.
func (o *SiteSetting) HasPersistConfigOnDevice() bool {
	if o != nil && !IsNil(o.PersistConfigOnDevice) {
		return true
	}

	return false
}

// SetPersistConfigOnDevice gets a reference to the given bool and assigns it to the PersistConfigOnDevice field.
func (o *SiteSetting) SetPersistConfigOnDevice(v bool) {
	o.PersistConfigOnDevice = &v
}

// GetPortMirrorings returns the PortMirrorings field value if set, zero value otherwise.
func (o *SiteSetting) GetPortMirrorings() map[string]SwitchPortMirroring {
	if o == nil || IsNil(o.PortMirrorings) {
		var ret map[string]SwitchPortMirroring
		return ret
	}
	return *o.PortMirrorings
}

// GetPortMirroringsOk returns a tuple with the PortMirrorings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetPortMirroringsOk() (*map[string]SwitchPortMirroring, bool) {
	if o == nil || IsNil(o.PortMirrorings) {
		return nil, false
	}
	return o.PortMirrorings, true
}

// HasPortMirrorings returns a boolean if a field has been set.
func (o *SiteSetting) HasPortMirrorings() bool {
	if o != nil && !IsNil(o.PortMirrorings) {
		return true
	}

	return false
}

// SetPortMirrorings gets a reference to the given map[string]SwitchPortMirroring and assigns it to the PortMirrorings field.
func (o *SiteSetting) SetPortMirrorings(v map[string]SwitchPortMirroring) {
	o.PortMirrorings = &v
}

// GetPortUsages returns the PortUsages field value if set, zero value otherwise.
func (o *SiteSetting) GetPortUsages() map[string]SwitchPortUsage {
	if o == nil || IsNil(o.PortUsages) {
		var ret map[string]SwitchPortUsage
		return ret
	}
	return *o.PortUsages
}

// GetPortUsagesOk returns a tuple with the PortUsages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetPortUsagesOk() (*map[string]SwitchPortUsage, bool) {
	if o == nil || IsNil(o.PortUsages) {
		return nil, false
	}
	return o.PortUsages, true
}

// HasPortUsages returns a boolean if a field has been set.
func (o *SiteSetting) HasPortUsages() bool {
	if o != nil && !IsNil(o.PortUsages) {
		return true
	}

	return false
}

// SetPortUsages gets a reference to the given map[string]SwitchPortUsage and assigns it to the PortUsages field.
func (o *SiteSetting) SetPortUsages(v map[string]SwitchPortUsage) {
	o.PortUsages = &v
}

// GetProxy returns the Proxy field value if set, zero value otherwise.
func (o *SiteSetting) GetProxy() Proxy {
	if o == nil || IsNil(o.Proxy) {
		var ret Proxy
		return ret
	}
	return *o.Proxy
}

// GetProxyOk returns a tuple with the Proxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetProxyOk() (*Proxy, bool) {
	if o == nil || IsNil(o.Proxy) {
		return nil, false
	}
	return o.Proxy, true
}

// HasProxy returns a boolean if a field has been set.
func (o *SiteSetting) HasProxy() bool {
	if o != nil && !IsNil(o.Proxy) {
		return true
	}

	return false
}

// SetProxy gets a reference to the given Proxy and assigns it to the Proxy field.
func (o *SiteSetting) SetProxy(v Proxy) {
	o.Proxy = &v
}

// GetRadioConfig returns the RadioConfig field value if set, zero value otherwise.
func (o *SiteSetting) GetRadioConfig() ApRadio {
	if o == nil || IsNil(o.RadioConfig) {
		var ret ApRadio
		return ret
	}
	return *o.RadioConfig
}

// GetRadioConfigOk returns a tuple with the RadioConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetRadioConfigOk() (*ApRadio, bool) {
	if o == nil || IsNil(o.RadioConfig) {
		return nil, false
	}
	return o.RadioConfig, true
}

// HasRadioConfig returns a boolean if a field has been set.
func (o *SiteSetting) HasRadioConfig() bool {
	if o != nil && !IsNil(o.RadioConfig) {
		return true
	}

	return false
}

// SetRadioConfig gets a reference to the given ApRadio and assigns it to the RadioConfig field.
func (o *SiteSetting) SetRadioConfig(v ApRadio) {
	o.RadioConfig = &v
}

// GetRadiusConfig returns the RadiusConfig field value if set, zero value otherwise.
func (o *SiteSetting) GetRadiusConfig() RadiusConfig {
	if o == nil || IsNil(o.RadiusConfig) {
		var ret RadiusConfig
		return ret
	}
	return *o.RadiusConfig
}

// GetRadiusConfigOk returns a tuple with the RadiusConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetRadiusConfigOk() (*RadiusConfig, bool) {
	if o == nil || IsNil(o.RadiusConfig) {
		return nil, false
	}
	return o.RadiusConfig, true
}

// HasRadiusConfig returns a boolean if a field has been set.
func (o *SiteSetting) HasRadiusConfig() bool {
	if o != nil && !IsNil(o.RadiusConfig) {
		return true
	}

	return false
}

// SetRadiusConfig gets a reference to the given RadiusConfig and assigns it to the RadiusConfig field.
func (o *SiteSetting) SetRadiusConfig(v RadiusConfig) {
	o.RadiusConfig = &v
}

// GetRemoteSyslog returns the RemoteSyslog field value if set, zero value otherwise.
func (o *SiteSetting) GetRemoteSyslog() RemoteSyslog {
	if o == nil || IsNil(o.RemoteSyslog) {
		var ret RemoteSyslog
		return ret
	}
	return *o.RemoteSyslog
}

// GetRemoteSyslogOk returns a tuple with the RemoteSyslog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetRemoteSyslogOk() (*RemoteSyslog, bool) {
	if o == nil || IsNil(o.RemoteSyslog) {
		return nil, false
	}
	return o.RemoteSyslog, true
}

// HasRemoteSyslog returns a boolean if a field has been set.
func (o *SiteSetting) HasRemoteSyslog() bool {
	if o != nil && !IsNil(o.RemoteSyslog) {
		return true
	}

	return false
}

// SetRemoteSyslog gets a reference to the given RemoteSyslog and assigns it to the RemoteSyslog field.
func (o *SiteSetting) SetRemoteSyslog(v RemoteSyslog) {
	o.RemoteSyslog = &v
}

// GetReportGatt returns the ReportGatt field value if set, zero value otherwise.
func (o *SiteSetting) GetReportGatt() bool {
	if o == nil || IsNil(o.ReportGatt) {
		var ret bool
		return ret
	}
	return *o.ReportGatt
}

// GetReportGattOk returns a tuple with the ReportGatt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetReportGattOk() (*bool, bool) {
	if o == nil || IsNil(o.ReportGatt) {
		return nil, false
	}
	return o.ReportGatt, true
}

// HasReportGatt returns a boolean if a field has been set.
func (o *SiteSetting) HasReportGatt() bool {
	if o != nil && !IsNil(o.ReportGatt) {
		return true
	}

	return false
}

// SetReportGatt gets a reference to the given bool and assigns it to the ReportGatt field.
func (o *SiteSetting) SetReportGatt(v bool) {
	o.ReportGatt = &v
}

// GetRogue returns the Rogue field value if set, zero value otherwise.
func (o *SiteSetting) GetRogue() SiteRogue {
	if o == nil || IsNil(o.Rogue) {
		var ret SiteRogue
		return ret
	}
	return *o.Rogue
}

// GetRogueOk returns a tuple with the Rogue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetRogueOk() (*SiteRogue, bool) {
	if o == nil || IsNil(o.Rogue) {
		return nil, false
	}
	return o.Rogue, true
}

// HasRogue returns a boolean if a field has been set.
func (o *SiteSetting) HasRogue() bool {
	if o != nil && !IsNil(o.Rogue) {
		return true
	}

	return false
}

// SetRogue gets a reference to the given SiteRogue and assigns it to the Rogue field.
func (o *SiteSetting) SetRogue(v SiteRogue) {
	o.Rogue = &v
}

// GetRtsa returns the Rtsa field value if set, zero value otherwise.
func (o *SiteSetting) GetRtsa() SiteSettingRtsa {
	if o == nil || IsNil(o.Rtsa) {
		var ret SiteSettingRtsa
		return ret
	}
	return *o.Rtsa
}

// GetRtsaOk returns a tuple with the Rtsa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetRtsaOk() (*SiteSettingRtsa, bool) {
	if o == nil || IsNil(o.Rtsa) {
		return nil, false
	}
	return o.Rtsa, true
}

// HasRtsa returns a boolean if a field has been set.
func (o *SiteSetting) HasRtsa() bool {
	if o != nil && !IsNil(o.Rtsa) {
		return true
	}

	return false
}

// SetRtsa gets a reference to the given SiteSettingRtsa and assigns it to the Rtsa field.
func (o *SiteSetting) SetRtsa(v SiteSettingRtsa) {
	o.Rtsa = &v
}

// GetSimpleAlert returns the SimpleAlert field value if set, zero value otherwise.
func (o *SiteSetting) GetSimpleAlert() SimpleAlert {
	if o == nil || IsNil(o.SimpleAlert) {
		var ret SimpleAlert
		return ret
	}
	return *o.SimpleAlert
}

// GetSimpleAlertOk returns a tuple with the SimpleAlert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetSimpleAlertOk() (*SimpleAlert, bool) {
	if o == nil || IsNil(o.SimpleAlert) {
		return nil, false
	}
	return o.SimpleAlert, true
}

// HasSimpleAlert returns a boolean if a field has been set.
func (o *SiteSetting) HasSimpleAlert() bool {
	if o != nil && !IsNil(o.SimpleAlert) {
		return true
	}

	return false
}

// SetSimpleAlert gets a reference to the given SimpleAlert and assigns it to the SimpleAlert field.
func (o *SiteSetting) SetSimpleAlert(v SimpleAlert) {
	o.SimpleAlert = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *SiteSetting) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *SiteSetting) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *SiteSetting) SetSiteId(v string) {
	o.SiteId = &v
}

// GetSkyatp returns the Skyatp field value if set, zero value otherwise.
func (o *SiteSetting) GetSkyatp() SiteSettingSkyatp {
	if o == nil || IsNil(o.Skyatp) {
		var ret SiteSettingSkyatp
		return ret
	}
	return *o.Skyatp
}

// GetSkyatpOk returns a tuple with the Skyatp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetSkyatpOk() (*SiteSettingSkyatp, bool) {
	if o == nil || IsNil(o.Skyatp) {
		return nil, false
	}
	return o.Skyatp, true
}

// HasSkyatp returns a boolean if a field has been set.
func (o *SiteSetting) HasSkyatp() bool {
	if o != nil && !IsNil(o.Skyatp) {
		return true
	}

	return false
}

// SetSkyatp gets a reference to the given SiteSettingSkyatp and assigns it to the Skyatp field.
func (o *SiteSetting) SetSkyatp(v SiteSettingSkyatp) {
	o.Skyatp = &v
}

// GetSnmpConfig returns the SnmpConfig field value if set, zero value otherwise.
func (o *SiteSetting) GetSnmpConfig() SnmpConfig {
	if o == nil || IsNil(o.SnmpConfig) {
		var ret SnmpConfig
		return ret
	}
	return *o.SnmpConfig
}

// GetSnmpConfigOk returns a tuple with the SnmpConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetSnmpConfigOk() (*SnmpConfig, bool) {
	if o == nil || IsNil(o.SnmpConfig) {
		return nil, false
	}
	return o.SnmpConfig, true
}

// HasSnmpConfig returns a boolean if a field has been set.
func (o *SiteSetting) HasSnmpConfig() bool {
	if o != nil && !IsNil(o.SnmpConfig) {
		return true
	}

	return false
}

// SetSnmpConfig gets a reference to the given SnmpConfig and assigns it to the SnmpConfig field.
func (o *SiteSetting) SetSnmpConfig(v SnmpConfig) {
	o.SnmpConfig = &v
}

// GetSrxApp returns the SrxApp field value if set, zero value otherwise.
func (o *SiteSetting) GetSrxApp() SiteSettingSrxApp {
	if o == nil || IsNil(o.SrxApp) {
		var ret SiteSettingSrxApp
		return ret
	}
	return *o.SrxApp
}

// GetSrxAppOk returns a tuple with the SrxApp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetSrxAppOk() (*SiteSettingSrxApp, bool) {
	if o == nil || IsNil(o.SrxApp) {
		return nil, false
	}
	return o.SrxApp, true
}

// HasSrxApp returns a boolean if a field has been set.
func (o *SiteSetting) HasSrxApp() bool {
	if o != nil && !IsNil(o.SrxApp) {
		return true
	}

	return false
}

// SetSrxApp gets a reference to the given SiteSettingSrxApp and assigns it to the SrxApp field.
func (o *SiteSetting) SetSrxApp(v SiteSettingSrxApp) {
	o.SrxApp = &v
}

// GetSshKeys returns the SshKeys field value if set, zero value otherwise.
func (o *SiteSetting) GetSshKeys() []string {
	if o == nil || IsNil(o.SshKeys) {
		var ret []string
		return ret
	}
	return o.SshKeys
}

// GetSshKeysOk returns a tuple with the SshKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetSshKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.SshKeys) {
		return nil, false
	}
	return o.SshKeys, true
}

// HasSshKeys returns a boolean if a field has been set.
func (o *SiteSetting) HasSshKeys() bool {
	if o != nil && !IsNil(o.SshKeys) {
		return true
	}

	return false
}

// SetSshKeys gets a reference to the given []string and assigns it to the SshKeys field.
func (o *SiteSetting) SetSshKeys(v []string) {
	o.SshKeys = v
}

// GetSsr returns the Ssr field value if set, zero value otherwise.
func (o *SiteSetting) GetSsr() SiteSettingSsr {
	if o == nil || IsNil(o.Ssr) {
		var ret SiteSettingSsr
		return ret
	}
	return *o.Ssr
}

// GetSsrOk returns a tuple with the Ssr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetSsrOk() (*SiteSettingSsr, bool) {
	if o == nil || IsNil(o.Ssr) {
		return nil, false
	}
	return o.Ssr, true
}

// HasSsr returns a boolean if a field has been set.
func (o *SiteSetting) HasSsr() bool {
	if o != nil && !IsNil(o.Ssr) {
		return true
	}

	return false
}

// SetSsr gets a reference to the given SiteSettingSsr and assigns it to the Ssr field.
func (o *SiteSetting) SetSsr(v SiteSettingSsr) {
	o.Ssr = &v
}

// GetStatusPortal returns the StatusPortal field value if set, zero value otherwise.
func (o *SiteSetting) GetStatusPortal() SiteSettingStatusPortal {
	if o == nil || IsNil(o.StatusPortal) {
		var ret SiteSettingStatusPortal
		return ret
	}
	return *o.StatusPortal
}

// GetStatusPortalOk returns a tuple with the StatusPortal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetStatusPortalOk() (*SiteSettingStatusPortal, bool) {
	if o == nil || IsNil(o.StatusPortal) {
		return nil, false
	}
	return o.StatusPortal, true
}

// HasStatusPortal returns a boolean if a field has been set.
func (o *SiteSetting) HasStatusPortal() bool {
	if o != nil && !IsNil(o.StatusPortal) {
		return true
	}

	return false
}

// SetStatusPortal gets a reference to the given SiteSettingStatusPortal and assigns it to the StatusPortal field.
func (o *SiteSetting) SetStatusPortal(v SiteSettingStatusPortal) {
	o.StatusPortal = &v
}

// GetSwitch returns the Switch field value if set, zero value otherwise.
func (o *SiteSetting) GetSwitch() NetworkTemplate {
	if o == nil || IsNil(o.Switch) {
		var ret NetworkTemplate
		return ret
	}
	return *o.Switch
}

// GetSwitchOk returns a tuple with the Switch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetSwitchOk() (*NetworkTemplate, bool) {
	if o == nil || IsNil(o.Switch) {
		return nil, false
	}
	return o.Switch, true
}

// HasSwitch returns a boolean if a field has been set.
func (o *SiteSetting) HasSwitch() bool {
	if o != nil && !IsNil(o.Switch) {
		return true
	}

	return false
}

// SetSwitch gets a reference to the given NetworkTemplate and assigns it to the Switch field.
func (o *SiteSetting) SetSwitch(v NetworkTemplate) {
	o.Switch = &v
}

// GetSwitchMatching returns the SwitchMatching field value if set, zero value otherwise.
func (o *SiteSetting) GetSwitchMatching() SwitchMatching {
	if o == nil || IsNil(o.SwitchMatching) {
		var ret SwitchMatching
		return ret
	}
	return *o.SwitchMatching
}

// GetSwitchMatchingOk returns a tuple with the SwitchMatching field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetSwitchMatchingOk() (*SwitchMatching, bool) {
	if o == nil || IsNil(o.SwitchMatching) {
		return nil, false
	}
	return o.SwitchMatching, true
}

// HasSwitchMatching returns a boolean if a field has been set.
func (o *SiteSetting) HasSwitchMatching() bool {
	if o != nil && !IsNil(o.SwitchMatching) {
		return true
	}

	return false
}

// SetSwitchMatching gets a reference to the given SwitchMatching and assigns it to the SwitchMatching field.
func (o *SiteSetting) SetSwitchMatching(v SwitchMatching) {
	o.SwitchMatching = &v
}

// GetSwitchMgmt returns the SwitchMgmt field value if set, zero value otherwise.
func (o *SiteSetting) GetSwitchMgmt() SwitchMgmt {
	if o == nil || IsNil(o.SwitchMgmt) {
		var ret SwitchMgmt
		return ret
	}
	return *o.SwitchMgmt
}

// GetSwitchMgmtOk returns a tuple with the SwitchMgmt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetSwitchMgmtOk() (*SwitchMgmt, bool) {
	if o == nil || IsNil(o.SwitchMgmt) {
		return nil, false
	}
	return o.SwitchMgmt, true
}

// HasSwitchMgmt returns a boolean if a field has been set.
func (o *SiteSetting) HasSwitchMgmt() bool {
	if o != nil && !IsNil(o.SwitchMgmt) {
		return true
	}

	return false
}

// SetSwitchMgmt gets a reference to the given SwitchMgmt and assigns it to the SwitchMgmt field.
func (o *SiteSetting) SetSwitchMgmt(v SwitchMgmt) {
	o.SwitchMgmt = &v
}

// GetSwitchUpdownThreshold returns the SwitchUpdownThreshold field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteSetting) GetSwitchUpdownThreshold() int32 {
	if o == nil || IsNil(o.SwitchUpdownThreshold.Get()) {
		var ret int32
		return ret
	}
	return *o.SwitchUpdownThreshold.Get()
}

// GetSwitchUpdownThresholdOk returns a tuple with the SwitchUpdownThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteSetting) GetSwitchUpdownThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SwitchUpdownThreshold.Get(), o.SwitchUpdownThreshold.IsSet()
}

// HasSwitchUpdownThreshold returns a boolean if a field has been set.
func (o *SiteSetting) HasSwitchUpdownThreshold() bool {
	if o != nil && o.SwitchUpdownThreshold.IsSet() {
		return true
	}

	return false
}

// SetSwitchUpdownThreshold gets a reference to the given NullableInt32 and assigns it to the SwitchUpdownThreshold field.
func (o *SiteSetting) SetSwitchUpdownThreshold(v int32) {
	o.SwitchUpdownThreshold.Set(&v)
}
// SetSwitchUpdownThresholdNil sets the value for SwitchUpdownThreshold to be an explicit nil
func (o *SiteSetting) SetSwitchUpdownThresholdNil() {
	o.SwitchUpdownThreshold.Set(nil)
}

// UnsetSwitchUpdownThreshold ensures that no value is present for SwitchUpdownThreshold, not even an explicit nil
func (o *SiteSetting) UnsetSwitchUpdownThreshold() {
	o.SwitchUpdownThreshold.Unset()
}

// GetSyntheticTest returns the SyntheticTest field value if set, zero value otherwise.
func (o *SiteSetting) GetSyntheticTest() SyntheticTestConfig {
	if o == nil || IsNil(o.SyntheticTest) {
		var ret SyntheticTestConfig
		return ret
	}
	return *o.SyntheticTest
}

// GetSyntheticTestOk returns a tuple with the SyntheticTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetSyntheticTestOk() (*SyntheticTestConfig, bool) {
	if o == nil || IsNil(o.SyntheticTest) {
		return nil, false
	}
	return o.SyntheticTest, true
}

// HasSyntheticTest returns a boolean if a field has been set.
func (o *SiteSetting) HasSyntheticTest() bool {
	if o != nil && !IsNil(o.SyntheticTest) {
		return true
	}

	return false
}

// SetSyntheticTest gets a reference to the given SyntheticTestConfig and assigns it to the SyntheticTest field.
func (o *SiteSetting) SetSyntheticTest(v SyntheticTestConfig) {
	o.SyntheticTest = &v
}

// GetTrackAnonymousDevices returns the TrackAnonymousDevices field value if set, zero value otherwise.
func (o *SiteSetting) GetTrackAnonymousDevices() bool {
	if o == nil || IsNil(o.TrackAnonymousDevices) {
		var ret bool
		return ret
	}
	return *o.TrackAnonymousDevices
}

// GetTrackAnonymousDevicesOk returns a tuple with the TrackAnonymousDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetTrackAnonymousDevicesOk() (*bool, bool) {
	if o == nil || IsNil(o.TrackAnonymousDevices) {
		return nil, false
	}
	return o.TrackAnonymousDevices, true
}

// HasTrackAnonymousDevices returns a boolean if a field has been set.
func (o *SiteSetting) HasTrackAnonymousDevices() bool {
	if o != nil && !IsNil(o.TrackAnonymousDevices) {
		return true
	}

	return false
}

// SetTrackAnonymousDevices gets a reference to the given bool and assigns it to the TrackAnonymousDevices field.
func (o *SiteSetting) SetTrackAnonymousDevices(v bool) {
	o.TrackAnonymousDevices = &v
}

// GetTuntermMonitoring returns the TuntermMonitoring field value if set, zero value otherwise.
func (o *SiteSetting) GetTuntermMonitoring() []TuntermMonitoringItem {
	if o == nil || IsNil(o.TuntermMonitoring) {
		var ret []TuntermMonitoringItem
		return ret
	}
	return o.TuntermMonitoring
}

// GetTuntermMonitoringOk returns a tuple with the TuntermMonitoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetTuntermMonitoringOk() ([]TuntermMonitoringItem, bool) {
	if o == nil || IsNil(o.TuntermMonitoring) {
		return nil, false
	}
	return o.TuntermMonitoring, true
}

// HasTuntermMonitoring returns a boolean if a field has been set.
func (o *SiteSetting) HasTuntermMonitoring() bool {
	if o != nil && !IsNil(o.TuntermMonitoring) {
		return true
	}

	return false
}

// SetTuntermMonitoring gets a reference to the given []TuntermMonitoringItem and assigns it to the TuntermMonitoring field.
func (o *SiteSetting) SetTuntermMonitoring(v []TuntermMonitoringItem) {
	o.TuntermMonitoring = v
}

// GetTuntermMonitoringDisabled returns the TuntermMonitoringDisabled field value if set, zero value otherwise.
func (o *SiteSetting) GetTuntermMonitoringDisabled() bool {
	if o == nil || IsNil(o.TuntermMonitoringDisabled) {
		var ret bool
		return ret
	}
	return *o.TuntermMonitoringDisabled
}

// GetTuntermMonitoringDisabledOk returns a tuple with the TuntermMonitoringDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetTuntermMonitoringDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.TuntermMonitoringDisabled) {
		return nil, false
	}
	return o.TuntermMonitoringDisabled, true
}

// HasTuntermMonitoringDisabled returns a boolean if a field has been set.
func (o *SiteSetting) HasTuntermMonitoringDisabled() bool {
	if o != nil && !IsNil(o.TuntermMonitoringDisabled) {
		return true
	}

	return false
}

// SetTuntermMonitoringDisabled gets a reference to the given bool and assigns it to the TuntermMonitoringDisabled field.
func (o *SiteSetting) SetTuntermMonitoringDisabled(v bool) {
	o.TuntermMonitoringDisabled = &v
}

// GetTuntermMulticastConfig returns the TuntermMulticastConfig field value if set, zero value otherwise.
func (o *SiteSetting) GetTuntermMulticastConfig() SiteSettingTuntermMulticastConfig {
	if o == nil || IsNil(o.TuntermMulticastConfig) {
		var ret SiteSettingTuntermMulticastConfig
		return ret
	}
	return *o.TuntermMulticastConfig
}

// GetTuntermMulticastConfigOk returns a tuple with the TuntermMulticastConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetTuntermMulticastConfigOk() (*SiteSettingTuntermMulticastConfig, bool) {
	if o == nil || IsNil(o.TuntermMulticastConfig) {
		return nil, false
	}
	return o.TuntermMulticastConfig, true
}

// HasTuntermMulticastConfig returns a boolean if a field has been set.
func (o *SiteSetting) HasTuntermMulticastConfig() bool {
	if o != nil && !IsNil(o.TuntermMulticastConfig) {
		return true
	}

	return false
}

// SetTuntermMulticastConfig gets a reference to the given SiteSettingTuntermMulticastConfig and assigns it to the TuntermMulticastConfig field.
func (o *SiteSetting) SetTuntermMulticastConfig(v SiteSettingTuntermMulticastConfig) {
	o.TuntermMulticastConfig = &v
}

// GetVars returns the Vars field value if set, zero value otherwise.
func (o *SiteSetting) GetVars() map[string]string {
	if o == nil || IsNil(o.Vars) {
		var ret map[string]string
		return ret
	}
	return *o.Vars
}

// GetVarsOk returns a tuple with the Vars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetVarsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Vars) {
		return nil, false
	}
	return o.Vars, true
}

// HasVars returns a boolean if a field has been set.
func (o *SiteSetting) HasVars() bool {
	if o != nil && !IsNil(o.Vars) {
		return true
	}

	return false
}

// SetVars gets a reference to the given map[string]string and assigns it to the Vars field.
func (o *SiteSetting) SetVars(v map[string]string) {
	o.Vars = &v
}

// GetVna returns the Vna field value if set, zero value otherwise.
func (o *SiteSetting) GetVna() SiteSettingVna {
	if o == nil || IsNil(o.Vna) {
		var ret SiteSettingVna
		return ret
	}
	return *o.Vna
}

// GetVnaOk returns a tuple with the Vna field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetVnaOk() (*SiteSettingVna, bool) {
	if o == nil || IsNil(o.Vna) {
		return nil, false
	}
	return o.Vna, true
}

// HasVna returns a boolean if a field has been set.
func (o *SiteSetting) HasVna() bool {
	if o != nil && !IsNil(o.Vna) {
		return true
	}

	return false
}

// SetVna gets a reference to the given SiteSettingVna and assigns it to the Vna field.
func (o *SiteSetting) SetVna(v SiteSettingVna) {
	o.Vna = &v
}

// GetVrfConfig returns the VrfConfig field value if set, zero value otherwise.
func (o *SiteSetting) GetVrfConfig() VrfConfig {
	if o == nil || IsNil(o.VrfConfig) {
		var ret VrfConfig
		return ret
	}
	return *o.VrfConfig
}

// GetVrfConfigOk returns a tuple with the VrfConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetVrfConfigOk() (*VrfConfig, bool) {
	if o == nil || IsNil(o.VrfConfig) {
		return nil, false
	}
	return o.VrfConfig, true
}

// HasVrfConfig returns a boolean if a field has been set.
func (o *SiteSetting) HasVrfConfig() bool {
	if o != nil && !IsNil(o.VrfConfig) {
		return true
	}

	return false
}

// SetVrfConfig gets a reference to the given VrfConfig and assigns it to the VrfConfig field.
func (o *SiteSetting) SetVrfConfig(v VrfConfig) {
	o.VrfConfig = &v
}

// GetVrfInstances returns the VrfInstances field value if set, zero value otherwise.
func (o *SiteSetting) GetVrfInstances() map[string]VrfInstance {
	if o == nil || IsNil(o.VrfInstances) {
		var ret map[string]VrfInstance
		return ret
	}
	return *o.VrfInstances
}

// GetVrfInstancesOk returns a tuple with the VrfInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetVrfInstancesOk() (*map[string]VrfInstance, bool) {
	if o == nil || IsNil(o.VrfInstances) {
		return nil, false
	}
	return o.VrfInstances, true
}

// HasVrfInstances returns a boolean if a field has been set.
func (o *SiteSetting) HasVrfInstances() bool {
	if o != nil && !IsNil(o.VrfInstances) {
		return true
	}

	return false
}

// SetVrfInstances gets a reference to the given map[string]VrfInstance and assigns it to the VrfInstances field.
func (o *SiteSetting) SetVrfInstances(v map[string]VrfInstance) {
	o.VrfInstances = &v
}

// GetVrrpGroups returns the VrrpGroups field value if set, zero value otherwise.
func (o *SiteSetting) GetVrrpGroups() map[string]VrrpGroup {
	if o == nil || IsNil(o.VrrpGroups) {
		var ret map[string]VrrpGroup
		return ret
	}
	return *o.VrrpGroups
}

// GetVrrpGroupsOk returns a tuple with the VrrpGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetVrrpGroupsOk() (*map[string]VrrpGroup, bool) {
	if o == nil || IsNil(o.VrrpGroups) {
		return nil, false
	}
	return o.VrrpGroups, true
}

// HasVrrpGroups returns a boolean if a field has been set.
func (o *SiteSetting) HasVrrpGroups() bool {
	if o != nil && !IsNil(o.VrrpGroups) {
		return true
	}

	return false
}

// SetVrrpGroups gets a reference to the given map[string]VrrpGroup and assigns it to the VrrpGroups field.
func (o *SiteSetting) SetVrrpGroups(v map[string]VrrpGroup) {
	o.VrrpGroups = &v
}

// GetWanVna returns the WanVna field value if set, zero value otherwise.
func (o *SiteSetting) GetWanVna() SiteSettingWanVna {
	if o == nil || IsNil(o.WanVna) {
		var ret SiteSettingWanVna
		return ret
	}
	return *o.WanVna
}

// GetWanVnaOk returns a tuple with the WanVna field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetWanVnaOk() (*SiteSettingWanVna, bool) {
	if o == nil || IsNil(o.WanVna) {
		return nil, false
	}
	return o.WanVna, true
}

// HasWanVna returns a boolean if a field has been set.
func (o *SiteSetting) HasWanVna() bool {
	if o != nil && !IsNil(o.WanVna) {
		return true
	}

	return false
}

// SetWanVna gets a reference to the given SiteSettingWanVna and assigns it to the WanVna field.
func (o *SiteSetting) SetWanVna(v SiteSettingWanVna) {
	o.WanVna = &v
}

// GetWatchedStationUrl returns the WatchedStationUrl field value if set, zero value otherwise.
func (o *SiteSetting) GetWatchedStationUrl() string {
	if o == nil || IsNil(o.WatchedStationUrl) {
		var ret string
		return ret
	}
	return *o.WatchedStationUrl
}

// GetWatchedStationUrlOk returns a tuple with the WatchedStationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetWatchedStationUrlOk() (*string, bool) {
	if o == nil || IsNil(o.WatchedStationUrl) {
		return nil, false
	}
	return o.WatchedStationUrl, true
}

// HasWatchedStationUrl returns a boolean if a field has been set.
func (o *SiteSetting) HasWatchedStationUrl() bool {
	if o != nil && !IsNil(o.WatchedStationUrl) {
		return true
	}

	return false
}

// SetWatchedStationUrl gets a reference to the given string and assigns it to the WatchedStationUrl field.
func (o *SiteSetting) SetWatchedStationUrl(v string) {
	o.WatchedStationUrl = &v
}

// GetWhitelistUrl returns the WhitelistUrl field value if set, zero value otherwise.
func (o *SiteSetting) GetWhitelistUrl() string {
	if o == nil || IsNil(o.WhitelistUrl) {
		var ret string
		return ret
	}
	return *o.WhitelistUrl
}

// GetWhitelistUrlOk returns a tuple with the WhitelistUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetWhitelistUrlOk() (*string, bool) {
	if o == nil || IsNil(o.WhitelistUrl) {
		return nil, false
	}
	return o.WhitelistUrl, true
}

// HasWhitelistUrl returns a boolean if a field has been set.
func (o *SiteSetting) HasWhitelistUrl() bool {
	if o != nil && !IsNil(o.WhitelistUrl) {
		return true
	}

	return false
}

// SetWhitelistUrl gets a reference to the given string and assigns it to the WhitelistUrl field.
func (o *SiteSetting) SetWhitelistUrl(v string) {
	o.WhitelistUrl = &v
}

// GetWids returns the Wids field value if set, zero value otherwise.
func (o *SiteSetting) GetWids() SiteWids {
	if o == nil || IsNil(o.Wids) {
		var ret SiteWids
		return ret
	}
	return *o.Wids
}

// GetWidsOk returns a tuple with the Wids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetWidsOk() (*SiteWids, bool) {
	if o == nil || IsNil(o.Wids) {
		return nil, false
	}
	return o.Wids, true
}

// HasWids returns a boolean if a field has been set.
func (o *SiteSetting) HasWids() bool {
	if o != nil && !IsNil(o.Wids) {
		return true
	}

	return false
}

// SetWids gets a reference to the given SiteWids and assigns it to the Wids field.
func (o *SiteSetting) SetWids(v SiteWids) {
	o.Wids = &v
}

// GetWifi returns the Wifi field value if set, zero value otherwise.
func (o *SiteSetting) GetWifi() SiteWifi {
	if o == nil || IsNil(o.Wifi) {
		var ret SiteWifi
		return ret
	}
	return *o.Wifi
}

// GetWifiOk returns a tuple with the Wifi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetWifiOk() (*SiteWifi, bool) {
	if o == nil || IsNil(o.Wifi) {
		return nil, false
	}
	return o.Wifi, true
}

// HasWifi returns a boolean if a field has been set.
func (o *SiteSetting) HasWifi() bool {
	if o != nil && !IsNil(o.Wifi) {
		return true
	}

	return false
}

// SetWifi gets a reference to the given SiteWifi and assigns it to the Wifi field.
func (o *SiteSetting) SetWifi(v SiteWifi) {
	o.Wifi = &v
}

// GetWiredVna returns the WiredVna field value if set, zero value otherwise.
func (o *SiteSetting) GetWiredVna() SiteSettingWiredVna {
	if o == nil || IsNil(o.WiredVna) {
		var ret SiteSettingWiredVna
		return ret
	}
	return *o.WiredVna
}

// GetWiredVnaOk returns a tuple with the WiredVna field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetWiredVnaOk() (*SiteSettingWiredVna, bool) {
	if o == nil || IsNil(o.WiredVna) {
		return nil, false
	}
	return o.WiredVna, true
}

// HasWiredVna returns a boolean if a field has been set.
func (o *SiteSetting) HasWiredVna() bool {
	if o != nil && !IsNil(o.WiredVna) {
		return true
	}

	return false
}

// SetWiredVna gets a reference to the given SiteSettingWiredVna and assigns it to the WiredVna field.
func (o *SiteSetting) SetWiredVna(v SiteSettingWiredVna) {
	o.WiredVna = &v
}

// GetZoneOccupancyAlert returns the ZoneOccupancyAlert field value if set, zero value otherwise.
func (o *SiteSetting) GetZoneOccupancyAlert() SiteZoneOccupancyAlert {
	if o == nil || IsNil(o.ZoneOccupancyAlert) {
		var ret SiteZoneOccupancyAlert
		return ret
	}
	return *o.ZoneOccupancyAlert
}

// GetZoneOccupancyAlertOk returns a tuple with the ZoneOccupancyAlert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSetting) GetZoneOccupancyAlertOk() (*SiteZoneOccupancyAlert, bool) {
	if o == nil || IsNil(o.ZoneOccupancyAlert) {
		return nil, false
	}
	return o.ZoneOccupancyAlert, true
}

// HasZoneOccupancyAlert returns a boolean if a field has been set.
func (o *SiteSetting) HasZoneOccupancyAlert() bool {
	if o != nil && !IsNil(o.ZoneOccupancyAlert) {
		return true
	}

	return false
}

// SetZoneOccupancyAlert gets a reference to the given SiteZoneOccupancyAlert and assigns it to the ZoneOccupancyAlert field.
func (o *SiteSetting) SetZoneOccupancyAlert(v SiteZoneOccupancyAlert) {
	o.ZoneOccupancyAlert = &v
}

func (o SiteSetting) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AclPolicies) {
		toSerialize["acl_policies"] = o.AclPolicies
	}
	if !IsNil(o.AclTags) {
		toSerialize["acl_tags"] = o.AclTags
	}
	if !IsNil(o.AdditionalConfigCmds) {
		toSerialize["additional_config_cmds"] = o.AdditionalConfigCmds
	}
	if !IsNil(o.Analytic) {
		toSerialize["analytic"] = o.Analytic
	}
	if !IsNil(o.ApMatching) {
		toSerialize["ap_matching"] = o.ApMatching
	}
	if !IsNil(o.ApPortConfig) {
		toSerialize["ap_port_config"] = o.ApPortConfig
	}
	if o.ApUpdownThreshold.IsSet() {
		toSerialize["ap_updown_threshold"] = o.ApUpdownThreshold.Get()
	}
	if !IsNil(o.AutoPlacement) {
		toSerialize["auto_placement"] = o.AutoPlacement
	}
	if !IsNil(o.AutoUpgrade) {
		toSerialize["auto_upgrade"] = o.AutoUpgrade
	}
	if !IsNil(o.BlacklistUrl) {
		toSerialize["blacklist_url"] = o.BlacklistUrl
	}
	if !IsNil(o.BleConfig) {
		toSerialize["ble_config"] = o.BleConfig
	}
	if !IsNil(o.ConfigAutoRevert) {
		toSerialize["config_auto_revert"] = o.ConfigAutoRevert
	}
	if !IsNil(o.ConfigPushPolicy) {
		toSerialize["config_push_policy"] = o.ConfigPushPolicy
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.CriticalUrlMonitoring) {
		toSerialize["critical_url_monitoring"] = o.CriticalUrlMonitoring
	}
	if !IsNil(o.DeviceUpdownThreshold) {
		toSerialize["device_updown_threshold"] = o.DeviceUpdownThreshold
	}
	if !IsNil(o.DhcpSnooping) {
		toSerialize["dhcp_snooping"] = o.DhcpSnooping
	}
	if !IsNil(o.DisabledSystemDefinedPortUsages) {
		toSerialize["disabled_system_defined_port_usages"] = o.DisabledSystemDefinedPortUsages
	}
	if !IsNil(o.DnsServers) {
		toSerialize["dns_servers"] = o.DnsServers
	}
	if !IsNil(o.DnsSuffix) {
		toSerialize["dns_suffix"] = o.DnsSuffix
	}
	if !IsNil(o.Engagement) {
		toSerialize["engagement"] = o.Engagement
	}
	if !IsNil(o.EvpnOptions) {
		toSerialize["evpn_options"] = o.EvpnOptions
	}
	if !IsNil(o.ExtraRoutes) {
		toSerialize["extra_routes"] = o.ExtraRoutes
	}
	if !IsNil(o.ExtraRoutes6) {
		toSerialize["extra_routes6"] = o.ExtraRoutes6
	}
	if !IsNil(o.Flags) {
		toSerialize["flags"] = o.Flags
	}
	if !IsNil(o.ForSite) {
		toSerialize["for_site"] = o.ForSite
	}
	if !IsNil(o.Gateway) {
		toSerialize["gateway"] = o.Gateway
	}
	if !IsNil(o.GatewayAdditionalConfigCmds) {
		toSerialize["gateway_additional_config_cmds"] = o.GatewayAdditionalConfigCmds
	}
	if !IsNil(o.GatewayMgmt) {
		toSerialize["gateway_mgmt"] = o.GatewayMgmt
	}
	if o.GatewayUpdownThreshold.IsSet() {
		toSerialize["gateway_updown_threshold"] = o.GatewayUpdownThreshold.Get()
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Led) {
		toSerialize["led"] = o.Led
	}
	if !IsNil(o.MistNac) {
		toSerialize["mist_nac"] = o.MistNac
	}
	if !IsNil(o.ModifiedTime) {
		toSerialize["modified_time"] = o.ModifiedTime
	}
	if !IsNil(o.Mxedge) {
		toSerialize["mxedge"] = o.Mxedge
	}
	if !IsNil(o.MxedgeMgmt) {
		toSerialize["mxedge_mgmt"] = o.MxedgeMgmt
	}
	if !IsNil(o.Mxtunnels) {
		toSerialize["mxtunnels"] = o.Mxtunnels
	}
	if !IsNil(o.Networks) {
		toSerialize["networks"] = o.Networks
	}
	if !IsNil(o.NtpServers) {
		toSerialize["ntp_servers"] = o.NtpServers
	}
	if !IsNil(o.Occupancy) {
		toSerialize["occupancy"] = o.Occupancy
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.OspfAreas) {
		toSerialize["ospf_areas"] = o.OspfAreas
	}
	if !IsNil(o.PaloaltoNetworks) {
		toSerialize["paloalto_networks"] = o.PaloaltoNetworks
	}
	if !IsNil(o.PersistConfigOnDevice) {
		toSerialize["persist_config_on_device"] = o.PersistConfigOnDevice
	}
	if !IsNil(o.PortMirrorings) {
		toSerialize["port_mirrorings"] = o.PortMirrorings
	}
	if !IsNil(o.PortUsages) {
		toSerialize["port_usages"] = o.PortUsages
	}
	if !IsNil(o.Proxy) {
		toSerialize["proxy"] = o.Proxy
	}
	if !IsNil(o.RadioConfig) {
		toSerialize["radio_config"] = o.RadioConfig
	}
	if !IsNil(o.RadiusConfig) {
		toSerialize["radius_config"] = o.RadiusConfig
	}
	if !IsNil(o.RemoteSyslog) {
		toSerialize["remote_syslog"] = o.RemoteSyslog
	}
	if !IsNil(o.ReportGatt) {
		toSerialize["report_gatt"] = o.ReportGatt
	}
	if !IsNil(o.Rogue) {
		toSerialize["rogue"] = o.Rogue
	}
	if !IsNil(o.Rtsa) {
		toSerialize["rtsa"] = o.Rtsa
	}
	if !IsNil(o.SimpleAlert) {
		toSerialize["simple_alert"] = o.SimpleAlert
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.Skyatp) {
		toSerialize["skyatp"] = o.Skyatp
	}
	if !IsNil(o.SnmpConfig) {
		toSerialize["snmp_config"] = o.SnmpConfig
	}
	if !IsNil(o.SrxApp) {
		toSerialize["srx_app"] = o.SrxApp
	}
	if !IsNil(o.SshKeys) {
		toSerialize["ssh_keys"] = o.SshKeys
	}
	if !IsNil(o.Ssr) {
		toSerialize["ssr"] = o.Ssr
	}
	if !IsNil(o.StatusPortal) {
		toSerialize["status_portal"] = o.StatusPortal
	}
	if !IsNil(o.Switch) {
		toSerialize["switch"] = o.Switch
	}
	if !IsNil(o.SwitchMatching) {
		toSerialize["switch_matching"] = o.SwitchMatching
	}
	if !IsNil(o.SwitchMgmt) {
		toSerialize["switch_mgmt"] = o.SwitchMgmt
	}
	if o.SwitchUpdownThreshold.IsSet() {
		toSerialize["switch_updown_threshold"] = o.SwitchUpdownThreshold.Get()
	}
	if !IsNil(o.SyntheticTest) {
		toSerialize["synthetic_test"] = o.SyntheticTest
	}
	if !IsNil(o.TrackAnonymousDevices) {
		toSerialize["track_anonymous_devices"] = o.TrackAnonymousDevices
	}
	if !IsNil(o.TuntermMonitoring) {
		toSerialize["tunterm_monitoring"] = o.TuntermMonitoring
	}
	if !IsNil(o.TuntermMonitoringDisabled) {
		toSerialize["tunterm_monitoring_disabled"] = o.TuntermMonitoringDisabled
	}
	if !IsNil(o.TuntermMulticastConfig) {
		toSerialize["tunterm_multicast_config"] = o.TuntermMulticastConfig
	}
	if !IsNil(o.Vars) {
		toSerialize["vars"] = o.Vars
	}
	if !IsNil(o.Vna) {
		toSerialize["vna"] = o.Vna
	}
	if !IsNil(o.VrfConfig) {
		toSerialize["vrf_config"] = o.VrfConfig
	}
	if !IsNil(o.VrfInstances) {
		toSerialize["vrf_instances"] = o.VrfInstances
	}
	if !IsNil(o.VrrpGroups) {
		toSerialize["vrrp_groups"] = o.VrrpGroups
	}
	if !IsNil(o.WanVna) {
		toSerialize["wan_vna"] = o.WanVna
	}
	if !IsNil(o.WatchedStationUrl) {
		toSerialize["watched_station_url"] = o.WatchedStationUrl
	}
	if !IsNil(o.WhitelistUrl) {
		toSerialize["whitelist_url"] = o.WhitelistUrl
	}
	if !IsNil(o.Wids) {
		toSerialize["wids"] = o.Wids
	}
	if !IsNil(o.Wifi) {
		toSerialize["wifi"] = o.Wifi
	}
	if !IsNil(o.WiredVna) {
		toSerialize["wired_vna"] = o.WiredVna
	}
	if !IsNil(o.ZoneOccupancyAlert) {
		toSerialize["zone_occupancy_alert"] = o.ZoneOccupancyAlert
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SiteSetting) UnmarshalJSON(data []byte) (err error) {
	varSiteSetting := _SiteSetting{}

	err = json.Unmarshal(data, &varSiteSetting)

	if err != nil {
		return err
	}

	*o = SiteSetting(varSiteSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "acl_policies")
		delete(additionalProperties, "acl_tags")
		delete(additionalProperties, "additional_config_cmds")
		delete(additionalProperties, "analytic")
		delete(additionalProperties, "ap_matching")
		delete(additionalProperties, "ap_port_config")
		delete(additionalProperties, "ap_updown_threshold")
		delete(additionalProperties, "auto_placement")
		delete(additionalProperties, "auto_upgrade")
		delete(additionalProperties, "blacklist_url")
		delete(additionalProperties, "ble_config")
		delete(additionalProperties, "config_auto_revert")
		delete(additionalProperties, "config_push_policy")
		delete(additionalProperties, "created_time")
		delete(additionalProperties, "critical_url_monitoring")
		delete(additionalProperties, "device_updown_threshold")
		delete(additionalProperties, "dhcp_snooping")
		delete(additionalProperties, "disabled_system_defined_port_usages")
		delete(additionalProperties, "dns_servers")
		delete(additionalProperties, "dns_suffix")
		delete(additionalProperties, "engagement")
		delete(additionalProperties, "evpn_options")
		delete(additionalProperties, "extra_routes")
		delete(additionalProperties, "extra_routes6")
		delete(additionalProperties, "flags")
		delete(additionalProperties, "for_site")
		delete(additionalProperties, "gateway")
		delete(additionalProperties, "gateway_additional_config_cmds")
		delete(additionalProperties, "gateway_mgmt")
		delete(additionalProperties, "gateway_updown_threshold")
		delete(additionalProperties, "id")
		delete(additionalProperties, "led")
		delete(additionalProperties, "mist_nac")
		delete(additionalProperties, "modified_time")
		delete(additionalProperties, "mxedge")
		delete(additionalProperties, "mxedge_mgmt")
		delete(additionalProperties, "mxtunnels")
		delete(additionalProperties, "networks")
		delete(additionalProperties, "ntp_servers")
		delete(additionalProperties, "occupancy")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "ospf_areas")
		delete(additionalProperties, "paloalto_networks")
		delete(additionalProperties, "persist_config_on_device")
		delete(additionalProperties, "port_mirrorings")
		delete(additionalProperties, "port_usages")
		delete(additionalProperties, "proxy")
		delete(additionalProperties, "radio_config")
		delete(additionalProperties, "radius_config")
		delete(additionalProperties, "remote_syslog")
		delete(additionalProperties, "report_gatt")
		delete(additionalProperties, "rogue")
		delete(additionalProperties, "rtsa")
		delete(additionalProperties, "simple_alert")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "skyatp")
		delete(additionalProperties, "snmp_config")
		delete(additionalProperties, "srx_app")
		delete(additionalProperties, "ssh_keys")
		delete(additionalProperties, "ssr")
		delete(additionalProperties, "status_portal")
		delete(additionalProperties, "switch")
		delete(additionalProperties, "switch_matching")
		delete(additionalProperties, "switch_mgmt")
		delete(additionalProperties, "switch_updown_threshold")
		delete(additionalProperties, "synthetic_test")
		delete(additionalProperties, "track_anonymous_devices")
		delete(additionalProperties, "tunterm_monitoring")
		delete(additionalProperties, "tunterm_monitoring_disabled")
		delete(additionalProperties, "tunterm_multicast_config")
		delete(additionalProperties, "vars")
		delete(additionalProperties, "vna")
		delete(additionalProperties, "vrf_config")
		delete(additionalProperties, "vrf_instances")
		delete(additionalProperties, "vrrp_groups")
		delete(additionalProperties, "wan_vna")
		delete(additionalProperties, "watched_station_url")
		delete(additionalProperties, "whitelist_url")
		delete(additionalProperties, "wids")
		delete(additionalProperties, "wifi")
		delete(additionalProperties, "wired_vna")
		delete(additionalProperties, "zone_occupancy_alert")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSiteSetting struct {
	value *SiteSetting
	isSet bool
}

func (v NullableSiteSetting) Get() *SiteSetting {
	return v.value
}

func (v *NullableSiteSetting) Set(val *SiteSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteSetting(val *SiteSetting) *NullableSiteSetting {
	return &NullableSiteSetting{value: val, isSet: true}
}

func (v NullableSiteSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


