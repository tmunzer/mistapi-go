/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the InstallerProvisionDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstallerProvisionDevice{}

// InstallerProvisionDevice Provision Device
type InstallerProvisionDevice struct {
	DeviceprofileName *string `json:"deviceprofile_name,omitempty"`
	ForSite *bool `json:"for_site,omitempty"`
	Height *float32 `json:"height,omitempty"`
	MapId *string `json:"map_id,omitempty"`
	Name string `json:"name"`
	Orientation *float32 `json:"orientation,omitempty"`
	// Onlif this is to replace an existing device
	ReplacingMac *string `json:"replacing_mac,omitempty"`
	// optional role for switch / gateway
	Role *string `json:"role,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	SiteName *string `json:"site_name,omitempty"`
	X *float32 `json:"x,omitempty"`
	Y *float32 `json:"y,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InstallerProvisionDevice InstallerProvisionDevice

// NewInstallerProvisionDevice instantiates a new InstallerProvisionDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstallerProvisionDevice(name string) *InstallerProvisionDevice {
	this := InstallerProvisionDevice{}
	this.Name = name
	return &this
}

// NewInstallerProvisionDeviceWithDefaults instantiates a new InstallerProvisionDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallerProvisionDeviceWithDefaults() *InstallerProvisionDevice {
	this := InstallerProvisionDevice{}
	return &this
}

// GetDeviceprofileName returns the DeviceprofileName field value if set, zero value otherwise.
func (o *InstallerProvisionDevice) GetDeviceprofileName() string {
	if o == nil || IsNil(o.DeviceprofileName) {
		var ret string
		return ret
	}
	return *o.DeviceprofileName
}

// GetDeviceprofileNameOk returns a tuple with the DeviceprofileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallerProvisionDevice) GetDeviceprofileNameOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceprofileName) {
		return nil, false
	}
	return o.DeviceprofileName, true
}

// HasDeviceprofileName returns a boolean if a field has been set.
func (o *InstallerProvisionDevice) HasDeviceprofileName() bool {
	if o != nil && !IsNil(o.DeviceprofileName) {
		return true
	}

	return false
}

// SetDeviceprofileName gets a reference to the given string and assigns it to the DeviceprofileName field.
func (o *InstallerProvisionDevice) SetDeviceprofileName(v string) {
	o.DeviceprofileName = &v
}

// GetForSite returns the ForSite field value if set, zero value otherwise.
func (o *InstallerProvisionDevice) GetForSite() bool {
	if o == nil || IsNil(o.ForSite) {
		var ret bool
		return ret
	}
	return *o.ForSite
}

// GetForSiteOk returns a tuple with the ForSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallerProvisionDevice) GetForSiteOk() (*bool, bool) {
	if o == nil || IsNil(o.ForSite) {
		return nil, false
	}
	return o.ForSite, true
}

// HasForSite returns a boolean if a field has been set.
func (o *InstallerProvisionDevice) HasForSite() bool {
	if o != nil && !IsNil(o.ForSite) {
		return true
	}

	return false
}

// SetForSite gets a reference to the given bool and assigns it to the ForSite field.
func (o *InstallerProvisionDevice) SetForSite(v bool) {
	o.ForSite = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *InstallerProvisionDevice) GetHeight() float32 {
	if o == nil || IsNil(o.Height) {
		var ret float32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallerProvisionDevice) GetHeightOk() (*float32, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *InstallerProvisionDevice) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given float32 and assigns it to the Height field.
func (o *InstallerProvisionDevice) SetHeight(v float32) {
	o.Height = &v
}

// GetMapId returns the MapId field value if set, zero value otherwise.
func (o *InstallerProvisionDevice) GetMapId() string {
	if o == nil || IsNil(o.MapId) {
		var ret string
		return ret
	}
	return *o.MapId
}

// GetMapIdOk returns a tuple with the MapId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallerProvisionDevice) GetMapIdOk() (*string, bool) {
	if o == nil || IsNil(o.MapId) {
		return nil, false
	}
	return o.MapId, true
}

// HasMapId returns a boolean if a field has been set.
func (o *InstallerProvisionDevice) HasMapId() bool {
	if o != nil && !IsNil(o.MapId) {
		return true
	}

	return false
}

// SetMapId gets a reference to the given string and assigns it to the MapId field.
func (o *InstallerProvisionDevice) SetMapId(v string) {
	o.MapId = &v
}

// GetName returns the Name field value
func (o *InstallerProvisionDevice) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *InstallerProvisionDevice) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *InstallerProvisionDevice) SetName(v string) {
	o.Name = v
}

// GetOrientation returns the Orientation field value if set, zero value otherwise.
func (o *InstallerProvisionDevice) GetOrientation() float32 {
	if o == nil || IsNil(o.Orientation) {
		var ret float32
		return ret
	}
	return *o.Orientation
}

// GetOrientationOk returns a tuple with the Orientation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallerProvisionDevice) GetOrientationOk() (*float32, bool) {
	if o == nil || IsNil(o.Orientation) {
		return nil, false
	}
	return o.Orientation, true
}

// HasOrientation returns a boolean if a field has been set.
func (o *InstallerProvisionDevice) HasOrientation() bool {
	if o != nil && !IsNil(o.Orientation) {
		return true
	}

	return false
}

// SetOrientation gets a reference to the given float32 and assigns it to the Orientation field.
func (o *InstallerProvisionDevice) SetOrientation(v float32) {
	o.Orientation = &v
}

// GetReplacingMac returns the ReplacingMac field value if set, zero value otherwise.
func (o *InstallerProvisionDevice) GetReplacingMac() string {
	if o == nil || IsNil(o.ReplacingMac) {
		var ret string
		return ret
	}
	return *o.ReplacingMac
}

// GetReplacingMacOk returns a tuple with the ReplacingMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallerProvisionDevice) GetReplacingMacOk() (*string, bool) {
	if o == nil || IsNil(o.ReplacingMac) {
		return nil, false
	}
	return o.ReplacingMac, true
}

// HasReplacingMac returns a boolean if a field has been set.
func (o *InstallerProvisionDevice) HasReplacingMac() bool {
	if o != nil && !IsNil(o.ReplacingMac) {
		return true
	}

	return false
}

// SetReplacingMac gets a reference to the given string and assigns it to the ReplacingMac field.
func (o *InstallerProvisionDevice) SetReplacingMac(v string) {
	o.ReplacingMac = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *InstallerProvisionDevice) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallerProvisionDevice) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *InstallerProvisionDevice) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *InstallerProvisionDevice) SetRole(v string) {
	o.Role = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *InstallerProvisionDevice) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallerProvisionDevice) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *InstallerProvisionDevice) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *InstallerProvisionDevice) SetSiteId(v string) {
	o.SiteId = &v
}

// GetSiteName returns the SiteName field value if set, zero value otherwise.
func (o *InstallerProvisionDevice) GetSiteName() string {
	if o == nil || IsNil(o.SiteName) {
		var ret string
		return ret
	}
	return *o.SiteName
}

// GetSiteNameOk returns a tuple with the SiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallerProvisionDevice) GetSiteNameOk() (*string, bool) {
	if o == nil || IsNil(o.SiteName) {
		return nil, false
	}
	return o.SiteName, true
}

// HasSiteName returns a boolean if a field has been set.
func (o *InstallerProvisionDevice) HasSiteName() bool {
	if o != nil && !IsNil(o.SiteName) {
		return true
	}

	return false
}

// SetSiteName gets a reference to the given string and assigns it to the SiteName field.
func (o *InstallerProvisionDevice) SetSiteName(v string) {
	o.SiteName = &v
}

// GetX returns the X field value if set, zero value otherwise.
func (o *InstallerProvisionDevice) GetX() float32 {
	if o == nil || IsNil(o.X) {
		var ret float32
		return ret
	}
	return *o.X
}

// GetXOk returns a tuple with the X field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallerProvisionDevice) GetXOk() (*float32, bool) {
	if o == nil || IsNil(o.X) {
		return nil, false
	}
	return o.X, true
}

// HasX returns a boolean if a field has been set.
func (o *InstallerProvisionDevice) HasX() bool {
	if o != nil && !IsNil(o.X) {
		return true
	}

	return false
}

// SetX gets a reference to the given float32 and assigns it to the X field.
func (o *InstallerProvisionDevice) SetX(v float32) {
	o.X = &v
}

// GetY returns the Y field value if set, zero value otherwise.
func (o *InstallerProvisionDevice) GetY() float32 {
	if o == nil || IsNil(o.Y) {
		var ret float32
		return ret
	}
	return *o.Y
}

// GetYOk returns a tuple with the Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallerProvisionDevice) GetYOk() (*float32, bool) {
	if o == nil || IsNil(o.Y) {
		return nil, false
	}
	return o.Y, true
}

// HasY returns a boolean if a field has been set.
func (o *InstallerProvisionDevice) HasY() bool {
	if o != nil && !IsNil(o.Y) {
		return true
	}

	return false
}

// SetY gets a reference to the given float32 and assigns it to the Y field.
func (o *InstallerProvisionDevice) SetY(v float32) {
	o.Y = &v
}

func (o InstallerProvisionDevice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstallerProvisionDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceprofileName) {
		toSerialize["deviceprofile_name"] = o.DeviceprofileName
	}
	if !IsNil(o.ForSite) {
		toSerialize["for_site"] = o.ForSite
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.MapId) {
		toSerialize["map_id"] = o.MapId
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Orientation) {
		toSerialize["orientation"] = o.Orientation
	}
	if !IsNil(o.ReplacingMac) {
		toSerialize["replacing_mac"] = o.ReplacingMac
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.SiteName) {
		toSerialize["site_name"] = o.SiteName
	}
	if !IsNil(o.X) {
		toSerialize["x"] = o.X
	}
	if !IsNil(o.Y) {
		toSerialize["y"] = o.Y
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstallerProvisionDevice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstallerProvisionDevice := _InstallerProvisionDevice{}

	err = json.Unmarshal(data, &varInstallerProvisionDevice)

	if err != nil {
		return err
	}

	*o = InstallerProvisionDevice(varInstallerProvisionDevice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "deviceprofile_name")
		delete(additionalProperties, "for_site")
		delete(additionalProperties, "height")
		delete(additionalProperties, "map_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "orientation")
		delete(additionalProperties, "replacing_mac")
		delete(additionalProperties, "role")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "site_name")
		delete(additionalProperties, "x")
		delete(additionalProperties, "y")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstallerProvisionDevice struct {
	value *InstallerProvisionDevice
	isSet bool
}

func (v NullableInstallerProvisionDevice) Get() *InstallerProvisionDevice {
	return v.value
}

func (v *NullableInstallerProvisionDevice) Set(val *InstallerProvisionDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallerProvisionDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallerProvisionDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallerProvisionDevice(val *InstallerProvisionDevice) *NullableInstallerProvisionDevice {
	return &NullableInstallerProvisionDevice{value: val, isSet: true}
}

func (v NullableInstallerProvisionDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallerProvisionDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


