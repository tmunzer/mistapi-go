/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the OspfConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OspfConfig{}

// OspfConfig Junos OSPF config
type OspfConfig struct {
	// OSPF areas to run on this device and the corresponding per-area-specific configs. Property key is the area
	Areas *map[string]OspfConfigAreasAdditionalProperties `json:"areas,omitempty"`
	// whether to rung OSPF on this device
	Enabled *bool `json:"enabled,omitempty"`
	// Bandwidth for calculating metric defaults (9600..4000000000000)
	ReferenceBandwidth *string `json:"reference_bandwidth,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OspfConfig OspfConfig

// NewOspfConfig instantiates a new OspfConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOspfConfig() *OspfConfig {
	this := OspfConfig{}
	var referenceBandwidth string = "100M"
	this.ReferenceBandwidth = &referenceBandwidth
	return &this
}

// NewOspfConfigWithDefaults instantiates a new OspfConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOspfConfigWithDefaults() *OspfConfig {
	this := OspfConfig{}
	var referenceBandwidth string = "100M"
	this.ReferenceBandwidth = &referenceBandwidth
	return &this
}

// GetAreas returns the Areas field value if set, zero value otherwise.
func (o *OspfConfig) GetAreas() map[string]OspfConfigAreasAdditionalProperties {
	if o == nil || IsNil(o.Areas) {
		var ret map[string]OspfConfigAreasAdditionalProperties
		return ret
	}
	return *o.Areas
}

// GetAreasOk returns a tuple with the Areas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OspfConfig) GetAreasOk() (*map[string]OspfConfigAreasAdditionalProperties, bool) {
	if o == nil || IsNil(o.Areas) {
		return nil, false
	}
	return o.Areas, true
}

// HasAreas returns a boolean if a field has been set.
func (o *OspfConfig) HasAreas() bool {
	if o != nil && !IsNil(o.Areas) {
		return true
	}

	return false
}

// SetAreas gets a reference to the given map[string]OspfConfigAreasAdditionalProperties and assigns it to the Areas field.
func (o *OspfConfig) SetAreas(v map[string]OspfConfigAreasAdditionalProperties) {
	o.Areas = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *OspfConfig) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OspfConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *OspfConfig) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *OspfConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetReferenceBandwidth returns the ReferenceBandwidth field value if set, zero value otherwise.
func (o *OspfConfig) GetReferenceBandwidth() string {
	if o == nil || IsNil(o.ReferenceBandwidth) {
		var ret string
		return ret
	}
	return *o.ReferenceBandwidth
}

// GetReferenceBandwidthOk returns a tuple with the ReferenceBandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OspfConfig) GetReferenceBandwidthOk() (*string, bool) {
	if o == nil || IsNil(o.ReferenceBandwidth) {
		return nil, false
	}
	return o.ReferenceBandwidth, true
}

// HasReferenceBandwidth returns a boolean if a field has been set.
func (o *OspfConfig) HasReferenceBandwidth() bool {
	if o != nil && !IsNil(o.ReferenceBandwidth) {
		return true
	}

	return false
}

// SetReferenceBandwidth gets a reference to the given string and assigns it to the ReferenceBandwidth field.
func (o *OspfConfig) SetReferenceBandwidth(v string) {
	o.ReferenceBandwidth = &v
}

func (o OspfConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OspfConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Areas) {
		toSerialize["areas"] = o.Areas
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ReferenceBandwidth) {
		toSerialize["reference_bandwidth"] = o.ReferenceBandwidth
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OspfConfig) UnmarshalJSON(data []byte) (err error) {
	varOspfConfig := _OspfConfig{}

	err = json.Unmarshal(data, &varOspfConfig)

	if err != nil {
		return err
	}

	*o = OspfConfig(varOspfConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "areas")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "reference_bandwidth")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOspfConfig struct {
	value *OspfConfig
	isSet bool
}

func (v NullableOspfConfig) Get() *OspfConfig {
	return v.value
}

func (v *NullableOspfConfig) Set(val *OspfConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableOspfConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableOspfConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOspfConfig(val *OspfConfig) *NullableOspfConfig {
	return &NullableOspfConfig{value: val, isSet: true}
}

func (v NullableOspfConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOspfConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


