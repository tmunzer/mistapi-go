/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the ConstApLed type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConstApLed{}

// ConstApLed struct for ConstApLed
type ConstApLed struct {
	Code string `json:"code"`
	Description string `json:"description"`
	Key string `json:"key"`
	Name string `json:"name"`
	AdditionalProperties map[string]interface{}
}

type _ConstApLed ConstApLed

// NewConstApLed instantiates a new ConstApLed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConstApLed(code string, description string, key string, name string) *ConstApLed {
	this := ConstApLed{}
	this.Code = code
	this.Description = description
	this.Key = key
	this.Name = name
	return &this
}

// NewConstApLedWithDefaults instantiates a new ConstApLed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConstApLedWithDefaults() *ConstApLed {
	this := ConstApLed{}
	return &this
}

// GetCode returns the Code field value
func (o *ConstApLed) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *ConstApLed) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *ConstApLed) SetCode(v string) {
	o.Code = v
}

// GetDescription returns the Description field value
func (o *ConstApLed) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ConstApLed) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ConstApLed) SetDescription(v string) {
	o.Description = v
}

// GetKey returns the Key field value
func (o *ConstApLed) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ConstApLed) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ConstApLed) SetKey(v string) {
	o.Key = v
}

// GetName returns the Name field value
func (o *ConstApLed) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConstApLed) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConstApLed) SetName(v string) {
	o.Name = v
}

func (o ConstApLed) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConstApLed) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["description"] = o.Description
	toSerialize["key"] = o.Key
	toSerialize["name"] = o.Name

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConstApLed) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"description",
		"key",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConstApLed := _ConstApLed{}

	err = json.Unmarshal(data, &varConstApLed)

	if err != nil {
		return err
	}

	*o = ConstApLed(varConstApLed)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "description")
		delete(additionalProperties, "key")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConstApLed struct {
	value *ConstApLed
	isSet bool
}

func (v NullableConstApLed) Get() *ConstApLed {
	return v.value
}

func (v *NullableConstApLed) Set(val *ConstApLed) {
	v.value = val
	v.isSet = true
}

func (v NullableConstApLed) IsSet() bool {
	return v.isSet
}

func (v *NullableConstApLed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConstApLed(val *ConstApLed) *NullableConstApLed {
	return &NullableConstApLed{value: val, isSet: true}
}

func (v NullableConstApLed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConstApLed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


