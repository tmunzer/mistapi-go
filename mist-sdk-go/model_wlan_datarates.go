/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the WlanDatarates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WlanDatarates{}

// WlanDatarates data rates wlan settings
type WlanDatarates struct {
	// MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 00ff 00f0 001f limits HT rates to MCS 0-7 for 1 stream, MCS 4-7 for 2 stream (i.e. MCS 12-15), MCS 1-5 for 3 stream (i.e. MCS 16-20)
	Ht NullableString `json:"ht,omitempty"`
	// list of supported rates (IE=1) and extended supported rates (IE=50) for custom template, append ‘b’ at the end to indicate a rate being basic/mandatory. If `template`==`custom` is configured and legacy does not define at least one basic rate, it will use `no-legacy` default values
	Legacy []WlanDataratesLegacyItem `json:"legacy,omitempty"`
	// Minimum RSSI for client to connect, 0 means not enforcing
	MinRssi *int32 `json:"min_rssi,omitempty"`
	// * `no-legacy`: no 11b * `compatible`: all, like before, default setting that Broadcom/Atheros used * `legacy-only`: disable 802.11n and 802.11ac  * `high-density`: no 11b, no low rates * `custom`: user defined
	Template NullableString `json:"template,omitempty"`
	// MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 03ff 01ff 00ff limits VHT rates to MCS 0-9 for 1 stream, MCS 0-8 for 2 streams, and MCS 0-7 for 3 streams.
	Vht *string `json:"vht,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WlanDatarates WlanDatarates

// NewWlanDatarates instantiates a new WlanDatarates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWlanDatarates() *WlanDatarates {
	this := WlanDatarates{}
	return &this
}

// NewWlanDataratesWithDefaults instantiates a new WlanDatarates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWlanDataratesWithDefaults() *WlanDatarates {
	this := WlanDatarates{}
	return &this
}

// GetHt returns the Ht field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WlanDatarates) GetHt() string {
	if o == nil || IsNil(o.Ht.Get()) {
		var ret string
		return ret
	}
	return *o.Ht.Get()
}

// GetHtOk returns a tuple with the Ht field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WlanDatarates) GetHtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ht.Get(), o.Ht.IsSet()
}

// HasHt returns a boolean if a field has been set.
func (o *WlanDatarates) HasHt() bool {
	if o != nil && o.Ht.IsSet() {
		return true
	}

	return false
}

// SetHt gets a reference to the given NullableString and assigns it to the Ht field.
func (o *WlanDatarates) SetHt(v string) {
	o.Ht.Set(&v)
}
// SetHtNil sets the value for Ht to be an explicit nil
func (o *WlanDatarates) SetHtNil() {
	o.Ht.Set(nil)
}

// UnsetHt ensures that no value is present for Ht, not even an explicit nil
func (o *WlanDatarates) UnsetHt() {
	o.Ht.Unset()
}

// GetLegacy returns the Legacy field value if set, zero value otherwise.
func (o *WlanDatarates) GetLegacy() []WlanDataratesLegacyItem {
	if o == nil || IsNil(o.Legacy) {
		var ret []WlanDataratesLegacyItem
		return ret
	}
	return o.Legacy
}

// GetLegacyOk returns a tuple with the Legacy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanDatarates) GetLegacyOk() ([]WlanDataratesLegacyItem, bool) {
	if o == nil || IsNil(o.Legacy) {
		return nil, false
	}
	return o.Legacy, true
}

// HasLegacy returns a boolean if a field has been set.
func (o *WlanDatarates) HasLegacy() bool {
	if o != nil && !IsNil(o.Legacy) {
		return true
	}

	return false
}

// SetLegacy gets a reference to the given []WlanDataratesLegacyItem and assigns it to the Legacy field.
func (o *WlanDatarates) SetLegacy(v []WlanDataratesLegacyItem) {
	o.Legacy = v
}

// GetMinRssi returns the MinRssi field value if set, zero value otherwise.
func (o *WlanDatarates) GetMinRssi() int32 {
	if o == nil || IsNil(o.MinRssi) {
		var ret int32
		return ret
	}
	return *o.MinRssi
}

// GetMinRssiOk returns a tuple with the MinRssi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanDatarates) GetMinRssiOk() (*int32, bool) {
	if o == nil || IsNil(o.MinRssi) {
		return nil, false
	}
	return o.MinRssi, true
}

// HasMinRssi returns a boolean if a field has been set.
func (o *WlanDatarates) HasMinRssi() bool {
	if o != nil && !IsNil(o.MinRssi) {
		return true
	}

	return false
}

// SetMinRssi gets a reference to the given int32 and assigns it to the MinRssi field.
func (o *WlanDatarates) SetMinRssi(v int32) {
	o.MinRssi = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WlanDatarates) GetTemplate() string {
	if o == nil || IsNil(o.Template.Get()) {
		var ret string
		return ret
	}
	return *o.Template.Get()
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WlanDatarates) GetTemplateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Template.Get(), o.Template.IsSet()
}

// HasTemplate returns a boolean if a field has been set.
func (o *WlanDatarates) HasTemplate() bool {
	if o != nil && o.Template.IsSet() {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given NullableString and assigns it to the Template field.
func (o *WlanDatarates) SetTemplate(v string) {
	o.Template.Set(&v)
}
// SetTemplateNil sets the value for Template to be an explicit nil
func (o *WlanDatarates) SetTemplateNil() {
	o.Template.Set(nil)
}

// UnsetTemplate ensures that no value is present for Template, not even an explicit nil
func (o *WlanDatarates) UnsetTemplate() {
	o.Template.Unset()
}

// GetVht returns the Vht field value if set, zero value otherwise.
func (o *WlanDatarates) GetVht() string {
	if o == nil || IsNil(o.Vht) {
		var ret string
		return ret
	}
	return *o.Vht
}

// GetVhtOk returns a tuple with the Vht field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanDatarates) GetVhtOk() (*string, bool) {
	if o == nil || IsNil(o.Vht) {
		return nil, false
	}
	return o.Vht, true
}

// HasVht returns a boolean if a field has been set.
func (o *WlanDatarates) HasVht() bool {
	if o != nil && !IsNil(o.Vht) {
		return true
	}

	return false
}

// SetVht gets a reference to the given string and assigns it to the Vht field.
func (o *WlanDatarates) SetVht(v string) {
	o.Vht = &v
}

func (o WlanDatarates) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WlanDatarates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Ht.IsSet() {
		toSerialize["ht"] = o.Ht.Get()
	}
	if !IsNil(o.Legacy) {
		toSerialize["legacy"] = o.Legacy
	}
	if !IsNil(o.MinRssi) {
		toSerialize["min_rssi"] = o.MinRssi
	}
	if o.Template.IsSet() {
		toSerialize["template"] = o.Template.Get()
	}
	if !IsNil(o.Vht) {
		toSerialize["vht"] = o.Vht
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WlanDatarates) UnmarshalJSON(data []byte) (err error) {
	varWlanDatarates := _WlanDatarates{}

	err = json.Unmarshal(data, &varWlanDatarates)

	if err != nil {
		return err
	}

	*o = WlanDatarates(varWlanDatarates)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ht")
		delete(additionalProperties, "legacy")
		delete(additionalProperties, "min_rssi")
		delete(additionalProperties, "template")
		delete(additionalProperties, "vht")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWlanDatarates struct {
	value *WlanDatarates
	isSet bool
}

func (v NullableWlanDatarates) Get() *WlanDatarates {
	return v.value
}

func (v *NullableWlanDatarates) Set(val *WlanDatarates) {
	v.value = val
	v.isSet = true
}

func (v NullableWlanDatarates) IsSet() bool {
	return v.isSet
}

func (v *NullableWlanDatarates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWlanDatarates(val *WlanDatarates) *NullableWlanDatarates {
	return &NullableWlanDatarates{value: val, isSet: true}
}

func (v NullableWlanDatarates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWlanDatarates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


