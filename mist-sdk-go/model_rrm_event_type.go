/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// RrmEventType schedule-site_rrm / triggered-site_rrm / interference-ap-co-channel / rrm-radar
type RrmEventType string

// List of rrm_event_type
const (
	RRMEVENTTYPE_EMPTY RrmEventType = ""
	RRMEVENTTYPE_TRIGGERED_SITE_RRM RrmEventType = "triggered-site_rrm"
	RRMEVENTTYPE_INTERFERENCE_AP_CO_CHANNEL RrmEventType = "interference-ap-co-channel"
	RRMEVENTTYPE_RRM_RADAR RrmEventType = "rrm-radar"
	RRMEVENTTYPE_SCHEDULED_SITE_RRM RrmEventType = "scheduled-site_rrm"
	RRMEVENTTYPE_INTERFERENCE_AP_NON_WIFI RrmEventType = "interference-ap-non-wifi"
	RRMEVENTTYPE_RADAR_DETECTED RrmEventType = "radar-detected"
	RRMEVENTTYPE_NEIGHBOR_AP_DOWN RrmEventType = "neighbor-ap-down"
	RRMEVENTTYPE_NEIGHBOR_AP_RECOVERED RrmEventType = "neighbor-ap-recovered"
)

// All allowed values of RrmEventType enum
var AllowedRrmEventTypeEnumValues = []RrmEventType{
	"",
	"triggered-site_rrm",
	"interference-ap-co-channel",
	"rrm-radar",
	"scheduled-site_rrm",
	"interference-ap-non-wifi",
	"radar-detected",
	"neighbor-ap-down",
	"neighbor-ap-recovered",
}

func (v *RrmEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RrmEventType(value)
	for _, existing := range AllowedRrmEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RrmEventType", value)
}

// NewRrmEventTypeFromValue returns a pointer to a valid RrmEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRrmEventTypeFromValue(v string) (*RrmEventType, error) {
	ev := RrmEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RrmEventType: valid values are %v", v, AllowedRrmEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RrmEventType) IsValid() bool {
	for _, existing := range AllowedRrmEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to rrm_event_type value
func (v RrmEventType) Ptr() *RrmEventType {
	return &v
}

type NullableRrmEventType struct {
	value *RrmEventType
	isSet bool
}

func (v NullableRrmEventType) Get() *RrmEventType {
	return v.value
}

func (v *NullableRrmEventType) Set(val *RrmEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableRrmEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableRrmEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRrmEventType(val *RrmEventType) *NullableRrmEventType {
	return &NullableRrmEventType{value: val, isSet: true}
}

func (v NullableRrmEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRrmEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

