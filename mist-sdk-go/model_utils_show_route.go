/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the UtilsShowRoute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UtilsShowRoute{}

// UtilsShowRoute struct for UtilsShowRoute
type UtilsShowRoute struct {
	// duration in sec for which refresh is enabled. Should be set only if interval is configured to non-zero value.
	Duration *int32 `json:"duration,omitempty"`
	// rate at which output will refresh
	Interval *int32 `json:"interval,omitempty"`
	// IP of the neighbor
	Neighbor *string `json:"neighbor,omitempty"`
	Node *HaClusterNode `json:"node,omitempty"`
	// route prefix
	Prefix *string `json:"prefix,omitempty"`
	Protocol *UtilsShowRouteProtocol `json:"protocol,omitempty"`
	// if specified, dump bot received and advertised, if not specified, both will be shown * for SSR, show bgp neighbors 10.250.18.202 received-routes/advertised-routes * for SRX and Switches, show route receive_protocol/advertise_protocol bgp 192.168.255.12
	Route *string `json:"route,omitempty"`
	// VRF name
	Vrf *string `json:"vrf,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UtilsShowRoute UtilsShowRoute

// NewUtilsShowRoute instantiates a new UtilsShowRoute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUtilsShowRoute() *UtilsShowRoute {
	this := UtilsShowRoute{}
	var duration int32 = 0
	this.Duration = &duration
	var interval int32 = 0
	this.Interval = &interval
	var protocol UtilsShowRouteProtocol = UTILSSHOWROUTEPROTOCOL_BGP
	this.Protocol = &protocol
	return &this
}

// NewUtilsShowRouteWithDefaults instantiates a new UtilsShowRoute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUtilsShowRouteWithDefaults() *UtilsShowRoute {
	this := UtilsShowRoute{}
	var duration int32 = 0
	this.Duration = &duration
	var interval int32 = 0
	this.Interval = &interval
	var protocol UtilsShowRouteProtocol = UTILSSHOWROUTEPROTOCOL_BGP
	this.Protocol = &protocol
	return &this
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *UtilsShowRoute) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsShowRoute) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *UtilsShowRoute) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *UtilsShowRoute) SetDuration(v int32) {
	o.Duration = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *UtilsShowRoute) GetInterval() int32 {
	if o == nil || IsNil(o.Interval) {
		var ret int32
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsShowRoute) GetIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *UtilsShowRoute) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int32 and assigns it to the Interval field.
func (o *UtilsShowRoute) SetInterval(v int32) {
	o.Interval = &v
}

// GetNeighbor returns the Neighbor field value if set, zero value otherwise.
func (o *UtilsShowRoute) GetNeighbor() string {
	if o == nil || IsNil(o.Neighbor) {
		var ret string
		return ret
	}
	return *o.Neighbor
}

// GetNeighborOk returns a tuple with the Neighbor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsShowRoute) GetNeighborOk() (*string, bool) {
	if o == nil || IsNil(o.Neighbor) {
		return nil, false
	}
	return o.Neighbor, true
}

// HasNeighbor returns a boolean if a field has been set.
func (o *UtilsShowRoute) HasNeighbor() bool {
	if o != nil && !IsNil(o.Neighbor) {
		return true
	}

	return false
}

// SetNeighbor gets a reference to the given string and assigns it to the Neighbor field.
func (o *UtilsShowRoute) SetNeighbor(v string) {
	o.Neighbor = &v
}

// GetNode returns the Node field value if set, zero value otherwise.
func (o *UtilsShowRoute) GetNode() HaClusterNode {
	if o == nil || IsNil(o.Node) {
		var ret HaClusterNode
		return ret
	}
	return *o.Node
}

// GetNodeOk returns a tuple with the Node field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsShowRoute) GetNodeOk() (*HaClusterNode, bool) {
	if o == nil || IsNil(o.Node) {
		return nil, false
	}
	return o.Node, true
}

// HasNode returns a boolean if a field has been set.
func (o *UtilsShowRoute) HasNode() bool {
	if o != nil && !IsNil(o.Node) {
		return true
	}

	return false
}

// SetNode gets a reference to the given HaClusterNode and assigns it to the Node field.
func (o *UtilsShowRoute) SetNode(v HaClusterNode) {
	o.Node = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *UtilsShowRoute) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsShowRoute) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *UtilsShowRoute) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *UtilsShowRoute) SetPrefix(v string) {
	o.Prefix = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *UtilsShowRoute) GetProtocol() UtilsShowRouteProtocol {
	if o == nil || IsNil(o.Protocol) {
		var ret UtilsShowRouteProtocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsShowRoute) GetProtocolOk() (*UtilsShowRouteProtocol, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *UtilsShowRoute) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given UtilsShowRouteProtocol and assigns it to the Protocol field.
func (o *UtilsShowRoute) SetProtocol(v UtilsShowRouteProtocol) {
	o.Protocol = &v
}

// GetRoute returns the Route field value if set, zero value otherwise.
func (o *UtilsShowRoute) GetRoute() string {
	if o == nil || IsNil(o.Route) {
		var ret string
		return ret
	}
	return *o.Route
}

// GetRouteOk returns a tuple with the Route field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsShowRoute) GetRouteOk() (*string, bool) {
	if o == nil || IsNil(o.Route) {
		return nil, false
	}
	return o.Route, true
}

// HasRoute returns a boolean if a field has been set.
func (o *UtilsShowRoute) HasRoute() bool {
	if o != nil && !IsNil(o.Route) {
		return true
	}

	return false
}

// SetRoute gets a reference to the given string and assigns it to the Route field.
func (o *UtilsShowRoute) SetRoute(v string) {
	o.Route = &v
}

// GetVrf returns the Vrf field value if set, zero value otherwise.
func (o *UtilsShowRoute) GetVrf() string {
	if o == nil || IsNil(o.Vrf) {
		var ret string
		return ret
	}
	return *o.Vrf
}

// GetVrfOk returns a tuple with the Vrf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsShowRoute) GetVrfOk() (*string, bool) {
	if o == nil || IsNil(o.Vrf) {
		return nil, false
	}
	return o.Vrf, true
}

// HasVrf returns a boolean if a field has been set.
func (o *UtilsShowRoute) HasVrf() bool {
	if o != nil && !IsNil(o.Vrf) {
		return true
	}

	return false
}

// SetVrf gets a reference to the given string and assigns it to the Vrf field.
func (o *UtilsShowRoute) SetVrf(v string) {
	o.Vrf = &v
}

func (o UtilsShowRoute) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UtilsShowRoute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.Neighbor) {
		toSerialize["neighbor"] = o.Neighbor
	}
	if !IsNil(o.Node) {
		toSerialize["node"] = o.Node
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.Route) {
		toSerialize["route"] = o.Route
	}
	if !IsNil(o.Vrf) {
		toSerialize["vrf"] = o.Vrf
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UtilsShowRoute) UnmarshalJSON(data []byte) (err error) {
	varUtilsShowRoute := _UtilsShowRoute{}

	err = json.Unmarshal(data, &varUtilsShowRoute)

	if err != nil {
		return err
	}

	*o = UtilsShowRoute(varUtilsShowRoute)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "duration")
		delete(additionalProperties, "interval")
		delete(additionalProperties, "neighbor")
		delete(additionalProperties, "node")
		delete(additionalProperties, "prefix")
		delete(additionalProperties, "protocol")
		delete(additionalProperties, "route")
		delete(additionalProperties, "vrf")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUtilsShowRoute struct {
	value *UtilsShowRoute
	isSet bool
}

func (v NullableUtilsShowRoute) Get() *UtilsShowRoute {
	return v.value
}

func (v *NullableUtilsShowRoute) Set(val *UtilsShowRoute) {
	v.value = val
	v.isSet = true
}

func (v NullableUtilsShowRoute) IsSet() bool {
	return v.isSet
}

func (v *NullableUtilsShowRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUtilsShowRoute(val *UtilsShowRoute) *NullableUtilsShowRoute {
	return &NullableUtilsShowRoute{value: val, isSet: true}
}

func (v NullableUtilsShowRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUtilsShowRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


