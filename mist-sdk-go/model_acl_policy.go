/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the AclPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AclPolicy{}

// AclPolicy - for GBP-based policy, all src_tags and dst_tags have to be gbp-based - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
type AclPolicy struct {
	// - for GBP-based policy, all src_tags and dst_tags have to be gbp-based - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
	Actions []AclPolicyAction `json:"actions,omitempty"`
	Name *string `json:"name,omitempty"`
	// - for GBP-based policy, all src_tags and dst_tags have to be gbp-based - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
	SrcTags []string `json:"src_tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AclPolicy AclPolicy

// NewAclPolicy instantiates a new AclPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAclPolicy() *AclPolicy {
	this := AclPolicy{}
	return &this
}

// NewAclPolicyWithDefaults instantiates a new AclPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAclPolicyWithDefaults() *AclPolicy {
	this := AclPolicy{}
	return &this
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *AclPolicy) GetActions() []AclPolicyAction {
	if o == nil || IsNil(o.Actions) {
		var ret []AclPolicyAction
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AclPolicy) GetActionsOk() ([]AclPolicyAction, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *AclPolicy) HasActions() bool {
	if o != nil && !IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []AclPolicyAction and assigns it to the Actions field.
func (o *AclPolicy) SetActions(v []AclPolicyAction) {
	o.Actions = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AclPolicy) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AclPolicy) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AclPolicy) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AclPolicy) SetName(v string) {
	o.Name = &v
}

// GetSrcTags returns the SrcTags field value if set, zero value otherwise.
func (o *AclPolicy) GetSrcTags() []string {
	if o == nil || IsNil(o.SrcTags) {
		var ret []string
		return ret
	}
	return o.SrcTags
}

// GetSrcTagsOk returns a tuple with the SrcTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AclPolicy) GetSrcTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.SrcTags) {
		return nil, false
	}
	return o.SrcTags, true
}

// HasSrcTags returns a boolean if a field has been set.
func (o *AclPolicy) HasSrcTags() bool {
	if o != nil && !IsNil(o.SrcTags) {
		return true
	}

	return false
}

// SetSrcTags gets a reference to the given []string and assigns it to the SrcTags field.
func (o *AclPolicy) SetSrcTags(v []string) {
	o.SrcTags = v
}

func (o AclPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AclPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SrcTags) {
		toSerialize["src_tags"] = o.SrcTags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AclPolicy) UnmarshalJSON(data []byte) (err error) {
	varAclPolicy := _AclPolicy{}

	err = json.Unmarshal(data, &varAclPolicy)

	if err != nil {
		return err
	}

	*o = AclPolicy(varAclPolicy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "actions")
		delete(additionalProperties, "name")
		delete(additionalProperties, "src_tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAclPolicy struct {
	value *AclPolicy
	isSet bool
}

func (v NullableAclPolicy) Get() *AclPolicy {
	return v.value
}

func (v *NullableAclPolicy) Set(val *AclPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableAclPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableAclPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAclPolicy(val *AclPolicy) *NullableAclPolicy {
	return &NullableAclPolicy{value: val, isSet: true}
}

func (v NullableAclPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAclPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


