/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the WxlanRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WxlanRule{}

// WxlanRule WXlan
type WxlanRule struct {
	Action *WxlanRuleAction `json:"action,omitempty"`
	ApplyTags []string `json:"apply_tags,omitempty"`
	// blocked apps (always blocking, ignoring action), the key of Get Application List
	BlockedApps []string `json:"blocked_apps,omitempty"`
	CreatedTime *float32 `json:"created_time,omitempty"`
	// tag list to indicate these tags are allowed access
	DstAllowWxtags []string `json:"dst_allow_wxtags,omitempty"`
	// tag list to indicate these tags are blocked access
	DstDenyWxtags []string `json:"dst_deny_wxtags,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	ForSite *bool `json:"for_site,omitempty"`
	Id *string `json:"id,omitempty"`
	ModifiedTime *float32 `json:"modified_time,omitempty"`
	// the order how rules would be looked up, > 0 and bigger order got matched first, -1 means LAST, uniqueness not checked
	Order int32 `json:"order"`
	OrgId *string `json:"org_id,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	// tag list to determine if this rule would match
	SrcWxtags []string `json:"src_wxtags"`
	// Only for Org Level WxRule
	TemplateId *string `json:"template_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WxlanRule WxlanRule

// NewWxlanRule instantiates a new WxlanRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWxlanRule(order int32, srcWxtags []string) *WxlanRule {
	this := WxlanRule{}
	var enabled bool = true
	this.Enabled = &enabled
	this.Order = order
	this.SrcWxtags = srcWxtags
	return &this
}

// NewWxlanRuleWithDefaults instantiates a new WxlanRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWxlanRuleWithDefaults() *WxlanRule {
	this := WxlanRule{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *WxlanRule) GetAction() WxlanRuleAction {
	if o == nil || IsNil(o.Action) {
		var ret WxlanRuleAction
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanRule) GetActionOk() (*WxlanRuleAction, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *WxlanRule) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given WxlanRuleAction and assigns it to the Action field.
func (o *WxlanRule) SetAction(v WxlanRuleAction) {
	o.Action = &v
}

// GetApplyTags returns the ApplyTags field value if set, zero value otherwise.
func (o *WxlanRule) GetApplyTags() []string {
	if o == nil || IsNil(o.ApplyTags) {
		var ret []string
		return ret
	}
	return o.ApplyTags
}

// GetApplyTagsOk returns a tuple with the ApplyTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanRule) GetApplyTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.ApplyTags) {
		return nil, false
	}
	return o.ApplyTags, true
}

// HasApplyTags returns a boolean if a field has been set.
func (o *WxlanRule) HasApplyTags() bool {
	if o != nil && !IsNil(o.ApplyTags) {
		return true
	}

	return false
}

// SetApplyTags gets a reference to the given []string and assigns it to the ApplyTags field.
func (o *WxlanRule) SetApplyTags(v []string) {
	o.ApplyTags = v
}

// GetBlockedApps returns the BlockedApps field value if set, zero value otherwise.
func (o *WxlanRule) GetBlockedApps() []string {
	if o == nil || IsNil(o.BlockedApps) {
		var ret []string
		return ret
	}
	return o.BlockedApps
}

// GetBlockedAppsOk returns a tuple with the BlockedApps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanRule) GetBlockedAppsOk() ([]string, bool) {
	if o == nil || IsNil(o.BlockedApps) {
		return nil, false
	}
	return o.BlockedApps, true
}

// HasBlockedApps returns a boolean if a field has been set.
func (o *WxlanRule) HasBlockedApps() bool {
	if o != nil && !IsNil(o.BlockedApps) {
		return true
	}

	return false
}

// SetBlockedApps gets a reference to the given []string and assigns it to the BlockedApps field.
func (o *WxlanRule) SetBlockedApps(v []string) {
	o.BlockedApps = v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *WxlanRule) GetCreatedTime() float32 {
	if o == nil || IsNil(o.CreatedTime) {
		var ret float32
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanRule) GetCreatedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *WxlanRule) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given float32 and assigns it to the CreatedTime field.
func (o *WxlanRule) SetCreatedTime(v float32) {
	o.CreatedTime = &v
}

// GetDstAllowWxtags returns the DstAllowWxtags field value if set, zero value otherwise.
func (o *WxlanRule) GetDstAllowWxtags() []string {
	if o == nil || IsNil(o.DstAllowWxtags) {
		var ret []string
		return ret
	}
	return o.DstAllowWxtags
}

// GetDstAllowWxtagsOk returns a tuple with the DstAllowWxtags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanRule) GetDstAllowWxtagsOk() ([]string, bool) {
	if o == nil || IsNil(o.DstAllowWxtags) {
		return nil, false
	}
	return o.DstAllowWxtags, true
}

// HasDstAllowWxtags returns a boolean if a field has been set.
func (o *WxlanRule) HasDstAllowWxtags() bool {
	if o != nil && !IsNil(o.DstAllowWxtags) {
		return true
	}

	return false
}

// SetDstAllowWxtags gets a reference to the given []string and assigns it to the DstAllowWxtags field.
func (o *WxlanRule) SetDstAllowWxtags(v []string) {
	o.DstAllowWxtags = v
}

// GetDstDenyWxtags returns the DstDenyWxtags field value if set, zero value otherwise.
func (o *WxlanRule) GetDstDenyWxtags() []string {
	if o == nil || IsNil(o.DstDenyWxtags) {
		var ret []string
		return ret
	}
	return o.DstDenyWxtags
}

// GetDstDenyWxtagsOk returns a tuple with the DstDenyWxtags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanRule) GetDstDenyWxtagsOk() ([]string, bool) {
	if o == nil || IsNil(o.DstDenyWxtags) {
		return nil, false
	}
	return o.DstDenyWxtags, true
}

// HasDstDenyWxtags returns a boolean if a field has been set.
func (o *WxlanRule) HasDstDenyWxtags() bool {
	if o != nil && !IsNil(o.DstDenyWxtags) {
		return true
	}

	return false
}

// SetDstDenyWxtags gets a reference to the given []string and assigns it to the DstDenyWxtags field.
func (o *WxlanRule) SetDstDenyWxtags(v []string) {
	o.DstDenyWxtags = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *WxlanRule) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanRule) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *WxlanRule) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *WxlanRule) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetForSite returns the ForSite field value if set, zero value otherwise.
func (o *WxlanRule) GetForSite() bool {
	if o == nil || IsNil(o.ForSite) {
		var ret bool
		return ret
	}
	return *o.ForSite
}

// GetForSiteOk returns a tuple with the ForSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanRule) GetForSiteOk() (*bool, bool) {
	if o == nil || IsNil(o.ForSite) {
		return nil, false
	}
	return o.ForSite, true
}

// HasForSite returns a boolean if a field has been set.
func (o *WxlanRule) HasForSite() bool {
	if o != nil && !IsNil(o.ForSite) {
		return true
	}

	return false
}

// SetForSite gets a reference to the given bool and assigns it to the ForSite field.
func (o *WxlanRule) SetForSite(v bool) {
	o.ForSite = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WxlanRule) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanRule) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WxlanRule) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WxlanRule) SetId(v string) {
	o.Id = &v
}

// GetModifiedTime returns the ModifiedTime field value if set, zero value otherwise.
func (o *WxlanRule) GetModifiedTime() float32 {
	if o == nil || IsNil(o.ModifiedTime) {
		var ret float32
		return ret
	}
	return *o.ModifiedTime
}

// GetModifiedTimeOk returns a tuple with the ModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanRule) GetModifiedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.ModifiedTime) {
		return nil, false
	}
	return o.ModifiedTime, true
}

// HasModifiedTime returns a boolean if a field has been set.
func (o *WxlanRule) HasModifiedTime() bool {
	if o != nil && !IsNil(o.ModifiedTime) {
		return true
	}

	return false
}

// SetModifiedTime gets a reference to the given float32 and assigns it to the ModifiedTime field.
func (o *WxlanRule) SetModifiedTime(v float32) {
	o.ModifiedTime = &v
}

// GetOrder returns the Order field value
func (o *WxlanRule) GetOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *WxlanRule) GetOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Order, true
}

// SetOrder sets field value
func (o *WxlanRule) SetOrder(v int32) {
	o.Order = v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *WxlanRule) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanRule) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *WxlanRule) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *WxlanRule) SetOrgId(v string) {
	o.OrgId = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *WxlanRule) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanRule) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *WxlanRule) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *WxlanRule) SetSiteId(v string) {
	o.SiteId = &v
}

// GetSrcWxtags returns the SrcWxtags field value
func (o *WxlanRule) GetSrcWxtags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SrcWxtags
}

// GetSrcWxtagsOk returns a tuple with the SrcWxtags field value
// and a boolean to check if the value has been set.
func (o *WxlanRule) GetSrcWxtagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SrcWxtags, true
}

// SetSrcWxtags sets field value
func (o *WxlanRule) SetSrcWxtags(v []string) {
	o.SrcWxtags = v
}

// GetTemplateId returns the TemplateId field value if set, zero value otherwise.
func (o *WxlanRule) GetTemplateId() string {
	if o == nil || IsNil(o.TemplateId) {
		var ret string
		return ret
	}
	return *o.TemplateId
}

// GetTemplateIdOk returns a tuple with the TemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WxlanRule) GetTemplateIdOk() (*string, bool) {
	if o == nil || IsNil(o.TemplateId) {
		return nil, false
	}
	return o.TemplateId, true
}

// HasTemplateId returns a boolean if a field has been set.
func (o *WxlanRule) HasTemplateId() bool {
	if o != nil && !IsNil(o.TemplateId) {
		return true
	}

	return false
}

// SetTemplateId gets a reference to the given string and assigns it to the TemplateId field.
func (o *WxlanRule) SetTemplateId(v string) {
	o.TemplateId = &v
}

func (o WxlanRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WxlanRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.ApplyTags) {
		toSerialize["apply_tags"] = o.ApplyTags
	}
	if !IsNil(o.BlockedApps) {
		toSerialize["blocked_apps"] = o.BlockedApps
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.DstAllowWxtags) {
		toSerialize["dst_allow_wxtags"] = o.DstAllowWxtags
	}
	if !IsNil(o.DstDenyWxtags) {
		toSerialize["dst_deny_wxtags"] = o.DstDenyWxtags
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ForSite) {
		toSerialize["for_site"] = o.ForSite
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ModifiedTime) {
		toSerialize["modified_time"] = o.ModifiedTime
	}
	toSerialize["order"] = o.Order
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	toSerialize["src_wxtags"] = o.SrcWxtags
	if !IsNil(o.TemplateId) {
		toSerialize["template_id"] = o.TemplateId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WxlanRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"order",
		"src_wxtags",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWxlanRule := _WxlanRule{}

	err = json.Unmarshal(data, &varWxlanRule)

	if err != nil {
		return err
	}

	*o = WxlanRule(varWxlanRule)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "action")
		delete(additionalProperties, "apply_tags")
		delete(additionalProperties, "blocked_apps")
		delete(additionalProperties, "created_time")
		delete(additionalProperties, "dst_allow_wxtags")
		delete(additionalProperties, "dst_deny_wxtags")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "for_site")
		delete(additionalProperties, "id")
		delete(additionalProperties, "modified_time")
		delete(additionalProperties, "order")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "src_wxtags")
		delete(additionalProperties, "template_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWxlanRule struct {
	value *WxlanRule
	isSet bool
}

func (v NullableWxlanRule) Get() *WxlanRule {
	return v.value
}

func (v *NullableWxlanRule) Set(val *WxlanRule) {
	v.value = val
	v.isSet = true
}

func (v NullableWxlanRule) IsSet() bool {
	return v.isSet
}

func (v *NullableWxlanRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWxlanRule(val *WxlanRule) *NullableWxlanRule {
	return &NullableWxlanRule{value: val, isSet: true}
}

func (v NullableWxlanRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWxlanRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


