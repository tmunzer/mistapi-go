/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the InstallerSite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstallerSite{}

// InstallerSite struct for InstallerSite
type InstallerSite struct {
	Address string `json:"address"`
	CountryCode string `json:"country_code"`
	Id *string `json:"id,omitempty"`
	Latlng LatLng `json:"latlng"`
	Name string `json:"name"`
	RftemplateName *string `json:"rftemplate_name,omitempty"`
	SitegroupNames []string `json:"sitegroup_names,omitempty"`
	Timezone *string `json:"timezone,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InstallerSite InstallerSite

// NewInstallerSite instantiates a new InstallerSite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstallerSite(address string, countryCode string, latlng LatLng, name string) *InstallerSite {
	this := InstallerSite{}
	this.Address = address
	this.CountryCode = countryCode
	this.Latlng = latlng
	this.Name = name
	return &this
}

// NewInstallerSiteWithDefaults instantiates a new InstallerSite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallerSiteWithDefaults() *InstallerSite {
	this := InstallerSite{}
	return &this
}

// GetAddress returns the Address field value
func (o *InstallerSite) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *InstallerSite) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *InstallerSite) SetAddress(v string) {
	o.Address = v
}

// GetCountryCode returns the CountryCode field value
func (o *InstallerSite) GetCountryCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value
// and a boolean to check if the value has been set.
func (o *InstallerSite) GetCountryCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountryCode, true
}

// SetCountryCode sets field value
func (o *InstallerSite) SetCountryCode(v string) {
	o.CountryCode = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InstallerSite) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallerSite) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InstallerSite) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InstallerSite) SetId(v string) {
	o.Id = &v
}

// GetLatlng returns the Latlng field value
func (o *InstallerSite) GetLatlng() LatLng {
	if o == nil {
		var ret LatLng
		return ret
	}

	return o.Latlng
}

// GetLatlngOk returns a tuple with the Latlng field value
// and a boolean to check if the value has been set.
func (o *InstallerSite) GetLatlngOk() (*LatLng, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Latlng, true
}

// SetLatlng sets field value
func (o *InstallerSite) SetLatlng(v LatLng) {
	o.Latlng = v
}

// GetName returns the Name field value
func (o *InstallerSite) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *InstallerSite) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *InstallerSite) SetName(v string) {
	o.Name = v
}

// GetRftemplateName returns the RftemplateName field value if set, zero value otherwise.
func (o *InstallerSite) GetRftemplateName() string {
	if o == nil || IsNil(o.RftemplateName) {
		var ret string
		return ret
	}
	return *o.RftemplateName
}

// GetRftemplateNameOk returns a tuple with the RftemplateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallerSite) GetRftemplateNameOk() (*string, bool) {
	if o == nil || IsNil(o.RftemplateName) {
		return nil, false
	}
	return o.RftemplateName, true
}

// HasRftemplateName returns a boolean if a field has been set.
func (o *InstallerSite) HasRftemplateName() bool {
	if o != nil && !IsNil(o.RftemplateName) {
		return true
	}

	return false
}

// SetRftemplateName gets a reference to the given string and assigns it to the RftemplateName field.
func (o *InstallerSite) SetRftemplateName(v string) {
	o.RftemplateName = &v
}

// GetSitegroupNames returns the SitegroupNames field value if set, zero value otherwise.
func (o *InstallerSite) GetSitegroupNames() []string {
	if o == nil || IsNil(o.SitegroupNames) {
		var ret []string
		return ret
	}
	return o.SitegroupNames
}

// GetSitegroupNamesOk returns a tuple with the SitegroupNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallerSite) GetSitegroupNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.SitegroupNames) {
		return nil, false
	}
	return o.SitegroupNames, true
}

// HasSitegroupNames returns a boolean if a field has been set.
func (o *InstallerSite) HasSitegroupNames() bool {
	if o != nil && !IsNil(o.SitegroupNames) {
		return true
	}

	return false
}

// SetSitegroupNames gets a reference to the given []string and assigns it to the SitegroupNames field.
func (o *InstallerSite) SetSitegroupNames(v []string) {
	o.SitegroupNames = v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *InstallerSite) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallerSite) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *InstallerSite) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *InstallerSite) SetTimezone(v string) {
	o.Timezone = &v
}

func (o InstallerSite) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstallerSite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["country_code"] = o.CountryCode
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["latlng"] = o.Latlng
	toSerialize["name"] = o.Name
	if !IsNil(o.RftemplateName) {
		toSerialize["rftemplate_name"] = o.RftemplateName
	}
	if !IsNil(o.SitegroupNames) {
		toSerialize["sitegroup_names"] = o.SitegroupNames
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstallerSite) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"country_code",
		"latlng",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstallerSite := _InstallerSite{}

	err = json.Unmarshal(data, &varInstallerSite)

	if err != nil {
		return err
	}

	*o = InstallerSite(varInstallerSite)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address")
		delete(additionalProperties, "country_code")
		delete(additionalProperties, "id")
		delete(additionalProperties, "latlng")
		delete(additionalProperties, "name")
		delete(additionalProperties, "rftemplate_name")
		delete(additionalProperties, "sitegroup_names")
		delete(additionalProperties, "timezone")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstallerSite struct {
	value *InstallerSite
	isSet bool
}

func (v NullableInstallerSite) Get() *InstallerSite {
	return v.value
}

func (v *NullableInstallerSite) Set(val *InstallerSite) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallerSite) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallerSite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallerSite(val *InstallerSite) *NullableInstallerSite {
	return &NullableInstallerSite{value: val, isSet: true}
}

func (v NullableInstallerSite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallerSite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


