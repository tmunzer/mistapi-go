/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the SiteEngagement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteEngagement{}

// SiteEngagement **Note**: if hours does not exist, it’s treated as everyday of the week, 00:00-23:59. Currently we don’t allow multiple ranges for the same day  **Note**: default values for `dwell_tags`: passerby (1,300) bounce (301, 14400) engaged (14401, 28800) stationed (28801, 42000)  **Note**: default values for `dwell_tag_names`: passerby = “Passerby”, bounce = “Visitor”, engaged = “Associates”, stationed = “Assets”
type SiteEngagement struct {
	DwellTagNames *SiteEngagementDwellTagNames `json:"dwell_tag_names,omitempty"`
	DwellTags *SiteEngagementDwellTags `json:"dwell_tags,omitempty"`
	Hours *Hours `json:"hours,omitempty"`
	// max time, default is 43200(12h), max is 68400 (18h)
	MaxDwell *int32 `json:"max_dwell,omitempty"`
	// min time
	MinDwell *int32 `json:"min_dwell,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SiteEngagement SiteEngagement

// NewSiteEngagement instantiates a new SiteEngagement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteEngagement() *SiteEngagement {
	this := SiteEngagement{}
	var maxDwell int32 = 43200
	this.MaxDwell = &maxDwell
	return &this
}

// NewSiteEngagementWithDefaults instantiates a new SiteEngagement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteEngagementWithDefaults() *SiteEngagement {
	this := SiteEngagement{}
	var maxDwell int32 = 43200
	this.MaxDwell = &maxDwell
	return &this
}

// GetDwellTagNames returns the DwellTagNames field value if set, zero value otherwise.
func (o *SiteEngagement) GetDwellTagNames() SiteEngagementDwellTagNames {
	if o == nil || IsNil(o.DwellTagNames) {
		var ret SiteEngagementDwellTagNames
		return ret
	}
	return *o.DwellTagNames
}

// GetDwellTagNamesOk returns a tuple with the DwellTagNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteEngagement) GetDwellTagNamesOk() (*SiteEngagementDwellTagNames, bool) {
	if o == nil || IsNil(o.DwellTagNames) {
		return nil, false
	}
	return o.DwellTagNames, true
}

// HasDwellTagNames returns a boolean if a field has been set.
func (o *SiteEngagement) HasDwellTagNames() bool {
	if o != nil && !IsNil(o.DwellTagNames) {
		return true
	}

	return false
}

// SetDwellTagNames gets a reference to the given SiteEngagementDwellTagNames and assigns it to the DwellTagNames field.
func (o *SiteEngagement) SetDwellTagNames(v SiteEngagementDwellTagNames) {
	o.DwellTagNames = &v
}

// GetDwellTags returns the DwellTags field value if set, zero value otherwise.
func (o *SiteEngagement) GetDwellTags() SiteEngagementDwellTags {
	if o == nil || IsNil(o.DwellTags) {
		var ret SiteEngagementDwellTags
		return ret
	}
	return *o.DwellTags
}

// GetDwellTagsOk returns a tuple with the DwellTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteEngagement) GetDwellTagsOk() (*SiteEngagementDwellTags, bool) {
	if o == nil || IsNil(o.DwellTags) {
		return nil, false
	}
	return o.DwellTags, true
}

// HasDwellTags returns a boolean if a field has been set.
func (o *SiteEngagement) HasDwellTags() bool {
	if o != nil && !IsNil(o.DwellTags) {
		return true
	}

	return false
}

// SetDwellTags gets a reference to the given SiteEngagementDwellTags and assigns it to the DwellTags field.
func (o *SiteEngagement) SetDwellTags(v SiteEngagementDwellTags) {
	o.DwellTags = &v
}

// GetHours returns the Hours field value if set, zero value otherwise.
func (o *SiteEngagement) GetHours() Hours {
	if o == nil || IsNil(o.Hours) {
		var ret Hours
		return ret
	}
	return *o.Hours
}

// GetHoursOk returns a tuple with the Hours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteEngagement) GetHoursOk() (*Hours, bool) {
	if o == nil || IsNil(o.Hours) {
		return nil, false
	}
	return o.Hours, true
}

// HasHours returns a boolean if a field has been set.
func (o *SiteEngagement) HasHours() bool {
	if o != nil && !IsNil(o.Hours) {
		return true
	}

	return false
}

// SetHours gets a reference to the given Hours and assigns it to the Hours field.
func (o *SiteEngagement) SetHours(v Hours) {
	o.Hours = &v
}

// GetMaxDwell returns the MaxDwell field value if set, zero value otherwise.
func (o *SiteEngagement) GetMaxDwell() int32 {
	if o == nil || IsNil(o.MaxDwell) {
		var ret int32
		return ret
	}
	return *o.MaxDwell
}

// GetMaxDwellOk returns a tuple with the MaxDwell field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteEngagement) GetMaxDwellOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxDwell) {
		return nil, false
	}
	return o.MaxDwell, true
}

// HasMaxDwell returns a boolean if a field has been set.
func (o *SiteEngagement) HasMaxDwell() bool {
	if o != nil && !IsNil(o.MaxDwell) {
		return true
	}

	return false
}

// SetMaxDwell gets a reference to the given int32 and assigns it to the MaxDwell field.
func (o *SiteEngagement) SetMaxDwell(v int32) {
	o.MaxDwell = &v
}

// GetMinDwell returns the MinDwell field value if set, zero value otherwise.
func (o *SiteEngagement) GetMinDwell() int32 {
	if o == nil || IsNil(o.MinDwell) {
		var ret int32
		return ret
	}
	return *o.MinDwell
}

// GetMinDwellOk returns a tuple with the MinDwell field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteEngagement) GetMinDwellOk() (*int32, bool) {
	if o == nil || IsNil(o.MinDwell) {
		return nil, false
	}
	return o.MinDwell, true
}

// HasMinDwell returns a boolean if a field has been set.
func (o *SiteEngagement) HasMinDwell() bool {
	if o != nil && !IsNil(o.MinDwell) {
		return true
	}

	return false
}

// SetMinDwell gets a reference to the given int32 and assigns it to the MinDwell field.
func (o *SiteEngagement) SetMinDwell(v int32) {
	o.MinDwell = &v
}

func (o SiteEngagement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteEngagement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DwellTagNames) {
		toSerialize["dwell_tag_names"] = o.DwellTagNames
	}
	if !IsNil(o.DwellTags) {
		toSerialize["dwell_tags"] = o.DwellTags
	}
	if !IsNil(o.Hours) {
		toSerialize["hours"] = o.Hours
	}
	if !IsNil(o.MaxDwell) {
		toSerialize["max_dwell"] = o.MaxDwell
	}
	if !IsNil(o.MinDwell) {
		toSerialize["min_dwell"] = o.MinDwell
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SiteEngagement) UnmarshalJSON(data []byte) (err error) {
	varSiteEngagement := _SiteEngagement{}

	err = json.Unmarshal(data, &varSiteEngagement)

	if err != nil {
		return err
	}

	*o = SiteEngagement(varSiteEngagement)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dwell_tag_names")
		delete(additionalProperties, "dwell_tags")
		delete(additionalProperties, "hours")
		delete(additionalProperties, "max_dwell")
		delete(additionalProperties, "min_dwell")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSiteEngagement struct {
	value *SiteEngagement
	isSet bool
}

func (v NullableSiteEngagement) Get() *SiteEngagement {
	return v.value
}

func (v *NullableSiteEngagement) Set(val *SiteEngagement) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteEngagement) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteEngagement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteEngagement(val *SiteEngagement) *NullableSiteEngagement {
	return &NullableSiteEngagement{value: val, isSet: true}
}

func (v NullableSiteEngagement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteEngagement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


