/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type SitesWANUsagesAPI interface {

	/*
	CountSiteWanUsage countSiteWanUsage

	Count Site WAN Uages

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@return ApiCountSiteWanUsageRequest
	*/
	CountSiteWanUsage(ctx context.Context, siteId string) ApiCountSiteWanUsageRequest

	// CountSiteWanUsageExecute executes the request
	//  @return RepsonseCount
	CountSiteWanUsageExecute(r ApiCountSiteWanUsageRequest) (*RepsonseCount, *http.Response, error)

	/*
	SearchSiteWanUsage searchSiteWanUsage

	Search Site WAN Uages

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@return ApiSearchSiteWanUsageRequest
	*/
	SearchSiteWanUsage(ctx context.Context, siteId string) ApiSearchSiteWanUsageRequest

	// SearchSiteWanUsageExecute executes the request
	//  @return SearchWanUsage
	SearchSiteWanUsageExecute(r ApiSearchSiteWanUsageRequest) (*SearchWanUsage, *http.Response, error)
}

// SitesWANUsagesAPIService SitesWANUsagesAPI service
type SitesWANUsagesAPIService service

type ApiCountSiteWanUsageRequest struct {
	ctx context.Context
	ApiService SitesWANUsagesAPI
	siteId string
	mac *string
	peerMac *string
	portId *string
	peerPortId *string
	policy *string
	tenant *string
	pathType *string
	distinct *WanUsagesCountDisctinct
	page *int32
	limit *int32
	start *int32
	end *int32
	duration *string
}

// MAC address
func (r ApiCountSiteWanUsageRequest) Mac(mac string) ApiCountSiteWanUsageRequest {
	r.mac = &mac
	return r
}

// Peer MAC address
func (r ApiCountSiteWanUsageRequest) PeerMac(peerMac string) ApiCountSiteWanUsageRequest {
	r.peerMac = &peerMac
	return r
}

// Port ID for the device
func (r ApiCountSiteWanUsageRequest) PortId(portId string) ApiCountSiteWanUsageRequest {
	r.portId = &portId
	return r
}

// Peer Port ID for the device
func (r ApiCountSiteWanUsageRequest) PeerPortId(peerPortId string) ApiCountSiteWanUsageRequest {
	r.peerPortId = &peerPortId
	return r
}

// policy for the wan path
func (r ApiCountSiteWanUsageRequest) Policy(policy string) ApiCountSiteWanUsageRequest {
	r.policy = &policy
	return r
}

// tenant network in which the packet is sent
func (r ApiCountSiteWanUsageRequest) Tenant(tenant string) ApiCountSiteWanUsageRequest {
	r.tenant = &tenant
	return r
}

// path_type of the port
func (r ApiCountSiteWanUsageRequest) PathType(pathType string) ApiCountSiteWanUsageRequest {
	r.pathType = &pathType
	return r
}

func (r ApiCountSiteWanUsageRequest) Distinct(distinct WanUsagesCountDisctinct) ApiCountSiteWanUsageRequest {
	r.distinct = &distinct
	return r
}

func (r ApiCountSiteWanUsageRequest) Page(page int32) ApiCountSiteWanUsageRequest {
	r.page = &page
	return r
}

func (r ApiCountSiteWanUsageRequest) Limit(limit int32) ApiCountSiteWanUsageRequest {
	r.limit = &limit
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiCountSiteWanUsageRequest) Start(start int32) ApiCountSiteWanUsageRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiCountSiteWanUsageRequest) End(end int32) ApiCountSiteWanUsageRequest {
	r.end = &end
	return r
}

// duration like 7d, 2w
func (r ApiCountSiteWanUsageRequest) Duration(duration string) ApiCountSiteWanUsageRequest {
	r.duration = &duration
	return r
}

func (r ApiCountSiteWanUsageRequest) Execute() (*RepsonseCount, *http.Response, error) {
	return r.ApiService.CountSiteWanUsageExecute(r)
}

/*
CountSiteWanUsage countSiteWanUsage

Count Site WAN Uages

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @return ApiCountSiteWanUsageRequest
*/
func (a *SitesWANUsagesAPIService) CountSiteWanUsage(ctx context.Context, siteId string) ApiCountSiteWanUsageRequest {
	return ApiCountSiteWanUsageRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return RepsonseCount
func (a *SitesWANUsagesAPIService) CountSiteWanUsageExecute(r ApiCountSiteWanUsageRequest) (*RepsonseCount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RepsonseCount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesWANUsagesAPIService.CountSiteWanUsage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/wan_usages/count"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.mac != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mac", r.mac, "")
	}
	if r.peerMac != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "peer_mac", r.peerMac, "")
	}
	if r.portId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "port_id", r.portId, "")
	}
	if r.peerPortId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "peer_port_id", r.peerPortId, "")
	}
	if r.policy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "policy", r.policy, "")
	}
	if r.tenant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", r.tenant, "")
	}
	if r.pathType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "path_type", r.pathType, "")
	}
	if r.distinct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinct", r.distinct, "")
	} else {
		var defaultValue WanUsagesCountDisctinct = "policy"
		r.distinct = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchSiteWanUsageRequest struct {
	ctx context.Context
	ApiService SitesWANUsagesAPI
	siteId string
	mac *string
	peerMac *string
	portId *string
	peerPortId *string
	policy *string
	tenant *string
	pathType *string
	page *int32
	limit *int32
	start *int32
	end *int32
	duration *string
}

// MAC address
func (r ApiSearchSiteWanUsageRequest) Mac(mac string) ApiSearchSiteWanUsageRequest {
	r.mac = &mac
	return r
}

// Peer MAC address
func (r ApiSearchSiteWanUsageRequest) PeerMac(peerMac string) ApiSearchSiteWanUsageRequest {
	r.peerMac = &peerMac
	return r
}

// Port ID for the device
func (r ApiSearchSiteWanUsageRequest) PortId(portId string) ApiSearchSiteWanUsageRequest {
	r.portId = &portId
	return r
}

// Peer Port ID for the device
func (r ApiSearchSiteWanUsageRequest) PeerPortId(peerPortId string) ApiSearchSiteWanUsageRequest {
	r.peerPortId = &peerPortId
	return r
}

// policy for the wan path
func (r ApiSearchSiteWanUsageRequest) Policy(policy string) ApiSearchSiteWanUsageRequest {
	r.policy = &policy
	return r
}

// tenant network in which the packet is sent
func (r ApiSearchSiteWanUsageRequest) Tenant(tenant string) ApiSearchSiteWanUsageRequest {
	r.tenant = &tenant
	return r
}

// path_type of the port
func (r ApiSearchSiteWanUsageRequest) PathType(pathType string) ApiSearchSiteWanUsageRequest {
	r.pathType = &pathType
	return r
}

func (r ApiSearchSiteWanUsageRequest) Page(page int32) ApiSearchSiteWanUsageRequest {
	r.page = &page
	return r
}

func (r ApiSearchSiteWanUsageRequest) Limit(limit int32) ApiSearchSiteWanUsageRequest {
	r.limit = &limit
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiSearchSiteWanUsageRequest) Start(start int32) ApiSearchSiteWanUsageRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiSearchSiteWanUsageRequest) End(end int32) ApiSearchSiteWanUsageRequest {
	r.end = &end
	return r
}

// duration like 7d, 2w
func (r ApiSearchSiteWanUsageRequest) Duration(duration string) ApiSearchSiteWanUsageRequest {
	r.duration = &duration
	return r
}

func (r ApiSearchSiteWanUsageRequest) Execute() (*SearchWanUsage, *http.Response, error) {
	return r.ApiService.SearchSiteWanUsageExecute(r)
}

/*
SearchSiteWanUsage searchSiteWanUsage

Search Site WAN Uages

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @return ApiSearchSiteWanUsageRequest
*/
func (a *SitesWANUsagesAPIService) SearchSiteWanUsage(ctx context.Context, siteId string) ApiSearchSiteWanUsageRequest {
	return ApiSearchSiteWanUsageRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return SearchWanUsage
func (a *SitesWANUsagesAPIService) SearchSiteWanUsageExecute(r ApiSearchSiteWanUsageRequest) (*SearchWanUsage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchWanUsage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesWANUsagesAPIService.SearchSiteWanUsage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/wan_usages/search"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.mac != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mac", r.mac, "")
	}
	if r.peerMac != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "peer_mac", r.peerMac, "")
	}
	if r.portId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "port_id", r.portId, "")
	}
	if r.peerPortId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "peer_port_id", r.peerPortId, "")
	}
	if r.policy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "policy", r.policy, "")
	}
	if r.tenant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", r.tenant, "")
	}
	if r.pathType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "path_type", r.pathType, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
