/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the SiteMxtunnel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteMxtunnel{}

// SiteMxtunnel Site MxTunnel
type SiteMxtunnel struct {
	AdditionalMxtunnels *map[string]SiteMxtunnelAdditionalMxtunnel `json:"additional_mxtunnels,omitempty"`
	// list of subnets where we allow AP to establish Mist Tunnels from
	ApSubnets []string `json:"ap_subnets,omitempty"`
	AutoPreemption *AutoPreemption `json:"auto_preemption,omitempty"`
	// for AP, how to connect to tunterm or radsecproxy
	Clusters []SiteMxtunnelCluster `json:"clusters,omitempty"`
	CreatedTime *float32 `json:"created_time,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	ForSite *bool `json:"for_site,omitempty"`
	// in seconds, used as heartbeat to detect if a tunnel is alive. AP will try another peer after missing N hellos specified by hello_retries
	HelloInterval *int32 `json:"hello_interval,omitempty"`
	HelloRetries *int32 `json:"hello_retries,omitempty"`
	// hostnames or IPs where a Mist Tunnel will use as the Peer (i.e. they are reachable from AP)
	Hosts []string `json:"hosts,omitempty"`
	Id *string `json:"id,omitempty"`
	ModifiedTime *float32 `json:"modified_time,omitempty"`
	// 0 to enable PMTU, 552-1500 to start PMTU with a lower MTU
	Mtu *int32 `json:"mtu,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	Protocol *MxtunnelProtocol `json:"protocol,omitempty"`
	Radsec *SiteMxtunnelRadsec `json:"radsec,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	// list of vlan_ids that will be used
	VlanIds []int32 `json:"vlan_ids,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SiteMxtunnel SiteMxtunnel

// NewSiteMxtunnel instantiates a new SiteMxtunnel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteMxtunnel() *SiteMxtunnel {
	this := SiteMxtunnel{}
	var helloInterval int32 = 60
	this.HelloInterval = &helloInterval
	var helloRetries int32 = 7
	this.HelloRetries = &helloRetries
	var mtu int32 = 0
	this.Mtu = &mtu
	var protocol MxtunnelProtocol = MXTUNNELPROTOCOL_UDP
	this.Protocol = &protocol
	return &this
}

// NewSiteMxtunnelWithDefaults instantiates a new SiteMxtunnel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteMxtunnelWithDefaults() *SiteMxtunnel {
	this := SiteMxtunnel{}
	var helloInterval int32 = 60
	this.HelloInterval = &helloInterval
	var helloRetries int32 = 7
	this.HelloRetries = &helloRetries
	var mtu int32 = 0
	this.Mtu = &mtu
	var protocol MxtunnelProtocol = MXTUNNELPROTOCOL_UDP
	this.Protocol = &protocol
	return &this
}

// GetAdditionalMxtunnels returns the AdditionalMxtunnels field value if set, zero value otherwise.
func (o *SiteMxtunnel) GetAdditionalMxtunnels() map[string]SiteMxtunnelAdditionalMxtunnel {
	if o == nil || IsNil(o.AdditionalMxtunnels) {
		var ret map[string]SiteMxtunnelAdditionalMxtunnel
		return ret
	}
	return *o.AdditionalMxtunnels
}

// GetAdditionalMxtunnelsOk returns a tuple with the AdditionalMxtunnels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnel) GetAdditionalMxtunnelsOk() (*map[string]SiteMxtunnelAdditionalMxtunnel, bool) {
	if o == nil || IsNil(o.AdditionalMxtunnels) {
		return nil, false
	}
	return o.AdditionalMxtunnels, true
}

// HasAdditionalMxtunnels returns a boolean if a field has been set.
func (o *SiteMxtunnel) HasAdditionalMxtunnels() bool {
	if o != nil && !IsNil(o.AdditionalMxtunnels) {
		return true
	}

	return false
}

// SetAdditionalMxtunnels gets a reference to the given map[string]SiteMxtunnelAdditionalMxtunnel and assigns it to the AdditionalMxtunnels field.
func (o *SiteMxtunnel) SetAdditionalMxtunnels(v map[string]SiteMxtunnelAdditionalMxtunnel) {
	o.AdditionalMxtunnels = &v
}

// GetApSubnets returns the ApSubnets field value if set, zero value otherwise.
func (o *SiteMxtunnel) GetApSubnets() []string {
	if o == nil || IsNil(o.ApSubnets) {
		var ret []string
		return ret
	}
	return o.ApSubnets
}

// GetApSubnetsOk returns a tuple with the ApSubnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnel) GetApSubnetsOk() ([]string, bool) {
	if o == nil || IsNil(o.ApSubnets) {
		return nil, false
	}
	return o.ApSubnets, true
}

// HasApSubnets returns a boolean if a field has been set.
func (o *SiteMxtunnel) HasApSubnets() bool {
	if o != nil && !IsNil(o.ApSubnets) {
		return true
	}

	return false
}

// SetApSubnets gets a reference to the given []string and assigns it to the ApSubnets field.
func (o *SiteMxtunnel) SetApSubnets(v []string) {
	o.ApSubnets = v
}

// GetAutoPreemption returns the AutoPreemption field value if set, zero value otherwise.
func (o *SiteMxtunnel) GetAutoPreemption() AutoPreemption {
	if o == nil || IsNil(o.AutoPreemption) {
		var ret AutoPreemption
		return ret
	}
	return *o.AutoPreemption
}

// GetAutoPreemptionOk returns a tuple with the AutoPreemption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnel) GetAutoPreemptionOk() (*AutoPreemption, bool) {
	if o == nil || IsNil(o.AutoPreemption) {
		return nil, false
	}
	return o.AutoPreemption, true
}

// HasAutoPreemption returns a boolean if a field has been set.
func (o *SiteMxtunnel) HasAutoPreemption() bool {
	if o != nil && !IsNil(o.AutoPreemption) {
		return true
	}

	return false
}

// SetAutoPreemption gets a reference to the given AutoPreemption and assigns it to the AutoPreemption field.
func (o *SiteMxtunnel) SetAutoPreemption(v AutoPreemption) {
	o.AutoPreemption = &v
}

// GetClusters returns the Clusters field value if set, zero value otherwise.
func (o *SiteMxtunnel) GetClusters() []SiteMxtunnelCluster {
	if o == nil || IsNil(o.Clusters) {
		var ret []SiteMxtunnelCluster
		return ret
	}
	return o.Clusters
}

// GetClustersOk returns a tuple with the Clusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnel) GetClustersOk() ([]SiteMxtunnelCluster, bool) {
	if o == nil || IsNil(o.Clusters) {
		return nil, false
	}
	return o.Clusters, true
}

// HasClusters returns a boolean if a field has been set.
func (o *SiteMxtunnel) HasClusters() bool {
	if o != nil && !IsNil(o.Clusters) {
		return true
	}

	return false
}

// SetClusters gets a reference to the given []SiteMxtunnelCluster and assigns it to the Clusters field.
func (o *SiteMxtunnel) SetClusters(v []SiteMxtunnelCluster) {
	o.Clusters = v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *SiteMxtunnel) GetCreatedTime() float32 {
	if o == nil || IsNil(o.CreatedTime) {
		var ret float32
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnel) GetCreatedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *SiteMxtunnel) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given float32 and assigns it to the CreatedTime field.
func (o *SiteMxtunnel) SetCreatedTime(v float32) {
	o.CreatedTime = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SiteMxtunnel) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnel) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SiteMxtunnel) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SiteMxtunnel) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetForSite returns the ForSite field value if set, zero value otherwise.
func (o *SiteMxtunnel) GetForSite() bool {
	if o == nil || IsNil(o.ForSite) {
		var ret bool
		return ret
	}
	return *o.ForSite
}

// GetForSiteOk returns a tuple with the ForSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnel) GetForSiteOk() (*bool, bool) {
	if o == nil || IsNil(o.ForSite) {
		return nil, false
	}
	return o.ForSite, true
}

// HasForSite returns a boolean if a field has been set.
func (o *SiteMxtunnel) HasForSite() bool {
	if o != nil && !IsNil(o.ForSite) {
		return true
	}

	return false
}

// SetForSite gets a reference to the given bool and assigns it to the ForSite field.
func (o *SiteMxtunnel) SetForSite(v bool) {
	o.ForSite = &v
}

// GetHelloInterval returns the HelloInterval field value if set, zero value otherwise.
func (o *SiteMxtunnel) GetHelloInterval() int32 {
	if o == nil || IsNil(o.HelloInterval) {
		var ret int32
		return ret
	}
	return *o.HelloInterval
}

// GetHelloIntervalOk returns a tuple with the HelloInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnel) GetHelloIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.HelloInterval) {
		return nil, false
	}
	return o.HelloInterval, true
}

// HasHelloInterval returns a boolean if a field has been set.
func (o *SiteMxtunnel) HasHelloInterval() bool {
	if o != nil && !IsNil(o.HelloInterval) {
		return true
	}

	return false
}

// SetHelloInterval gets a reference to the given int32 and assigns it to the HelloInterval field.
func (o *SiteMxtunnel) SetHelloInterval(v int32) {
	o.HelloInterval = &v
}

// GetHelloRetries returns the HelloRetries field value if set, zero value otherwise.
func (o *SiteMxtunnel) GetHelloRetries() int32 {
	if o == nil || IsNil(o.HelloRetries) {
		var ret int32
		return ret
	}
	return *o.HelloRetries
}

// GetHelloRetriesOk returns a tuple with the HelloRetries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnel) GetHelloRetriesOk() (*int32, bool) {
	if o == nil || IsNil(o.HelloRetries) {
		return nil, false
	}
	return o.HelloRetries, true
}

// HasHelloRetries returns a boolean if a field has been set.
func (o *SiteMxtunnel) HasHelloRetries() bool {
	if o != nil && !IsNil(o.HelloRetries) {
		return true
	}

	return false
}

// SetHelloRetries gets a reference to the given int32 and assigns it to the HelloRetries field.
func (o *SiteMxtunnel) SetHelloRetries(v int32) {
	o.HelloRetries = &v
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *SiteMxtunnel) GetHosts() []string {
	if o == nil || IsNil(o.Hosts) {
		var ret []string
		return ret
	}
	return o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnel) GetHostsOk() ([]string, bool) {
	if o == nil || IsNil(o.Hosts) {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *SiteMxtunnel) HasHosts() bool {
	if o != nil && !IsNil(o.Hosts) {
		return true
	}

	return false
}

// SetHosts gets a reference to the given []string and assigns it to the Hosts field.
func (o *SiteMxtunnel) SetHosts(v []string) {
	o.Hosts = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SiteMxtunnel) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnel) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SiteMxtunnel) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SiteMxtunnel) SetId(v string) {
	o.Id = &v
}

// GetModifiedTime returns the ModifiedTime field value if set, zero value otherwise.
func (o *SiteMxtunnel) GetModifiedTime() float32 {
	if o == nil || IsNil(o.ModifiedTime) {
		var ret float32
		return ret
	}
	return *o.ModifiedTime
}

// GetModifiedTimeOk returns a tuple with the ModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnel) GetModifiedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.ModifiedTime) {
		return nil, false
	}
	return o.ModifiedTime, true
}

// HasModifiedTime returns a boolean if a field has been set.
func (o *SiteMxtunnel) HasModifiedTime() bool {
	if o != nil && !IsNil(o.ModifiedTime) {
		return true
	}

	return false
}

// SetModifiedTime gets a reference to the given float32 and assigns it to the ModifiedTime field.
func (o *SiteMxtunnel) SetModifiedTime(v float32) {
	o.ModifiedTime = &v
}

// GetMtu returns the Mtu field value if set, zero value otherwise.
func (o *SiteMxtunnel) GetMtu() int32 {
	if o == nil || IsNil(o.Mtu) {
		var ret int32
		return ret
	}
	return *o.Mtu
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnel) GetMtuOk() (*int32, bool) {
	if o == nil || IsNil(o.Mtu) {
		return nil, false
	}
	return o.Mtu, true
}

// HasMtu returns a boolean if a field has been set.
func (o *SiteMxtunnel) HasMtu() bool {
	if o != nil && !IsNil(o.Mtu) {
		return true
	}

	return false
}

// SetMtu gets a reference to the given int32 and assigns it to the Mtu field.
func (o *SiteMxtunnel) SetMtu(v int32) {
	o.Mtu = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *SiteMxtunnel) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnel) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *SiteMxtunnel) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *SiteMxtunnel) SetOrgId(v string) {
	o.OrgId = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *SiteMxtunnel) GetProtocol() MxtunnelProtocol {
	if o == nil || IsNil(o.Protocol) {
		var ret MxtunnelProtocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnel) GetProtocolOk() (*MxtunnelProtocol, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *SiteMxtunnel) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given MxtunnelProtocol and assigns it to the Protocol field.
func (o *SiteMxtunnel) SetProtocol(v MxtunnelProtocol) {
	o.Protocol = &v
}

// GetRadsec returns the Radsec field value if set, zero value otherwise.
func (o *SiteMxtunnel) GetRadsec() SiteMxtunnelRadsec {
	if o == nil || IsNil(o.Radsec) {
		var ret SiteMxtunnelRadsec
		return ret
	}
	return *o.Radsec
}

// GetRadsecOk returns a tuple with the Radsec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnel) GetRadsecOk() (*SiteMxtunnelRadsec, bool) {
	if o == nil || IsNil(o.Radsec) {
		return nil, false
	}
	return o.Radsec, true
}

// HasRadsec returns a boolean if a field has been set.
func (o *SiteMxtunnel) HasRadsec() bool {
	if o != nil && !IsNil(o.Radsec) {
		return true
	}

	return false
}

// SetRadsec gets a reference to the given SiteMxtunnelRadsec and assigns it to the Radsec field.
func (o *SiteMxtunnel) SetRadsec(v SiteMxtunnelRadsec) {
	o.Radsec = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *SiteMxtunnel) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnel) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *SiteMxtunnel) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *SiteMxtunnel) SetSiteId(v string) {
	o.SiteId = &v
}

// GetVlanIds returns the VlanIds field value if set, zero value otherwise.
func (o *SiteMxtunnel) GetVlanIds() []int32 {
	if o == nil || IsNil(o.VlanIds) {
		var ret []int32
		return ret
	}
	return o.VlanIds
}

// GetVlanIdsOk returns a tuple with the VlanIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnel) GetVlanIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.VlanIds) {
		return nil, false
	}
	return o.VlanIds, true
}

// HasVlanIds returns a boolean if a field has been set.
func (o *SiteMxtunnel) HasVlanIds() bool {
	if o != nil && !IsNil(o.VlanIds) {
		return true
	}

	return false
}

// SetVlanIds gets a reference to the given []int32 and assigns it to the VlanIds field.
func (o *SiteMxtunnel) SetVlanIds(v []int32) {
	o.VlanIds = v
}

func (o SiteMxtunnel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteMxtunnel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdditionalMxtunnels) {
		toSerialize["additional_mxtunnels"] = o.AdditionalMxtunnels
	}
	if !IsNil(o.ApSubnets) {
		toSerialize["ap_subnets"] = o.ApSubnets
	}
	if !IsNil(o.AutoPreemption) {
		toSerialize["auto_preemption"] = o.AutoPreemption
	}
	if !IsNil(o.Clusters) {
		toSerialize["clusters"] = o.Clusters
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ForSite) {
		toSerialize["for_site"] = o.ForSite
	}
	if !IsNil(o.HelloInterval) {
		toSerialize["hello_interval"] = o.HelloInterval
	}
	if !IsNil(o.HelloRetries) {
		toSerialize["hello_retries"] = o.HelloRetries
	}
	if !IsNil(o.Hosts) {
		toSerialize["hosts"] = o.Hosts
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ModifiedTime) {
		toSerialize["modified_time"] = o.ModifiedTime
	}
	if !IsNil(o.Mtu) {
		toSerialize["mtu"] = o.Mtu
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.Radsec) {
		toSerialize["radsec"] = o.Radsec
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.VlanIds) {
		toSerialize["vlan_ids"] = o.VlanIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SiteMxtunnel) UnmarshalJSON(data []byte) (err error) {
	varSiteMxtunnel := _SiteMxtunnel{}

	err = json.Unmarshal(data, &varSiteMxtunnel)

	if err != nil {
		return err
	}

	*o = SiteMxtunnel(varSiteMxtunnel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "additional_mxtunnels")
		delete(additionalProperties, "ap_subnets")
		delete(additionalProperties, "auto_preemption")
		delete(additionalProperties, "clusters")
		delete(additionalProperties, "created_time")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "for_site")
		delete(additionalProperties, "hello_interval")
		delete(additionalProperties, "hello_retries")
		delete(additionalProperties, "hosts")
		delete(additionalProperties, "id")
		delete(additionalProperties, "modified_time")
		delete(additionalProperties, "mtu")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "protocol")
		delete(additionalProperties, "radsec")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "vlan_ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSiteMxtunnel struct {
	value *SiteMxtunnel
	isSet bool
}

func (v NullableSiteMxtunnel) Get() *SiteMxtunnel {
	return v.value
}

func (v *NullableSiteMxtunnel) Set(val *SiteMxtunnel) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteMxtunnel) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteMxtunnel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteMxtunnel(val *SiteMxtunnel) *NullableSiteMxtunnel {
	return &NullableSiteMxtunnel{value: val, isSet: true}
}

func (v NullableSiteMxtunnel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteMxtunnel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


