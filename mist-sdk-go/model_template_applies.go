/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the TemplateApplies type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateApplies{}

// TemplateApplies where this template should be applied to, can be org_id, site_ids, sitegroup_ids
type TemplateApplies struct {
	OrgId *string `json:"org_id,omitempty"`
	// list of site ids
	SiteIds []string `json:"site_ids,omitempty"`
	// list of sitegroup ids
	SitegroupIds []string `json:"sitegroup_ids,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TemplateApplies TemplateApplies

// NewTemplateApplies instantiates a new TemplateApplies object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateApplies() *TemplateApplies {
	this := TemplateApplies{}
	return &this
}

// NewTemplateAppliesWithDefaults instantiates a new TemplateApplies object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateAppliesWithDefaults() *TemplateApplies {
	this := TemplateApplies{}
	return &this
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *TemplateApplies) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateApplies) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *TemplateApplies) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *TemplateApplies) SetOrgId(v string) {
	o.OrgId = &v
}

// GetSiteIds returns the SiteIds field value if set, zero value otherwise.
func (o *TemplateApplies) GetSiteIds() []string {
	if o == nil || IsNil(o.SiteIds) {
		var ret []string
		return ret
	}
	return o.SiteIds
}

// GetSiteIdsOk returns a tuple with the SiteIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateApplies) GetSiteIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.SiteIds) {
		return nil, false
	}
	return o.SiteIds, true
}

// HasSiteIds returns a boolean if a field has been set.
func (o *TemplateApplies) HasSiteIds() bool {
	if o != nil && !IsNil(o.SiteIds) {
		return true
	}

	return false
}

// SetSiteIds gets a reference to the given []string and assigns it to the SiteIds field.
func (o *TemplateApplies) SetSiteIds(v []string) {
	o.SiteIds = v
}

// GetSitegroupIds returns the SitegroupIds field value if set, zero value otherwise.
func (o *TemplateApplies) GetSitegroupIds() []string {
	if o == nil || IsNil(o.SitegroupIds) {
		var ret []string
		return ret
	}
	return o.SitegroupIds
}

// GetSitegroupIdsOk returns a tuple with the SitegroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateApplies) GetSitegroupIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.SitegroupIds) {
		return nil, false
	}
	return o.SitegroupIds, true
}

// HasSitegroupIds returns a boolean if a field has been set.
func (o *TemplateApplies) HasSitegroupIds() bool {
	if o != nil && !IsNil(o.SitegroupIds) {
		return true
	}

	return false
}

// SetSitegroupIds gets a reference to the given []string and assigns it to the SitegroupIds field.
func (o *TemplateApplies) SetSitegroupIds(v []string) {
	o.SitegroupIds = v
}

func (o TemplateApplies) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateApplies) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.SiteIds) {
		toSerialize["site_ids"] = o.SiteIds
	}
	if !IsNil(o.SitegroupIds) {
		toSerialize["sitegroup_ids"] = o.SitegroupIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TemplateApplies) UnmarshalJSON(data []byte) (err error) {
	varTemplateApplies := _TemplateApplies{}

	err = json.Unmarshal(data, &varTemplateApplies)

	if err != nil {
		return err
	}

	*o = TemplateApplies(varTemplateApplies)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "site_ids")
		delete(additionalProperties, "sitegroup_ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTemplateApplies struct {
	value *TemplateApplies
	isSet bool
}

func (v NullableTemplateApplies) Get() *TemplateApplies {
	return v.value
}

func (v *NullableTemplateApplies) Set(val *TemplateApplies) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateApplies) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateApplies) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateApplies(val *TemplateApplies) *NullableTemplateApplies {
	return &NullableTemplateApplies{value: val, isSet: true}
}

func (v NullableTemplateApplies) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateApplies) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


