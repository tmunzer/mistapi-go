/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the ReplaceDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplaceDevice{}

// ReplaceDevice struct for ReplaceDevice
type ReplaceDevice struct {
	// attributes that you donâ€™t want to copy
	Discard []string `json:"discard,omitempty"`
	// MAC Address of the inventory that will be replacing the old one. It has to be claimed and unassigned
	InventoryMac *string `json:"inventory_mac,omitempty"`
	// MAC Address of the device to replace
	Mac *string `json:"mac,omitempty"`
	// the site_id of the device to be replaced
	SiteId *string `json:"site_id,omitempty"`
	TuntermPortConfig *TuntermPortConfig `json:"tunterm_port_config,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ReplaceDevice ReplaceDevice

// NewReplaceDevice instantiates a new ReplaceDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplaceDevice() *ReplaceDevice {
	this := ReplaceDevice{}
	return &this
}

// NewReplaceDeviceWithDefaults instantiates a new ReplaceDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplaceDeviceWithDefaults() *ReplaceDevice {
	this := ReplaceDevice{}
	return &this
}

// GetDiscard returns the Discard field value if set, zero value otherwise.
func (o *ReplaceDevice) GetDiscard() []string {
	if o == nil || IsNil(o.Discard) {
		var ret []string
		return ret
	}
	return o.Discard
}

// GetDiscardOk returns a tuple with the Discard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceDevice) GetDiscardOk() ([]string, bool) {
	if o == nil || IsNil(o.Discard) {
		return nil, false
	}
	return o.Discard, true
}

// HasDiscard returns a boolean if a field has been set.
func (o *ReplaceDevice) HasDiscard() bool {
	if o != nil && !IsNil(o.Discard) {
		return true
	}

	return false
}

// SetDiscard gets a reference to the given []string and assigns it to the Discard field.
func (o *ReplaceDevice) SetDiscard(v []string) {
	o.Discard = v
}

// GetInventoryMac returns the InventoryMac field value if set, zero value otherwise.
func (o *ReplaceDevice) GetInventoryMac() string {
	if o == nil || IsNil(o.InventoryMac) {
		var ret string
		return ret
	}
	return *o.InventoryMac
}

// GetInventoryMacOk returns a tuple with the InventoryMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceDevice) GetInventoryMacOk() (*string, bool) {
	if o == nil || IsNil(o.InventoryMac) {
		return nil, false
	}
	return o.InventoryMac, true
}

// HasInventoryMac returns a boolean if a field has been set.
func (o *ReplaceDevice) HasInventoryMac() bool {
	if o != nil && !IsNil(o.InventoryMac) {
		return true
	}

	return false
}

// SetInventoryMac gets a reference to the given string and assigns it to the InventoryMac field.
func (o *ReplaceDevice) SetInventoryMac(v string) {
	o.InventoryMac = &v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *ReplaceDevice) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceDevice) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *ReplaceDevice) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *ReplaceDevice) SetMac(v string) {
	o.Mac = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *ReplaceDevice) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceDevice) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *ReplaceDevice) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *ReplaceDevice) SetSiteId(v string) {
	o.SiteId = &v
}

// GetTuntermPortConfig returns the TuntermPortConfig field value if set, zero value otherwise.
func (o *ReplaceDevice) GetTuntermPortConfig() TuntermPortConfig {
	if o == nil || IsNil(o.TuntermPortConfig) {
		var ret TuntermPortConfig
		return ret
	}
	return *o.TuntermPortConfig
}

// GetTuntermPortConfigOk returns a tuple with the TuntermPortConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceDevice) GetTuntermPortConfigOk() (*TuntermPortConfig, bool) {
	if o == nil || IsNil(o.TuntermPortConfig) {
		return nil, false
	}
	return o.TuntermPortConfig, true
}

// HasTuntermPortConfig returns a boolean if a field has been set.
func (o *ReplaceDevice) HasTuntermPortConfig() bool {
	if o != nil && !IsNil(o.TuntermPortConfig) {
		return true
	}

	return false
}

// SetTuntermPortConfig gets a reference to the given TuntermPortConfig and assigns it to the TuntermPortConfig field.
func (o *ReplaceDevice) SetTuntermPortConfig(v TuntermPortConfig) {
	o.TuntermPortConfig = &v
}

func (o ReplaceDevice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplaceDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Discard) {
		toSerialize["discard"] = o.Discard
	}
	if !IsNil(o.InventoryMac) {
		toSerialize["inventory_mac"] = o.InventoryMac
	}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.TuntermPortConfig) {
		toSerialize["tunterm_port_config"] = o.TuntermPortConfig
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ReplaceDevice) UnmarshalJSON(data []byte) (err error) {
	varReplaceDevice := _ReplaceDevice{}

	err = json.Unmarshal(data, &varReplaceDevice)

	if err != nil {
		return err
	}

	*o = ReplaceDevice(varReplaceDevice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "discard")
		delete(additionalProperties, "inventory_mac")
		delete(additionalProperties, "mac")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "tunterm_port_config")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableReplaceDevice struct {
	value *ReplaceDevice
	isSet bool
}

func (v NullableReplaceDevice) Get() *ReplaceDevice {
	return v.value
}

func (v *NullableReplaceDevice) Set(val *ReplaceDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableReplaceDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableReplaceDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplaceDevice(val *ReplaceDevice) *NullableReplaceDevice {
	return &NullableReplaceDevice{value: val, isSet: true}
}

func (v NullableReplaceDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplaceDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


