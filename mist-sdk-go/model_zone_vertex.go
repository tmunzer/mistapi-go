/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the ZoneVertex type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneVertex{}

// ZoneVertex struct for ZoneVertex
type ZoneVertex struct {
	// x in pixel
	X float32 `json:"x"`
	// y in pixel
	Y float32 `json:"y"`
	AdditionalProperties map[string]interface{}
}

type _ZoneVertex ZoneVertex

// NewZoneVertex instantiates a new ZoneVertex object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneVertex(x float32, y float32) *ZoneVertex {
	this := ZoneVertex{}
	this.X = x
	this.Y = y
	return &this
}

// NewZoneVertexWithDefaults instantiates a new ZoneVertex object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneVertexWithDefaults() *ZoneVertex {
	this := ZoneVertex{}
	return &this
}

// GetX returns the X field value
func (o *ZoneVertex) GetX() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.X
}

// GetXOk returns a tuple with the X field value
// and a boolean to check if the value has been set.
func (o *ZoneVertex) GetXOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.X, true
}

// SetX sets field value
func (o *ZoneVertex) SetX(v float32) {
	o.X = v
}

// GetY returns the Y field value
func (o *ZoneVertex) GetY() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Y
}

// GetYOk returns a tuple with the Y field value
// and a boolean to check if the value has been set.
func (o *ZoneVertex) GetYOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Y, true
}

// SetY sets field value
func (o *ZoneVertex) SetY(v float32) {
	o.Y = v
}

func (o ZoneVertex) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneVertex) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["x"] = o.X
	toSerialize["y"] = o.Y

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ZoneVertex) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"x",
		"y",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varZoneVertex := _ZoneVertex{}

	err = json.Unmarshal(data, &varZoneVertex)

	if err != nil {
		return err
	}

	*o = ZoneVertex(varZoneVertex)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "x")
		delete(additionalProperties, "y")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableZoneVertex struct {
	value *ZoneVertex
	isSet bool
}

func (v NullableZoneVertex) Get() *ZoneVertex {
	return v.value
}

func (v *NullableZoneVertex) Set(val *ZoneVertex) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneVertex) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneVertex) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneVertex(val *ZoneVertex) *NullableZoneVertex {
	return &NullableZoneVertex{value: val, isSet: true}
}

func (v NullableZoneVertex) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneVertex) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


