/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the ResponseLogSearchItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseLogSearchItem{}

// ResponseLogSearchItem struct for ResponseLogSearchItem
type ResponseLogSearchItem struct {
	// admin id
	AdminId NullableString `json:"admin_id"`
	// name of the admin that performs the action
	AdminName NullableString `json:"admin_name"`
	// field values after the change
	After map[string]interface{} `json:"after,omitempty"`
	// field values prior to the change
	Before map[string]interface{} `json:"before,omitempty"`
	ForSite *bool `json:"for_site,omitempty"`
	Id *string `json:"id,omitempty"`
	// log message
	Message string `json:"message"`
	// org id
	OrgId string `json:"org_id"`
	SiteId string `json:"site_id"`
	// start time, in epoch
	Timestamp float32 `json:"timestamp"`
	AdditionalProperties map[string]interface{}
}

type _ResponseLogSearchItem ResponseLogSearchItem

// NewResponseLogSearchItem instantiates a new ResponseLogSearchItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseLogSearchItem(adminId NullableString, adminName NullableString, message string, orgId string, siteId string, timestamp float32) *ResponseLogSearchItem {
	this := ResponseLogSearchItem{}
	this.AdminId = adminId
	this.AdminName = adminName
	this.Message = message
	this.OrgId = orgId
	this.SiteId = siteId
	this.Timestamp = timestamp
	return &this
}

// NewResponseLogSearchItemWithDefaults instantiates a new ResponseLogSearchItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseLogSearchItemWithDefaults() *ResponseLogSearchItem {
	this := ResponseLogSearchItem{}
	return &this
}

// GetAdminId returns the AdminId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ResponseLogSearchItem) GetAdminId() string {
	if o == nil || o.AdminId.Get() == nil {
		var ret string
		return ret
	}

	return *o.AdminId.Get()
}

// GetAdminIdOk returns a tuple with the AdminId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponseLogSearchItem) GetAdminIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdminId.Get(), o.AdminId.IsSet()
}

// SetAdminId sets field value
func (o *ResponseLogSearchItem) SetAdminId(v string) {
	o.AdminId.Set(&v)
}

// GetAdminName returns the AdminName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ResponseLogSearchItem) GetAdminName() string {
	if o == nil || o.AdminName.Get() == nil {
		var ret string
		return ret
	}

	return *o.AdminName.Get()
}

// GetAdminNameOk returns a tuple with the AdminName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponseLogSearchItem) GetAdminNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdminName.Get(), o.AdminName.IsSet()
}

// SetAdminName sets field value
func (o *ResponseLogSearchItem) SetAdminName(v string) {
	o.AdminName.Set(&v)
}

// GetAfter returns the After field value if set, zero value otherwise.
func (o *ResponseLogSearchItem) GetAfter() map[string]interface{} {
	if o == nil || IsNil(o.After) {
		var ret map[string]interface{}
		return ret
	}
	return o.After
}

// GetAfterOk returns a tuple with the After field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseLogSearchItem) GetAfterOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.After) {
		return map[string]interface{}{}, false
	}
	return o.After, true
}

// HasAfter returns a boolean if a field has been set.
func (o *ResponseLogSearchItem) HasAfter() bool {
	if o != nil && !IsNil(o.After) {
		return true
	}

	return false
}

// SetAfter gets a reference to the given map[string]interface{} and assigns it to the After field.
func (o *ResponseLogSearchItem) SetAfter(v map[string]interface{}) {
	o.After = v
}

// GetBefore returns the Before field value if set, zero value otherwise.
func (o *ResponseLogSearchItem) GetBefore() map[string]interface{} {
	if o == nil || IsNil(o.Before) {
		var ret map[string]interface{}
		return ret
	}
	return o.Before
}

// GetBeforeOk returns a tuple with the Before field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseLogSearchItem) GetBeforeOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Before) {
		return map[string]interface{}{}, false
	}
	return o.Before, true
}

// HasBefore returns a boolean if a field has been set.
func (o *ResponseLogSearchItem) HasBefore() bool {
	if o != nil && !IsNil(o.Before) {
		return true
	}

	return false
}

// SetBefore gets a reference to the given map[string]interface{} and assigns it to the Before field.
func (o *ResponseLogSearchItem) SetBefore(v map[string]interface{}) {
	o.Before = v
}

// GetForSite returns the ForSite field value if set, zero value otherwise.
func (o *ResponseLogSearchItem) GetForSite() bool {
	if o == nil || IsNil(o.ForSite) {
		var ret bool
		return ret
	}
	return *o.ForSite
}

// GetForSiteOk returns a tuple with the ForSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseLogSearchItem) GetForSiteOk() (*bool, bool) {
	if o == nil || IsNil(o.ForSite) {
		return nil, false
	}
	return o.ForSite, true
}

// HasForSite returns a boolean if a field has been set.
func (o *ResponseLogSearchItem) HasForSite() bool {
	if o != nil && !IsNil(o.ForSite) {
		return true
	}

	return false
}

// SetForSite gets a reference to the given bool and assigns it to the ForSite field.
func (o *ResponseLogSearchItem) SetForSite(v bool) {
	o.ForSite = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResponseLogSearchItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseLogSearchItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResponseLogSearchItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ResponseLogSearchItem) SetId(v string) {
	o.Id = &v
}

// GetMessage returns the Message field value
func (o *ResponseLogSearchItem) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ResponseLogSearchItem) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ResponseLogSearchItem) SetMessage(v string) {
	o.Message = v
}

// GetOrgId returns the OrgId field value
func (o *ResponseLogSearchItem) GetOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *ResponseLogSearchItem) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *ResponseLogSearchItem) SetOrgId(v string) {
	o.OrgId = v
}

// GetSiteId returns the SiteId field value
func (o *ResponseLogSearchItem) GetSiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *ResponseLogSearchItem) GetSiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *ResponseLogSearchItem) SetSiteId(v string) {
	o.SiteId = v
}

// GetTimestamp returns the Timestamp field value
func (o *ResponseLogSearchItem) GetTimestamp() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *ResponseLogSearchItem) GetTimestampOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *ResponseLogSearchItem) SetTimestamp(v float32) {
	o.Timestamp = v
}

func (o ResponseLogSearchItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseLogSearchItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["admin_id"] = o.AdminId.Get()
	toSerialize["admin_name"] = o.AdminName.Get()
	if !IsNil(o.After) {
		toSerialize["after"] = o.After
	}
	if !IsNil(o.Before) {
		toSerialize["before"] = o.Before
	}
	if !IsNil(o.ForSite) {
		toSerialize["for_site"] = o.ForSite
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["message"] = o.Message
	toSerialize["org_id"] = o.OrgId
	toSerialize["site_id"] = o.SiteId
	toSerialize["timestamp"] = o.Timestamp

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResponseLogSearchItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"admin_id",
		"admin_name",
		"message",
		"org_id",
		"site_id",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResponseLogSearchItem := _ResponseLogSearchItem{}

	err = json.Unmarshal(data, &varResponseLogSearchItem)

	if err != nil {
		return err
	}

	*o = ResponseLogSearchItem(varResponseLogSearchItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "admin_id")
		delete(additionalProperties, "admin_name")
		delete(additionalProperties, "after")
		delete(additionalProperties, "before")
		delete(additionalProperties, "for_site")
		delete(additionalProperties, "id")
		delete(additionalProperties, "message")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "timestamp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResponseLogSearchItem struct {
	value *ResponseLogSearchItem
	isSet bool
}

func (v NullableResponseLogSearchItem) Get() *ResponseLogSearchItem {
	return v.value
}

func (v *NullableResponseLogSearchItem) Set(val *ResponseLogSearchItem) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseLogSearchItem) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseLogSearchItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseLogSearchItem(val *ResponseLogSearchItem) *NullableResponseLogSearchItem {
	return &NullableResponseLogSearchItem{value: val, isSet: true}
}

func (v NullableResponseLogSearchItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseLogSearchItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


