/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the WlanDynamicVlan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WlanDynamicVlan{}

// WlanDynamicVlan for 802.1x
type WlanDynamicVlan struct {
	// vlan_id to use when thereâ€™s no match from RADIUS
	DefaultVlanId NullableInt32 `json:"default_vlan_id,omitempty"`
	// whether to enable dynamic vlan
	Enabled *bool `json:"enabled,omitempty"`
	// vlan_ids to be locally bridged
	LocalVlanIds []*int32 `json:"local_vlan_ids,omitempty"`
	Type *WlanDynamicVlanType `json:"type,omitempty"`
	// map between vlan_id (as string) to airespace interface names (comma-separated) or null for stndard mapping   * if `dynamic_vlan.type`==`standard`, property key is the Vlan ID and property value is \"\"   * if `dynamic_vlan.type`==`airespace-interface-name`, property key is the Vlan ID and property value is the Airespace Interface Name
	Vlans *map[string]string `json:"vlans,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WlanDynamicVlan WlanDynamicVlan

// NewWlanDynamicVlan instantiates a new WlanDynamicVlan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWlanDynamicVlan() *WlanDynamicVlan {
	this := WlanDynamicVlan{}
	var defaultVlanId int32 = 999
	this.DefaultVlanId = *NewNullableInt32(&defaultVlanId)
	var enabled bool = false
	this.Enabled = &enabled
	var type_ WlanDynamicVlanType = WLANDYNAMICVLANTYPE_STANDARD
	this.Type = &type_
	return &this
}

// NewWlanDynamicVlanWithDefaults instantiates a new WlanDynamicVlan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWlanDynamicVlanWithDefaults() *WlanDynamicVlan {
	this := WlanDynamicVlan{}
	var defaultVlanId int32 = 999
	this.DefaultVlanId = *NewNullableInt32(&defaultVlanId)
	var enabled bool = false
	this.Enabled = &enabled
	var type_ WlanDynamicVlanType = WLANDYNAMICVLANTYPE_STANDARD
	this.Type = &type_
	return &this
}

// GetDefaultVlanId returns the DefaultVlanId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WlanDynamicVlan) GetDefaultVlanId() int32 {
	if o == nil || IsNil(o.DefaultVlanId.Get()) {
		var ret int32
		return ret
	}
	return *o.DefaultVlanId.Get()
}

// GetDefaultVlanIdOk returns a tuple with the DefaultVlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WlanDynamicVlan) GetDefaultVlanIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultVlanId.Get(), o.DefaultVlanId.IsSet()
}

// HasDefaultVlanId returns a boolean if a field has been set.
func (o *WlanDynamicVlan) HasDefaultVlanId() bool {
	if o != nil && o.DefaultVlanId.IsSet() {
		return true
	}

	return false
}

// SetDefaultVlanId gets a reference to the given NullableInt32 and assigns it to the DefaultVlanId field.
func (o *WlanDynamicVlan) SetDefaultVlanId(v int32) {
	o.DefaultVlanId.Set(&v)
}
// SetDefaultVlanIdNil sets the value for DefaultVlanId to be an explicit nil
func (o *WlanDynamicVlan) SetDefaultVlanIdNil() {
	o.DefaultVlanId.Set(nil)
}

// UnsetDefaultVlanId ensures that no value is present for DefaultVlanId, not even an explicit nil
func (o *WlanDynamicVlan) UnsetDefaultVlanId() {
	o.DefaultVlanId.Unset()
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *WlanDynamicVlan) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanDynamicVlan) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *WlanDynamicVlan) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *WlanDynamicVlan) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetLocalVlanIds returns the LocalVlanIds field value if set, zero value otherwise.
func (o *WlanDynamicVlan) GetLocalVlanIds() []*int32 {
	if o == nil || IsNil(o.LocalVlanIds) {
		var ret []*int32
		return ret
	}
	return o.LocalVlanIds
}

// GetLocalVlanIdsOk returns a tuple with the LocalVlanIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanDynamicVlan) GetLocalVlanIdsOk() ([]*int32, bool) {
	if o == nil || IsNil(o.LocalVlanIds) {
		return nil, false
	}
	return o.LocalVlanIds, true
}

// HasLocalVlanIds returns a boolean if a field has been set.
func (o *WlanDynamicVlan) HasLocalVlanIds() bool {
	if o != nil && !IsNil(o.LocalVlanIds) {
		return true
	}

	return false
}

// SetLocalVlanIds gets a reference to the given []*int32 and assigns it to the LocalVlanIds field.
func (o *WlanDynamicVlan) SetLocalVlanIds(v []*int32) {
	o.LocalVlanIds = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *WlanDynamicVlan) GetType() WlanDynamicVlanType {
	if o == nil || IsNil(o.Type) {
		var ret WlanDynamicVlanType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanDynamicVlan) GetTypeOk() (*WlanDynamicVlanType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *WlanDynamicVlan) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given WlanDynamicVlanType and assigns it to the Type field.
func (o *WlanDynamicVlan) SetType(v WlanDynamicVlanType) {
	o.Type = &v
}

// GetVlans returns the Vlans field value if set, zero value otherwise.
func (o *WlanDynamicVlan) GetVlans() map[string]string {
	if o == nil || IsNil(o.Vlans) {
		var ret map[string]string
		return ret
	}
	return *o.Vlans
}

// GetVlansOk returns a tuple with the Vlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanDynamicVlan) GetVlansOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Vlans) {
		return nil, false
	}
	return o.Vlans, true
}

// HasVlans returns a boolean if a field has been set.
func (o *WlanDynamicVlan) HasVlans() bool {
	if o != nil && !IsNil(o.Vlans) {
		return true
	}

	return false
}

// SetVlans gets a reference to the given map[string]string and assigns it to the Vlans field.
func (o *WlanDynamicVlan) SetVlans(v map[string]string) {
	o.Vlans = &v
}

func (o WlanDynamicVlan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WlanDynamicVlan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultVlanId.IsSet() {
		toSerialize["default_vlan_id"] = o.DefaultVlanId.Get()
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.LocalVlanIds) {
		toSerialize["local_vlan_ids"] = o.LocalVlanIds
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Vlans) {
		toSerialize["vlans"] = o.Vlans
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WlanDynamicVlan) UnmarshalJSON(data []byte) (err error) {
	varWlanDynamicVlan := _WlanDynamicVlan{}

	err = json.Unmarshal(data, &varWlanDynamicVlan)

	if err != nil {
		return err
	}

	*o = WlanDynamicVlan(varWlanDynamicVlan)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "default_vlan_id")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "local_vlan_ids")
		delete(additionalProperties, "type")
		delete(additionalProperties, "vlans")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWlanDynamicVlan struct {
	value *WlanDynamicVlan
	isSet bool
}

func (v NullableWlanDynamicVlan) Get() *WlanDynamicVlan {
	return v.value
}

func (v *NullableWlanDynamicVlan) Set(val *WlanDynamicVlan) {
	v.value = val
	v.isSet = true
}

func (v NullableWlanDynamicVlan) IsSet() bool {
	return v.isSet
}

func (v *NullableWlanDynamicVlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWlanDynamicVlan(val *WlanDynamicVlan) *NullableWlanDynamicVlan {
	return &NullableWlanDynamicVlan{value: val, isSet: true}
}

func (v NullableWlanDynamicVlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWlanDynamicVlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


