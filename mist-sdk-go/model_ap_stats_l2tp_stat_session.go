/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the ApStatsL2tpStatSession type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApStatsL2tpStatSession{}

// ApStatsL2tpStatSession struct for ApStatsL2tpStatSession
type ApStatsL2tpStatSession struct {
	// remote sessions id (dynamically unless Tunnel is said to be static)
	LocalSid *int32 `json:"local_sid,omitempty"`
	// WxlanTunnel Remote ID (user-configured)
	RemoteId *string `json:"remote_id,omitempty"`
	// remote sessions id (dynamically unless Tunnel is said to be static)
	RemoteSid *int32 `json:"remote_sid,omitempty"`
	State *L2tpState `json:"state,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApStatsL2tpStatSession ApStatsL2tpStatSession

// NewApStatsL2tpStatSession instantiates a new ApStatsL2tpStatSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApStatsL2tpStatSession() *ApStatsL2tpStatSession {
	this := ApStatsL2tpStatSession{}
	return &this
}

// NewApStatsL2tpStatSessionWithDefaults instantiates a new ApStatsL2tpStatSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApStatsL2tpStatSessionWithDefaults() *ApStatsL2tpStatSession {
	this := ApStatsL2tpStatSession{}
	return &this
}

// GetLocalSid returns the LocalSid field value if set, zero value otherwise.
func (o *ApStatsL2tpStatSession) GetLocalSid() int32 {
	if o == nil || IsNil(o.LocalSid) {
		var ret int32
		return ret
	}
	return *o.LocalSid
}

// GetLocalSidOk returns a tuple with the LocalSid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsL2tpStatSession) GetLocalSidOk() (*int32, bool) {
	if o == nil || IsNil(o.LocalSid) {
		return nil, false
	}
	return o.LocalSid, true
}

// HasLocalSid returns a boolean if a field has been set.
func (o *ApStatsL2tpStatSession) HasLocalSid() bool {
	if o != nil && !IsNil(o.LocalSid) {
		return true
	}

	return false
}

// SetLocalSid gets a reference to the given int32 and assigns it to the LocalSid field.
func (o *ApStatsL2tpStatSession) SetLocalSid(v int32) {
	o.LocalSid = &v
}

// GetRemoteId returns the RemoteId field value if set, zero value otherwise.
func (o *ApStatsL2tpStatSession) GetRemoteId() string {
	if o == nil || IsNil(o.RemoteId) {
		var ret string
		return ret
	}
	return *o.RemoteId
}

// GetRemoteIdOk returns a tuple with the RemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsL2tpStatSession) GetRemoteIdOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteId) {
		return nil, false
	}
	return o.RemoteId, true
}

// HasRemoteId returns a boolean if a field has been set.
func (o *ApStatsL2tpStatSession) HasRemoteId() bool {
	if o != nil && !IsNil(o.RemoteId) {
		return true
	}

	return false
}

// SetRemoteId gets a reference to the given string and assigns it to the RemoteId field.
func (o *ApStatsL2tpStatSession) SetRemoteId(v string) {
	o.RemoteId = &v
}

// GetRemoteSid returns the RemoteSid field value if set, zero value otherwise.
func (o *ApStatsL2tpStatSession) GetRemoteSid() int32 {
	if o == nil || IsNil(o.RemoteSid) {
		var ret int32
		return ret
	}
	return *o.RemoteSid
}

// GetRemoteSidOk returns a tuple with the RemoteSid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsL2tpStatSession) GetRemoteSidOk() (*int32, bool) {
	if o == nil || IsNil(o.RemoteSid) {
		return nil, false
	}
	return o.RemoteSid, true
}

// HasRemoteSid returns a boolean if a field has been set.
func (o *ApStatsL2tpStatSession) HasRemoteSid() bool {
	if o != nil && !IsNil(o.RemoteSid) {
		return true
	}

	return false
}

// SetRemoteSid gets a reference to the given int32 and assigns it to the RemoteSid field.
func (o *ApStatsL2tpStatSession) SetRemoteSid(v int32) {
	o.RemoteSid = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ApStatsL2tpStatSession) GetState() L2tpState {
	if o == nil || IsNil(o.State) {
		var ret L2tpState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsL2tpStatSession) GetStateOk() (*L2tpState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ApStatsL2tpStatSession) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given L2tpState and assigns it to the State field.
func (o *ApStatsL2tpStatSession) SetState(v L2tpState) {
	o.State = &v
}

func (o ApStatsL2tpStatSession) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApStatsL2tpStatSession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LocalSid) {
		toSerialize["local_sid"] = o.LocalSid
	}
	if !IsNil(o.RemoteId) {
		toSerialize["remote_id"] = o.RemoteId
	}
	if !IsNil(o.RemoteSid) {
		toSerialize["remote_sid"] = o.RemoteSid
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApStatsL2tpStatSession) UnmarshalJSON(data []byte) (err error) {
	varApStatsL2tpStatSession := _ApStatsL2tpStatSession{}

	err = json.Unmarshal(data, &varApStatsL2tpStatSession)

	if err != nil {
		return err
	}

	*o = ApStatsL2tpStatSession(varApStatsL2tpStatSession)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "local_sid")
		delete(additionalProperties, "remote_id")
		delete(additionalProperties, "remote_sid")
		delete(additionalProperties, "state")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApStatsL2tpStatSession struct {
	value *ApStatsL2tpStatSession
	isSet bool
}

func (v NullableApStatsL2tpStatSession) Get() *ApStatsL2tpStatSession {
	return v.value
}

func (v *NullableApStatsL2tpStatSession) Set(val *ApStatsL2tpStatSession) {
	v.value = val
	v.isSet = true
}

func (v NullableApStatsL2tpStatSession) IsSet() bool {
	return v.isSet
}

func (v *NullableApStatsL2tpStatSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApStatsL2tpStatSession(val *ApStatsL2tpStatSession) *NullableApStatsL2tpStatSession {
	return &NullableApStatsL2tpStatSession{value: val, isSet: true}
}

func (v NullableApStatsL2tpStatSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApStatsL2tpStatSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


