/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// OrgNacClientEventsCountDistinct the model 'OrgNacClientEventsCountDistinct'
type OrgNacClientEventsCountDistinct string

// List of org_nac_client_events_count_distinct
const (
	ORGNACCLIENTEVENTSCOUNTDISTINCT_EMPTY OrgNacClientEventsCountDistinct = ""
	ORGNACCLIENTEVENTSCOUNTDISTINCT_TYPE OrgNacClientEventsCountDistinct = "type"
	ORGNACCLIENTEVENTSCOUNTDISTINCT_NACRULE_ID OrgNacClientEventsCountDistinct = "nacrule_id"
	ORGNACCLIENTEVENTSCOUNTDISTINCT_DRYRUN_NACRULE_ID OrgNacClientEventsCountDistinct = "dryrun_nacrule_id"
	ORGNACCLIENTEVENTSCOUNTDISTINCT_AUTH_TYPE OrgNacClientEventsCountDistinct = "auth_type"
	ORGNACCLIENTEVENTSCOUNTDISTINCT_VLAN OrgNacClientEventsCountDistinct = "vlan"
	ORGNACCLIENTEVENTSCOUNTDISTINCT_NAS_VENDOR OrgNacClientEventsCountDistinct = "nas_vendor"
	ORGNACCLIENTEVENTSCOUNTDISTINCT_USERNAME OrgNacClientEventsCountDistinct = "username"
	ORGNACCLIENTEVENTSCOUNTDISTINCT_AP OrgNacClientEventsCountDistinct = "ap"
	ORGNACCLIENTEVENTSCOUNTDISTINCT_MAC OrgNacClientEventsCountDistinct = "mac"
	ORGNACCLIENTEVENTSCOUNTDISTINCT_SSID OrgNacClientEventsCountDistinct = "ssid"
)

// All allowed values of OrgNacClientEventsCountDistinct enum
var AllowedOrgNacClientEventsCountDistinctEnumValues = []OrgNacClientEventsCountDistinct{
	"",
	"type",
	"nacrule_id",
	"dryrun_nacrule_id",
	"auth_type",
	"vlan",
	"nas_vendor",
	"username",
	"ap",
	"mac",
	"ssid",
}

func (v *OrgNacClientEventsCountDistinct) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrgNacClientEventsCountDistinct(value)
	for _, existing := range AllowedOrgNacClientEventsCountDistinctEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrgNacClientEventsCountDistinct", value)
}

// NewOrgNacClientEventsCountDistinctFromValue returns a pointer to a valid OrgNacClientEventsCountDistinct
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrgNacClientEventsCountDistinctFromValue(v string) (*OrgNacClientEventsCountDistinct, error) {
	ev := OrgNacClientEventsCountDistinct(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrgNacClientEventsCountDistinct: valid values are %v", v, AllowedOrgNacClientEventsCountDistinctEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrgNacClientEventsCountDistinct) IsValid() bool {
	for _, existing := range AllowedOrgNacClientEventsCountDistinctEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to org_nac_client_events_count_distinct value
func (v OrgNacClientEventsCountDistinct) Ptr() *OrgNacClientEventsCountDistinct {
	return &v
}

type NullableOrgNacClientEventsCountDistinct struct {
	value *OrgNacClientEventsCountDistinct
	isSet bool
}

func (v NullableOrgNacClientEventsCountDistinct) Get() *OrgNacClientEventsCountDistinct {
	return v.value
}

func (v *NullableOrgNacClientEventsCountDistinct) Set(val *OrgNacClientEventsCountDistinct) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgNacClientEventsCountDistinct) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgNacClientEventsCountDistinct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgNacClientEventsCountDistinct(val *OrgNacClientEventsCountDistinct) *NullableOrgNacClientEventsCountDistinct {
	return &NullableOrgNacClientEventsCountDistinct{value: val, isSet: true}
}

func (v NullableOrgNacClientEventsCountDistinct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgNacClientEventsCountDistinct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

