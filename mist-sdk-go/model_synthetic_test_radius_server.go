/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the SyntheticTestRadiusServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyntheticTestRadiusServer{}

// SyntheticTestRadiusServer struct for SyntheticTestRadiusServer
type SyntheticTestRadiusServer struct {
	// Specify the password associated with the username
	Password string `json:"password"`
	// Specify the access profile associated with the subscriber
	Profile *string `json:"profile,omitempty"`
	// Specify the subscriber username to test
	User string `json:"user"`
	AdditionalProperties map[string]interface{}
}

type _SyntheticTestRadiusServer SyntheticTestRadiusServer

// NewSyntheticTestRadiusServer instantiates a new SyntheticTestRadiusServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticTestRadiusServer(password string, user string) *SyntheticTestRadiusServer {
	this := SyntheticTestRadiusServer{}
	this.Password = password
	var profile string = "dot1x"
	this.Profile = &profile
	this.User = user
	return &this
}

// NewSyntheticTestRadiusServerWithDefaults instantiates a new SyntheticTestRadiusServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticTestRadiusServerWithDefaults() *SyntheticTestRadiusServer {
	this := SyntheticTestRadiusServer{}
	var profile string = "dot1x"
	this.Profile = &profile
	return &this
}

// GetPassword returns the Password field value
func (o *SyntheticTestRadiusServer) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *SyntheticTestRadiusServer) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *SyntheticTestRadiusServer) SetPassword(v string) {
	o.Password = v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *SyntheticTestRadiusServer) GetProfile() string {
	if o == nil || IsNil(o.Profile) {
		var ret string
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticTestRadiusServer) GetProfileOk() (*string, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *SyntheticTestRadiusServer) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given string and assigns it to the Profile field.
func (o *SyntheticTestRadiusServer) SetProfile(v string) {
	o.Profile = &v
}

// GetUser returns the User field value
func (o *SyntheticTestRadiusServer) GetUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *SyntheticTestRadiusServer) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *SyntheticTestRadiusServer) SetUser(v string) {
	o.User = v
}

func (o SyntheticTestRadiusServer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyntheticTestRadiusServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["password"] = o.Password
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	toSerialize["user"] = o.User

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SyntheticTestRadiusServer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"password",
		"user",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSyntheticTestRadiusServer := _SyntheticTestRadiusServer{}

	err = json.Unmarshal(data, &varSyntheticTestRadiusServer)

	if err != nil {
		return err
	}

	*o = SyntheticTestRadiusServer(varSyntheticTestRadiusServer)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "password")
		delete(additionalProperties, "profile")
		delete(additionalProperties, "user")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSyntheticTestRadiusServer struct {
	value *SyntheticTestRadiusServer
	isSet bool
}

func (v NullableSyntheticTestRadiusServer) Get() *SyntheticTestRadiusServer {
	return v.value
}

func (v *NullableSyntheticTestRadiusServer) Set(val *SyntheticTestRadiusServer) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticTestRadiusServer) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticTestRadiusServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticTestRadiusServer(val *SyntheticTestRadiusServer) *NullableSyntheticTestRadiusServer {
	return &NullableSyntheticTestRadiusServer{value: val, isSet: true}
}

func (v NullableSyntheticTestRadiusServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticTestRadiusServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


