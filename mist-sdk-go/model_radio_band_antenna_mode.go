/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// RadioBandAntennaMode the model 'RadioBandAntennaMode'
type RadioBandAntennaMode string

// List of radio_band_antenna_mode
const (
	RADIOBANDANTENNAMODE_EMPTY RadioBandAntennaMode = ""
	RADIOBANDANTENNAMODE_DEFAULT RadioBandAntennaMode = "default"
	RADIOBANDANTENNAMODE__1X1 RadioBandAntennaMode = "1x1"
	RADIOBANDANTENNAMODE__2X2 RadioBandAntennaMode = "2x2"
	RADIOBANDANTENNAMODE__3X3 RadioBandAntennaMode = "3x3"
	RADIOBANDANTENNAMODE__4X4 RadioBandAntennaMode = "4x4"
)

// All allowed values of RadioBandAntennaMode enum
var AllowedRadioBandAntennaModeEnumValues = []RadioBandAntennaMode{
	"",
	"default",
	"1x1",
	"2x2",
	"3x3",
	"4x4",
}

func (v *RadioBandAntennaMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RadioBandAntennaMode(value)
	for _, existing := range AllowedRadioBandAntennaModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RadioBandAntennaMode", value)
}

// NewRadioBandAntennaModeFromValue returns a pointer to a valid RadioBandAntennaMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRadioBandAntennaModeFromValue(v string) (*RadioBandAntennaMode, error) {
	ev := RadioBandAntennaMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RadioBandAntennaMode: valid values are %v", v, AllowedRadioBandAntennaModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RadioBandAntennaMode) IsValid() bool {
	for _, existing := range AllowedRadioBandAntennaModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to radio_band_antenna_mode value
func (v RadioBandAntennaMode) Ptr() *RadioBandAntennaMode {
	return &v
}

type NullableRadioBandAntennaMode struct {
	value *RadioBandAntennaMode
	isSet bool
}

func (v NullableRadioBandAntennaMode) Get() *RadioBandAntennaMode {
	return v.value
}

func (v *NullableRadioBandAntennaMode) Set(val *RadioBandAntennaMode) {
	v.value = val
	v.isSet = true
}

func (v NullableRadioBandAntennaMode) IsSet() bool {
	return v.isSet
}

func (v *NullableRadioBandAntennaMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRadioBandAntennaMode(val *RadioBandAntennaMode) *NullableRadioBandAntennaMode {
	return &NullableRadioBandAntennaMode{value: val, isSet: true}
}

func (v NullableRadioBandAntennaMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRadioBandAntennaMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

