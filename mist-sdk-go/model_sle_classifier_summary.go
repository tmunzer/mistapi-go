/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the SleClassifierSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SleClassifierSummary{}

// SleClassifierSummary struct for SleClassifierSummary
type SleClassifierSummary struct {
	Classifier SleClassifier `json:"classifier"`
	End float32 `json:"end"`
	Failures []map[string]interface{} `json:"failures"`
	Impact SleClassifierSummaryImpact `json:"impact"`
	Metric string `json:"metric"`
	Start float32 `json:"start"`
	AdditionalProperties map[string]interface{}
}

type _SleClassifierSummary SleClassifierSummary

// NewSleClassifierSummary instantiates a new SleClassifierSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSleClassifierSummary(classifier SleClassifier, end float32, failures []map[string]interface{}, impact SleClassifierSummaryImpact, metric string, start float32) *SleClassifierSummary {
	this := SleClassifierSummary{}
	this.Classifier = classifier
	this.End = end
	this.Failures = failures
	this.Impact = impact
	this.Metric = metric
	this.Start = start
	return &this
}

// NewSleClassifierSummaryWithDefaults instantiates a new SleClassifierSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSleClassifierSummaryWithDefaults() *SleClassifierSummary {
	this := SleClassifierSummary{}
	return &this
}

// GetClassifier returns the Classifier field value
func (o *SleClassifierSummary) GetClassifier() SleClassifier {
	if o == nil {
		var ret SleClassifier
		return ret
	}

	return o.Classifier
}

// GetClassifierOk returns a tuple with the Classifier field value
// and a boolean to check if the value has been set.
func (o *SleClassifierSummary) GetClassifierOk() (*SleClassifier, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Classifier, true
}

// SetClassifier sets field value
func (o *SleClassifierSummary) SetClassifier(v SleClassifier) {
	o.Classifier = v
}

// GetEnd returns the End field value
func (o *SleClassifierSummary) GetEnd() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.End
}

// GetEndOk returns a tuple with the End field value
// and a boolean to check if the value has been set.
func (o *SleClassifierSummary) GetEndOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.End, true
}

// SetEnd sets field value
func (o *SleClassifierSummary) SetEnd(v float32) {
	o.End = v
}

// GetFailures returns the Failures field value
func (o *SleClassifierSummary) GetFailures() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Failures
}

// GetFailuresOk returns a tuple with the Failures field value
// and a boolean to check if the value has been set.
func (o *SleClassifierSummary) GetFailuresOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Failures, true
}

// SetFailures sets field value
func (o *SleClassifierSummary) SetFailures(v []map[string]interface{}) {
	o.Failures = v
}

// GetImpact returns the Impact field value
func (o *SleClassifierSummary) GetImpact() SleClassifierSummaryImpact {
	if o == nil {
		var ret SleClassifierSummaryImpact
		return ret
	}

	return o.Impact
}

// GetImpactOk returns a tuple with the Impact field value
// and a boolean to check if the value has been set.
func (o *SleClassifierSummary) GetImpactOk() (*SleClassifierSummaryImpact, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Impact, true
}

// SetImpact sets field value
func (o *SleClassifierSummary) SetImpact(v SleClassifierSummaryImpact) {
	o.Impact = v
}

// GetMetric returns the Metric field value
func (o *SleClassifierSummary) GetMetric() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Metric
}

// GetMetricOk returns a tuple with the Metric field value
// and a boolean to check if the value has been set.
func (o *SleClassifierSummary) GetMetricOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metric, true
}

// SetMetric sets field value
func (o *SleClassifierSummary) SetMetric(v string) {
	o.Metric = v
}

// GetStart returns the Start field value
func (o *SleClassifierSummary) GetStart() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *SleClassifierSummary) GetStartOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *SleClassifierSummary) SetStart(v float32) {
	o.Start = v
}

func (o SleClassifierSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SleClassifierSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["classifier"] = o.Classifier
	toSerialize["end"] = o.End
	toSerialize["failures"] = o.Failures
	toSerialize["impact"] = o.Impact
	toSerialize["metric"] = o.Metric
	toSerialize["start"] = o.Start

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SleClassifierSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"classifier",
		"end",
		"failures",
		"impact",
		"metric",
		"start",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSleClassifierSummary := _SleClassifierSummary{}

	err = json.Unmarshal(data, &varSleClassifierSummary)

	if err != nil {
		return err
	}

	*o = SleClassifierSummary(varSleClassifierSummary)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "classifier")
		delete(additionalProperties, "end")
		delete(additionalProperties, "failures")
		delete(additionalProperties, "impact")
		delete(additionalProperties, "metric")
		delete(additionalProperties, "start")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSleClassifierSummary struct {
	value *SleClassifierSummary
	isSet bool
}

func (v NullableSleClassifierSummary) Get() *SleClassifierSummary {
	return v.value
}

func (v *NullableSleClassifierSummary) Set(val *SleClassifierSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableSleClassifierSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableSleClassifierSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSleClassifierSummary(val *SleClassifierSummary) *NullableSleClassifierSummary {
	return &NullableSleClassifierSummary{value: val, isSet: true}
}

func (v NullableSleClassifierSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSleClassifierSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


