/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the SnmpConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnmpConfig{}

// SnmpConfig struct for SnmpConfig
type SnmpConfig struct {
	ClientList []SnmpConfigClientList `json:"client_list,omitempty"`
	Contact *string `json:"contact,omitempty"`
	Description *string `json:"description,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	EngineId *SnmpConfigEngineId `json:"engine_id,omitempty"`
	Location *string `json:"location,omitempty"`
	Name *string `json:"name,omitempty"`
	Network *string `json:"network,omitempty"`
	TrapGroups []SnmpConfigTrapGroup `json:"trap_groups,omitempty"`
	V2cConfig []SnmpConfigV2cConfig `json:"v2c_config,omitempty"`
	V3Config *Snmpv3Config `json:"v3_config,omitempty"`
	Views *SnmpConfigViews `json:"views,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SnmpConfig SnmpConfig

// NewSnmpConfig instantiates a new SnmpConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnmpConfig() *SnmpConfig {
	this := SnmpConfig{}
	var enabled bool = true
	this.Enabled = &enabled
	var network string = "default"
	this.Network = &network
	return &this
}

// NewSnmpConfigWithDefaults instantiates a new SnmpConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnmpConfigWithDefaults() *SnmpConfig {
	this := SnmpConfig{}
	var enabled bool = true
	this.Enabled = &enabled
	var network string = "default"
	this.Network = &network
	return &this
}

// GetClientList returns the ClientList field value if set, zero value otherwise.
func (o *SnmpConfig) GetClientList() []SnmpConfigClientList {
	if o == nil || IsNil(o.ClientList) {
		var ret []SnmpConfigClientList
		return ret
	}
	return o.ClientList
}

// GetClientListOk returns a tuple with the ClientList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpConfig) GetClientListOk() ([]SnmpConfigClientList, bool) {
	if o == nil || IsNil(o.ClientList) {
		return nil, false
	}
	return o.ClientList, true
}

// HasClientList returns a boolean if a field has been set.
func (o *SnmpConfig) HasClientList() bool {
	if o != nil && !IsNil(o.ClientList) {
		return true
	}

	return false
}

// SetClientList gets a reference to the given []SnmpConfigClientList and assigns it to the ClientList field.
func (o *SnmpConfig) SetClientList(v []SnmpConfigClientList) {
	o.ClientList = v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *SnmpConfig) GetContact() string {
	if o == nil || IsNil(o.Contact) {
		var ret string
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpConfig) GetContactOk() (*string, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *SnmpConfig) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given string and assigns it to the Contact field.
func (o *SnmpConfig) SetContact(v string) {
	o.Contact = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SnmpConfig) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpConfig) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SnmpConfig) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SnmpConfig) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SnmpConfig) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SnmpConfig) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SnmpConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *SnmpConfig) GetEngineId() SnmpConfigEngineId {
	if o == nil || IsNil(o.EngineId) {
		var ret SnmpConfigEngineId
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpConfig) GetEngineIdOk() (*SnmpConfigEngineId, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *SnmpConfig) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given SnmpConfigEngineId and assigns it to the EngineId field.
func (o *SnmpConfig) SetEngineId(v SnmpConfigEngineId) {
	o.EngineId = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *SnmpConfig) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpConfig) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *SnmpConfig) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *SnmpConfig) SetLocation(v string) {
	o.Location = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SnmpConfig) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpConfig) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SnmpConfig) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SnmpConfig) SetName(v string) {
	o.Name = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *SnmpConfig) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpConfig) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *SnmpConfig) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *SnmpConfig) SetNetwork(v string) {
	o.Network = &v
}

// GetTrapGroups returns the TrapGroups field value if set, zero value otherwise.
func (o *SnmpConfig) GetTrapGroups() []SnmpConfigTrapGroup {
	if o == nil || IsNil(o.TrapGroups) {
		var ret []SnmpConfigTrapGroup
		return ret
	}
	return o.TrapGroups
}

// GetTrapGroupsOk returns a tuple with the TrapGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpConfig) GetTrapGroupsOk() ([]SnmpConfigTrapGroup, bool) {
	if o == nil || IsNil(o.TrapGroups) {
		return nil, false
	}
	return o.TrapGroups, true
}

// HasTrapGroups returns a boolean if a field has been set.
func (o *SnmpConfig) HasTrapGroups() bool {
	if o != nil && !IsNil(o.TrapGroups) {
		return true
	}

	return false
}

// SetTrapGroups gets a reference to the given []SnmpConfigTrapGroup and assigns it to the TrapGroups field.
func (o *SnmpConfig) SetTrapGroups(v []SnmpConfigTrapGroup) {
	o.TrapGroups = v
}

// GetV2cConfig returns the V2cConfig field value if set, zero value otherwise.
func (o *SnmpConfig) GetV2cConfig() []SnmpConfigV2cConfig {
	if o == nil || IsNil(o.V2cConfig) {
		var ret []SnmpConfigV2cConfig
		return ret
	}
	return o.V2cConfig
}

// GetV2cConfigOk returns a tuple with the V2cConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpConfig) GetV2cConfigOk() ([]SnmpConfigV2cConfig, bool) {
	if o == nil || IsNil(o.V2cConfig) {
		return nil, false
	}
	return o.V2cConfig, true
}

// HasV2cConfig returns a boolean if a field has been set.
func (o *SnmpConfig) HasV2cConfig() bool {
	if o != nil && !IsNil(o.V2cConfig) {
		return true
	}

	return false
}

// SetV2cConfig gets a reference to the given []SnmpConfigV2cConfig and assigns it to the V2cConfig field.
func (o *SnmpConfig) SetV2cConfig(v []SnmpConfigV2cConfig) {
	o.V2cConfig = v
}

// GetV3Config returns the V3Config field value if set, zero value otherwise.
func (o *SnmpConfig) GetV3Config() Snmpv3Config {
	if o == nil || IsNil(o.V3Config) {
		var ret Snmpv3Config
		return ret
	}
	return *o.V3Config
}

// GetV3ConfigOk returns a tuple with the V3Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpConfig) GetV3ConfigOk() (*Snmpv3Config, bool) {
	if o == nil || IsNil(o.V3Config) {
		return nil, false
	}
	return o.V3Config, true
}

// HasV3Config returns a boolean if a field has been set.
func (o *SnmpConfig) HasV3Config() bool {
	if o != nil && !IsNil(o.V3Config) {
		return true
	}

	return false
}

// SetV3Config gets a reference to the given Snmpv3Config and assigns it to the V3Config field.
func (o *SnmpConfig) SetV3Config(v Snmpv3Config) {
	o.V3Config = &v
}

// GetViews returns the Views field value if set, zero value otherwise.
func (o *SnmpConfig) GetViews() SnmpConfigViews {
	if o == nil || IsNil(o.Views) {
		var ret SnmpConfigViews
		return ret
	}
	return *o.Views
}

// GetViewsOk returns a tuple with the Views field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpConfig) GetViewsOk() (*SnmpConfigViews, bool) {
	if o == nil || IsNil(o.Views) {
		return nil, false
	}
	return o.Views, true
}

// HasViews returns a boolean if a field has been set.
func (o *SnmpConfig) HasViews() bool {
	if o != nil && !IsNil(o.Views) {
		return true
	}

	return false
}

// SetViews gets a reference to the given SnmpConfigViews and assigns it to the Views field.
func (o *SnmpConfig) SetViews(v SnmpConfigViews) {
	o.Views = &v
}

func (o SnmpConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnmpConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClientList) {
		toSerialize["client_list"] = o.ClientList
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.EngineId) {
		toSerialize["engine_id"] = o.EngineId
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.TrapGroups) {
		toSerialize["trap_groups"] = o.TrapGroups
	}
	if !IsNil(o.V2cConfig) {
		toSerialize["v2c_config"] = o.V2cConfig
	}
	if !IsNil(o.V3Config) {
		toSerialize["v3_config"] = o.V3Config
	}
	if !IsNil(o.Views) {
		toSerialize["views"] = o.Views
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SnmpConfig) UnmarshalJSON(data []byte) (err error) {
	varSnmpConfig := _SnmpConfig{}

	err = json.Unmarshal(data, &varSnmpConfig)

	if err != nil {
		return err
	}

	*o = SnmpConfig(varSnmpConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "client_list")
		delete(additionalProperties, "contact")
		delete(additionalProperties, "description")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "engine_id")
		delete(additionalProperties, "location")
		delete(additionalProperties, "name")
		delete(additionalProperties, "network")
		delete(additionalProperties, "trap_groups")
		delete(additionalProperties, "v2c_config")
		delete(additionalProperties, "v3_config")
		delete(additionalProperties, "views")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSnmpConfig struct {
	value *SnmpConfig
	isSet bool
}

func (v NullableSnmpConfig) Get() *SnmpConfig {
	return v.value
}

func (v *NullableSnmpConfig) Set(val *SnmpConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSnmpConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSnmpConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnmpConfig(val *SnmpConfig) *NullableSnmpConfig {
	return &NullableSnmpConfig{value: val, isSet: true}
}

func (v NullableSnmpConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnmpConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


