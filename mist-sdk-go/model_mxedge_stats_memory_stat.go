/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the MxedgeStatsMemoryStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MxedgeStatsMemoryStat{}

// MxedgeStatsMemoryStat Memory usage
type MxedgeStatsMemoryStat struct {
	// The amount of memory, in kibibytes, that has been used more recently and is usually not reclaimed unless absolutely necessary.
	Active *int32 `json:"active,omitempty"`
	// An estimate of how much memory is available for starting new applications, without swapping.
	Available *int32 `json:"available,omitempty"`
	// The amount, in kibibytes, of temporary storage for raw disk blocks.
	Buffers *int32 `json:"buffers,omitempty"`
	// The amount of physical RAM, in kibibytes, used as cache memory.
	Cached *int32 `json:"cached,omitempty"`
	// The amount of physical RAM, in kibibytes, left unused by the system
	Free *int32 `json:"free,omitempty"`
	// The amount of memory, in kibibytes, that has been used less recently and is more eligible to be reclaimed for other purposes.
	Inactive *int32 `json:"inactive,omitempty"`
	// The amount of memory, in kibibytes, that has once been moved into swap, then back into the main memory, but still also remains in the swapfile.
	SwapCached *int32 `json:"swap_cached,omitempty"`
	// The total amount of swap free, in kibibytes.
	SwapFree *int32 `json:"swap_free,omitempty"`
	// The total amount of swap available, in kibibytes.
	SwapTotal *int32 `json:"swap_total,omitempty"`
	// Total amount of usable RAM, in kibibytes, which is physical RAM minus a number of reserved bits and the kernel binary code
	Total *int32 `json:"total,omitempty"`
	Usage *int32 `json:"usage,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MxedgeStatsMemoryStat MxedgeStatsMemoryStat

// NewMxedgeStatsMemoryStat instantiates a new MxedgeStatsMemoryStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMxedgeStatsMemoryStat() *MxedgeStatsMemoryStat {
	this := MxedgeStatsMemoryStat{}
	return &this
}

// NewMxedgeStatsMemoryStatWithDefaults instantiates a new MxedgeStatsMemoryStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMxedgeStatsMemoryStatWithDefaults() *MxedgeStatsMemoryStat {
	this := MxedgeStatsMemoryStat{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *MxedgeStatsMemoryStat) GetActive() int32 {
	if o == nil || IsNil(o.Active) {
		var ret int32
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxedgeStatsMemoryStat) GetActiveOk() (*int32, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *MxedgeStatsMemoryStat) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given int32 and assigns it to the Active field.
func (o *MxedgeStatsMemoryStat) SetActive(v int32) {
	o.Active = &v
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *MxedgeStatsMemoryStat) GetAvailable() int32 {
	if o == nil || IsNil(o.Available) {
		var ret int32
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxedgeStatsMemoryStat) GetAvailableOk() (*int32, bool) {
	if o == nil || IsNil(o.Available) {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *MxedgeStatsMemoryStat) HasAvailable() bool {
	if o != nil && !IsNil(o.Available) {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given int32 and assigns it to the Available field.
func (o *MxedgeStatsMemoryStat) SetAvailable(v int32) {
	o.Available = &v
}

// GetBuffers returns the Buffers field value if set, zero value otherwise.
func (o *MxedgeStatsMemoryStat) GetBuffers() int32 {
	if o == nil || IsNil(o.Buffers) {
		var ret int32
		return ret
	}
	return *o.Buffers
}

// GetBuffersOk returns a tuple with the Buffers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxedgeStatsMemoryStat) GetBuffersOk() (*int32, bool) {
	if o == nil || IsNil(o.Buffers) {
		return nil, false
	}
	return o.Buffers, true
}

// HasBuffers returns a boolean if a field has been set.
func (o *MxedgeStatsMemoryStat) HasBuffers() bool {
	if o != nil && !IsNil(o.Buffers) {
		return true
	}

	return false
}

// SetBuffers gets a reference to the given int32 and assigns it to the Buffers field.
func (o *MxedgeStatsMemoryStat) SetBuffers(v int32) {
	o.Buffers = &v
}

// GetCached returns the Cached field value if set, zero value otherwise.
func (o *MxedgeStatsMemoryStat) GetCached() int32 {
	if o == nil || IsNil(o.Cached) {
		var ret int32
		return ret
	}
	return *o.Cached
}

// GetCachedOk returns a tuple with the Cached field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxedgeStatsMemoryStat) GetCachedOk() (*int32, bool) {
	if o == nil || IsNil(o.Cached) {
		return nil, false
	}
	return o.Cached, true
}

// HasCached returns a boolean if a field has been set.
func (o *MxedgeStatsMemoryStat) HasCached() bool {
	if o != nil && !IsNil(o.Cached) {
		return true
	}

	return false
}

// SetCached gets a reference to the given int32 and assigns it to the Cached field.
func (o *MxedgeStatsMemoryStat) SetCached(v int32) {
	o.Cached = &v
}

// GetFree returns the Free field value if set, zero value otherwise.
func (o *MxedgeStatsMemoryStat) GetFree() int32 {
	if o == nil || IsNil(o.Free) {
		var ret int32
		return ret
	}
	return *o.Free
}

// GetFreeOk returns a tuple with the Free field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxedgeStatsMemoryStat) GetFreeOk() (*int32, bool) {
	if o == nil || IsNil(o.Free) {
		return nil, false
	}
	return o.Free, true
}

// HasFree returns a boolean if a field has been set.
func (o *MxedgeStatsMemoryStat) HasFree() bool {
	if o != nil && !IsNil(o.Free) {
		return true
	}

	return false
}

// SetFree gets a reference to the given int32 and assigns it to the Free field.
func (o *MxedgeStatsMemoryStat) SetFree(v int32) {
	o.Free = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *MxedgeStatsMemoryStat) GetInactive() int32 {
	if o == nil || IsNil(o.Inactive) {
		var ret int32
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxedgeStatsMemoryStat) GetInactiveOk() (*int32, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *MxedgeStatsMemoryStat) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given int32 and assigns it to the Inactive field.
func (o *MxedgeStatsMemoryStat) SetInactive(v int32) {
	o.Inactive = &v
}

// GetSwapCached returns the SwapCached field value if set, zero value otherwise.
func (o *MxedgeStatsMemoryStat) GetSwapCached() int32 {
	if o == nil || IsNil(o.SwapCached) {
		var ret int32
		return ret
	}
	return *o.SwapCached
}

// GetSwapCachedOk returns a tuple with the SwapCached field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxedgeStatsMemoryStat) GetSwapCachedOk() (*int32, bool) {
	if o == nil || IsNil(o.SwapCached) {
		return nil, false
	}
	return o.SwapCached, true
}

// HasSwapCached returns a boolean if a field has been set.
func (o *MxedgeStatsMemoryStat) HasSwapCached() bool {
	if o != nil && !IsNil(o.SwapCached) {
		return true
	}

	return false
}

// SetSwapCached gets a reference to the given int32 and assigns it to the SwapCached field.
func (o *MxedgeStatsMemoryStat) SetSwapCached(v int32) {
	o.SwapCached = &v
}

// GetSwapFree returns the SwapFree field value if set, zero value otherwise.
func (o *MxedgeStatsMemoryStat) GetSwapFree() int32 {
	if o == nil || IsNil(o.SwapFree) {
		var ret int32
		return ret
	}
	return *o.SwapFree
}

// GetSwapFreeOk returns a tuple with the SwapFree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxedgeStatsMemoryStat) GetSwapFreeOk() (*int32, bool) {
	if o == nil || IsNil(o.SwapFree) {
		return nil, false
	}
	return o.SwapFree, true
}

// HasSwapFree returns a boolean if a field has been set.
func (o *MxedgeStatsMemoryStat) HasSwapFree() bool {
	if o != nil && !IsNil(o.SwapFree) {
		return true
	}

	return false
}

// SetSwapFree gets a reference to the given int32 and assigns it to the SwapFree field.
func (o *MxedgeStatsMemoryStat) SetSwapFree(v int32) {
	o.SwapFree = &v
}

// GetSwapTotal returns the SwapTotal field value if set, zero value otherwise.
func (o *MxedgeStatsMemoryStat) GetSwapTotal() int32 {
	if o == nil || IsNil(o.SwapTotal) {
		var ret int32
		return ret
	}
	return *o.SwapTotal
}

// GetSwapTotalOk returns a tuple with the SwapTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxedgeStatsMemoryStat) GetSwapTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.SwapTotal) {
		return nil, false
	}
	return o.SwapTotal, true
}

// HasSwapTotal returns a boolean if a field has been set.
func (o *MxedgeStatsMemoryStat) HasSwapTotal() bool {
	if o != nil && !IsNil(o.SwapTotal) {
		return true
	}

	return false
}

// SetSwapTotal gets a reference to the given int32 and assigns it to the SwapTotal field.
func (o *MxedgeStatsMemoryStat) SetSwapTotal(v int32) {
	o.SwapTotal = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *MxedgeStatsMemoryStat) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxedgeStatsMemoryStat) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *MxedgeStatsMemoryStat) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *MxedgeStatsMemoryStat) SetTotal(v int32) {
	o.Total = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *MxedgeStatsMemoryStat) GetUsage() int32 {
	if o == nil || IsNil(o.Usage) {
		var ret int32
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxedgeStatsMemoryStat) GetUsageOk() (*int32, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *MxedgeStatsMemoryStat) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given int32 and assigns it to the Usage field.
func (o *MxedgeStatsMemoryStat) SetUsage(v int32) {
	o.Usage = &v
}

func (o MxedgeStatsMemoryStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MxedgeStatsMemoryStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Available) {
		toSerialize["available"] = o.Available
	}
	if !IsNil(o.Buffers) {
		toSerialize["buffers"] = o.Buffers
	}
	if !IsNil(o.Cached) {
		toSerialize["cached"] = o.Cached
	}
	if !IsNil(o.Free) {
		toSerialize["free"] = o.Free
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.SwapCached) {
		toSerialize["swap_cached"] = o.SwapCached
	}
	if !IsNil(o.SwapFree) {
		toSerialize["swap_free"] = o.SwapFree
	}
	if !IsNil(o.SwapTotal) {
		toSerialize["swap_total"] = o.SwapTotal
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MxedgeStatsMemoryStat) UnmarshalJSON(data []byte) (err error) {
	varMxedgeStatsMemoryStat := _MxedgeStatsMemoryStat{}

	err = json.Unmarshal(data, &varMxedgeStatsMemoryStat)

	if err != nil {
		return err
	}

	*o = MxedgeStatsMemoryStat(varMxedgeStatsMemoryStat)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "active")
		delete(additionalProperties, "available")
		delete(additionalProperties, "buffers")
		delete(additionalProperties, "cached")
		delete(additionalProperties, "free")
		delete(additionalProperties, "inactive")
		delete(additionalProperties, "swap_cached")
		delete(additionalProperties, "swap_free")
		delete(additionalProperties, "swap_total")
		delete(additionalProperties, "total")
		delete(additionalProperties, "usage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMxedgeStatsMemoryStat struct {
	value *MxedgeStatsMemoryStat
	isSet bool
}

func (v NullableMxedgeStatsMemoryStat) Get() *MxedgeStatsMemoryStat {
	return v.value
}

func (v *NullableMxedgeStatsMemoryStat) Set(val *MxedgeStatsMemoryStat) {
	v.value = val
	v.isSet = true
}

func (v NullableMxedgeStatsMemoryStat) IsSet() bool {
	return v.isSet
}

func (v *NullableMxedgeStatsMemoryStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMxedgeStatsMemoryStat(val *MxedgeStatsMemoryStat) *NullableMxedgeStatsMemoryStat {
	return &NullableMxedgeStatsMemoryStat{value: val, isSet: true}
}

func (v NullableMxedgeStatsMemoryStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMxedgeStatsMemoryStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


