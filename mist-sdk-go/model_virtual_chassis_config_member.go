/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the VirtualChassisConfigMember type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualChassisConfigMember{}

// VirtualChassisConfigMember struct for VirtualChassisConfigMember
type VirtualChassisConfigMember struct {
	Locating *bool `json:"locating,omitempty"`
	// fpc0, same as the mac of device_id
	Mac *string `json:"mac,omitempty"`
	// to create a preprovisionned virtual chassis
	Member *int32 `json:"member,omitempty"`
	VcPorts []string `json:"vc_ports,omitempty"`
	VcRole *VirtualChassisConfigMemberVcRole `json:"vc_role,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VirtualChassisConfigMember VirtualChassisConfigMember

// NewVirtualChassisConfigMember instantiates a new VirtualChassisConfigMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualChassisConfigMember() *VirtualChassisConfigMember {
	this := VirtualChassisConfigMember{}
	return &this
}

// NewVirtualChassisConfigMemberWithDefaults instantiates a new VirtualChassisConfigMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualChassisConfigMemberWithDefaults() *VirtualChassisConfigMember {
	this := VirtualChassisConfigMember{}
	return &this
}

// GetLocating returns the Locating field value if set, zero value otherwise.
func (o *VirtualChassisConfigMember) GetLocating() bool {
	if o == nil || IsNil(o.Locating) {
		var ret bool
		return ret
	}
	return *o.Locating
}

// GetLocatingOk returns a tuple with the Locating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualChassisConfigMember) GetLocatingOk() (*bool, bool) {
	if o == nil || IsNil(o.Locating) {
		return nil, false
	}
	return o.Locating, true
}

// HasLocating returns a boolean if a field has been set.
func (o *VirtualChassisConfigMember) HasLocating() bool {
	if o != nil && !IsNil(o.Locating) {
		return true
	}

	return false
}

// SetLocating gets a reference to the given bool and assigns it to the Locating field.
func (o *VirtualChassisConfigMember) SetLocating(v bool) {
	o.Locating = &v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *VirtualChassisConfigMember) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualChassisConfigMember) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *VirtualChassisConfigMember) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *VirtualChassisConfigMember) SetMac(v string) {
	o.Mac = &v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *VirtualChassisConfigMember) GetMember() int32 {
	if o == nil || IsNil(o.Member) {
		var ret int32
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualChassisConfigMember) GetMemberOk() (*int32, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *VirtualChassisConfigMember) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given int32 and assigns it to the Member field.
func (o *VirtualChassisConfigMember) SetMember(v int32) {
	o.Member = &v
}

// GetVcPorts returns the VcPorts field value if set, zero value otherwise.
func (o *VirtualChassisConfigMember) GetVcPorts() []string {
	if o == nil || IsNil(o.VcPorts) {
		var ret []string
		return ret
	}
	return o.VcPorts
}

// GetVcPortsOk returns a tuple with the VcPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualChassisConfigMember) GetVcPortsOk() ([]string, bool) {
	if o == nil || IsNil(o.VcPorts) {
		return nil, false
	}
	return o.VcPorts, true
}

// HasVcPorts returns a boolean if a field has been set.
func (o *VirtualChassisConfigMember) HasVcPorts() bool {
	if o != nil && !IsNil(o.VcPorts) {
		return true
	}

	return false
}

// SetVcPorts gets a reference to the given []string and assigns it to the VcPorts field.
func (o *VirtualChassisConfigMember) SetVcPorts(v []string) {
	o.VcPorts = v
}

// GetVcRole returns the VcRole field value if set, zero value otherwise.
func (o *VirtualChassisConfigMember) GetVcRole() VirtualChassisConfigMemberVcRole {
	if o == nil || IsNil(o.VcRole) {
		var ret VirtualChassisConfigMemberVcRole
		return ret
	}
	return *o.VcRole
}

// GetVcRoleOk returns a tuple with the VcRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualChassisConfigMember) GetVcRoleOk() (*VirtualChassisConfigMemberVcRole, bool) {
	if o == nil || IsNil(o.VcRole) {
		return nil, false
	}
	return o.VcRole, true
}

// HasVcRole returns a boolean if a field has been set.
func (o *VirtualChassisConfigMember) HasVcRole() bool {
	if o != nil && !IsNil(o.VcRole) {
		return true
	}

	return false
}

// SetVcRole gets a reference to the given VirtualChassisConfigMemberVcRole and assigns it to the VcRole field.
func (o *VirtualChassisConfigMember) SetVcRole(v VirtualChassisConfigMemberVcRole) {
	o.VcRole = &v
}

func (o VirtualChassisConfigMember) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualChassisConfigMember) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Locating) {
		toSerialize["locating"] = o.Locating
	}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.VcPorts) {
		toSerialize["vc_ports"] = o.VcPorts
	}
	if !IsNil(o.VcRole) {
		toSerialize["vc_role"] = o.VcRole
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VirtualChassisConfigMember) UnmarshalJSON(data []byte) (err error) {
	varVirtualChassisConfigMember := _VirtualChassisConfigMember{}

	err = json.Unmarshal(data, &varVirtualChassisConfigMember)

	if err != nil {
		return err
	}

	*o = VirtualChassisConfigMember(varVirtualChassisConfigMember)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "locating")
		delete(additionalProperties, "mac")
		delete(additionalProperties, "member")
		delete(additionalProperties, "vc_ports")
		delete(additionalProperties, "vc_role")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVirtualChassisConfigMember struct {
	value *VirtualChassisConfigMember
	isSet bool
}

func (v NullableVirtualChassisConfigMember) Get() *VirtualChassisConfigMember {
	return v.value
}

func (v *NullableVirtualChassisConfigMember) Set(val *VirtualChassisConfigMember) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualChassisConfigMember) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualChassisConfigMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualChassisConfigMember(val *VirtualChassisConfigMember) *NullableVirtualChassisConfigMember {
	return &NullableVirtualChassisConfigMember{value: val, isSet: true}
}

func (v NullableVirtualChassisConfigMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualChassisConfigMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


