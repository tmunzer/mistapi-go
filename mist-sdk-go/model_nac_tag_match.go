/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// NacTagMatch if `type`==`match`
type NacTagMatch string

// List of nac_tag_match
const (
	NACTAGMATCH_EMPTY NacTagMatch = ""
	NACTAGMATCH_CERT_CN NacTagMatch = "cert_cn"
	NACTAGMATCH_CERT_ISSUER NacTagMatch = "cert_issuer"
	NACTAGMATCH_CERT_SAN NacTagMatch = "cert_san"
	NACTAGMATCH_CERT_SERIAL NacTagMatch = "cert_serial"
	NACTAGMATCH_CERT_SUB NacTagMatch = "cert_sub"
	NACTAGMATCH_CLIENT_MAC NacTagMatch = "client_mac"
	NACTAGMATCH_IDP_ROLE NacTagMatch = "idp_role"
	NACTAGMATCH_MDM_STATUS NacTagMatch = "mdm_status"
	NACTAGMATCH_RADIUS_GROUP NacTagMatch = "radius_group"
	NACTAGMATCH_REALM NacTagMatch = "realm"
	NACTAGMATCH_SSID NacTagMatch = "ssid"
	NACTAGMATCH_USER_NAME NacTagMatch = "user_name"
	NACTAGMATCH_USERMAC_LABEL NacTagMatch = "usermac_label"
)

// All allowed values of NacTagMatch enum
var AllowedNacTagMatchEnumValues = []NacTagMatch{
	"",
	"cert_cn",
	"cert_issuer",
	"cert_san",
	"cert_serial",
	"cert_sub",
	"client_mac",
	"idp_role",
	"mdm_status",
	"radius_group",
	"realm",
	"ssid",
	"user_name",
	"usermac_label",
}

func (v *NacTagMatch) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NacTagMatch(value)
	for _, existing := range AllowedNacTagMatchEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NacTagMatch", value)
}

// NewNacTagMatchFromValue returns a pointer to a valid NacTagMatch
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNacTagMatchFromValue(v string) (*NacTagMatch, error) {
	ev := NacTagMatch(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NacTagMatch: valid values are %v", v, AllowedNacTagMatchEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NacTagMatch) IsValid() bool {
	for _, existing := range AllowedNacTagMatchEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to nac_tag_match value
func (v NacTagMatch) Ptr() *NacTagMatch {
	return &v
}

type NullableNacTagMatch struct {
	value *NacTagMatch
	isSet bool
}

func (v NullableNacTagMatch) Get() *NacTagMatch {
	return v.value
}

func (v *NullableNacTagMatch) Set(val *NacTagMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableNacTagMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableNacTagMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNacTagMatch(val *NacTagMatch) *NullableNacTagMatch {
	return &NullableNacTagMatch{value: val, isSet: true}
}

func (v NullableNacTagMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNacTagMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

