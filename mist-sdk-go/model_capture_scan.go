/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the CaptureScan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CaptureScan{}

// CaptureScan Initiate a Scan Radio Packet Capture
type CaptureScan struct {
	// filter by ap_mac
	ApMac NullableString `json:"ap_mac,omitempty"`
	// dictionary key is AP mac and value is a dictionary which contains key “band”, “bandwidth”, “channel” and “tcpdump_expression”. In case keys are missed we will take parent value if parent values are not set we will use default value
	Aps *map[string]CaptureScanAps `json:"aps,omitempty"`
	Band NullableCaptureScanBand `json:"band,omitempty"`
	Bandwidth *Dot11Bandwidth `json:"bandwidth,omitempty"`
	// specify the channel value where scan PCAP has to be started, default value gets applied when user provides wrong values
	Channel *int32 `json:"channel,omitempty"`
	// filter by client mac
	ClientMac NullableString `json:"client_mac,omitempty"`
	// duration of the capture, in seconds
	Duration *int32 `json:"duration,omitempty"`
	Format *CaptureScanFormat `json:"format,omitempty"`
	// max_len of each packet to capture
	MaxPktLen *int32 `json:"max_pkt_len,omitempty"`
	// number of packets to capture, 0 for unlimited
	NumPackets *int32 `json:"num_packets,omitempty"`
	// tcpdump expression, port specific if specified under ports dict, otherwise applicable across ports if specified at top level of payload. Port specific value overrides top level value when both exist.
	TcpdumpExpression *string `json:"tcpdump_expression,omitempty"`
	Type CaptureScanType `json:"type"`
	// specify the bandwidth value with respect to the channel.
	Width *string `json:"width,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CaptureScan CaptureScan

// NewCaptureScan instantiates a new CaptureScan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCaptureScan(type_ CaptureScanType) *CaptureScan {
	this := CaptureScan{}
	var band CaptureScanBand = CAPTURESCANBAND__5
	this.Band = *NewNullableCaptureScanBand(&band)
	var channel int32 = 1
	this.Channel = &channel
	var duration int32 = 600
	this.Duration = &duration
	var format CaptureScanFormat = CAPTURESCANFORMAT_PCAP
	this.Format = &format
	var maxPktLen int32 = 512
	this.MaxPktLen = &maxPktLen
	var numPackets int32 = 1024
	this.NumPackets = &numPackets
	this.Type = type_
	return &this
}

// NewCaptureScanWithDefaults instantiates a new CaptureScan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCaptureScanWithDefaults() *CaptureScan {
	this := CaptureScan{}
	var band CaptureScanBand = CAPTURESCANBAND__5
	this.Band = *NewNullableCaptureScanBand(&band)
	var channel int32 = 1
	this.Channel = &channel
	var duration int32 = 600
	this.Duration = &duration
	var format CaptureScanFormat = CAPTURESCANFORMAT_PCAP
	this.Format = &format
	var maxPktLen int32 = 512
	this.MaxPktLen = &maxPktLen
	var numPackets int32 = 1024
	this.NumPackets = &numPackets
	return &this
}

// GetApMac returns the ApMac field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CaptureScan) GetApMac() string {
	if o == nil || IsNil(o.ApMac.Get()) {
		var ret string
		return ret
	}
	return *o.ApMac.Get()
}

// GetApMacOk returns a tuple with the ApMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CaptureScan) GetApMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApMac.Get(), o.ApMac.IsSet()
}

// HasApMac returns a boolean if a field has been set.
func (o *CaptureScan) HasApMac() bool {
	if o != nil && o.ApMac.IsSet() {
		return true
	}

	return false
}

// SetApMac gets a reference to the given NullableString and assigns it to the ApMac field.
func (o *CaptureScan) SetApMac(v string) {
	o.ApMac.Set(&v)
}
// SetApMacNil sets the value for ApMac to be an explicit nil
func (o *CaptureScan) SetApMacNil() {
	o.ApMac.Set(nil)
}

// UnsetApMac ensures that no value is present for ApMac, not even an explicit nil
func (o *CaptureScan) UnsetApMac() {
	o.ApMac.Unset()
}

// GetAps returns the Aps field value if set, zero value otherwise.
func (o *CaptureScan) GetAps() map[string]CaptureScanAps {
	if o == nil || IsNil(o.Aps) {
		var ret map[string]CaptureScanAps
		return ret
	}
	return *o.Aps
}

// GetApsOk returns a tuple with the Aps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaptureScan) GetApsOk() (*map[string]CaptureScanAps, bool) {
	if o == nil || IsNil(o.Aps) {
		return nil, false
	}
	return o.Aps, true
}

// HasAps returns a boolean if a field has been set.
func (o *CaptureScan) HasAps() bool {
	if o != nil && !IsNil(o.Aps) {
		return true
	}

	return false
}

// SetAps gets a reference to the given map[string]CaptureScanAps and assigns it to the Aps field.
func (o *CaptureScan) SetAps(v map[string]CaptureScanAps) {
	o.Aps = &v
}

// GetBand returns the Band field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CaptureScan) GetBand() CaptureScanBand {
	if o == nil || IsNil(o.Band.Get()) {
		var ret CaptureScanBand
		return ret
	}
	return *o.Band.Get()
}

// GetBandOk returns a tuple with the Band field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CaptureScan) GetBandOk() (*CaptureScanBand, bool) {
	if o == nil {
		return nil, false
	}
	return o.Band.Get(), o.Band.IsSet()
}

// HasBand returns a boolean if a field has been set.
func (o *CaptureScan) HasBand() bool {
	if o != nil && o.Band.IsSet() {
		return true
	}

	return false
}

// SetBand gets a reference to the given NullableCaptureScanBand and assigns it to the Band field.
func (o *CaptureScan) SetBand(v CaptureScanBand) {
	o.Band.Set(&v)
}
// SetBandNil sets the value for Band to be an explicit nil
func (o *CaptureScan) SetBandNil() {
	o.Band.Set(nil)
}

// UnsetBand ensures that no value is present for Band, not even an explicit nil
func (o *CaptureScan) UnsetBand() {
	o.Band.Unset()
}

// GetBandwidth returns the Bandwidth field value if set, zero value otherwise.
func (o *CaptureScan) GetBandwidth() Dot11Bandwidth {
	if o == nil || IsNil(o.Bandwidth) {
		var ret Dot11Bandwidth
		return ret
	}
	return *o.Bandwidth
}

// GetBandwidthOk returns a tuple with the Bandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaptureScan) GetBandwidthOk() (*Dot11Bandwidth, bool) {
	if o == nil || IsNil(o.Bandwidth) {
		return nil, false
	}
	return o.Bandwidth, true
}

// HasBandwidth returns a boolean if a field has been set.
func (o *CaptureScan) HasBandwidth() bool {
	if o != nil && !IsNil(o.Bandwidth) {
		return true
	}

	return false
}

// SetBandwidth gets a reference to the given Dot11Bandwidth and assigns it to the Bandwidth field.
func (o *CaptureScan) SetBandwidth(v Dot11Bandwidth) {
	o.Bandwidth = &v
}

// GetChannel returns the Channel field value if set, zero value otherwise.
func (o *CaptureScan) GetChannel() int32 {
	if o == nil || IsNil(o.Channel) {
		var ret int32
		return ret
	}
	return *o.Channel
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaptureScan) GetChannelOk() (*int32, bool) {
	if o == nil || IsNil(o.Channel) {
		return nil, false
	}
	return o.Channel, true
}

// HasChannel returns a boolean if a field has been set.
func (o *CaptureScan) HasChannel() bool {
	if o != nil && !IsNil(o.Channel) {
		return true
	}

	return false
}

// SetChannel gets a reference to the given int32 and assigns it to the Channel field.
func (o *CaptureScan) SetChannel(v int32) {
	o.Channel = &v
}

// GetClientMac returns the ClientMac field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CaptureScan) GetClientMac() string {
	if o == nil || IsNil(o.ClientMac.Get()) {
		var ret string
		return ret
	}
	return *o.ClientMac.Get()
}

// GetClientMacOk returns a tuple with the ClientMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CaptureScan) GetClientMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClientMac.Get(), o.ClientMac.IsSet()
}

// HasClientMac returns a boolean if a field has been set.
func (o *CaptureScan) HasClientMac() bool {
	if o != nil && o.ClientMac.IsSet() {
		return true
	}

	return false
}

// SetClientMac gets a reference to the given NullableString and assigns it to the ClientMac field.
func (o *CaptureScan) SetClientMac(v string) {
	o.ClientMac.Set(&v)
}
// SetClientMacNil sets the value for ClientMac to be an explicit nil
func (o *CaptureScan) SetClientMacNil() {
	o.ClientMac.Set(nil)
}

// UnsetClientMac ensures that no value is present for ClientMac, not even an explicit nil
func (o *CaptureScan) UnsetClientMac() {
	o.ClientMac.Unset()
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *CaptureScan) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaptureScan) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *CaptureScan) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *CaptureScan) SetDuration(v int32) {
	o.Duration = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *CaptureScan) GetFormat() CaptureScanFormat {
	if o == nil || IsNil(o.Format) {
		var ret CaptureScanFormat
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaptureScan) GetFormatOk() (*CaptureScanFormat, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *CaptureScan) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given CaptureScanFormat and assigns it to the Format field.
func (o *CaptureScan) SetFormat(v CaptureScanFormat) {
	o.Format = &v
}

// GetMaxPktLen returns the MaxPktLen field value if set, zero value otherwise.
func (o *CaptureScan) GetMaxPktLen() int32 {
	if o == nil || IsNil(o.MaxPktLen) {
		var ret int32
		return ret
	}
	return *o.MaxPktLen
}

// GetMaxPktLenOk returns a tuple with the MaxPktLen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaptureScan) GetMaxPktLenOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxPktLen) {
		return nil, false
	}
	return o.MaxPktLen, true
}

// HasMaxPktLen returns a boolean if a field has been set.
func (o *CaptureScan) HasMaxPktLen() bool {
	if o != nil && !IsNil(o.MaxPktLen) {
		return true
	}

	return false
}

// SetMaxPktLen gets a reference to the given int32 and assigns it to the MaxPktLen field.
func (o *CaptureScan) SetMaxPktLen(v int32) {
	o.MaxPktLen = &v
}

// GetNumPackets returns the NumPackets field value if set, zero value otherwise.
func (o *CaptureScan) GetNumPackets() int32 {
	if o == nil || IsNil(o.NumPackets) {
		var ret int32
		return ret
	}
	return *o.NumPackets
}

// GetNumPacketsOk returns a tuple with the NumPackets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaptureScan) GetNumPacketsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumPackets) {
		return nil, false
	}
	return o.NumPackets, true
}

// HasNumPackets returns a boolean if a field has been set.
func (o *CaptureScan) HasNumPackets() bool {
	if o != nil && !IsNil(o.NumPackets) {
		return true
	}

	return false
}

// SetNumPackets gets a reference to the given int32 and assigns it to the NumPackets field.
func (o *CaptureScan) SetNumPackets(v int32) {
	o.NumPackets = &v
}

// GetTcpdumpExpression returns the TcpdumpExpression field value if set, zero value otherwise.
func (o *CaptureScan) GetTcpdumpExpression() string {
	if o == nil || IsNil(o.TcpdumpExpression) {
		var ret string
		return ret
	}
	return *o.TcpdumpExpression
}

// GetTcpdumpExpressionOk returns a tuple with the TcpdumpExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaptureScan) GetTcpdumpExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.TcpdumpExpression) {
		return nil, false
	}
	return o.TcpdumpExpression, true
}

// HasTcpdumpExpression returns a boolean if a field has been set.
func (o *CaptureScan) HasTcpdumpExpression() bool {
	if o != nil && !IsNil(o.TcpdumpExpression) {
		return true
	}

	return false
}

// SetTcpdumpExpression gets a reference to the given string and assigns it to the TcpdumpExpression field.
func (o *CaptureScan) SetTcpdumpExpression(v string) {
	o.TcpdumpExpression = &v
}

// GetType returns the Type field value
func (o *CaptureScan) GetType() CaptureScanType {
	if o == nil {
		var ret CaptureScanType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CaptureScan) GetTypeOk() (*CaptureScanType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CaptureScan) SetType(v CaptureScanType) {
	o.Type = v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *CaptureScan) GetWidth() string {
	if o == nil || IsNil(o.Width) {
		var ret string
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaptureScan) GetWidthOk() (*string, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *CaptureScan) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given string and assigns it to the Width field.
func (o *CaptureScan) SetWidth(v string) {
	o.Width = &v
}

func (o CaptureScan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CaptureScan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ApMac.IsSet() {
		toSerialize["ap_mac"] = o.ApMac.Get()
	}
	if !IsNil(o.Aps) {
		toSerialize["aps"] = o.Aps
	}
	if o.Band.IsSet() {
		toSerialize["band"] = o.Band.Get()
	}
	if !IsNil(o.Bandwidth) {
		toSerialize["bandwidth"] = o.Bandwidth
	}
	if !IsNil(o.Channel) {
		toSerialize["channel"] = o.Channel
	}
	if o.ClientMac.IsSet() {
		toSerialize["client_mac"] = o.ClientMac.Get()
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	if !IsNil(o.MaxPktLen) {
		toSerialize["max_pkt_len"] = o.MaxPktLen
	}
	if !IsNil(o.NumPackets) {
		toSerialize["num_packets"] = o.NumPackets
	}
	if !IsNil(o.TcpdumpExpression) {
		toSerialize["tcpdump_expression"] = o.TcpdumpExpression
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CaptureScan) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCaptureScan := _CaptureScan{}

	err = json.Unmarshal(data, &varCaptureScan)

	if err != nil {
		return err
	}

	*o = CaptureScan(varCaptureScan)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ap_mac")
		delete(additionalProperties, "aps")
		delete(additionalProperties, "band")
		delete(additionalProperties, "bandwidth")
		delete(additionalProperties, "channel")
		delete(additionalProperties, "client_mac")
		delete(additionalProperties, "duration")
		delete(additionalProperties, "format")
		delete(additionalProperties, "max_pkt_len")
		delete(additionalProperties, "num_packets")
		delete(additionalProperties, "tcpdump_expression")
		delete(additionalProperties, "type")
		delete(additionalProperties, "width")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCaptureScan struct {
	value *CaptureScan
	isSet bool
}

func (v NullableCaptureScan) Get() *CaptureScan {
	return v.value
}

func (v *NullableCaptureScan) Set(val *CaptureScan) {
	v.value = val
	v.isSet = true
}

func (v NullableCaptureScan) IsSet() bool {
	return v.isSet
}

func (v *NullableCaptureScan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaptureScan(val *CaptureScan) *NullableCaptureScan {
	return &NullableCaptureScan{value: val, isSet: true}
}

func (v NullableCaptureScan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaptureScan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


