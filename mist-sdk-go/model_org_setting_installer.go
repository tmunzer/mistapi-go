/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the OrgSettingInstaller type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrgSettingInstaller{}

// OrgSettingInstaller struct for OrgSettingInstaller
type OrgSettingInstaller struct {
	AllowAllDevices *bool `json:"allow_all_devices,omitempty"`
	AllowAllSites *bool `json:"allow_all_sites,omitempty"`
	ExtraSiteIds []string `json:"extra_site_ids,omitempty"`
	GracePeriod *float32 `json:"grace_period,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrgSettingInstaller OrgSettingInstaller

// NewOrgSettingInstaller instantiates a new OrgSettingInstaller object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgSettingInstaller() *OrgSettingInstaller {
	this := OrgSettingInstaller{}
	return &this
}

// NewOrgSettingInstallerWithDefaults instantiates a new OrgSettingInstaller object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgSettingInstallerWithDefaults() *OrgSettingInstaller {
	this := OrgSettingInstaller{}
	return &this
}

// GetAllowAllDevices returns the AllowAllDevices field value if set, zero value otherwise.
func (o *OrgSettingInstaller) GetAllowAllDevices() bool {
	if o == nil || IsNil(o.AllowAllDevices) {
		var ret bool
		return ret
	}
	return *o.AllowAllDevices
}

// GetAllowAllDevicesOk returns a tuple with the AllowAllDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSettingInstaller) GetAllowAllDevicesOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowAllDevices) {
		return nil, false
	}
	return o.AllowAllDevices, true
}

// HasAllowAllDevices returns a boolean if a field has been set.
func (o *OrgSettingInstaller) HasAllowAllDevices() bool {
	if o != nil && !IsNil(o.AllowAllDevices) {
		return true
	}

	return false
}

// SetAllowAllDevices gets a reference to the given bool and assigns it to the AllowAllDevices field.
func (o *OrgSettingInstaller) SetAllowAllDevices(v bool) {
	o.AllowAllDevices = &v
}

// GetAllowAllSites returns the AllowAllSites field value if set, zero value otherwise.
func (o *OrgSettingInstaller) GetAllowAllSites() bool {
	if o == nil || IsNil(o.AllowAllSites) {
		var ret bool
		return ret
	}
	return *o.AllowAllSites
}

// GetAllowAllSitesOk returns a tuple with the AllowAllSites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSettingInstaller) GetAllowAllSitesOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowAllSites) {
		return nil, false
	}
	return o.AllowAllSites, true
}

// HasAllowAllSites returns a boolean if a field has been set.
func (o *OrgSettingInstaller) HasAllowAllSites() bool {
	if o != nil && !IsNil(o.AllowAllSites) {
		return true
	}

	return false
}

// SetAllowAllSites gets a reference to the given bool and assigns it to the AllowAllSites field.
func (o *OrgSettingInstaller) SetAllowAllSites(v bool) {
	o.AllowAllSites = &v
}

// GetExtraSiteIds returns the ExtraSiteIds field value if set, zero value otherwise.
func (o *OrgSettingInstaller) GetExtraSiteIds() []string {
	if o == nil || IsNil(o.ExtraSiteIds) {
		var ret []string
		return ret
	}
	return o.ExtraSiteIds
}

// GetExtraSiteIdsOk returns a tuple with the ExtraSiteIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSettingInstaller) GetExtraSiteIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExtraSiteIds) {
		return nil, false
	}
	return o.ExtraSiteIds, true
}

// HasExtraSiteIds returns a boolean if a field has been set.
func (o *OrgSettingInstaller) HasExtraSiteIds() bool {
	if o != nil && !IsNil(o.ExtraSiteIds) {
		return true
	}

	return false
}

// SetExtraSiteIds gets a reference to the given []string and assigns it to the ExtraSiteIds field.
func (o *OrgSettingInstaller) SetExtraSiteIds(v []string) {
	o.ExtraSiteIds = v
}

// GetGracePeriod returns the GracePeriod field value if set, zero value otherwise.
func (o *OrgSettingInstaller) GetGracePeriod() float32 {
	if o == nil || IsNil(o.GracePeriod) {
		var ret float32
		return ret
	}
	return *o.GracePeriod
}

// GetGracePeriodOk returns a tuple with the GracePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSettingInstaller) GetGracePeriodOk() (*float32, bool) {
	if o == nil || IsNil(o.GracePeriod) {
		return nil, false
	}
	return o.GracePeriod, true
}

// HasGracePeriod returns a boolean if a field has been set.
func (o *OrgSettingInstaller) HasGracePeriod() bool {
	if o != nil && !IsNil(o.GracePeriod) {
		return true
	}

	return false
}

// SetGracePeriod gets a reference to the given float32 and assigns it to the GracePeriod field.
func (o *OrgSettingInstaller) SetGracePeriod(v float32) {
	o.GracePeriod = &v
}

func (o OrgSettingInstaller) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrgSettingInstaller) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowAllDevices) {
		toSerialize["allow_all_devices"] = o.AllowAllDevices
	}
	if !IsNil(o.AllowAllSites) {
		toSerialize["allow_all_sites"] = o.AllowAllSites
	}
	if !IsNil(o.ExtraSiteIds) {
		toSerialize["extra_site_ids"] = o.ExtraSiteIds
	}
	if !IsNil(o.GracePeriod) {
		toSerialize["grace_period"] = o.GracePeriod
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrgSettingInstaller) UnmarshalJSON(data []byte) (err error) {
	varOrgSettingInstaller := _OrgSettingInstaller{}

	err = json.Unmarshal(data, &varOrgSettingInstaller)

	if err != nil {
		return err
	}

	*o = OrgSettingInstaller(varOrgSettingInstaller)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "allow_all_devices")
		delete(additionalProperties, "allow_all_sites")
		delete(additionalProperties, "extra_site_ids")
		delete(additionalProperties, "grace_period")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrgSettingInstaller struct {
	value *OrgSettingInstaller
	isSet bool
}

func (v NullableOrgSettingInstaller) Get() *OrgSettingInstaller {
	return v.value
}

func (v *NullableOrgSettingInstaller) Set(val *OrgSettingInstaller) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgSettingInstaller) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgSettingInstaller) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgSettingInstaller(val *OrgSettingInstaller) *NullableOrgSettingInstaller {
	return &NullableOrgSettingInstaller{value: val, isSet: true}
}

func (v NullableOrgSettingInstaller) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgSettingInstaller) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


