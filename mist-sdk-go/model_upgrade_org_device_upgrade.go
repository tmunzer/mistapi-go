/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the UpgradeOrgDeviceUpgrade type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpgradeOrgDeviceUpgrade{}

// UpgradeOrgDeviceUpgrade struct for UpgradeOrgDeviceUpgrade
type UpgradeOrgDeviceUpgrade struct {
	Id *string `json:"id,omitempty"`
	StartTime *float32 `json:"start_time,omitempty"`
	Status *DeviceUpgradeStatus `json:"status,omitempty"`
	Targets *UpgradeOrgDeviceTargets `json:"targets,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpgradeOrgDeviceUpgrade UpgradeOrgDeviceUpgrade

// NewUpgradeOrgDeviceUpgrade instantiates a new UpgradeOrgDeviceUpgrade object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradeOrgDeviceUpgrade() *UpgradeOrgDeviceUpgrade {
	this := UpgradeOrgDeviceUpgrade{}
	return &this
}

// NewUpgradeOrgDeviceUpgradeWithDefaults instantiates a new UpgradeOrgDeviceUpgrade object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradeOrgDeviceUpgradeWithDefaults() *UpgradeOrgDeviceUpgrade {
	this := UpgradeOrgDeviceUpgrade{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UpgradeOrgDeviceUpgrade) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeOrgDeviceUpgrade) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UpgradeOrgDeviceUpgrade) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UpgradeOrgDeviceUpgrade) SetId(v string) {
	o.Id = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *UpgradeOrgDeviceUpgrade) GetStartTime() float32 {
	if o == nil || IsNil(o.StartTime) {
		var ret float32
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeOrgDeviceUpgrade) GetStartTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *UpgradeOrgDeviceUpgrade) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given float32 and assigns it to the StartTime field.
func (o *UpgradeOrgDeviceUpgrade) SetStartTime(v float32) {
	o.StartTime = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UpgradeOrgDeviceUpgrade) GetStatus() DeviceUpgradeStatus {
	if o == nil || IsNil(o.Status) {
		var ret DeviceUpgradeStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeOrgDeviceUpgrade) GetStatusOk() (*DeviceUpgradeStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UpgradeOrgDeviceUpgrade) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given DeviceUpgradeStatus and assigns it to the Status field.
func (o *UpgradeOrgDeviceUpgrade) SetStatus(v DeviceUpgradeStatus) {
	o.Status = &v
}

// GetTargets returns the Targets field value if set, zero value otherwise.
func (o *UpgradeOrgDeviceUpgrade) GetTargets() UpgradeOrgDeviceTargets {
	if o == nil || IsNil(o.Targets) {
		var ret UpgradeOrgDeviceTargets
		return ret
	}
	return *o.Targets
}

// GetTargetsOk returns a tuple with the Targets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeOrgDeviceUpgrade) GetTargetsOk() (*UpgradeOrgDeviceTargets, bool) {
	if o == nil || IsNil(o.Targets) {
		return nil, false
	}
	return o.Targets, true
}

// HasTargets returns a boolean if a field has been set.
func (o *UpgradeOrgDeviceUpgrade) HasTargets() bool {
	if o != nil && !IsNil(o.Targets) {
		return true
	}

	return false
}

// SetTargets gets a reference to the given UpgradeOrgDeviceTargets and assigns it to the Targets field.
func (o *UpgradeOrgDeviceUpgrade) SetTargets(v UpgradeOrgDeviceTargets) {
	o.Targets = &v
}

func (o UpgradeOrgDeviceUpgrade) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpgradeOrgDeviceUpgrade) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Targets) {
		toSerialize["targets"] = o.Targets
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpgradeOrgDeviceUpgrade) UnmarshalJSON(data []byte) (err error) {
	varUpgradeOrgDeviceUpgrade := _UpgradeOrgDeviceUpgrade{}

	err = json.Unmarshal(data, &varUpgradeOrgDeviceUpgrade)

	if err != nil {
		return err
	}

	*o = UpgradeOrgDeviceUpgrade(varUpgradeOrgDeviceUpgrade)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "start_time")
		delete(additionalProperties, "status")
		delete(additionalProperties, "targets")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpgradeOrgDeviceUpgrade struct {
	value *UpgradeOrgDeviceUpgrade
	isSet bool
}

func (v NullableUpgradeOrgDeviceUpgrade) Get() *UpgradeOrgDeviceUpgrade {
	return v.value
}

func (v *NullableUpgradeOrgDeviceUpgrade) Set(val *UpgradeOrgDeviceUpgrade) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradeOrgDeviceUpgrade) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradeOrgDeviceUpgrade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradeOrgDeviceUpgrade(val *UpgradeOrgDeviceUpgrade) *NullableUpgradeOrgDeviceUpgrade {
	return &NullableUpgradeOrgDeviceUpgrade{value: val, isSet: true}
}

func (v NullableUpgradeOrgDeviceUpgrade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradeOrgDeviceUpgrade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


