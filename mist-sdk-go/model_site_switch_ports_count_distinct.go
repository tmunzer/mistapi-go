/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// SiteSwitchPortsCountDistinct the model 'SiteSwitchPortsCountDistinct'
type SiteSwitchPortsCountDistinct string

// List of site_switch_ports_count_distinct
const (
	SITESWITCHPORTSCOUNTDISTINCT_EMPTY SiteSwitchPortsCountDistinct = ""
	SITESWITCHPORTSCOUNTDISTINCT_PORT_ID SiteSwitchPortsCountDistinct = "port_id"
	SITESWITCHPORTSCOUNTDISTINCT_PORT_MAC SiteSwitchPortsCountDistinct = "port_mac"
	SITESWITCHPORTSCOUNTDISTINCT_FULL_DUPLEX SiteSwitchPortsCountDistinct = "full_duplex"
	SITESWITCHPORTSCOUNTDISTINCT_MAC SiteSwitchPortsCountDistinct = "mac"
	SITESWITCHPORTSCOUNTDISTINCT_NEIGHBOR_MAC SiteSwitchPortsCountDistinct = "neighbor_mac"
	SITESWITCHPORTSCOUNTDISTINCT_NEIGHBOR_PORT_DESC SiteSwitchPortsCountDistinct = "neighbor_port_desc"
	SITESWITCHPORTSCOUNTDISTINCT_NEIGHBOR_SYSTEM_NAME SiteSwitchPortsCountDistinct = "neighbor_system_name"
	SITESWITCHPORTSCOUNTDISTINCT_POE_DISABLED SiteSwitchPortsCountDistinct = "poe_disabled"
	SITESWITCHPORTSCOUNTDISTINCT_POE_MODE SiteSwitchPortsCountDistinct = "poe_mode"
	SITESWITCHPORTSCOUNTDISTINCT_POE_ON SiteSwitchPortsCountDistinct = "poe_on"
	SITESWITCHPORTSCOUNTDISTINCT_SPEED SiteSwitchPortsCountDistinct = "speed"
	SITESWITCHPORTSCOUNTDISTINCT_UP SiteSwitchPortsCountDistinct = "up"
)

// All allowed values of SiteSwitchPortsCountDistinct enum
var AllowedSiteSwitchPortsCountDistinctEnumValues = []SiteSwitchPortsCountDistinct{
	"",
	"port_id",
	"port_mac",
	"full_duplex",
	"mac",
	"neighbor_mac",
	"neighbor_port_desc",
	"neighbor_system_name",
	"poe_disabled",
	"poe_mode",
	"poe_on",
	"speed",
	"up",
}

func (v *SiteSwitchPortsCountDistinct) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SiteSwitchPortsCountDistinct(value)
	for _, existing := range AllowedSiteSwitchPortsCountDistinctEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SiteSwitchPortsCountDistinct", value)
}

// NewSiteSwitchPortsCountDistinctFromValue returns a pointer to a valid SiteSwitchPortsCountDistinct
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSiteSwitchPortsCountDistinctFromValue(v string) (*SiteSwitchPortsCountDistinct, error) {
	ev := SiteSwitchPortsCountDistinct(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SiteSwitchPortsCountDistinct: valid values are %v", v, AllowedSiteSwitchPortsCountDistinctEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SiteSwitchPortsCountDistinct) IsValid() bool {
	for _, existing := range AllowedSiteSwitchPortsCountDistinctEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to site_switch_ports_count_distinct value
func (v SiteSwitchPortsCountDistinct) Ptr() *SiteSwitchPortsCountDistinct {
	return &v
}

type NullableSiteSwitchPortsCountDistinct struct {
	value *SiteSwitchPortsCountDistinct
	isSet bool
}

func (v NullableSiteSwitchPortsCountDistinct) Get() *SiteSwitchPortsCountDistinct {
	return v.value
}

func (v *NullableSiteSwitchPortsCountDistinct) Set(val *SiteSwitchPortsCountDistinct) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteSwitchPortsCountDistinct) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteSwitchPortsCountDistinct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteSwitchPortsCountDistinct(val *SiteSwitchPortsCountDistinct) *NullableSiteSwitchPortsCountDistinct {
	return &NullableSiteSwitchPortsCountDistinct{value: val, isSet: true}
}

func (v NullableSiteSwitchPortsCountDistinct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteSwitchPortsCountDistinct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

