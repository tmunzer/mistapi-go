/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the BgpConfigCommunity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BgpConfigCommunity{}

// BgpConfigCommunity struct for BgpConfigCommunity
type BgpConfigCommunity struct {
	Id *string `json:"id,omitempty"`
	LocalPreference *int32 `json:"local_preference,omitempty"`
	VpnName *string `json:"vpn_name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BgpConfigCommunity BgpConfigCommunity

// NewBgpConfigCommunity instantiates a new BgpConfigCommunity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBgpConfigCommunity() *BgpConfigCommunity {
	this := BgpConfigCommunity{}
	return &this
}

// NewBgpConfigCommunityWithDefaults instantiates a new BgpConfigCommunity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBgpConfigCommunityWithDefaults() *BgpConfigCommunity {
	this := BgpConfigCommunity{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BgpConfigCommunity) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpConfigCommunity) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BgpConfigCommunity) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BgpConfigCommunity) SetId(v string) {
	o.Id = &v
}

// GetLocalPreference returns the LocalPreference field value if set, zero value otherwise.
func (o *BgpConfigCommunity) GetLocalPreference() int32 {
	if o == nil || IsNil(o.LocalPreference) {
		var ret int32
		return ret
	}
	return *o.LocalPreference
}

// GetLocalPreferenceOk returns a tuple with the LocalPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpConfigCommunity) GetLocalPreferenceOk() (*int32, bool) {
	if o == nil || IsNil(o.LocalPreference) {
		return nil, false
	}
	return o.LocalPreference, true
}

// HasLocalPreference returns a boolean if a field has been set.
func (o *BgpConfigCommunity) HasLocalPreference() bool {
	if o != nil && !IsNil(o.LocalPreference) {
		return true
	}

	return false
}

// SetLocalPreference gets a reference to the given int32 and assigns it to the LocalPreference field.
func (o *BgpConfigCommunity) SetLocalPreference(v int32) {
	o.LocalPreference = &v
}

// GetVpnName returns the VpnName field value if set, zero value otherwise.
func (o *BgpConfigCommunity) GetVpnName() string {
	if o == nil || IsNil(o.VpnName) {
		var ret string
		return ret
	}
	return *o.VpnName
}

// GetVpnNameOk returns a tuple with the VpnName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpConfigCommunity) GetVpnNameOk() (*string, bool) {
	if o == nil || IsNil(o.VpnName) {
		return nil, false
	}
	return o.VpnName, true
}

// HasVpnName returns a boolean if a field has been set.
func (o *BgpConfigCommunity) HasVpnName() bool {
	if o != nil && !IsNil(o.VpnName) {
		return true
	}

	return false
}

// SetVpnName gets a reference to the given string and assigns it to the VpnName field.
func (o *BgpConfigCommunity) SetVpnName(v string) {
	o.VpnName = &v
}

func (o BgpConfigCommunity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BgpConfigCommunity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LocalPreference) {
		toSerialize["local_preference"] = o.LocalPreference
	}
	if !IsNil(o.VpnName) {
		toSerialize["vpn_name"] = o.VpnName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BgpConfigCommunity) UnmarshalJSON(data []byte) (err error) {
	varBgpConfigCommunity := _BgpConfigCommunity{}

	err = json.Unmarshal(data, &varBgpConfigCommunity)

	if err != nil {
		return err
	}

	*o = BgpConfigCommunity(varBgpConfigCommunity)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "local_preference")
		delete(additionalProperties, "vpn_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBgpConfigCommunity struct {
	value *BgpConfigCommunity
	isSet bool
}

func (v NullableBgpConfigCommunity) Get() *BgpConfigCommunity {
	return v.value
}

func (v *NullableBgpConfigCommunity) Set(val *BgpConfigCommunity) {
	v.value = val
	v.isSet = true
}

func (v NullableBgpConfigCommunity) IsSet() bool {
	return v.isSet
}

func (v *NullableBgpConfigCommunity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBgpConfigCommunity(val *BgpConfigCommunity) *NullableBgpConfigCommunity {
	return &NullableBgpConfigCommunity{value: val, isSet: true}
}

func (v NullableBgpConfigCommunity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBgpConfigCommunity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


