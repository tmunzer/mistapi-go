/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// L2tpState the model 'L2tpState'
type L2tpState string

// List of l2tp_state
const (
	L2TPSTATE_EMPTY L2tpState = ""
	L2TPSTATE_IDLE L2tpState = "idle"
	L2TPSTATE_WAIT_CTRL_REPLY L2tpState = "wait-ctrl-reply"
	L2TPSTATE_WAIT_CTRL_CONN L2tpState = "wait-ctrl-conn"
	L2TPSTATE_ESTABLISHED L2tpState = "established"
	L2TPSTATE_ESTABLISHED_WITH_SESSION L2tpState = "established_with_session"
)

// All allowed values of L2tpState enum
var AllowedL2tpStateEnumValues = []L2tpState{
	"",
	"idle",
	"wait-ctrl-reply",
	"wait-ctrl-conn",
	"established",
	"established_with_session",
}

func (v *L2tpState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := L2tpState(value)
	for _, existing := range AllowedL2tpStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid L2tpState", value)
}

// NewL2tpStateFromValue returns a pointer to a valid L2tpState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewL2tpStateFromValue(v string) (*L2tpState, error) {
	ev := L2tpState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for L2tpState: valid values are %v", v, AllowedL2tpStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v L2tpState) IsValid() bool {
	for _, existing := range AllowedL2tpStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to l2tp_state value
func (v L2tpState) Ptr() *L2tpState {
	return &v
}

type NullableL2tpState struct {
	value *L2tpState
	isSet bool
}

func (v NullableL2tpState) Get() *L2tpState {
	return v.value
}

func (v *NullableL2tpState) Set(val *L2tpState) {
	v.value = val
	v.isSet = true
}

func (v NullableL2tpState) IsSet() bool {
	return v.isSet
}

func (v *NullableL2tpState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableL2tpState(val *L2tpState) *NullableL2tpState {
	return &NullableL2tpState{value: val, isSet: true}
}

func (v NullableL2tpState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableL2tpState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

