/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the MapImportJson type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MapImportJson{}

// MapImportJson struct for MapImportJson
type MapImportJson struct {
	ImportAllFloorplans *bool `json:"import_all_floorplans,omitempty"`
	ImportHeight *bool `json:"import_height,omitempty"`
	ImportOrientation *bool `json:"import_orientation,omitempty"`
	VendorName MapImportJsonVendorName `json:"vendor_name"`
	AdditionalProperties map[string]interface{}
}

type _MapImportJson MapImportJson

// NewMapImportJson instantiates a new MapImportJson object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMapImportJson(vendorName MapImportJsonVendorName) *MapImportJson {
	this := MapImportJson{}
	var importAllFloorplans bool = false
	this.ImportAllFloorplans = &importAllFloorplans
	var importHeight bool = true
	this.ImportHeight = &importHeight
	var importOrientation bool = true
	this.ImportOrientation = &importOrientation
	this.VendorName = vendorName
	return &this
}

// NewMapImportJsonWithDefaults instantiates a new MapImportJson object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMapImportJsonWithDefaults() *MapImportJson {
	this := MapImportJson{}
	var importAllFloorplans bool = false
	this.ImportAllFloorplans = &importAllFloorplans
	var importHeight bool = true
	this.ImportHeight = &importHeight
	var importOrientation bool = true
	this.ImportOrientation = &importOrientation
	return &this
}

// GetImportAllFloorplans returns the ImportAllFloorplans field value if set, zero value otherwise.
func (o *MapImportJson) GetImportAllFloorplans() bool {
	if o == nil || IsNil(o.ImportAllFloorplans) {
		var ret bool
		return ret
	}
	return *o.ImportAllFloorplans
}

// GetImportAllFloorplansOk returns a tuple with the ImportAllFloorplans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapImportJson) GetImportAllFloorplansOk() (*bool, bool) {
	if o == nil || IsNil(o.ImportAllFloorplans) {
		return nil, false
	}
	return o.ImportAllFloorplans, true
}

// HasImportAllFloorplans returns a boolean if a field has been set.
func (o *MapImportJson) HasImportAllFloorplans() bool {
	if o != nil && !IsNil(o.ImportAllFloorplans) {
		return true
	}

	return false
}

// SetImportAllFloorplans gets a reference to the given bool and assigns it to the ImportAllFloorplans field.
func (o *MapImportJson) SetImportAllFloorplans(v bool) {
	o.ImportAllFloorplans = &v
}

// GetImportHeight returns the ImportHeight field value if set, zero value otherwise.
func (o *MapImportJson) GetImportHeight() bool {
	if o == nil || IsNil(o.ImportHeight) {
		var ret bool
		return ret
	}
	return *o.ImportHeight
}

// GetImportHeightOk returns a tuple with the ImportHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapImportJson) GetImportHeightOk() (*bool, bool) {
	if o == nil || IsNil(o.ImportHeight) {
		return nil, false
	}
	return o.ImportHeight, true
}

// HasImportHeight returns a boolean if a field has been set.
func (o *MapImportJson) HasImportHeight() bool {
	if o != nil && !IsNil(o.ImportHeight) {
		return true
	}

	return false
}

// SetImportHeight gets a reference to the given bool and assigns it to the ImportHeight field.
func (o *MapImportJson) SetImportHeight(v bool) {
	o.ImportHeight = &v
}

// GetImportOrientation returns the ImportOrientation field value if set, zero value otherwise.
func (o *MapImportJson) GetImportOrientation() bool {
	if o == nil || IsNil(o.ImportOrientation) {
		var ret bool
		return ret
	}
	return *o.ImportOrientation
}

// GetImportOrientationOk returns a tuple with the ImportOrientation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapImportJson) GetImportOrientationOk() (*bool, bool) {
	if o == nil || IsNil(o.ImportOrientation) {
		return nil, false
	}
	return o.ImportOrientation, true
}

// HasImportOrientation returns a boolean if a field has been set.
func (o *MapImportJson) HasImportOrientation() bool {
	if o != nil && !IsNil(o.ImportOrientation) {
		return true
	}

	return false
}

// SetImportOrientation gets a reference to the given bool and assigns it to the ImportOrientation field.
func (o *MapImportJson) SetImportOrientation(v bool) {
	o.ImportOrientation = &v
}

// GetVendorName returns the VendorName field value
func (o *MapImportJson) GetVendorName() MapImportJsonVendorName {
	if o == nil {
		var ret MapImportJsonVendorName
		return ret
	}

	return o.VendorName
}

// GetVendorNameOk returns a tuple with the VendorName field value
// and a boolean to check if the value has been set.
func (o *MapImportJson) GetVendorNameOk() (*MapImportJsonVendorName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VendorName, true
}

// SetVendorName sets field value
func (o *MapImportJson) SetVendorName(v MapImportJsonVendorName) {
	o.VendorName = v
}

func (o MapImportJson) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MapImportJson) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ImportAllFloorplans) {
		toSerialize["import_all_floorplans"] = o.ImportAllFloorplans
	}
	if !IsNil(o.ImportHeight) {
		toSerialize["import_height"] = o.ImportHeight
	}
	if !IsNil(o.ImportOrientation) {
		toSerialize["import_orientation"] = o.ImportOrientation
	}
	toSerialize["vendor_name"] = o.VendorName

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MapImportJson) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vendor_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMapImportJson := _MapImportJson{}

	err = json.Unmarshal(data, &varMapImportJson)

	if err != nil {
		return err
	}

	*o = MapImportJson(varMapImportJson)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "import_all_floorplans")
		delete(additionalProperties, "import_height")
		delete(additionalProperties, "import_orientation")
		delete(additionalProperties, "vendor_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMapImportJson struct {
	value *MapImportJson
	isSet bool
}

func (v NullableMapImportJson) Get() *MapImportJson {
	return v.value
}

func (v *NullableMapImportJson) Set(val *MapImportJson) {
	v.value = val
	v.isSet = true
}

func (v NullableMapImportJson) IsSet() bool {
	return v.isSet
}

func (v *NullableMapImportJson) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapImportJson(val *MapImportJson) *NullableMapImportJson {
	return &NullableMapImportJson{value: val, isSet: true}
}

func (v NullableMapImportJson) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapImportJson) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


