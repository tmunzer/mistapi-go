/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the NetworkInternetAccess type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkInternetAccess{}

// NetworkInternetAccess whether this network has direct internet access
type NetworkInternetAccess struct {
	CreateSimpleServicePolicy *bool `json:"create_simple_service_policy,omitempty"`
	// Property key may be an IP/Port (i.e. \"63.16.0.3:443\"), or a port (i.e. \":2222\")
	DestinationNat *map[string]NetworkDestinationNatProperty `json:"destination_nat,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	// by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
	Restricted *bool `json:"restricted,omitempty"`
	// Property key may be an IP Address (i.e. \"172.16.0.1\"), and IP Address and Port (i.e. \"172.16.0.1:8443\") or a CIDR (i.e. \"172.16.0.12/20\")
	StaticNat *map[string]NetworkStaticNatProperty `json:"static_nat,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetworkInternetAccess NetworkInternetAccess

// NewNetworkInternetAccess instantiates a new NetworkInternetAccess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkInternetAccess() *NetworkInternetAccess {
	this := NetworkInternetAccess{}
	var createSimpleServicePolicy bool = false
	this.CreateSimpleServicePolicy = &createSimpleServicePolicy
	var restricted bool = false
	this.Restricted = &restricted
	return &this
}

// NewNetworkInternetAccessWithDefaults instantiates a new NetworkInternetAccess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkInternetAccessWithDefaults() *NetworkInternetAccess {
	this := NetworkInternetAccess{}
	var createSimpleServicePolicy bool = false
	this.CreateSimpleServicePolicy = &createSimpleServicePolicy
	var restricted bool = false
	this.Restricted = &restricted
	return &this
}

// GetCreateSimpleServicePolicy returns the CreateSimpleServicePolicy field value if set, zero value otherwise.
func (o *NetworkInternetAccess) GetCreateSimpleServicePolicy() bool {
	if o == nil || IsNil(o.CreateSimpleServicePolicy) {
		var ret bool
		return ret
	}
	return *o.CreateSimpleServicePolicy
}

// GetCreateSimpleServicePolicyOk returns a tuple with the CreateSimpleServicePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInternetAccess) GetCreateSimpleServicePolicyOk() (*bool, bool) {
	if o == nil || IsNil(o.CreateSimpleServicePolicy) {
		return nil, false
	}
	return o.CreateSimpleServicePolicy, true
}

// HasCreateSimpleServicePolicy returns a boolean if a field has been set.
func (o *NetworkInternetAccess) HasCreateSimpleServicePolicy() bool {
	if o != nil && !IsNil(o.CreateSimpleServicePolicy) {
		return true
	}

	return false
}

// SetCreateSimpleServicePolicy gets a reference to the given bool and assigns it to the CreateSimpleServicePolicy field.
func (o *NetworkInternetAccess) SetCreateSimpleServicePolicy(v bool) {
	o.CreateSimpleServicePolicy = &v
}

// GetDestinationNat returns the DestinationNat field value if set, zero value otherwise.
func (o *NetworkInternetAccess) GetDestinationNat() map[string]NetworkDestinationNatProperty {
	if o == nil || IsNil(o.DestinationNat) {
		var ret map[string]NetworkDestinationNatProperty
		return ret
	}
	return *o.DestinationNat
}

// GetDestinationNatOk returns a tuple with the DestinationNat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInternetAccess) GetDestinationNatOk() (*map[string]NetworkDestinationNatProperty, bool) {
	if o == nil || IsNil(o.DestinationNat) {
		return nil, false
	}
	return o.DestinationNat, true
}

// HasDestinationNat returns a boolean if a field has been set.
func (o *NetworkInternetAccess) HasDestinationNat() bool {
	if o != nil && !IsNil(o.DestinationNat) {
		return true
	}

	return false
}

// SetDestinationNat gets a reference to the given map[string]NetworkDestinationNatProperty and assigns it to the DestinationNat field.
func (o *NetworkInternetAccess) SetDestinationNat(v map[string]NetworkDestinationNatProperty) {
	o.DestinationNat = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *NetworkInternetAccess) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInternetAccess) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *NetworkInternetAccess) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *NetworkInternetAccess) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRestricted returns the Restricted field value if set, zero value otherwise.
func (o *NetworkInternetAccess) GetRestricted() bool {
	if o == nil || IsNil(o.Restricted) {
		var ret bool
		return ret
	}
	return *o.Restricted
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInternetAccess) GetRestrictedOk() (*bool, bool) {
	if o == nil || IsNil(o.Restricted) {
		return nil, false
	}
	return o.Restricted, true
}

// HasRestricted returns a boolean if a field has been set.
func (o *NetworkInternetAccess) HasRestricted() bool {
	if o != nil && !IsNil(o.Restricted) {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given bool and assigns it to the Restricted field.
func (o *NetworkInternetAccess) SetRestricted(v bool) {
	o.Restricted = &v
}

// GetStaticNat returns the StaticNat field value if set, zero value otherwise.
func (o *NetworkInternetAccess) GetStaticNat() map[string]NetworkStaticNatProperty {
	if o == nil || IsNil(o.StaticNat) {
		var ret map[string]NetworkStaticNatProperty
		return ret
	}
	return *o.StaticNat
}

// GetStaticNatOk returns a tuple with the StaticNat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInternetAccess) GetStaticNatOk() (*map[string]NetworkStaticNatProperty, bool) {
	if o == nil || IsNil(o.StaticNat) {
		return nil, false
	}
	return o.StaticNat, true
}

// HasStaticNat returns a boolean if a field has been set.
func (o *NetworkInternetAccess) HasStaticNat() bool {
	if o != nil && !IsNil(o.StaticNat) {
		return true
	}

	return false
}

// SetStaticNat gets a reference to the given map[string]NetworkStaticNatProperty and assigns it to the StaticNat field.
func (o *NetworkInternetAccess) SetStaticNat(v map[string]NetworkStaticNatProperty) {
	o.StaticNat = &v
}

func (o NetworkInternetAccess) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkInternetAccess) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreateSimpleServicePolicy) {
		toSerialize["create_simple_service_policy"] = o.CreateSimpleServicePolicy
	}
	if !IsNil(o.DestinationNat) {
		toSerialize["destination_nat"] = o.DestinationNat
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Restricted) {
		toSerialize["restricted"] = o.Restricted
	}
	if !IsNil(o.StaticNat) {
		toSerialize["static_nat"] = o.StaticNat
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworkInternetAccess) UnmarshalJSON(data []byte) (err error) {
	varNetworkInternetAccess := _NetworkInternetAccess{}

	err = json.Unmarshal(data, &varNetworkInternetAccess)

	if err != nil {
		return err
	}

	*o = NetworkInternetAccess(varNetworkInternetAccess)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "create_simple_service_policy")
		delete(additionalProperties, "destination_nat")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "restricted")
		delete(additionalProperties, "static_nat")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkInternetAccess struct {
	value *NetworkInternetAccess
	isSet bool
}

func (v NullableNetworkInternetAccess) Get() *NetworkInternetAccess {
	return v.value
}

func (v *NullableNetworkInternetAccess) Set(val *NetworkInternetAccess) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkInternetAccess) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkInternetAccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkInternetAccess(val *NetworkInternetAccess) *NullableNetworkInternetAccess {
	return &NullableNetworkInternetAccess{value: val, isSet: true}
}

func (v NullableNetworkInternetAccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkInternetAccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


