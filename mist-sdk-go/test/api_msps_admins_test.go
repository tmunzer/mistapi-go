/*
Mist API

Testing MSPsAdminsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mistsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/tmunzer/mistsdkgo"
)

func Test_mistsdkgo_MSPsAdminsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MSPsAdminsAPIService GetMspAdmin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mspId string
		var adminId string

		resp, httpRes, err := apiClient.MSPsAdminsAPI.GetMspAdmin(context.Background(), mspId, adminId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MSPsAdminsAPIService InviteMspAdmin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mspId string

		resp, httpRes, err := apiClient.MSPsAdminsAPI.InviteMspAdmin(context.Background(), mspId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MSPsAdminsAPIService ListMspAdmins", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mspId string

		resp, httpRes, err := apiClient.MSPsAdminsAPI.ListMspAdmins(context.Background(), mspId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MSPsAdminsAPIService RevokeMspAdmin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mspId string
		var adminId string

		httpRes, err := apiClient.MSPsAdminsAPI.RevokeMspAdmin(context.Background(), mspId, adminId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MSPsAdminsAPIService UninviteMspAdmin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mspId string
		var inviteId string

		httpRes, err := apiClient.MSPsAdminsAPI.UninviteMspAdmin(context.Background(), mspId, inviteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MSPsAdminsAPIService UpdateMspAdmin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mspId string
		var adminId string

		resp, httpRes, err := apiClient.MSPsAdminsAPI.UpdateMspAdmin(context.Background(), mspId, adminId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MSPsAdminsAPIService UpdateMspAdminInvite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mspId string
		var inviteId string

		resp, httpRes, err := apiClient.MSPsAdminsAPI.UpdateMspAdminInvite(context.Background(), mspId, inviteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
