/*
Mist API

Testing OrgsLinkedApplicationsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mistsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/tmunzer/mistsdkgo"
)

func Test_mistsdkgo_OrgsLinkedApplicationsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OrgsLinkedApplicationsAPIService AddOrgOauthAppAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var appName OauthAppName

		httpRes, err := apiClient.OrgsLinkedApplicationsAPI.AddOrgOauthAppAccounts(context.Background(), orgId, appName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsLinkedApplicationsAPIService DeleteOrgOauthAppAuthorization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var appName AccountOauthAppName
		var accountId string

		httpRes, err := apiClient.OrgsLinkedApplicationsAPI.DeleteOrgOauthAppAuthorization(context.Background(), orgId, appName, accountId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsLinkedApplicationsAPIService GetOrgOauthAppLinkedStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var appName OauthAppName

		resp, httpRes, err := apiClient.OrgsLinkedApplicationsAPI.GetOrgOauthAppLinkedStatus(context.Background(), orgId, appName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsLinkedApplicationsAPIService LinkOrgToJuniperJuniperAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.OrgsLinkedApplicationsAPI.LinkOrgToJuniperJuniperAccount(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsLinkedApplicationsAPIService UnlinkOrgFromJuniperCustomerId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		httpRes, err := apiClient.OrgsLinkedApplicationsAPI.UnlinkOrgFromJuniperCustomerId(context.Background(), orgId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsLinkedApplicationsAPIService UpdateOrgOauthAppAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var appName OauthAppName

		httpRes, err := apiClient.OrgsLinkedApplicationsAPI.UpdateOrgOauthAppAccounts(context.Background(), orgId, appName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
