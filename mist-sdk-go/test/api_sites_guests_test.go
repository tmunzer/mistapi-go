/*
Mist API

Testing SitesGuestsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mistsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/tmunzer/mistsdkgo"
)

func Test_mistsdkgo_SitesGuestsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SitesGuestsAPIService CountSiteGuestAuthorizations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesGuestsAPI.CountSiteGuestAuthorizations(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesGuestsAPIService DeleteSiteGuestAuthorization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var guestMac string

		httpRes, err := apiClient.SitesGuestsAPI.DeleteSiteGuestAuthorization(context.Background(), siteId, guestMac).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesGuestsAPIService GetSiteGuestAuthorization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var guestMac string

		resp, httpRes, err := apiClient.SitesGuestsAPI.GetSiteGuestAuthorization(context.Background(), siteId, guestMac).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesGuestsAPIService ListSiteAllGuestAuthorizations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesGuestsAPI.ListSiteAllGuestAuthorizations(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesGuestsAPIService ListSiteAllGuestAuthorizationsDerived", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesGuestsAPI.ListSiteAllGuestAuthorizationsDerived(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesGuestsAPIService SearchSiteGuestAuthorization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesGuestsAPI.SearchSiteGuestAuthorization(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesGuestsAPIService UpdateSiteGuestAuthorization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var guestMac string

		resp, httpRes, err := apiClient.SitesGuestsAPI.UpdateSiteGuestAuthorization(context.Background(), siteId, guestMac).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
