/*
Mist API

Testing SitesAssetsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mistsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/tmunzer/mistsdkgo"
)

func Test_mistsdkgo_SitesAssetsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SitesAssetsAPIService CountSiteAssets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesAssetsAPI.CountSiteAssets(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAssetsAPIService CreateSiteAsset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesAssetsAPI.CreateSiteAsset(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAssetsAPIService DeleteSiteAsset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var assetId string

		httpRes, err := apiClient.SitesAssetsAPI.DeleteSiteAsset(context.Background(), siteId, assetId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAssetsAPIService GetSiteAsset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var assetId string

		resp, httpRes, err := apiClient.SitesAssetsAPI.GetSiteAsset(context.Background(), siteId, assetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAssetsAPIService GetSiteAssetStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesAssetsAPI.GetSiteAssetStats(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAssetsAPIService GetSiteAssetsOfInterest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesAssetsAPI.GetSiteAssetsOfInterest(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAssetsAPIService GetSiteDiscoveredAssetByMap", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var mapId string

		resp, httpRes, err := apiClient.SitesAssetsAPI.GetSiteDiscoveredAssetByMap(context.Background(), siteId, mapId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAssetsAPIService ImportSiteAssets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		httpRes, err := apiClient.SitesAssetsAPI.ImportSiteAssets(context.Background(), siteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAssetsAPIService ListSiteAssets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesAssetsAPI.ListSiteAssets(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAssetsAPIService ListSiteAssetsStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesAssetsAPI.ListSiteAssetsStats(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAssetsAPIService ListSiteDiscoveredAssets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesAssetsAPI.ListSiteDiscoveredAssets(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAssetsAPIService SearchSiteAssets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesAssetsAPI.SearchSiteAssets(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAssetsAPIService UpdateSiteAsset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var assetId string

		resp, httpRes, err := apiClient.SitesAssetsAPI.UpdateSiteAsset(context.Background(), siteId, assetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
