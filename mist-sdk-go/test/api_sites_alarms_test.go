/*
Mist API

Testing SitesAlarmsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mistsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/tmunzer/mistsdkgo"
)

func Test_mistsdkgo_SitesAlarmsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SitesAlarmsAPIService AckSiteAlarm", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var alarmId string

		httpRes, err := apiClient.SitesAlarmsAPI.AckSiteAlarm(context.Background(), siteId, alarmId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAlarmsAPIService AckSiteAllAlarms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		httpRes, err := apiClient.SitesAlarmsAPI.AckSiteAllAlarms(context.Background(), siteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAlarmsAPIService AckSiteMultipleAlarms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		httpRes, err := apiClient.SitesAlarmsAPI.AckSiteMultipleAlarms(context.Background(), siteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAlarmsAPIService CountSiteAlarms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesAlarmsAPI.CountSiteAlarms(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAlarmsAPIService SearchSiteAlarms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesAlarmsAPI.SearchSiteAlarms(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAlarmsAPIService SubscribeSiteAlarms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		httpRes, err := apiClient.SitesAlarmsAPI.SubscribeSiteAlarms(context.Background(), siteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAlarmsAPIService UnackSiteAlarm", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var alarmId string

		httpRes, err := apiClient.SitesAlarmsAPI.UnackSiteAlarm(context.Background(), siteId, alarmId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAlarmsAPIService UnackSiteAllArlarms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		httpRes, err := apiClient.SitesAlarmsAPI.UnackSiteAllArlarms(context.Background(), siteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAlarmsAPIService UnackSiteMultipleAlarms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		httpRes, err := apiClient.SitesAlarmsAPI.UnackSiteMultipleAlarms(context.Background(), siteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesAlarmsAPIService UnsubscribeSiteAlarms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		httpRes, err := apiClient.SitesAlarmsAPI.UnsubscribeSiteAlarms(context.Background(), siteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
