/*
Mist API

Testing SitesRRMAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mistsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/tmunzer/mistsdkgo"
)

func Test_mistsdkgo_SitesRRMAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SitesRRMAPIService GetSiteCurrentChannelPlanning", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesRRMAPI.GetSiteCurrentChannelPlanning(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesRRMAPIService GetSiteCurrentRrmConsiderations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var deviceId string
		var band Dot11Band

		resp, httpRes, err := apiClient.SitesRRMAPI.GetSiteCurrentRrmConsiderations(context.Background(), siteId, deviceId, band).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesRRMAPIService GetSiteCurrentRrmNeighbors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var band Dot11Band

		resp, httpRes, err := apiClient.SitesRRMAPI.GetSiteCurrentRrmNeighbors(context.Background(), siteId, band).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesRRMAPIService GetSiteRrmEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesRRMAPI.GetSiteRrmEvents(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
