/*
Mist API

Testing InstallerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mistsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/tmunzer/mistsdkgo"
)

func Test_mistsdkgo_InstallerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test InstallerAPIService AddInstallerDeviceImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var imageName string
		var deviceMac string

		httpRes, err := apiClient.InstallerAPI.AddInstallerDeviceImage(context.Background(), orgId, imageName, deviceMac).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstallerAPIService ClaimInstallerDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.InstallerAPI.ClaimInstallerDevices(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstallerAPIService CreateInstallerMap", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var siteName string
		var mapId string

		resp, httpRes, err := apiClient.InstallerAPI.CreateInstallerMap(context.Background(), orgId, siteName, mapId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstallerAPIService CreateInstallerVirtualChassis", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var fpc0Mac string

		resp, httpRes, err := apiClient.InstallerAPI.CreateInstallerVirtualChassis(context.Background(), orgId, fpc0Mac).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstallerAPIService CreateOrUpdateInstallerSites", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var siteName string

		httpRes, err := apiClient.InstallerAPI.CreateOrUpdateInstallerSites(context.Background(), orgId, siteName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstallerAPIService DeleteInstallerDeviceImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var imageName string
		var deviceMac string

		httpRes, err := apiClient.InstallerAPI.DeleteInstallerDeviceImage(context.Background(), orgId, imageName, deviceMac).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstallerAPIService DeleteInstallerMap", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var siteName string
		var mapId string

		httpRes, err := apiClient.InstallerAPI.DeleteInstallerMap(context.Background(), orgId, siteName, mapId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstallerAPIService GetInstallerDeviceVirtualChassis", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var fpc0Mac string

		resp, httpRes, err := apiClient.InstallerAPI.GetInstallerDeviceVirtualChassis(context.Background(), orgId, fpc0Mac).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstallerAPIService ImportInstallerMap", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var siteName string

		resp, httpRes, err := apiClient.InstallerAPI.ImportInstallerMap(context.Background(), orgId, siteName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstallerAPIService ListInstallerAlarmTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.InstallerAPI.ListInstallerAlarmTemplates(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstallerAPIService ListInstallerDeviceProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.InstallerAPI.ListInstallerDeviceProfiles(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstallerAPIService ListInstallerListOfRenctlyClaimedDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.InstallerAPI.ListInstallerListOfRenctlyClaimedDevices(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstallerAPIService ListInstallerMaps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var siteName string

		resp, httpRes, err := apiClient.InstallerAPI.ListInstallerMaps(context.Background(), orgId, siteName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstallerAPIService ListInstallerRfTemplatesNames", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.InstallerAPI.ListInstallerRfTemplatesNames(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstallerAPIService ListInstallerSiteGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.InstallerAPI.ListInstallerSiteGroups(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstallerAPIService ListInstallerSites", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.InstallerAPI.ListInstallerSites(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstallerAPIService OptimizeInstallerRrm", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteName string

		httpRes, err := apiClient.InstallerAPI.OptimizeInstallerRrm(context.Background(), siteName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstallerAPIService ProvisionInstallerDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var deviceMac string

		httpRes, err := apiClient.InstallerAPI.ProvisionInstallerDevices(context.Background(), orgId, deviceMac).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstallerAPIService StartInstallerLocateDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var deviceMac string

		httpRes, err := apiClient.InstallerAPI.StartInstallerLocateDevice(context.Background(), orgId, deviceMac).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstallerAPIService StopInstallerLocateDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var deviceMac string

		httpRes, err := apiClient.InstallerAPI.StopInstallerLocateDevice(context.Background(), orgId, deviceMac).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstallerAPIService UnassignInstallerRecentlyClaimedDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var deviceMac string

		httpRes, err := apiClient.InstallerAPI.UnassignInstallerRecentlyClaimedDevice(context.Background(), orgId, deviceMac).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstallerAPIService UpdateInstallerMap", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var siteName string
		var mapId string

		resp, httpRes, err := apiClient.InstallerAPI.UpdateInstallerMap(context.Background(), orgId, siteName, mapId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InstallerAPIService UpdateInstallerVirtualChassisMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var fpc0Mac string

		resp, httpRes, err := apiClient.InstallerAPI.UpdateInstallerVirtualChassisMember(context.Background(), orgId, fpc0Mac).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
