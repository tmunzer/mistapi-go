/*
Mist API

Testing UtilitiesLANAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mistsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/tmunzer/mistsdkgo"
)

func Test_mistsdkgo_UtilitiesLANAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UtilitiesLANAPIService CableTestFromSwitch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var deviceId string

		resp, httpRes, err := apiClient.UtilitiesLANAPI.CableTestFromSwitch(context.Background(), siteId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesLANAPIService ClearAllLearnedMacsFromPortOnSwitch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var deviceId string

		httpRes, err := apiClient.UtilitiesLANAPI.ClearAllLearnedMacsFromPortOnSwitch(context.Background(), siteId, deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesLANAPIService ClearBpduErrosFromPortsOnSwitch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var deviceId string

		httpRes, err := apiClient.UtilitiesLANAPI.ClearBpduErrosFromPortsOnSwitch(context.Background(), siteId, deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesLANAPIService CreateSiteDeviceSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var deviceId string

		resp, httpRes, err := apiClient.UtilitiesLANAPI.CreateSiteDeviceSnapshot(context.Background(), siteId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesLANAPIService PollSiteSwitchStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var deviceId string

		httpRes, err := apiClient.UtilitiesLANAPI.PollSiteSwitchStats(context.Background(), siteId, deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesLANAPIService PortsBounceFromSwitch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var deviceId string

		httpRes, err := apiClient.UtilitiesLANAPI.PortsBounceFromSwitch(context.Background(), siteId, deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesLANAPIService UpgradeDeviceBios", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var deviceId string

		resp, httpRes, err := apiClient.UtilitiesLANAPI.UpgradeDeviceBios(context.Background(), siteId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesLANAPIService UpgradeDeviceFPGA", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var deviceId string

		resp, httpRes, err := apiClient.UtilitiesLANAPI.UpgradeDeviceFPGA(context.Background(), siteId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesLANAPIService UpgradeSiteDevicesBios", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		httpRes, err := apiClient.UtilitiesLANAPI.UpgradeSiteDevicesBios(context.Background(), siteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesLANAPIService UpgradeSiteDevicesFpga", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		httpRes, err := apiClient.UtilitiesLANAPI.UpgradeSiteDevicesFpga(context.Background(), siteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
