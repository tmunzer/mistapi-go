/*
Mist API

Testing OrgsWxTunnelsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mistsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/tmunzer/mistsdkgo"
)

func Test_mistsdkgo_OrgsWxTunnelsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OrgsWxTunnelsAPIService CreateOrgWxTunnel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.OrgsWxTunnelsAPI.CreateOrgWxTunnel(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsWxTunnelsAPIService DeleteOrgWxTunnel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var wxtunnelId string

		httpRes, err := apiClient.OrgsWxTunnelsAPI.DeleteOrgWxTunnel(context.Background(), orgId, wxtunnelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsWxTunnelsAPIService GetOrgWxTunnel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var wxtunnelId string

		resp, httpRes, err := apiClient.OrgsWxTunnelsAPI.GetOrgWxTunnel(context.Background(), orgId, wxtunnelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsWxTunnelsAPIService ListOrgWxTunnels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.OrgsWxTunnelsAPI.ListOrgWxTunnels(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsWxTunnelsAPIService UpdateOrgWxTunnel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var wxtunnelId string

		resp, httpRes, err := apiClient.OrgsWxTunnelsAPI.UpdateOrgWxTunnel(context.Background(), orgId, wxtunnelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
