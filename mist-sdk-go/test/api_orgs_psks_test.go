/*
Mist API

Testing OrgsPsksAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mistsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/tmunzer/mistsdkgo"
)

func Test_mistsdkgo_OrgsPsksAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OrgsPsksAPIService CreateOrgPsk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.OrgsPsksAPI.CreateOrgPsk(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsPsksAPIService DeleteOrgPsk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var pskId string

		httpRes, err := apiClient.OrgsPsksAPI.DeleteOrgPsk(context.Background(), orgId, pskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsPsksAPIService DeleteOrgPskList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		httpRes, err := apiClient.OrgsPsksAPI.DeleteOrgPskList(context.Background(), orgId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsPsksAPIService DeleteOrgPskOldPassphrase", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var pskId string

		resp, httpRes, err := apiClient.OrgsPsksAPI.DeleteOrgPskOldPassphrase(context.Background(), orgId, pskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsPsksAPIService GetOrgPsk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var pskId string

		resp, httpRes, err := apiClient.OrgsPsksAPI.GetOrgPsk(context.Background(), orgId, pskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsPsksAPIService ImportOrgPsks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.OrgsPsksAPI.ImportOrgPsks(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsPsksAPIService ListOrgPsks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.OrgsPsksAPI.ListOrgPsks(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsPsksAPIService UpdateOrgMultiplePsks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.OrgsPsksAPI.UpdateOrgMultiplePsks(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsPsksAPIService UpdateOrgPsk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var pskId string

		resp, httpRes, err := apiClient.OrgsPsksAPI.UpdateOrgPsk(context.Background(), orgId, pskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
