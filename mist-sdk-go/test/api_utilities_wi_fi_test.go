/*
Mist API

Testing UtilitiesWiFiAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mistsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/tmunzer/mistsdkgo"
)

func Test_mistsdkgo_UtilitiesWiFiAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UtilitiesWiFiAPIService DeauthSiteWirelessClientsConnectedToARogue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var rogueBssid string

		httpRes, err := apiClient.UtilitiesWiFiAPI.DeauthSiteWirelessClientsConnectedToARogue(context.Background(), siteId, rogueBssid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesWiFiAPIService DisconnectSiteMultipleClients", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		httpRes, err := apiClient.UtilitiesWiFiAPI.DisconnectSiteMultipleClients(context.Background(), siteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesWiFiAPIService DisconnectSiteWirelessClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var clientMac string

		httpRes, err := apiClient.UtilitiesWiFiAPI.DisconnectSiteWirelessClient(context.Background(), siteId, clientMac).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesWiFiAPIService OptimizeSiteRrm", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		httpRes, err := apiClient.UtilitiesWiFiAPI.OptimizeSiteRrm(context.Background(), siteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesWiFiAPIService ReauthOrgDot1xWirelessClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var clientMac string

		httpRes, err := apiClient.UtilitiesWiFiAPI.ReauthOrgDot1xWirelessClient(context.Background(), orgId, clientMac).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesWiFiAPIService ReauthSiteDot1xWirelessClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var clientMac string

		httpRes, err := apiClient.UtilitiesWiFiAPI.ReauthSiteDot1xWirelessClient(context.Background(), siteId, clientMac).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesWiFiAPIService ReprovisionSiteAllAps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		httpRes, err := apiClient.UtilitiesWiFiAPI.ReprovisionSiteAllAps(context.Background(), siteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesWiFiAPIService ResetSiteAllApsToUseRrm", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		httpRes, err := apiClient.UtilitiesWiFiAPI.ResetSiteAllApsToUseRrm(context.Background(), siteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesWiFiAPIService TestSiteWlanTelstraSetup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.UtilitiesWiFiAPI.TestSiteWlanTelstraSetup(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesWiFiAPIService TestSiteWlanTwilioSetup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.UtilitiesWiFiAPI.TestSiteWlanTwilioSetup(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesWiFiAPIService UnauthorizeSiteMultipleClients", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		httpRes, err := apiClient.UtilitiesWiFiAPI.UnauthorizeSiteMultipleClients(context.Background(), siteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesWiFiAPIService UnauthorizeSiteWirelessClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var clientMac string

		httpRes, err := apiClient.UtilitiesWiFiAPI.UnauthorizeSiteWirelessClient(context.Background(), siteId, clientMac).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesWiFiAPIService ZeroizeSiteFipsAllAps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		httpRes, err := apiClient.UtilitiesWiFiAPI.ZeroizeSiteFipsAllAps(context.Background(), siteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
