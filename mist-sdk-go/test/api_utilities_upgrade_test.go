/*
Mist API

Testing UtilitiesUpgradeAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mistsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/tmunzer/mistsdkgo"
)

func Test_mistsdkgo_UtilitiesUpgradeAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UtilitiesUpgradeAPIService CancelOrgSsrUpgrade", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var upgradeId string

		httpRes, err := apiClient.UtilitiesUpgradeAPI.CancelOrgSsrUpgrade(context.Background(), orgId, upgradeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesUpgradeAPIService CancelSiteDeviceUpgrade", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var upgradeId string

		httpRes, err := apiClient.UtilitiesUpgradeAPI.CancelSiteDeviceUpgrade(context.Background(), siteId, upgradeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesUpgradeAPIService GetOrgDeviceUpgrade", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var upgradeId string

		resp, httpRes, err := apiClient.UtilitiesUpgradeAPI.GetOrgDeviceUpgrade(context.Background(), orgId, upgradeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesUpgradeAPIService GetOrgMxEdgeUpgrade", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var upgradeId string

		resp, httpRes, err := apiClient.UtilitiesUpgradeAPI.GetOrgMxEdgeUpgrade(context.Background(), orgId, upgradeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesUpgradeAPIService GetSiteDeviceUpgrade", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var upgradeId string

		resp, httpRes, err := apiClient.UtilitiesUpgradeAPI.GetSiteDeviceUpgrade(context.Background(), siteId, upgradeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesUpgradeAPIService GetSiteSsrUpgrade", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var upgradeId string

		resp, httpRes, err := apiClient.UtilitiesUpgradeAPI.GetSiteSsrUpgrade(context.Background(), siteId, upgradeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesUpgradeAPIService ListOrgAvailableSsrVersions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.UtilitiesUpgradeAPI.ListOrgAvailableSsrVersions(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesUpgradeAPIService ListOrgDeviceUpgrades", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.UtilitiesUpgradeAPI.ListOrgDeviceUpgrades(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesUpgradeAPIService ListOrgMxEdgeUpgrades", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.UtilitiesUpgradeAPI.ListOrgMxEdgeUpgrades(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesUpgradeAPIService ListOrgSsrUpgrades", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.UtilitiesUpgradeAPI.ListOrgSsrUpgrades(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesUpgradeAPIService ListSiteAvailableDeviceVersions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.UtilitiesUpgradeAPI.ListSiteAvailableDeviceVersions(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesUpgradeAPIService ListSiteDeviceUpgrades", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.UtilitiesUpgradeAPI.ListSiteDeviceUpgrades(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesUpgradeAPIService UpgradeDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var deviceId string

		resp, httpRes, err := apiClient.UtilitiesUpgradeAPI.UpgradeDevice(context.Background(), siteId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesUpgradeAPIService UpgradeOrgDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.UtilitiesUpgradeAPI.UpgradeOrgDevices(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesUpgradeAPIService UpgradeOrgJsiDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var deviceMac string

		httpRes, err := apiClient.UtilitiesUpgradeAPI.UpgradeOrgJsiDevice(context.Background(), orgId, deviceMac).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesUpgradeAPIService UpgradeOrgMxEdges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		httpRes, err := apiClient.UtilitiesUpgradeAPI.UpgradeOrgMxEdges(context.Background(), orgId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesUpgradeAPIService UpgradeOrgSsrs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.UtilitiesUpgradeAPI.UpgradeOrgSsrs(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesUpgradeAPIService UpgradeSiteDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.UtilitiesUpgradeAPI.UpgradeSiteDevices(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UtilitiesUpgradeAPIService UpgradeSsr", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var deviceId string

		resp, httpRes, err := apiClient.UtilitiesUpgradeAPI.UpgradeSsr(context.Background(), siteId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
