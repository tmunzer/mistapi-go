/*
Mist API

Testing OrgsSitegroupsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mistsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/tmunzer/mistsdkgo"
)

func Test_mistsdkgo_OrgsSitegroupsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OrgsSitegroupsAPIService CreateOrgSiteGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.OrgsSitegroupsAPI.CreateOrgSiteGroup(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsSitegroupsAPIService DeleteOrgSiteGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var sitegroupId string

		httpRes, err := apiClient.OrgsSitegroupsAPI.DeleteOrgSiteGroup(context.Background(), orgId, sitegroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsSitegroupsAPIService GetOrgSiteGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var sitegroupId string

		resp, httpRes, err := apiClient.OrgsSitegroupsAPI.GetOrgSiteGroup(context.Background(), orgId, sitegroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsSitegroupsAPIService ListOrgSiteGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.OrgsSitegroupsAPI.ListOrgSiteGroups(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsSitegroupsAPIService UpdateOrgSiteGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var sitegroupId string

		resp, httpRes, err := apiClient.OrgsSitegroupsAPI.UpdateOrgSiteGroup(context.Background(), orgId, sitegroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
