/*
Mist API

Testing OrgsAssetsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mistsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/tmunzer/mistsdkgo"
)

func Test_mistsdkgo_OrgsAssetsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OrgsAssetsAPIService CountOrgAssetsByDistanceField", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.OrgsAssetsAPI.CountOrgAssetsByDistanceField(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsAssetsAPIService CreateOrgAsset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.OrgsAssetsAPI.CreateOrgAsset(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsAssetsAPIService DeleteOrgAsset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var assetId string

		httpRes, err := apiClient.OrgsAssetsAPI.DeleteOrgAsset(context.Background(), orgId, assetId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsAssetsAPIService GetOrgAsset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var assetId string

		resp, httpRes, err := apiClient.OrgsAssetsAPI.GetOrgAsset(context.Background(), orgId, assetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsAssetsAPIService ImportOrgAssets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		httpRes, err := apiClient.OrgsAssetsAPI.ImportOrgAssets(context.Background(), orgId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsAssetsAPIService ListOrgAssets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.OrgsAssetsAPI.ListOrgAssets(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsAssetsAPIService ListOrgAssetsStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.OrgsAssetsAPI.ListOrgAssetsStats(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsAssetsAPIService SearchOrgAssets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.OrgsAssetsAPI.SearchOrgAssets(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsAssetsAPIService UpdateOrgAsset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var assetId string

		resp, httpRes, err := apiClient.OrgsAssetsAPI.UpdateOrgAsset(context.Background(), orgId, assetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
