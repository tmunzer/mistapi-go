/*
Mist API

Testing OrgsVPNsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mistsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/tmunzer/mistsdkgo"
)

func Test_mistsdkgo_OrgsVPNsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OrgsVPNsAPIService CountOrgPeerPathStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.OrgsVPNsAPI.CountOrgPeerPathStats(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsVPNsAPIService CreateOrgVpns", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.OrgsVPNsAPI.CreateOrgVpns(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsVPNsAPIService DeleteOrgVpn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var vpnId string

		httpRes, err := apiClient.OrgsVPNsAPI.DeleteOrgVpn(context.Background(), orgId, vpnId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsVPNsAPIService GetOrgVpn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var vpnId string

		resp, httpRes, err := apiClient.OrgsVPNsAPI.GetOrgVpn(context.Background(), orgId, vpnId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsVPNsAPIService ListOrgsVpns", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.OrgsVPNsAPI.ListOrgsVpns(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsVPNsAPIService SearchOrgPeerPathStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.OrgsVPNsAPI.SearchOrgPeerPathStats(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrgsVPNsAPIService UpdateOrgVpn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var vpnId string

		resp, httpRes, err := apiClient.OrgsVPNsAPI.UpdateOrgVpn(context.Background(), orgId, vpnId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
