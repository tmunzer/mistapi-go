/*
Mist API

Testing SitesMapsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mistsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/tmunzer/mistsdkgo"
)

func Test_mistsdkgo_SitesMapsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SitesMapsAPIService AddSiteMapImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var mapId string

		httpRes, err := apiClient.SitesMapsAPI.AddSiteMapImage(context.Background(), siteId, mapId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesMapsAPIService BulkAssignSiteApsToMap", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var mapId string

		resp, httpRes, err := apiClient.SitesMapsAPI.BulkAssignSiteApsToMap(context.Background(), siteId, mapId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesMapsAPIService CreateSiteMap", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesMapsAPI.CreateSiteMap(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesMapsAPIService DeleteSiteMap", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var mapId string

		httpRes, err := apiClient.SitesMapsAPI.DeleteSiteMap(context.Background(), siteId, mapId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesMapsAPIService DeleteSiteMapImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var mapId string

		httpRes, err := apiClient.SitesMapsAPI.DeleteSiteMapImage(context.Background(), siteId, mapId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesMapsAPIService GetSiteMap", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var mapId string

		resp, httpRes, err := apiClient.SitesMapsAPI.GetSiteMap(context.Background(), siteId, mapId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesMapsAPIService ImportSiteMaps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesMapsAPI.ImportSiteMaps(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesMapsAPIService ImportSiteWayfindings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var mapId string

		httpRes, err := apiClient.SitesMapsAPI.ImportSiteWayfindings(context.Background(), siteId, mapId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesMapsAPIService ListSiteMaps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesMapsAPI.ListSiteMaps(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesMapsAPIService ReplaceSiteMapImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var mapId string

		httpRes, err := apiClient.SitesMapsAPI.ReplaceSiteMapImage(context.Background(), siteId, mapId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesMapsAPIService UpdateSiteMap", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var mapId string

		resp, httpRes, err := apiClient.SitesMapsAPI.UpdateSiteMap(context.Background(), siteId, mapId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
