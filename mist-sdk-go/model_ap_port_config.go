/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the ApPortConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApPortConfig{}

// ApPortConfig struct for ApPortConfig
type ApPortConfig struct {
	Disabled *bool `json:"disabled,omitempty"`
	DynamicVlan *ApPortConfigDynamicVlan `json:"dynamic_vlan,omitempty"`
	EnableMacAuth *bool `json:"enable_mac_auth,omitempty"`
	Forwarding *ApPortConfigForwarding `json:"forwarding,omitempty"`
	MacAuthProtocol *ApPortConfigMacAuthProtocol `json:"mac_auth_protocol,omitempty"`
	MistNac *WlanMistNac `json:"mist_nac,omitempty"`
	// if `forwarding`==`mxtunnel`, vlan_ids comes from mxtunnel
	MxTunnelId *string `json:"mx_tunnel_id,omitempty"`
	// if `forwarding`==`site_mxedge`, vlan_ids comes from site_mxedge (`mxtunnels` under site setting)
	MxtunnelName *string `json:"mxtunnel_name,omitempty"`
	PortAuth *ApPortConfigPortAuth `json:"port_auth,omitempty"`
	// if `forwrding`==`limited`
	PortVlanId *int32 `json:"port_vlan_id,omitempty"`
	RadiusConfig *RadiusConfig `json:"radius_config,omitempty"`
	Radsec *Radsec `json:"radsec,omitempty"`
	// optional to specify the vlan id for a tunnel if forwarding is for `wxtunnel`, `mxtunnel` or `site_mxedge`. * if vlan_id is not specified then it will use first one in vlan_ids[] of the mxtunnel. * if forwarding == site_mxedge, vlan_ids comes from site_mxedge (`mxtunnels` under site setting)
	VlanId *int32 `json:"vlan_id,omitempty"`
	// if `forwrding`==`limited`
	VlandIds []int32 `json:"vland_ids,omitempty"`
	// if `forwarding`==`wxtunnel`, the port is bridged to the vlan of the session
	WxtunnelId *string `json:"wxtunnel_id,omitempty"`
	// if `forwarding`==`wxtunnel`, the port is bridged to the vlan of the session
	WxtunnelRemoteId *string `json:"wxtunnel_remote_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApPortConfig ApPortConfig

// NewApPortConfig instantiates a new ApPortConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApPortConfig() *ApPortConfig {
	this := ApPortConfig{}
	var disabled bool = false
	this.Disabled = &disabled
	var enableMacAuth bool = false
	this.EnableMacAuth = &enableMacAuth
	var forwarding ApPortConfigForwarding = APPORTCONFIGFORWARDING_ALL
	this.Forwarding = &forwarding
	var macAuthProtocol ApPortConfigMacAuthProtocol = APPORTCONFIGMACAUTHPROTOCOL_PAP
	this.MacAuthProtocol = &macAuthProtocol
	var mxtunnelName string = ""
	this.MxtunnelName = &mxtunnelName
	var portAuth ApPortConfigPortAuth = APPORTCONFIGPORTAUTH_NONE
	this.PortAuth = &portAuth
	var wxtunnelRemoteId string = ""
	this.WxtunnelRemoteId = &wxtunnelRemoteId
	return &this
}

// NewApPortConfigWithDefaults instantiates a new ApPortConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApPortConfigWithDefaults() *ApPortConfig {
	this := ApPortConfig{}
	var disabled bool = false
	this.Disabled = &disabled
	var enableMacAuth bool = false
	this.EnableMacAuth = &enableMacAuth
	var forwarding ApPortConfigForwarding = APPORTCONFIGFORWARDING_ALL
	this.Forwarding = &forwarding
	var macAuthProtocol ApPortConfigMacAuthProtocol = APPORTCONFIGMACAUTHPROTOCOL_PAP
	this.MacAuthProtocol = &macAuthProtocol
	var mxtunnelName string = ""
	this.MxtunnelName = &mxtunnelName
	var portAuth ApPortConfigPortAuth = APPORTCONFIGPORTAUTH_NONE
	this.PortAuth = &portAuth
	var wxtunnelRemoteId string = ""
	this.WxtunnelRemoteId = &wxtunnelRemoteId
	return &this
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *ApPortConfig) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApPortConfig) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *ApPortConfig) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *ApPortConfig) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetDynamicVlan returns the DynamicVlan field value if set, zero value otherwise.
func (o *ApPortConfig) GetDynamicVlan() ApPortConfigDynamicVlan {
	if o == nil || IsNil(o.DynamicVlan) {
		var ret ApPortConfigDynamicVlan
		return ret
	}
	return *o.DynamicVlan
}

// GetDynamicVlanOk returns a tuple with the DynamicVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApPortConfig) GetDynamicVlanOk() (*ApPortConfigDynamicVlan, bool) {
	if o == nil || IsNil(o.DynamicVlan) {
		return nil, false
	}
	return o.DynamicVlan, true
}

// HasDynamicVlan returns a boolean if a field has been set.
func (o *ApPortConfig) HasDynamicVlan() bool {
	if o != nil && !IsNil(o.DynamicVlan) {
		return true
	}

	return false
}

// SetDynamicVlan gets a reference to the given ApPortConfigDynamicVlan and assigns it to the DynamicVlan field.
func (o *ApPortConfig) SetDynamicVlan(v ApPortConfigDynamicVlan) {
	o.DynamicVlan = &v
}

// GetEnableMacAuth returns the EnableMacAuth field value if set, zero value otherwise.
func (o *ApPortConfig) GetEnableMacAuth() bool {
	if o == nil || IsNil(o.EnableMacAuth) {
		var ret bool
		return ret
	}
	return *o.EnableMacAuth
}

// GetEnableMacAuthOk returns a tuple with the EnableMacAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApPortConfig) GetEnableMacAuthOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMacAuth) {
		return nil, false
	}
	return o.EnableMacAuth, true
}

// HasEnableMacAuth returns a boolean if a field has been set.
func (o *ApPortConfig) HasEnableMacAuth() bool {
	if o != nil && !IsNil(o.EnableMacAuth) {
		return true
	}

	return false
}

// SetEnableMacAuth gets a reference to the given bool and assigns it to the EnableMacAuth field.
func (o *ApPortConfig) SetEnableMacAuth(v bool) {
	o.EnableMacAuth = &v
}

// GetForwarding returns the Forwarding field value if set, zero value otherwise.
func (o *ApPortConfig) GetForwarding() ApPortConfigForwarding {
	if o == nil || IsNil(o.Forwarding) {
		var ret ApPortConfigForwarding
		return ret
	}
	return *o.Forwarding
}

// GetForwardingOk returns a tuple with the Forwarding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApPortConfig) GetForwardingOk() (*ApPortConfigForwarding, bool) {
	if o == nil || IsNil(o.Forwarding) {
		return nil, false
	}
	return o.Forwarding, true
}

// HasForwarding returns a boolean if a field has been set.
func (o *ApPortConfig) HasForwarding() bool {
	if o != nil && !IsNil(o.Forwarding) {
		return true
	}

	return false
}

// SetForwarding gets a reference to the given ApPortConfigForwarding and assigns it to the Forwarding field.
func (o *ApPortConfig) SetForwarding(v ApPortConfigForwarding) {
	o.Forwarding = &v
}

// GetMacAuthProtocol returns the MacAuthProtocol field value if set, zero value otherwise.
func (o *ApPortConfig) GetMacAuthProtocol() ApPortConfigMacAuthProtocol {
	if o == nil || IsNil(o.MacAuthProtocol) {
		var ret ApPortConfigMacAuthProtocol
		return ret
	}
	return *o.MacAuthProtocol
}

// GetMacAuthProtocolOk returns a tuple with the MacAuthProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApPortConfig) GetMacAuthProtocolOk() (*ApPortConfigMacAuthProtocol, bool) {
	if o == nil || IsNil(o.MacAuthProtocol) {
		return nil, false
	}
	return o.MacAuthProtocol, true
}

// HasMacAuthProtocol returns a boolean if a field has been set.
func (o *ApPortConfig) HasMacAuthProtocol() bool {
	if o != nil && !IsNil(o.MacAuthProtocol) {
		return true
	}

	return false
}

// SetMacAuthProtocol gets a reference to the given ApPortConfigMacAuthProtocol and assigns it to the MacAuthProtocol field.
func (o *ApPortConfig) SetMacAuthProtocol(v ApPortConfigMacAuthProtocol) {
	o.MacAuthProtocol = &v
}

// GetMistNac returns the MistNac field value if set, zero value otherwise.
func (o *ApPortConfig) GetMistNac() WlanMistNac {
	if o == nil || IsNil(o.MistNac) {
		var ret WlanMistNac
		return ret
	}
	return *o.MistNac
}

// GetMistNacOk returns a tuple with the MistNac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApPortConfig) GetMistNacOk() (*WlanMistNac, bool) {
	if o == nil || IsNil(o.MistNac) {
		return nil, false
	}
	return o.MistNac, true
}

// HasMistNac returns a boolean if a field has been set.
func (o *ApPortConfig) HasMistNac() bool {
	if o != nil && !IsNil(o.MistNac) {
		return true
	}

	return false
}

// SetMistNac gets a reference to the given WlanMistNac and assigns it to the MistNac field.
func (o *ApPortConfig) SetMistNac(v WlanMistNac) {
	o.MistNac = &v
}

// GetMxTunnelId returns the MxTunnelId field value if set, zero value otherwise.
func (o *ApPortConfig) GetMxTunnelId() string {
	if o == nil || IsNil(o.MxTunnelId) {
		var ret string
		return ret
	}
	return *o.MxTunnelId
}

// GetMxTunnelIdOk returns a tuple with the MxTunnelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApPortConfig) GetMxTunnelIdOk() (*string, bool) {
	if o == nil || IsNil(o.MxTunnelId) {
		return nil, false
	}
	return o.MxTunnelId, true
}

// HasMxTunnelId returns a boolean if a field has been set.
func (o *ApPortConfig) HasMxTunnelId() bool {
	if o != nil && !IsNil(o.MxTunnelId) {
		return true
	}

	return false
}

// SetMxTunnelId gets a reference to the given string and assigns it to the MxTunnelId field.
func (o *ApPortConfig) SetMxTunnelId(v string) {
	o.MxTunnelId = &v
}

// GetMxtunnelName returns the MxtunnelName field value if set, zero value otherwise.
func (o *ApPortConfig) GetMxtunnelName() string {
	if o == nil || IsNil(o.MxtunnelName) {
		var ret string
		return ret
	}
	return *o.MxtunnelName
}

// GetMxtunnelNameOk returns a tuple with the MxtunnelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApPortConfig) GetMxtunnelNameOk() (*string, bool) {
	if o == nil || IsNil(o.MxtunnelName) {
		return nil, false
	}
	return o.MxtunnelName, true
}

// HasMxtunnelName returns a boolean if a field has been set.
func (o *ApPortConfig) HasMxtunnelName() bool {
	if o != nil && !IsNil(o.MxtunnelName) {
		return true
	}

	return false
}

// SetMxtunnelName gets a reference to the given string and assigns it to the MxtunnelName field.
func (o *ApPortConfig) SetMxtunnelName(v string) {
	o.MxtunnelName = &v
}

// GetPortAuth returns the PortAuth field value if set, zero value otherwise.
func (o *ApPortConfig) GetPortAuth() ApPortConfigPortAuth {
	if o == nil || IsNil(o.PortAuth) {
		var ret ApPortConfigPortAuth
		return ret
	}
	return *o.PortAuth
}

// GetPortAuthOk returns a tuple with the PortAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApPortConfig) GetPortAuthOk() (*ApPortConfigPortAuth, bool) {
	if o == nil || IsNil(o.PortAuth) {
		return nil, false
	}
	return o.PortAuth, true
}

// HasPortAuth returns a boolean if a field has been set.
func (o *ApPortConfig) HasPortAuth() bool {
	if o != nil && !IsNil(o.PortAuth) {
		return true
	}

	return false
}

// SetPortAuth gets a reference to the given ApPortConfigPortAuth and assigns it to the PortAuth field.
func (o *ApPortConfig) SetPortAuth(v ApPortConfigPortAuth) {
	o.PortAuth = &v
}

// GetPortVlanId returns the PortVlanId field value if set, zero value otherwise.
func (o *ApPortConfig) GetPortVlanId() int32 {
	if o == nil || IsNil(o.PortVlanId) {
		var ret int32
		return ret
	}
	return *o.PortVlanId
}

// GetPortVlanIdOk returns a tuple with the PortVlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApPortConfig) GetPortVlanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.PortVlanId) {
		return nil, false
	}
	return o.PortVlanId, true
}

// HasPortVlanId returns a boolean if a field has been set.
func (o *ApPortConfig) HasPortVlanId() bool {
	if o != nil && !IsNil(o.PortVlanId) {
		return true
	}

	return false
}

// SetPortVlanId gets a reference to the given int32 and assigns it to the PortVlanId field.
func (o *ApPortConfig) SetPortVlanId(v int32) {
	o.PortVlanId = &v
}

// GetRadiusConfig returns the RadiusConfig field value if set, zero value otherwise.
func (o *ApPortConfig) GetRadiusConfig() RadiusConfig {
	if o == nil || IsNil(o.RadiusConfig) {
		var ret RadiusConfig
		return ret
	}
	return *o.RadiusConfig
}

// GetRadiusConfigOk returns a tuple with the RadiusConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApPortConfig) GetRadiusConfigOk() (*RadiusConfig, bool) {
	if o == nil || IsNil(o.RadiusConfig) {
		return nil, false
	}
	return o.RadiusConfig, true
}

// HasRadiusConfig returns a boolean if a field has been set.
func (o *ApPortConfig) HasRadiusConfig() bool {
	if o != nil && !IsNil(o.RadiusConfig) {
		return true
	}

	return false
}

// SetRadiusConfig gets a reference to the given RadiusConfig and assigns it to the RadiusConfig field.
func (o *ApPortConfig) SetRadiusConfig(v RadiusConfig) {
	o.RadiusConfig = &v
}

// GetRadsec returns the Radsec field value if set, zero value otherwise.
func (o *ApPortConfig) GetRadsec() Radsec {
	if o == nil || IsNil(o.Radsec) {
		var ret Radsec
		return ret
	}
	return *o.Radsec
}

// GetRadsecOk returns a tuple with the Radsec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApPortConfig) GetRadsecOk() (*Radsec, bool) {
	if o == nil || IsNil(o.Radsec) {
		return nil, false
	}
	return o.Radsec, true
}

// HasRadsec returns a boolean if a field has been set.
func (o *ApPortConfig) HasRadsec() bool {
	if o != nil && !IsNil(o.Radsec) {
		return true
	}

	return false
}

// SetRadsec gets a reference to the given Radsec and assigns it to the Radsec field.
func (o *ApPortConfig) SetRadsec(v Radsec) {
	o.Radsec = &v
}

// GetVlanId returns the VlanId field value if set, zero value otherwise.
func (o *ApPortConfig) GetVlanId() int32 {
	if o == nil || IsNil(o.VlanId) {
		var ret int32
		return ret
	}
	return *o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApPortConfig) GetVlanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VlanId) {
		return nil, false
	}
	return o.VlanId, true
}

// HasVlanId returns a boolean if a field has been set.
func (o *ApPortConfig) HasVlanId() bool {
	if o != nil && !IsNil(o.VlanId) {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given int32 and assigns it to the VlanId field.
func (o *ApPortConfig) SetVlanId(v int32) {
	o.VlanId = &v
}

// GetVlandIds returns the VlandIds field value if set, zero value otherwise.
func (o *ApPortConfig) GetVlandIds() []int32 {
	if o == nil || IsNil(o.VlandIds) {
		var ret []int32
		return ret
	}
	return o.VlandIds
}

// GetVlandIdsOk returns a tuple with the VlandIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApPortConfig) GetVlandIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.VlandIds) {
		return nil, false
	}
	return o.VlandIds, true
}

// HasVlandIds returns a boolean if a field has been set.
func (o *ApPortConfig) HasVlandIds() bool {
	if o != nil && !IsNil(o.VlandIds) {
		return true
	}

	return false
}

// SetVlandIds gets a reference to the given []int32 and assigns it to the VlandIds field.
func (o *ApPortConfig) SetVlandIds(v []int32) {
	o.VlandIds = v
}

// GetWxtunnelId returns the WxtunnelId field value if set, zero value otherwise.
func (o *ApPortConfig) GetWxtunnelId() string {
	if o == nil || IsNil(o.WxtunnelId) {
		var ret string
		return ret
	}
	return *o.WxtunnelId
}

// GetWxtunnelIdOk returns a tuple with the WxtunnelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApPortConfig) GetWxtunnelIdOk() (*string, bool) {
	if o == nil || IsNil(o.WxtunnelId) {
		return nil, false
	}
	return o.WxtunnelId, true
}

// HasWxtunnelId returns a boolean if a field has been set.
func (o *ApPortConfig) HasWxtunnelId() bool {
	if o != nil && !IsNil(o.WxtunnelId) {
		return true
	}

	return false
}

// SetWxtunnelId gets a reference to the given string and assigns it to the WxtunnelId field.
func (o *ApPortConfig) SetWxtunnelId(v string) {
	o.WxtunnelId = &v
}

// GetWxtunnelRemoteId returns the WxtunnelRemoteId field value if set, zero value otherwise.
func (o *ApPortConfig) GetWxtunnelRemoteId() string {
	if o == nil || IsNil(o.WxtunnelRemoteId) {
		var ret string
		return ret
	}
	return *o.WxtunnelRemoteId
}

// GetWxtunnelRemoteIdOk returns a tuple with the WxtunnelRemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApPortConfig) GetWxtunnelRemoteIdOk() (*string, bool) {
	if o == nil || IsNil(o.WxtunnelRemoteId) {
		return nil, false
	}
	return o.WxtunnelRemoteId, true
}

// HasWxtunnelRemoteId returns a boolean if a field has been set.
func (o *ApPortConfig) HasWxtunnelRemoteId() bool {
	if o != nil && !IsNil(o.WxtunnelRemoteId) {
		return true
	}

	return false
}

// SetWxtunnelRemoteId gets a reference to the given string and assigns it to the WxtunnelRemoteId field.
func (o *ApPortConfig) SetWxtunnelRemoteId(v string) {
	o.WxtunnelRemoteId = &v
}

func (o ApPortConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApPortConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.DynamicVlan) {
		toSerialize["dynamic_vlan"] = o.DynamicVlan
	}
	if !IsNil(o.EnableMacAuth) {
		toSerialize["enable_mac_auth"] = o.EnableMacAuth
	}
	if !IsNil(o.Forwarding) {
		toSerialize["forwarding"] = o.Forwarding
	}
	if !IsNil(o.MacAuthProtocol) {
		toSerialize["mac_auth_protocol"] = o.MacAuthProtocol
	}
	if !IsNil(o.MistNac) {
		toSerialize["mist_nac"] = o.MistNac
	}
	if !IsNil(o.MxTunnelId) {
		toSerialize["mx_tunnel_id"] = o.MxTunnelId
	}
	if !IsNil(o.MxtunnelName) {
		toSerialize["mxtunnel_name"] = o.MxtunnelName
	}
	if !IsNil(o.PortAuth) {
		toSerialize["port_auth"] = o.PortAuth
	}
	if !IsNil(o.PortVlanId) {
		toSerialize["port_vlan_id"] = o.PortVlanId
	}
	if !IsNil(o.RadiusConfig) {
		toSerialize["radius_config"] = o.RadiusConfig
	}
	if !IsNil(o.Radsec) {
		toSerialize["radsec"] = o.Radsec
	}
	if !IsNil(o.VlanId) {
		toSerialize["vlan_id"] = o.VlanId
	}
	if !IsNil(o.VlandIds) {
		toSerialize["vland_ids"] = o.VlandIds
	}
	if !IsNil(o.WxtunnelId) {
		toSerialize["wxtunnel_id"] = o.WxtunnelId
	}
	if !IsNil(o.WxtunnelRemoteId) {
		toSerialize["wxtunnel_remote_id"] = o.WxtunnelRemoteId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApPortConfig) UnmarshalJSON(data []byte) (err error) {
	varApPortConfig := _ApPortConfig{}

	err = json.Unmarshal(data, &varApPortConfig)

	if err != nil {
		return err
	}

	*o = ApPortConfig(varApPortConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "dynamic_vlan")
		delete(additionalProperties, "enable_mac_auth")
		delete(additionalProperties, "forwarding")
		delete(additionalProperties, "mac_auth_protocol")
		delete(additionalProperties, "mist_nac")
		delete(additionalProperties, "mx_tunnel_id")
		delete(additionalProperties, "mxtunnel_name")
		delete(additionalProperties, "port_auth")
		delete(additionalProperties, "port_vlan_id")
		delete(additionalProperties, "radius_config")
		delete(additionalProperties, "radsec")
		delete(additionalProperties, "vlan_id")
		delete(additionalProperties, "vland_ids")
		delete(additionalProperties, "wxtunnel_id")
		delete(additionalProperties, "wxtunnel_remote_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApPortConfig struct {
	value *ApPortConfig
	isSet bool
}

func (v NullableApPortConfig) Get() *ApPortConfig {
	return v.value
}

func (v *NullableApPortConfig) Set(val *ApPortConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableApPortConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableApPortConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApPortConfig(val *ApPortConfig) *NullableApPortConfig {
	return &NullableApPortConfig{value: val, isSet: true}
}

func (v NullableApPortConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApPortConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


