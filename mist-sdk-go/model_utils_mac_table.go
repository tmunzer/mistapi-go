/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the UtilsMacTable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UtilsMacTable{}

// UtilsMacTable struct for UtilsMacTable
type UtilsMacTable struct {
	MacAddress *string `json:"mac_address,omitempty"`
	PortId *string `json:"port_id,omitempty"`
	VlanId *string `json:"vlan_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UtilsMacTable UtilsMacTable

// NewUtilsMacTable instantiates a new UtilsMacTable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUtilsMacTable() *UtilsMacTable {
	this := UtilsMacTable{}
	return &this
}

// NewUtilsMacTableWithDefaults instantiates a new UtilsMacTable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUtilsMacTableWithDefaults() *UtilsMacTable {
	this := UtilsMacTable{}
	return &this
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *UtilsMacTable) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress) {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsMacTable) GetMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MacAddress) {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *UtilsMacTable) HasMacAddress() bool {
	if o != nil && !IsNil(o.MacAddress) {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *UtilsMacTable) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetPortId returns the PortId field value if set, zero value otherwise.
func (o *UtilsMacTable) GetPortId() string {
	if o == nil || IsNil(o.PortId) {
		var ret string
		return ret
	}
	return *o.PortId
}

// GetPortIdOk returns a tuple with the PortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsMacTable) GetPortIdOk() (*string, bool) {
	if o == nil || IsNil(o.PortId) {
		return nil, false
	}
	return o.PortId, true
}

// HasPortId returns a boolean if a field has been set.
func (o *UtilsMacTable) HasPortId() bool {
	if o != nil && !IsNil(o.PortId) {
		return true
	}

	return false
}

// SetPortId gets a reference to the given string and assigns it to the PortId field.
func (o *UtilsMacTable) SetPortId(v string) {
	o.PortId = &v
}

// GetVlanId returns the VlanId field value if set, zero value otherwise.
func (o *UtilsMacTable) GetVlanId() string {
	if o == nil || IsNil(o.VlanId) {
		var ret string
		return ret
	}
	return *o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsMacTable) GetVlanIdOk() (*string, bool) {
	if o == nil || IsNil(o.VlanId) {
		return nil, false
	}
	return o.VlanId, true
}

// HasVlanId returns a boolean if a field has been set.
func (o *UtilsMacTable) HasVlanId() bool {
	if o != nil && !IsNil(o.VlanId) {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given string and assigns it to the VlanId field.
func (o *UtilsMacTable) SetVlanId(v string) {
	o.VlanId = &v
}

func (o UtilsMacTable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UtilsMacTable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MacAddress) {
		toSerialize["mac_address"] = o.MacAddress
	}
	if !IsNil(o.PortId) {
		toSerialize["port_id"] = o.PortId
	}
	if !IsNil(o.VlanId) {
		toSerialize["vlan_id"] = o.VlanId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UtilsMacTable) UnmarshalJSON(data []byte) (err error) {
	varUtilsMacTable := _UtilsMacTable{}

	err = json.Unmarshal(data, &varUtilsMacTable)

	if err != nil {
		return err
	}

	*o = UtilsMacTable(varUtilsMacTable)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "mac_address")
		delete(additionalProperties, "port_id")
		delete(additionalProperties, "vlan_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUtilsMacTable struct {
	value *UtilsMacTable
	isSet bool
}

func (v NullableUtilsMacTable) Get() *UtilsMacTable {
	return v.value
}

func (v *NullableUtilsMacTable) Set(val *UtilsMacTable) {
	v.value = val
	v.isSet = true
}

func (v NullableUtilsMacTable) IsSet() bool {
	return v.isSet
}

func (v *NullableUtilsMacTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUtilsMacTable(val *UtilsMacTable) *NullableUtilsMacTable {
	return &NullableUtilsMacTable{value: val, isSet: true}
}

func (v NullableUtilsMacTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUtilsMacTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


