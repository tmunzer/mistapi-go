/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the WlanAuth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WlanAuth{}

// WlanAuth authentication wlan settings
type WlanAuth struct {
	// SAE anti-clogging token threshold
	AnticlogThreshold *int32 `json:"anticlog_threshold,omitempty"`
	// whether to trigger EAP reauth when the session ends
	EapReauth *bool `json:"eap_reauth,omitempty"`
	// whether to enable MAC Auth, uses the same auth_servers
	EnableMacAuth *bool `json:"enable_mac_auth,omitempty"`
	// when type=wep
	KeyIdx *int32 `json:"key_idx,omitempty"`
	// when type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length
	Keys []*string `json:"keys,omitempty"`
	// whether to only use multi_psk
	MultiPskOnly *bool `json:"multi_psk_only,omitempty"`
	Owe *WlanAuthOwe `json:"owe,omitempty"`
	// when type=psk / eap, one or more of wpa2-ccmp / wpa1-tkip / wpa1-ccmp / wpa2-tkip
	Pairwise []WlanAuthPairwiseItem `json:"pairwise,omitempty"`
	// whether private wlan is enabled. only applicable to multi_psk mode
	PrivateWlan *bool `json:"private_wlan,omitempty"`
	// when type=psk, 8-64 characters, or 64 hex characters
	Psk NullableString `json:"psk,omitempty"`
	Type WlanAuthType `json:"type"`
	// enable WEP as secondary auth
	WepAsSecondaryAuth *bool `json:"wep_as_secondary_auth,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WlanAuth WlanAuth

// NewWlanAuth instantiates a new WlanAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWlanAuth(type_ WlanAuthType) *WlanAuth {
	this := WlanAuth{}
	var anticlogThreshold int32 = 16
	this.AnticlogThreshold = &anticlogThreshold
	var eapReauth bool = false
	this.EapReauth = &eapReauth
	var enableMacAuth bool = false
	this.EnableMacAuth = &enableMacAuth
	var keyIdx int32 = 1
	this.KeyIdx = &keyIdx
	var multiPskOnly bool = false
	this.MultiPskOnly = &multiPskOnly
	var owe WlanAuthOwe = WLANAUTHOWE_DISABLED
	this.Owe = &owe
	var privateWlan bool = false
	this.PrivateWlan = &privateWlan
	var psk string = ""
	this.Psk = *NewNullableString(&psk)
	this.Type = type_
	var wepAsSecondaryAuth bool = false
	this.WepAsSecondaryAuth = &wepAsSecondaryAuth
	return &this
}

// NewWlanAuthWithDefaults instantiates a new WlanAuth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWlanAuthWithDefaults() *WlanAuth {
	this := WlanAuth{}
	var anticlogThreshold int32 = 16
	this.AnticlogThreshold = &anticlogThreshold
	var eapReauth bool = false
	this.EapReauth = &eapReauth
	var enableMacAuth bool = false
	this.EnableMacAuth = &enableMacAuth
	var keyIdx int32 = 1
	this.KeyIdx = &keyIdx
	var multiPskOnly bool = false
	this.MultiPskOnly = &multiPskOnly
	var owe WlanAuthOwe = WLANAUTHOWE_DISABLED
	this.Owe = &owe
	var privateWlan bool = false
	this.PrivateWlan = &privateWlan
	var psk string = ""
	this.Psk = *NewNullableString(&psk)
	var type_ WlanAuthType = WLANAUTHTYPE_OPEN
	this.Type = type_
	var wepAsSecondaryAuth bool = false
	this.WepAsSecondaryAuth = &wepAsSecondaryAuth
	return &this
}

// GetAnticlogThreshold returns the AnticlogThreshold field value if set, zero value otherwise.
func (o *WlanAuth) GetAnticlogThreshold() int32 {
	if o == nil || IsNil(o.AnticlogThreshold) {
		var ret int32
		return ret
	}
	return *o.AnticlogThreshold
}

// GetAnticlogThresholdOk returns a tuple with the AnticlogThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanAuth) GetAnticlogThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.AnticlogThreshold) {
		return nil, false
	}
	return o.AnticlogThreshold, true
}

// HasAnticlogThreshold returns a boolean if a field has been set.
func (o *WlanAuth) HasAnticlogThreshold() bool {
	if o != nil && !IsNil(o.AnticlogThreshold) {
		return true
	}

	return false
}

// SetAnticlogThreshold gets a reference to the given int32 and assigns it to the AnticlogThreshold field.
func (o *WlanAuth) SetAnticlogThreshold(v int32) {
	o.AnticlogThreshold = &v
}

// GetEapReauth returns the EapReauth field value if set, zero value otherwise.
func (o *WlanAuth) GetEapReauth() bool {
	if o == nil || IsNil(o.EapReauth) {
		var ret bool
		return ret
	}
	return *o.EapReauth
}

// GetEapReauthOk returns a tuple with the EapReauth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanAuth) GetEapReauthOk() (*bool, bool) {
	if o == nil || IsNil(o.EapReauth) {
		return nil, false
	}
	return o.EapReauth, true
}

// HasEapReauth returns a boolean if a field has been set.
func (o *WlanAuth) HasEapReauth() bool {
	if o != nil && !IsNil(o.EapReauth) {
		return true
	}

	return false
}

// SetEapReauth gets a reference to the given bool and assigns it to the EapReauth field.
func (o *WlanAuth) SetEapReauth(v bool) {
	o.EapReauth = &v
}

// GetEnableMacAuth returns the EnableMacAuth field value if set, zero value otherwise.
func (o *WlanAuth) GetEnableMacAuth() bool {
	if o == nil || IsNil(o.EnableMacAuth) {
		var ret bool
		return ret
	}
	return *o.EnableMacAuth
}

// GetEnableMacAuthOk returns a tuple with the EnableMacAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanAuth) GetEnableMacAuthOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMacAuth) {
		return nil, false
	}
	return o.EnableMacAuth, true
}

// HasEnableMacAuth returns a boolean if a field has been set.
func (o *WlanAuth) HasEnableMacAuth() bool {
	if o != nil && !IsNil(o.EnableMacAuth) {
		return true
	}

	return false
}

// SetEnableMacAuth gets a reference to the given bool and assigns it to the EnableMacAuth field.
func (o *WlanAuth) SetEnableMacAuth(v bool) {
	o.EnableMacAuth = &v
}

// GetKeyIdx returns the KeyIdx field value if set, zero value otherwise.
func (o *WlanAuth) GetKeyIdx() int32 {
	if o == nil || IsNil(o.KeyIdx) {
		var ret int32
		return ret
	}
	return *o.KeyIdx
}

// GetKeyIdxOk returns a tuple with the KeyIdx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanAuth) GetKeyIdxOk() (*int32, bool) {
	if o == nil || IsNil(o.KeyIdx) {
		return nil, false
	}
	return o.KeyIdx, true
}

// HasKeyIdx returns a boolean if a field has been set.
func (o *WlanAuth) HasKeyIdx() bool {
	if o != nil && !IsNil(o.KeyIdx) {
		return true
	}

	return false
}

// SetKeyIdx gets a reference to the given int32 and assigns it to the KeyIdx field.
func (o *WlanAuth) SetKeyIdx(v int32) {
	o.KeyIdx = &v
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *WlanAuth) GetKeys() []*string {
	if o == nil || IsNil(o.Keys) {
		var ret []*string
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanAuth) GetKeysOk() ([]*string, bool) {
	if o == nil || IsNil(o.Keys) {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *WlanAuth) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []*string and assigns it to the Keys field.
func (o *WlanAuth) SetKeys(v []*string) {
	o.Keys = v
}

// GetMultiPskOnly returns the MultiPskOnly field value if set, zero value otherwise.
func (o *WlanAuth) GetMultiPskOnly() bool {
	if o == nil || IsNil(o.MultiPskOnly) {
		var ret bool
		return ret
	}
	return *o.MultiPskOnly
}

// GetMultiPskOnlyOk returns a tuple with the MultiPskOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanAuth) GetMultiPskOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.MultiPskOnly) {
		return nil, false
	}
	return o.MultiPskOnly, true
}

// HasMultiPskOnly returns a boolean if a field has been set.
func (o *WlanAuth) HasMultiPskOnly() bool {
	if o != nil && !IsNil(o.MultiPskOnly) {
		return true
	}

	return false
}

// SetMultiPskOnly gets a reference to the given bool and assigns it to the MultiPskOnly field.
func (o *WlanAuth) SetMultiPskOnly(v bool) {
	o.MultiPskOnly = &v
}

// GetOwe returns the Owe field value if set, zero value otherwise.
func (o *WlanAuth) GetOwe() WlanAuthOwe {
	if o == nil || IsNil(o.Owe) {
		var ret WlanAuthOwe
		return ret
	}
	return *o.Owe
}

// GetOweOk returns a tuple with the Owe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanAuth) GetOweOk() (*WlanAuthOwe, bool) {
	if o == nil || IsNil(o.Owe) {
		return nil, false
	}
	return o.Owe, true
}

// HasOwe returns a boolean if a field has been set.
func (o *WlanAuth) HasOwe() bool {
	if o != nil && !IsNil(o.Owe) {
		return true
	}

	return false
}

// SetOwe gets a reference to the given WlanAuthOwe and assigns it to the Owe field.
func (o *WlanAuth) SetOwe(v WlanAuthOwe) {
	o.Owe = &v
}

// GetPairwise returns the Pairwise field value if set, zero value otherwise.
func (o *WlanAuth) GetPairwise() []WlanAuthPairwiseItem {
	if o == nil || IsNil(o.Pairwise) {
		var ret []WlanAuthPairwiseItem
		return ret
	}
	return o.Pairwise
}

// GetPairwiseOk returns a tuple with the Pairwise field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanAuth) GetPairwiseOk() ([]WlanAuthPairwiseItem, bool) {
	if o == nil || IsNil(o.Pairwise) {
		return nil, false
	}
	return o.Pairwise, true
}

// HasPairwise returns a boolean if a field has been set.
func (o *WlanAuth) HasPairwise() bool {
	if o != nil && !IsNil(o.Pairwise) {
		return true
	}

	return false
}

// SetPairwise gets a reference to the given []WlanAuthPairwiseItem and assigns it to the Pairwise field.
func (o *WlanAuth) SetPairwise(v []WlanAuthPairwiseItem) {
	o.Pairwise = v
}

// GetPrivateWlan returns the PrivateWlan field value if set, zero value otherwise.
func (o *WlanAuth) GetPrivateWlan() bool {
	if o == nil || IsNil(o.PrivateWlan) {
		var ret bool
		return ret
	}
	return *o.PrivateWlan
}

// GetPrivateWlanOk returns a tuple with the PrivateWlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanAuth) GetPrivateWlanOk() (*bool, bool) {
	if o == nil || IsNil(o.PrivateWlan) {
		return nil, false
	}
	return o.PrivateWlan, true
}

// HasPrivateWlan returns a boolean if a field has been set.
func (o *WlanAuth) HasPrivateWlan() bool {
	if o != nil && !IsNil(o.PrivateWlan) {
		return true
	}

	return false
}

// SetPrivateWlan gets a reference to the given bool and assigns it to the PrivateWlan field.
func (o *WlanAuth) SetPrivateWlan(v bool) {
	o.PrivateWlan = &v
}

// GetPsk returns the Psk field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WlanAuth) GetPsk() string {
	if o == nil || IsNil(o.Psk.Get()) {
		var ret string
		return ret
	}
	return *o.Psk.Get()
}

// GetPskOk returns a tuple with the Psk field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WlanAuth) GetPskOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Psk.Get(), o.Psk.IsSet()
}

// HasPsk returns a boolean if a field has been set.
func (o *WlanAuth) HasPsk() bool {
	if o != nil && o.Psk.IsSet() {
		return true
	}

	return false
}

// SetPsk gets a reference to the given NullableString and assigns it to the Psk field.
func (o *WlanAuth) SetPsk(v string) {
	o.Psk.Set(&v)
}
// SetPskNil sets the value for Psk to be an explicit nil
func (o *WlanAuth) SetPskNil() {
	o.Psk.Set(nil)
}

// UnsetPsk ensures that no value is present for Psk, not even an explicit nil
func (o *WlanAuth) UnsetPsk() {
	o.Psk.Unset()
}

// GetType returns the Type field value
func (o *WlanAuth) GetType() WlanAuthType {
	if o == nil {
		var ret WlanAuthType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *WlanAuth) GetTypeOk() (*WlanAuthType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *WlanAuth) SetType(v WlanAuthType) {
	o.Type = v
}

// GetWepAsSecondaryAuth returns the WepAsSecondaryAuth field value if set, zero value otherwise.
func (o *WlanAuth) GetWepAsSecondaryAuth() bool {
	if o == nil || IsNil(o.WepAsSecondaryAuth) {
		var ret bool
		return ret
	}
	return *o.WepAsSecondaryAuth
}

// GetWepAsSecondaryAuthOk returns a tuple with the WepAsSecondaryAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanAuth) GetWepAsSecondaryAuthOk() (*bool, bool) {
	if o == nil || IsNil(o.WepAsSecondaryAuth) {
		return nil, false
	}
	return o.WepAsSecondaryAuth, true
}

// HasWepAsSecondaryAuth returns a boolean if a field has been set.
func (o *WlanAuth) HasWepAsSecondaryAuth() bool {
	if o != nil && !IsNil(o.WepAsSecondaryAuth) {
		return true
	}

	return false
}

// SetWepAsSecondaryAuth gets a reference to the given bool and assigns it to the WepAsSecondaryAuth field.
func (o *WlanAuth) SetWepAsSecondaryAuth(v bool) {
	o.WepAsSecondaryAuth = &v
}

func (o WlanAuth) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WlanAuth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AnticlogThreshold) {
		toSerialize["anticlog_threshold"] = o.AnticlogThreshold
	}
	if !IsNil(o.EapReauth) {
		toSerialize["eap_reauth"] = o.EapReauth
	}
	if !IsNil(o.EnableMacAuth) {
		toSerialize["enable_mac_auth"] = o.EnableMacAuth
	}
	if !IsNil(o.KeyIdx) {
		toSerialize["key_idx"] = o.KeyIdx
	}
	if !IsNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}
	if !IsNil(o.MultiPskOnly) {
		toSerialize["multi_psk_only"] = o.MultiPskOnly
	}
	if !IsNil(o.Owe) {
		toSerialize["owe"] = o.Owe
	}
	if !IsNil(o.Pairwise) {
		toSerialize["pairwise"] = o.Pairwise
	}
	if !IsNil(o.PrivateWlan) {
		toSerialize["private_wlan"] = o.PrivateWlan
	}
	if o.Psk.IsSet() {
		toSerialize["psk"] = o.Psk.Get()
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.WepAsSecondaryAuth) {
		toSerialize["wep_as_secondary_auth"] = o.WepAsSecondaryAuth
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WlanAuth) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWlanAuth := _WlanAuth{}

	err = json.Unmarshal(data, &varWlanAuth)

	if err != nil {
		return err
	}

	*o = WlanAuth(varWlanAuth)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "anticlog_threshold")
		delete(additionalProperties, "eap_reauth")
		delete(additionalProperties, "enable_mac_auth")
		delete(additionalProperties, "key_idx")
		delete(additionalProperties, "keys")
		delete(additionalProperties, "multi_psk_only")
		delete(additionalProperties, "owe")
		delete(additionalProperties, "pairwise")
		delete(additionalProperties, "private_wlan")
		delete(additionalProperties, "psk")
		delete(additionalProperties, "type")
		delete(additionalProperties, "wep_as_secondary_auth")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWlanAuth struct {
	value *WlanAuth
	isSet bool
}

func (v NullableWlanAuth) Get() *WlanAuth {
	return v.value
}

func (v *NullableWlanAuth) Set(val *WlanAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableWlanAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableWlanAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWlanAuth(val *WlanAuth) *NullableWlanAuth {
	return &NullableWlanAuth{value: val, isSet: true}
}

func (v NullableWlanAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWlanAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


