/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the MapSiteReplaceFileJsonTransform type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MapSiteReplaceFileJsonTransform{}

// MapSiteReplaceFileJsonTransform If `transform` is provided, all the locations of the objects on the map (AP, Zone, Vbeacon, Beacon) will be transformed as well (relative to the new Map)
type MapSiteReplaceFileJsonTransform struct {
	// whether to rotate the replacing image, in degrees
	Rotation *float32 `json:"rotation,omitempty"`
	// whether to scale the replacing image
	Scale *float32 `json:"scale,omitempty"`
	// where the (0, 0) of the new image is relative to the original map
	X *float32 `json:"x,omitempty"`
	// where the (0, 0) of the new image is relative to the original map
	Y *float32 `json:"y,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MapSiteReplaceFileJsonTransform MapSiteReplaceFileJsonTransform

// NewMapSiteReplaceFileJsonTransform instantiates a new MapSiteReplaceFileJsonTransform object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMapSiteReplaceFileJsonTransform() *MapSiteReplaceFileJsonTransform {
	this := MapSiteReplaceFileJsonTransform{}
	var rotation float32 = 0
	this.Rotation = &rotation
	var scale float32 = 1
	this.Scale = &scale
	var x float32 = 0
	this.X = &x
	var y float32 = 0
	this.Y = &y
	return &this
}

// NewMapSiteReplaceFileJsonTransformWithDefaults instantiates a new MapSiteReplaceFileJsonTransform object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMapSiteReplaceFileJsonTransformWithDefaults() *MapSiteReplaceFileJsonTransform {
	this := MapSiteReplaceFileJsonTransform{}
	var rotation float32 = 0
	this.Rotation = &rotation
	var scale float32 = 1
	this.Scale = &scale
	var x float32 = 0
	this.X = &x
	var y float32 = 0
	this.Y = &y
	return &this
}

// GetRotation returns the Rotation field value if set, zero value otherwise.
func (o *MapSiteReplaceFileJsonTransform) GetRotation() float32 {
	if o == nil || IsNil(o.Rotation) {
		var ret float32
		return ret
	}
	return *o.Rotation
}

// GetRotationOk returns a tuple with the Rotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapSiteReplaceFileJsonTransform) GetRotationOk() (*float32, bool) {
	if o == nil || IsNil(o.Rotation) {
		return nil, false
	}
	return o.Rotation, true
}

// HasRotation returns a boolean if a field has been set.
func (o *MapSiteReplaceFileJsonTransform) HasRotation() bool {
	if o != nil && !IsNil(o.Rotation) {
		return true
	}

	return false
}

// SetRotation gets a reference to the given float32 and assigns it to the Rotation field.
func (o *MapSiteReplaceFileJsonTransform) SetRotation(v float32) {
	o.Rotation = &v
}

// GetScale returns the Scale field value if set, zero value otherwise.
func (o *MapSiteReplaceFileJsonTransform) GetScale() float32 {
	if o == nil || IsNil(o.Scale) {
		var ret float32
		return ret
	}
	return *o.Scale
}

// GetScaleOk returns a tuple with the Scale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapSiteReplaceFileJsonTransform) GetScaleOk() (*float32, bool) {
	if o == nil || IsNil(o.Scale) {
		return nil, false
	}
	return o.Scale, true
}

// HasScale returns a boolean if a field has been set.
func (o *MapSiteReplaceFileJsonTransform) HasScale() bool {
	if o != nil && !IsNil(o.Scale) {
		return true
	}

	return false
}

// SetScale gets a reference to the given float32 and assigns it to the Scale field.
func (o *MapSiteReplaceFileJsonTransform) SetScale(v float32) {
	o.Scale = &v
}

// GetX returns the X field value if set, zero value otherwise.
func (o *MapSiteReplaceFileJsonTransform) GetX() float32 {
	if o == nil || IsNil(o.X) {
		var ret float32
		return ret
	}
	return *o.X
}

// GetXOk returns a tuple with the X field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapSiteReplaceFileJsonTransform) GetXOk() (*float32, bool) {
	if o == nil || IsNil(o.X) {
		return nil, false
	}
	return o.X, true
}

// HasX returns a boolean if a field has been set.
func (o *MapSiteReplaceFileJsonTransform) HasX() bool {
	if o != nil && !IsNil(o.X) {
		return true
	}

	return false
}

// SetX gets a reference to the given float32 and assigns it to the X field.
func (o *MapSiteReplaceFileJsonTransform) SetX(v float32) {
	o.X = &v
}

// GetY returns the Y field value if set, zero value otherwise.
func (o *MapSiteReplaceFileJsonTransform) GetY() float32 {
	if o == nil || IsNil(o.Y) {
		var ret float32
		return ret
	}
	return *o.Y
}

// GetYOk returns a tuple with the Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapSiteReplaceFileJsonTransform) GetYOk() (*float32, bool) {
	if o == nil || IsNil(o.Y) {
		return nil, false
	}
	return o.Y, true
}

// HasY returns a boolean if a field has been set.
func (o *MapSiteReplaceFileJsonTransform) HasY() bool {
	if o != nil && !IsNil(o.Y) {
		return true
	}

	return false
}

// SetY gets a reference to the given float32 and assigns it to the Y field.
func (o *MapSiteReplaceFileJsonTransform) SetY(v float32) {
	o.Y = &v
}

func (o MapSiteReplaceFileJsonTransform) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MapSiteReplaceFileJsonTransform) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Rotation) {
		toSerialize["rotation"] = o.Rotation
	}
	if !IsNil(o.Scale) {
		toSerialize["scale"] = o.Scale
	}
	if !IsNil(o.X) {
		toSerialize["x"] = o.X
	}
	if !IsNil(o.Y) {
		toSerialize["y"] = o.Y
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MapSiteReplaceFileJsonTransform) UnmarshalJSON(data []byte) (err error) {
	varMapSiteReplaceFileJsonTransform := _MapSiteReplaceFileJsonTransform{}

	err = json.Unmarshal(data, &varMapSiteReplaceFileJsonTransform)

	if err != nil {
		return err
	}

	*o = MapSiteReplaceFileJsonTransform(varMapSiteReplaceFileJsonTransform)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "rotation")
		delete(additionalProperties, "scale")
		delete(additionalProperties, "x")
		delete(additionalProperties, "y")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMapSiteReplaceFileJsonTransform struct {
	value *MapSiteReplaceFileJsonTransform
	isSet bool
}

func (v NullableMapSiteReplaceFileJsonTransform) Get() *MapSiteReplaceFileJsonTransform {
	return v.value
}

func (v *NullableMapSiteReplaceFileJsonTransform) Set(val *MapSiteReplaceFileJsonTransform) {
	v.value = val
	v.isSet = true
}

func (v NullableMapSiteReplaceFileJsonTransform) IsSet() bool {
	return v.isSet
}

func (v *NullableMapSiteReplaceFileJsonTransform) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapSiteReplaceFileJsonTransform(val *MapSiteReplaceFileJsonTransform) *NullableMapSiteReplaceFileJsonTransform {
	return &NullableMapSiteReplaceFileJsonTransform{value: val, isSet: true}
}

func (v NullableMapSiteReplaceFileJsonTransform) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapSiteReplaceFileJsonTransform) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


