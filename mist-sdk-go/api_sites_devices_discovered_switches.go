/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type SitesDevicesDiscoveredSwitchesAPI interface {

	/*
	CountSiteDiscoveredSwitches countSiteDiscoveredSwitches

	Count Discovered Switches

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@return ApiCountSiteDiscoveredSwitchesRequest
	*/
	CountSiteDiscoveredSwitches(ctx context.Context, siteId string) ApiCountSiteDiscoveredSwitchesRequest

	// CountSiteDiscoveredSwitchesExecute executes the request
	//  @return RepsonseCount
	CountSiteDiscoveredSwitchesExecute(r ApiCountSiteDiscoveredSwitchesRequest) (*RepsonseCount, *http.Response, error)

	/*
	GetSiteDiscoveredSwitchesMetrics getSiteDiscoveredSwitchesMetrics

	Discovered switches related metrics, lists related switch system names & details if not compliant

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@return ApiGetSiteDiscoveredSwitchesMetricsRequest
	*/
	GetSiteDiscoveredSwitchesMetrics(ctx context.Context, siteId string) ApiGetSiteDiscoveredSwitchesMetricsRequest

	// GetSiteDiscoveredSwitchesMetricsExecute executes the request
	//  @return ResponseDswitchesMetrics
	GetSiteDiscoveredSwitchesMetricsExecute(r ApiGetSiteDiscoveredSwitchesMetricsRequest) (*ResponseDswitchesMetrics, *http.Response, error)

	/*
	SearchSiteDiscoveredSwitches searchSiteDiscoveredSwitches

	Search Discovered Switches

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@return ApiSearchSiteDiscoveredSwitchesRequest
	*/
	SearchSiteDiscoveredSwitches(ctx context.Context, siteId string) ApiSearchSiteDiscoveredSwitchesRequest

	// SearchSiteDiscoveredSwitchesExecute executes the request
	//  @return ResponseDiscoveredSwitches
	SearchSiteDiscoveredSwitchesExecute(r ApiSearchSiteDiscoveredSwitchesRequest) (*ResponseDiscoveredSwitches, *http.Response, error)

	/*
	SearchSiteDiscoveredSwitchesMetrics searchSiteDiscoveredSwitchesMetrics

	Search Discovered Switch Metrics

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@return ApiSearchSiteDiscoveredSwitchesMetricsRequest
	*/
	SearchSiteDiscoveredSwitchesMetrics(ctx context.Context, siteId string) ApiSearchSiteDiscoveredSwitchesMetricsRequest

	// SearchSiteDiscoveredSwitchesMetricsExecute executes the request
	//  @return ResponseDiscoveredSwitchMetrics
	SearchSiteDiscoveredSwitchesMetricsExecute(r ApiSearchSiteDiscoveredSwitchesMetricsRequest) (*ResponseDiscoveredSwitchMetrics, *http.Response, error)
}

// SitesDevicesDiscoveredSwitchesAPIService SitesDevicesDiscoveredSwitchesAPI service
type SitesDevicesDiscoveredSwitchesAPIService service

type ApiCountSiteDiscoveredSwitchesRequest struct {
	ctx context.Context
	ApiService SitesDevicesDiscoveredSwitchesAPI
	siteId string
	distinct *SiteDiscoveredSwitchesCountDistinct
	page *int32
	limit *int32
	start *int32
	end *int32
	duration *string
}

func (r ApiCountSiteDiscoveredSwitchesRequest) Distinct(distinct SiteDiscoveredSwitchesCountDistinct) ApiCountSiteDiscoveredSwitchesRequest {
	r.distinct = &distinct
	return r
}

func (r ApiCountSiteDiscoveredSwitchesRequest) Page(page int32) ApiCountSiteDiscoveredSwitchesRequest {
	r.page = &page
	return r
}

func (r ApiCountSiteDiscoveredSwitchesRequest) Limit(limit int32) ApiCountSiteDiscoveredSwitchesRequest {
	r.limit = &limit
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiCountSiteDiscoveredSwitchesRequest) Start(start int32) ApiCountSiteDiscoveredSwitchesRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiCountSiteDiscoveredSwitchesRequest) End(end int32) ApiCountSiteDiscoveredSwitchesRequest {
	r.end = &end
	return r
}

// duration like 7d, 2w
func (r ApiCountSiteDiscoveredSwitchesRequest) Duration(duration string) ApiCountSiteDiscoveredSwitchesRequest {
	r.duration = &duration
	return r
}

func (r ApiCountSiteDiscoveredSwitchesRequest) Execute() (*RepsonseCount, *http.Response, error) {
	return r.ApiService.CountSiteDiscoveredSwitchesExecute(r)
}

/*
CountSiteDiscoveredSwitches countSiteDiscoveredSwitches

Count Discovered Switches

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @return ApiCountSiteDiscoveredSwitchesRequest
*/
func (a *SitesDevicesDiscoveredSwitchesAPIService) CountSiteDiscoveredSwitches(ctx context.Context, siteId string) ApiCountSiteDiscoveredSwitchesRequest {
	return ApiCountSiteDiscoveredSwitchesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return RepsonseCount
func (a *SitesDevicesDiscoveredSwitchesAPIService) CountSiteDiscoveredSwitchesExecute(r ApiCountSiteDiscoveredSwitchesRequest) (*RepsonseCount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RepsonseCount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesDevicesDiscoveredSwitchesAPIService.CountSiteDiscoveredSwitches")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/stats/discovered_switches/count"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.distinct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinct", r.distinct, "")
	} else {
		var defaultValue SiteDiscoveredSwitchesCountDistinct = "system_name"
		r.distinct = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSiteDiscoveredSwitchesMetricsRequest struct {
	ctx context.Context
	ApiService SitesDevicesDiscoveredSwitchesAPI
	siteId string
	threshold *string
	systemName *string
}

// configurable # ap per switch threshold, default 12
func (r ApiGetSiteDiscoveredSwitchesMetricsRequest) Threshold(threshold string) ApiGetSiteDiscoveredSwitchesMetricsRequest {
	r.threshold = &threshold
	return r
}

// system name for switch level metrics, optional
func (r ApiGetSiteDiscoveredSwitchesMetricsRequest) SystemName(systemName string) ApiGetSiteDiscoveredSwitchesMetricsRequest {
	r.systemName = &systemName
	return r
}

func (r ApiGetSiteDiscoveredSwitchesMetricsRequest) Execute() (*ResponseDswitchesMetrics, *http.Response, error) {
	return r.ApiService.GetSiteDiscoveredSwitchesMetricsExecute(r)
}

/*
GetSiteDiscoveredSwitchesMetrics getSiteDiscoveredSwitchesMetrics

Discovered switches related metrics, lists related switch system names & details if not compliant

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @return ApiGetSiteDiscoveredSwitchesMetricsRequest
*/
func (a *SitesDevicesDiscoveredSwitchesAPIService) GetSiteDiscoveredSwitchesMetrics(ctx context.Context, siteId string) ApiGetSiteDiscoveredSwitchesMetricsRequest {
	return ApiGetSiteDiscoveredSwitchesMetricsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return ResponseDswitchesMetrics
func (a *SitesDevicesDiscoveredSwitchesAPIService) GetSiteDiscoveredSwitchesMetricsExecute(r ApiGetSiteDiscoveredSwitchesMetricsRequest) (*ResponseDswitchesMetrics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseDswitchesMetrics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesDevicesDiscoveredSwitchesAPIService.GetSiteDiscoveredSwitchesMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/stats/discovered_switches/metrics"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.threshold != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "threshold", r.threshold, "")
	}
	if r.systemName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "system_name", r.systemName, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchSiteDiscoveredSwitchesRequest struct {
	ctx context.Context
	ApiService SitesDevicesDiscoveredSwitchesAPI
	siteId string
	adopted *bool
	systemName *string
	hostname *string
	vendor *string
	model *string
	version *string
	limit *int32
	start *int32
	end *int32
	duration *string
}

func (r ApiSearchSiteDiscoveredSwitchesRequest) Adopted(adopted bool) ApiSearchSiteDiscoveredSwitchesRequest {
	r.adopted = &adopted
	return r
}

func (r ApiSearchSiteDiscoveredSwitchesRequest) SystemName(systemName string) ApiSearchSiteDiscoveredSwitchesRequest {
	r.systemName = &systemName
	return r
}

func (r ApiSearchSiteDiscoveredSwitchesRequest) Hostname(hostname string) ApiSearchSiteDiscoveredSwitchesRequest {
	r.hostname = &hostname
	return r
}

func (r ApiSearchSiteDiscoveredSwitchesRequest) Vendor(vendor string) ApiSearchSiteDiscoveredSwitchesRequest {
	r.vendor = &vendor
	return r
}

func (r ApiSearchSiteDiscoveredSwitchesRequest) Model(model string) ApiSearchSiteDiscoveredSwitchesRequest {
	r.model = &model
	return r
}

func (r ApiSearchSiteDiscoveredSwitchesRequest) Version(version string) ApiSearchSiteDiscoveredSwitchesRequest {
	r.version = &version
	return r
}

func (r ApiSearchSiteDiscoveredSwitchesRequest) Limit(limit int32) ApiSearchSiteDiscoveredSwitchesRequest {
	r.limit = &limit
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiSearchSiteDiscoveredSwitchesRequest) Start(start int32) ApiSearchSiteDiscoveredSwitchesRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiSearchSiteDiscoveredSwitchesRequest) End(end int32) ApiSearchSiteDiscoveredSwitchesRequest {
	r.end = &end
	return r
}

// duration like 7d, 2w
func (r ApiSearchSiteDiscoveredSwitchesRequest) Duration(duration string) ApiSearchSiteDiscoveredSwitchesRequest {
	r.duration = &duration
	return r
}

func (r ApiSearchSiteDiscoveredSwitchesRequest) Execute() (*ResponseDiscoveredSwitches, *http.Response, error) {
	return r.ApiService.SearchSiteDiscoveredSwitchesExecute(r)
}

/*
SearchSiteDiscoveredSwitches searchSiteDiscoveredSwitches

Search Discovered Switches

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @return ApiSearchSiteDiscoveredSwitchesRequest
*/
func (a *SitesDevicesDiscoveredSwitchesAPIService) SearchSiteDiscoveredSwitches(ctx context.Context, siteId string) ApiSearchSiteDiscoveredSwitchesRequest {
	return ApiSearchSiteDiscoveredSwitchesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return ResponseDiscoveredSwitches
func (a *SitesDevicesDiscoveredSwitchesAPIService) SearchSiteDiscoveredSwitchesExecute(r ApiSearchSiteDiscoveredSwitchesRequest) (*ResponseDiscoveredSwitches, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseDiscoveredSwitches
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesDevicesDiscoveredSwitchesAPIService.SearchSiteDiscoveredSwitches")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/stats/discovered_switches/search"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.adopted != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "adopted", r.adopted, "")
	}
	if r.systemName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "system_name", r.systemName, "")
	}
	if r.hostname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hostname", r.hostname, "")
	}
	if r.vendor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vendor", r.vendor, "")
	}
	if r.model != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "model", r.model, "")
	}
	if r.version != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchSiteDiscoveredSwitchesMetricsRequest struct {
	ctx context.Context
	ApiService SitesDevicesDiscoveredSwitchesAPI
	siteId string
	scope *DiscoveredSwitchesMetricScope
	type_ *DiscoveredSwitchMetricType
	limit *int32
	start *int32
	end *int32
	duration *string
}

// metric scope
func (r ApiSearchSiteDiscoveredSwitchesMetricsRequest) Scope(scope DiscoveredSwitchesMetricScope) ApiSearchSiteDiscoveredSwitchesMetricsRequest {
	r.scope = &scope
	return r
}

// metric type
func (r ApiSearchSiteDiscoveredSwitchesMetricsRequest) Type_(type_ DiscoveredSwitchMetricType) ApiSearchSiteDiscoveredSwitchesMetricsRequest {
	r.type_ = &type_
	return r
}

func (r ApiSearchSiteDiscoveredSwitchesMetricsRequest) Limit(limit int32) ApiSearchSiteDiscoveredSwitchesMetricsRequest {
	r.limit = &limit
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiSearchSiteDiscoveredSwitchesMetricsRequest) Start(start int32) ApiSearchSiteDiscoveredSwitchesMetricsRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiSearchSiteDiscoveredSwitchesMetricsRequest) End(end int32) ApiSearchSiteDiscoveredSwitchesMetricsRequest {
	r.end = &end
	return r
}

// duration like 7d, 2w
func (r ApiSearchSiteDiscoveredSwitchesMetricsRequest) Duration(duration string) ApiSearchSiteDiscoveredSwitchesMetricsRequest {
	r.duration = &duration
	return r
}

func (r ApiSearchSiteDiscoveredSwitchesMetricsRequest) Execute() (*ResponseDiscoveredSwitchMetrics, *http.Response, error) {
	return r.ApiService.SearchSiteDiscoveredSwitchesMetricsExecute(r)
}

/*
SearchSiteDiscoveredSwitchesMetrics searchSiteDiscoveredSwitchesMetrics

Search Discovered Switch Metrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @return ApiSearchSiteDiscoveredSwitchesMetricsRequest
*/
func (a *SitesDevicesDiscoveredSwitchesAPIService) SearchSiteDiscoveredSwitchesMetrics(ctx context.Context, siteId string) ApiSearchSiteDiscoveredSwitchesMetricsRequest {
	return ApiSearchSiteDiscoveredSwitchesMetricsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return ResponseDiscoveredSwitchMetrics
func (a *SitesDevicesDiscoveredSwitchesAPIService) SearchSiteDiscoveredSwitchesMetricsExecute(r ApiSearchSiteDiscoveredSwitchesMetricsRequest) (*ResponseDiscoveredSwitchMetrics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseDiscoveredSwitchMetrics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesDevicesDiscoveredSwitchesAPIService.SearchSiteDiscoveredSwitchesMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/stats/discovered_switch_metrics/search"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	} else {
		var defaultValue DiscoveredSwitchesMetricScope = "site"
		r.scope = &defaultValue
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
