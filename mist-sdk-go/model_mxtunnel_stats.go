/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the MxtunnelStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MxtunnelStats{}

// MxtunnelStats MxTunnels statistics
type MxtunnelStats struct {
	Ap *string `json:"ap,omitempty"`
	ForSite *bool `json:"for_site,omitempty"`
	LastSeen *int32 `json:"last_seen,omitempty"`
	MxclusterId *string `json:"mxcluster_id,omitempty"`
	MxedgeId *string `json:"mxedge_id,omitempty"`
	MxtunnelId *string `json:"mxtunnel_id,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	// MxEdge ID of the peer(mist edge to mist edge tunnel)
	PeerMxedgeId *string `json:"peer_mxedge_id,omitempty"`
	RemoteIp *string `json:"remote_ip,omitempty"`
	RemotePort *int32 `json:"remote_port,omitempty"`
	RxControlPkts *int32 `json:"rx_control_pkts,omitempty"`
	// list of sessions
	Sessions []MxtunnelStatsSession `json:"sessions,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	State *MxtunnelStatsState `json:"state,omitempty"`
	TxControlPkts *int32 `json:"tx_control_pkts,omitempty"`
	Uptime *int32 `json:"uptime,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MxtunnelStats MxtunnelStats

// NewMxtunnelStats instantiates a new MxtunnelStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMxtunnelStats() *MxtunnelStats {
	this := MxtunnelStats{}
	return &this
}

// NewMxtunnelStatsWithDefaults instantiates a new MxtunnelStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMxtunnelStatsWithDefaults() *MxtunnelStats {
	this := MxtunnelStats{}
	return &this
}

// GetAp returns the Ap field value if set, zero value otherwise.
func (o *MxtunnelStats) GetAp() string {
	if o == nil || IsNil(o.Ap) {
		var ret string
		return ret
	}
	return *o.Ap
}

// GetApOk returns a tuple with the Ap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxtunnelStats) GetApOk() (*string, bool) {
	if o == nil || IsNil(o.Ap) {
		return nil, false
	}
	return o.Ap, true
}

// HasAp returns a boolean if a field has been set.
func (o *MxtunnelStats) HasAp() bool {
	if o != nil && !IsNil(o.Ap) {
		return true
	}

	return false
}

// SetAp gets a reference to the given string and assigns it to the Ap field.
func (o *MxtunnelStats) SetAp(v string) {
	o.Ap = &v
}

// GetForSite returns the ForSite field value if set, zero value otherwise.
func (o *MxtunnelStats) GetForSite() bool {
	if o == nil || IsNil(o.ForSite) {
		var ret bool
		return ret
	}
	return *o.ForSite
}

// GetForSiteOk returns a tuple with the ForSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxtunnelStats) GetForSiteOk() (*bool, bool) {
	if o == nil || IsNil(o.ForSite) {
		return nil, false
	}
	return o.ForSite, true
}

// HasForSite returns a boolean if a field has been set.
func (o *MxtunnelStats) HasForSite() bool {
	if o != nil && !IsNil(o.ForSite) {
		return true
	}

	return false
}

// SetForSite gets a reference to the given bool and assigns it to the ForSite field.
func (o *MxtunnelStats) SetForSite(v bool) {
	o.ForSite = &v
}

// GetLastSeen returns the LastSeen field value if set, zero value otherwise.
func (o *MxtunnelStats) GetLastSeen() int32 {
	if o == nil || IsNil(o.LastSeen) {
		var ret int32
		return ret
	}
	return *o.LastSeen
}

// GetLastSeenOk returns a tuple with the LastSeen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxtunnelStats) GetLastSeenOk() (*int32, bool) {
	if o == nil || IsNil(o.LastSeen) {
		return nil, false
	}
	return o.LastSeen, true
}

// HasLastSeen returns a boolean if a field has been set.
func (o *MxtunnelStats) HasLastSeen() bool {
	if o != nil && !IsNil(o.LastSeen) {
		return true
	}

	return false
}

// SetLastSeen gets a reference to the given int32 and assigns it to the LastSeen field.
func (o *MxtunnelStats) SetLastSeen(v int32) {
	o.LastSeen = &v
}

// GetMxclusterId returns the MxclusterId field value if set, zero value otherwise.
func (o *MxtunnelStats) GetMxclusterId() string {
	if o == nil || IsNil(o.MxclusterId) {
		var ret string
		return ret
	}
	return *o.MxclusterId
}

// GetMxclusterIdOk returns a tuple with the MxclusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxtunnelStats) GetMxclusterIdOk() (*string, bool) {
	if o == nil || IsNil(o.MxclusterId) {
		return nil, false
	}
	return o.MxclusterId, true
}

// HasMxclusterId returns a boolean if a field has been set.
func (o *MxtunnelStats) HasMxclusterId() bool {
	if o != nil && !IsNil(o.MxclusterId) {
		return true
	}

	return false
}

// SetMxclusterId gets a reference to the given string and assigns it to the MxclusterId field.
func (o *MxtunnelStats) SetMxclusterId(v string) {
	o.MxclusterId = &v
}

// GetMxedgeId returns the MxedgeId field value if set, zero value otherwise.
func (o *MxtunnelStats) GetMxedgeId() string {
	if o == nil || IsNil(o.MxedgeId) {
		var ret string
		return ret
	}
	return *o.MxedgeId
}

// GetMxedgeIdOk returns a tuple with the MxedgeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxtunnelStats) GetMxedgeIdOk() (*string, bool) {
	if o == nil || IsNil(o.MxedgeId) {
		return nil, false
	}
	return o.MxedgeId, true
}

// HasMxedgeId returns a boolean if a field has been set.
func (o *MxtunnelStats) HasMxedgeId() bool {
	if o != nil && !IsNil(o.MxedgeId) {
		return true
	}

	return false
}

// SetMxedgeId gets a reference to the given string and assigns it to the MxedgeId field.
func (o *MxtunnelStats) SetMxedgeId(v string) {
	o.MxedgeId = &v
}

// GetMxtunnelId returns the MxtunnelId field value if set, zero value otherwise.
func (o *MxtunnelStats) GetMxtunnelId() string {
	if o == nil || IsNil(o.MxtunnelId) {
		var ret string
		return ret
	}
	return *o.MxtunnelId
}

// GetMxtunnelIdOk returns a tuple with the MxtunnelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxtunnelStats) GetMxtunnelIdOk() (*string, bool) {
	if o == nil || IsNil(o.MxtunnelId) {
		return nil, false
	}
	return o.MxtunnelId, true
}

// HasMxtunnelId returns a boolean if a field has been set.
func (o *MxtunnelStats) HasMxtunnelId() bool {
	if o != nil && !IsNil(o.MxtunnelId) {
		return true
	}

	return false
}

// SetMxtunnelId gets a reference to the given string and assigns it to the MxtunnelId field.
func (o *MxtunnelStats) SetMxtunnelId(v string) {
	o.MxtunnelId = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *MxtunnelStats) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxtunnelStats) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *MxtunnelStats) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *MxtunnelStats) SetOrgId(v string) {
	o.OrgId = &v
}

// GetPeerMxedgeId returns the PeerMxedgeId field value if set, zero value otherwise.
func (o *MxtunnelStats) GetPeerMxedgeId() string {
	if o == nil || IsNil(o.PeerMxedgeId) {
		var ret string
		return ret
	}
	return *o.PeerMxedgeId
}

// GetPeerMxedgeIdOk returns a tuple with the PeerMxedgeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxtunnelStats) GetPeerMxedgeIdOk() (*string, bool) {
	if o == nil || IsNil(o.PeerMxedgeId) {
		return nil, false
	}
	return o.PeerMxedgeId, true
}

// HasPeerMxedgeId returns a boolean if a field has been set.
func (o *MxtunnelStats) HasPeerMxedgeId() bool {
	if o != nil && !IsNil(o.PeerMxedgeId) {
		return true
	}

	return false
}

// SetPeerMxedgeId gets a reference to the given string and assigns it to the PeerMxedgeId field.
func (o *MxtunnelStats) SetPeerMxedgeId(v string) {
	o.PeerMxedgeId = &v
}

// GetRemoteIp returns the RemoteIp field value if set, zero value otherwise.
func (o *MxtunnelStats) GetRemoteIp() string {
	if o == nil || IsNil(o.RemoteIp) {
		var ret string
		return ret
	}
	return *o.RemoteIp
}

// GetRemoteIpOk returns a tuple with the RemoteIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxtunnelStats) GetRemoteIpOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteIp) {
		return nil, false
	}
	return o.RemoteIp, true
}

// HasRemoteIp returns a boolean if a field has been set.
func (o *MxtunnelStats) HasRemoteIp() bool {
	if o != nil && !IsNil(o.RemoteIp) {
		return true
	}

	return false
}

// SetRemoteIp gets a reference to the given string and assigns it to the RemoteIp field.
func (o *MxtunnelStats) SetRemoteIp(v string) {
	o.RemoteIp = &v
}

// GetRemotePort returns the RemotePort field value if set, zero value otherwise.
func (o *MxtunnelStats) GetRemotePort() int32 {
	if o == nil || IsNil(o.RemotePort) {
		var ret int32
		return ret
	}
	return *o.RemotePort
}

// GetRemotePortOk returns a tuple with the RemotePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxtunnelStats) GetRemotePortOk() (*int32, bool) {
	if o == nil || IsNil(o.RemotePort) {
		return nil, false
	}
	return o.RemotePort, true
}

// HasRemotePort returns a boolean if a field has been set.
func (o *MxtunnelStats) HasRemotePort() bool {
	if o != nil && !IsNil(o.RemotePort) {
		return true
	}

	return false
}

// SetRemotePort gets a reference to the given int32 and assigns it to the RemotePort field.
func (o *MxtunnelStats) SetRemotePort(v int32) {
	o.RemotePort = &v
}

// GetRxControlPkts returns the RxControlPkts field value if set, zero value otherwise.
func (o *MxtunnelStats) GetRxControlPkts() int32 {
	if o == nil || IsNil(o.RxControlPkts) {
		var ret int32
		return ret
	}
	return *o.RxControlPkts
}

// GetRxControlPktsOk returns a tuple with the RxControlPkts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxtunnelStats) GetRxControlPktsOk() (*int32, bool) {
	if o == nil || IsNil(o.RxControlPkts) {
		return nil, false
	}
	return o.RxControlPkts, true
}

// HasRxControlPkts returns a boolean if a field has been set.
func (o *MxtunnelStats) HasRxControlPkts() bool {
	if o != nil && !IsNil(o.RxControlPkts) {
		return true
	}

	return false
}

// SetRxControlPkts gets a reference to the given int32 and assigns it to the RxControlPkts field.
func (o *MxtunnelStats) SetRxControlPkts(v int32) {
	o.RxControlPkts = &v
}

// GetSessions returns the Sessions field value if set, zero value otherwise.
func (o *MxtunnelStats) GetSessions() []MxtunnelStatsSession {
	if o == nil || IsNil(o.Sessions) {
		var ret []MxtunnelStatsSession
		return ret
	}
	return o.Sessions
}

// GetSessionsOk returns a tuple with the Sessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxtunnelStats) GetSessionsOk() ([]MxtunnelStatsSession, bool) {
	if o == nil || IsNil(o.Sessions) {
		return nil, false
	}
	return o.Sessions, true
}

// HasSessions returns a boolean if a field has been set.
func (o *MxtunnelStats) HasSessions() bool {
	if o != nil && !IsNil(o.Sessions) {
		return true
	}

	return false
}

// SetSessions gets a reference to the given []MxtunnelStatsSession and assigns it to the Sessions field.
func (o *MxtunnelStats) SetSessions(v []MxtunnelStatsSession) {
	o.Sessions = v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *MxtunnelStats) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxtunnelStats) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *MxtunnelStats) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *MxtunnelStats) SetSiteId(v string) {
	o.SiteId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *MxtunnelStats) GetState() MxtunnelStatsState {
	if o == nil || IsNil(o.State) {
		var ret MxtunnelStatsState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxtunnelStats) GetStateOk() (*MxtunnelStatsState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *MxtunnelStats) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given MxtunnelStatsState and assigns it to the State field.
func (o *MxtunnelStats) SetState(v MxtunnelStatsState) {
	o.State = &v
}

// GetTxControlPkts returns the TxControlPkts field value if set, zero value otherwise.
func (o *MxtunnelStats) GetTxControlPkts() int32 {
	if o == nil || IsNil(o.TxControlPkts) {
		var ret int32
		return ret
	}
	return *o.TxControlPkts
}

// GetTxControlPktsOk returns a tuple with the TxControlPkts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxtunnelStats) GetTxControlPktsOk() (*int32, bool) {
	if o == nil || IsNil(o.TxControlPkts) {
		return nil, false
	}
	return o.TxControlPkts, true
}

// HasTxControlPkts returns a boolean if a field has been set.
func (o *MxtunnelStats) HasTxControlPkts() bool {
	if o != nil && !IsNil(o.TxControlPkts) {
		return true
	}

	return false
}

// SetTxControlPkts gets a reference to the given int32 and assigns it to the TxControlPkts field.
func (o *MxtunnelStats) SetTxControlPkts(v int32) {
	o.TxControlPkts = &v
}

// GetUptime returns the Uptime field value if set, zero value otherwise.
func (o *MxtunnelStats) GetUptime() int32 {
	if o == nil || IsNil(o.Uptime) {
		var ret int32
		return ret
	}
	return *o.Uptime
}

// GetUptimeOk returns a tuple with the Uptime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxtunnelStats) GetUptimeOk() (*int32, bool) {
	if o == nil || IsNil(o.Uptime) {
		return nil, false
	}
	return o.Uptime, true
}

// HasUptime returns a boolean if a field has been set.
func (o *MxtunnelStats) HasUptime() bool {
	if o != nil && !IsNil(o.Uptime) {
		return true
	}

	return false
}

// SetUptime gets a reference to the given int32 and assigns it to the Uptime field.
func (o *MxtunnelStats) SetUptime(v int32) {
	o.Uptime = &v
}

func (o MxtunnelStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MxtunnelStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ap) {
		toSerialize["ap"] = o.Ap
	}
	if !IsNil(o.ForSite) {
		toSerialize["for_site"] = o.ForSite
	}
	if !IsNil(o.LastSeen) {
		toSerialize["last_seen"] = o.LastSeen
	}
	if !IsNil(o.MxclusterId) {
		toSerialize["mxcluster_id"] = o.MxclusterId
	}
	if !IsNil(o.MxedgeId) {
		toSerialize["mxedge_id"] = o.MxedgeId
	}
	if !IsNil(o.MxtunnelId) {
		toSerialize["mxtunnel_id"] = o.MxtunnelId
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.PeerMxedgeId) {
		toSerialize["peer_mxedge_id"] = o.PeerMxedgeId
	}
	if !IsNil(o.RemoteIp) {
		toSerialize["remote_ip"] = o.RemoteIp
	}
	if !IsNil(o.RemotePort) {
		toSerialize["remote_port"] = o.RemotePort
	}
	if !IsNil(o.RxControlPkts) {
		toSerialize["rx_control_pkts"] = o.RxControlPkts
	}
	if !IsNil(o.Sessions) {
		toSerialize["sessions"] = o.Sessions
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.TxControlPkts) {
		toSerialize["tx_control_pkts"] = o.TxControlPkts
	}
	if !IsNil(o.Uptime) {
		toSerialize["uptime"] = o.Uptime
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MxtunnelStats) UnmarshalJSON(data []byte) (err error) {
	varMxtunnelStats := _MxtunnelStats{}

	err = json.Unmarshal(data, &varMxtunnelStats)

	if err != nil {
		return err
	}

	*o = MxtunnelStats(varMxtunnelStats)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ap")
		delete(additionalProperties, "for_site")
		delete(additionalProperties, "last_seen")
		delete(additionalProperties, "mxcluster_id")
		delete(additionalProperties, "mxedge_id")
		delete(additionalProperties, "mxtunnel_id")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "peer_mxedge_id")
		delete(additionalProperties, "remote_ip")
		delete(additionalProperties, "remote_port")
		delete(additionalProperties, "rx_control_pkts")
		delete(additionalProperties, "sessions")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "state")
		delete(additionalProperties, "tx_control_pkts")
		delete(additionalProperties, "uptime")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMxtunnelStats struct {
	value *MxtunnelStats
	isSet bool
}

func (v NullableMxtunnelStats) Get() *MxtunnelStats {
	return v.value
}

func (v *NullableMxtunnelStats) Set(val *MxtunnelStats) {
	v.value = val
	v.isSet = true
}

func (v NullableMxtunnelStats) IsSet() bool {
	return v.isSet
}

func (v *NullableMxtunnelStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMxtunnelStats(val *MxtunnelStats) *NullableMxtunnelStats {
	return &NullableMxtunnelStats{value: val, isSet: true}
}

func (v NullableMxtunnelStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMxtunnelStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


