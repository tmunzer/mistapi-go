/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the ApStatsEnvStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApStatsEnvStat{}

// ApStatsEnvStat device environment, including CPU temperature, Ambient temperature, Humidity, Attitude, Pressure, Accelerometers, Magnetometers and vCore Voltage
type ApStatsEnvStat struct {
	AccelX *float32 `json:"accel_x,omitempty"`
	AccelY *float32 `json:"accel_y,omitempty"`
	AccelZ *float32 `json:"accel_z,omitempty"`
	AmbientTemp *int32 `json:"ambient_temp,omitempty"`
	Attitude *int32 `json:"attitude,omitempty"`
	CpuTemp *int32 `json:"cpu_temp,omitempty"`
	Humidity *int32 `json:"humidity,omitempty"`
	MagneX *float32 `json:"magne_x,omitempty"`
	MagneY *float32 `json:"magne_y,omitempty"`
	MagneZ *float32 `json:"magne_z,omitempty"`
	Pressure *int32 `json:"pressure,omitempty"`
	VcoreVoltage *float32 `json:"vcore_voltage,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApStatsEnvStat ApStatsEnvStat

// NewApStatsEnvStat instantiates a new ApStatsEnvStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApStatsEnvStat() *ApStatsEnvStat {
	this := ApStatsEnvStat{}
	return &this
}

// NewApStatsEnvStatWithDefaults instantiates a new ApStatsEnvStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApStatsEnvStatWithDefaults() *ApStatsEnvStat {
	this := ApStatsEnvStat{}
	return &this
}

// GetAccelX returns the AccelX field value if set, zero value otherwise.
func (o *ApStatsEnvStat) GetAccelX() float32 {
	if o == nil || IsNil(o.AccelX) {
		var ret float32
		return ret
	}
	return *o.AccelX
}

// GetAccelXOk returns a tuple with the AccelX field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsEnvStat) GetAccelXOk() (*float32, bool) {
	if o == nil || IsNil(o.AccelX) {
		return nil, false
	}
	return o.AccelX, true
}

// HasAccelX returns a boolean if a field has been set.
func (o *ApStatsEnvStat) HasAccelX() bool {
	if o != nil && !IsNil(o.AccelX) {
		return true
	}

	return false
}

// SetAccelX gets a reference to the given float32 and assigns it to the AccelX field.
func (o *ApStatsEnvStat) SetAccelX(v float32) {
	o.AccelX = &v
}

// GetAccelY returns the AccelY field value if set, zero value otherwise.
func (o *ApStatsEnvStat) GetAccelY() float32 {
	if o == nil || IsNil(o.AccelY) {
		var ret float32
		return ret
	}
	return *o.AccelY
}

// GetAccelYOk returns a tuple with the AccelY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsEnvStat) GetAccelYOk() (*float32, bool) {
	if o == nil || IsNil(o.AccelY) {
		return nil, false
	}
	return o.AccelY, true
}

// HasAccelY returns a boolean if a field has been set.
func (o *ApStatsEnvStat) HasAccelY() bool {
	if o != nil && !IsNil(o.AccelY) {
		return true
	}

	return false
}

// SetAccelY gets a reference to the given float32 and assigns it to the AccelY field.
func (o *ApStatsEnvStat) SetAccelY(v float32) {
	o.AccelY = &v
}

// GetAccelZ returns the AccelZ field value if set, zero value otherwise.
func (o *ApStatsEnvStat) GetAccelZ() float32 {
	if o == nil || IsNil(o.AccelZ) {
		var ret float32
		return ret
	}
	return *o.AccelZ
}

// GetAccelZOk returns a tuple with the AccelZ field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsEnvStat) GetAccelZOk() (*float32, bool) {
	if o == nil || IsNil(o.AccelZ) {
		return nil, false
	}
	return o.AccelZ, true
}

// HasAccelZ returns a boolean if a field has been set.
func (o *ApStatsEnvStat) HasAccelZ() bool {
	if o != nil && !IsNil(o.AccelZ) {
		return true
	}

	return false
}

// SetAccelZ gets a reference to the given float32 and assigns it to the AccelZ field.
func (o *ApStatsEnvStat) SetAccelZ(v float32) {
	o.AccelZ = &v
}

// GetAmbientTemp returns the AmbientTemp field value if set, zero value otherwise.
func (o *ApStatsEnvStat) GetAmbientTemp() int32 {
	if o == nil || IsNil(o.AmbientTemp) {
		var ret int32
		return ret
	}
	return *o.AmbientTemp
}

// GetAmbientTempOk returns a tuple with the AmbientTemp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsEnvStat) GetAmbientTempOk() (*int32, bool) {
	if o == nil || IsNil(o.AmbientTemp) {
		return nil, false
	}
	return o.AmbientTemp, true
}

// HasAmbientTemp returns a boolean if a field has been set.
func (o *ApStatsEnvStat) HasAmbientTemp() bool {
	if o != nil && !IsNil(o.AmbientTemp) {
		return true
	}

	return false
}

// SetAmbientTemp gets a reference to the given int32 and assigns it to the AmbientTemp field.
func (o *ApStatsEnvStat) SetAmbientTemp(v int32) {
	o.AmbientTemp = &v
}

// GetAttitude returns the Attitude field value if set, zero value otherwise.
func (o *ApStatsEnvStat) GetAttitude() int32 {
	if o == nil || IsNil(o.Attitude) {
		var ret int32
		return ret
	}
	return *o.Attitude
}

// GetAttitudeOk returns a tuple with the Attitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsEnvStat) GetAttitudeOk() (*int32, bool) {
	if o == nil || IsNil(o.Attitude) {
		return nil, false
	}
	return o.Attitude, true
}

// HasAttitude returns a boolean if a field has been set.
func (o *ApStatsEnvStat) HasAttitude() bool {
	if o != nil && !IsNil(o.Attitude) {
		return true
	}

	return false
}

// SetAttitude gets a reference to the given int32 and assigns it to the Attitude field.
func (o *ApStatsEnvStat) SetAttitude(v int32) {
	o.Attitude = &v
}

// GetCpuTemp returns the CpuTemp field value if set, zero value otherwise.
func (o *ApStatsEnvStat) GetCpuTemp() int32 {
	if o == nil || IsNil(o.CpuTemp) {
		var ret int32
		return ret
	}
	return *o.CpuTemp
}

// GetCpuTempOk returns a tuple with the CpuTemp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsEnvStat) GetCpuTempOk() (*int32, bool) {
	if o == nil || IsNil(o.CpuTemp) {
		return nil, false
	}
	return o.CpuTemp, true
}

// HasCpuTemp returns a boolean if a field has been set.
func (o *ApStatsEnvStat) HasCpuTemp() bool {
	if o != nil && !IsNil(o.CpuTemp) {
		return true
	}

	return false
}

// SetCpuTemp gets a reference to the given int32 and assigns it to the CpuTemp field.
func (o *ApStatsEnvStat) SetCpuTemp(v int32) {
	o.CpuTemp = &v
}

// GetHumidity returns the Humidity field value if set, zero value otherwise.
func (o *ApStatsEnvStat) GetHumidity() int32 {
	if o == nil || IsNil(o.Humidity) {
		var ret int32
		return ret
	}
	return *o.Humidity
}

// GetHumidityOk returns a tuple with the Humidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsEnvStat) GetHumidityOk() (*int32, bool) {
	if o == nil || IsNil(o.Humidity) {
		return nil, false
	}
	return o.Humidity, true
}

// HasHumidity returns a boolean if a field has been set.
func (o *ApStatsEnvStat) HasHumidity() bool {
	if o != nil && !IsNil(o.Humidity) {
		return true
	}

	return false
}

// SetHumidity gets a reference to the given int32 and assigns it to the Humidity field.
func (o *ApStatsEnvStat) SetHumidity(v int32) {
	o.Humidity = &v
}

// GetMagneX returns the MagneX field value if set, zero value otherwise.
func (o *ApStatsEnvStat) GetMagneX() float32 {
	if o == nil || IsNil(o.MagneX) {
		var ret float32
		return ret
	}
	return *o.MagneX
}

// GetMagneXOk returns a tuple with the MagneX field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsEnvStat) GetMagneXOk() (*float32, bool) {
	if o == nil || IsNil(o.MagneX) {
		return nil, false
	}
	return o.MagneX, true
}

// HasMagneX returns a boolean if a field has been set.
func (o *ApStatsEnvStat) HasMagneX() bool {
	if o != nil && !IsNil(o.MagneX) {
		return true
	}

	return false
}

// SetMagneX gets a reference to the given float32 and assigns it to the MagneX field.
func (o *ApStatsEnvStat) SetMagneX(v float32) {
	o.MagneX = &v
}

// GetMagneY returns the MagneY field value if set, zero value otherwise.
func (o *ApStatsEnvStat) GetMagneY() float32 {
	if o == nil || IsNil(o.MagneY) {
		var ret float32
		return ret
	}
	return *o.MagneY
}

// GetMagneYOk returns a tuple with the MagneY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsEnvStat) GetMagneYOk() (*float32, bool) {
	if o == nil || IsNil(o.MagneY) {
		return nil, false
	}
	return o.MagneY, true
}

// HasMagneY returns a boolean if a field has been set.
func (o *ApStatsEnvStat) HasMagneY() bool {
	if o != nil && !IsNil(o.MagneY) {
		return true
	}

	return false
}

// SetMagneY gets a reference to the given float32 and assigns it to the MagneY field.
func (o *ApStatsEnvStat) SetMagneY(v float32) {
	o.MagneY = &v
}

// GetMagneZ returns the MagneZ field value if set, zero value otherwise.
func (o *ApStatsEnvStat) GetMagneZ() float32 {
	if o == nil || IsNil(o.MagneZ) {
		var ret float32
		return ret
	}
	return *o.MagneZ
}

// GetMagneZOk returns a tuple with the MagneZ field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsEnvStat) GetMagneZOk() (*float32, bool) {
	if o == nil || IsNil(o.MagneZ) {
		return nil, false
	}
	return o.MagneZ, true
}

// HasMagneZ returns a boolean if a field has been set.
func (o *ApStatsEnvStat) HasMagneZ() bool {
	if o != nil && !IsNil(o.MagneZ) {
		return true
	}

	return false
}

// SetMagneZ gets a reference to the given float32 and assigns it to the MagneZ field.
func (o *ApStatsEnvStat) SetMagneZ(v float32) {
	o.MagneZ = &v
}

// GetPressure returns the Pressure field value if set, zero value otherwise.
func (o *ApStatsEnvStat) GetPressure() int32 {
	if o == nil || IsNil(o.Pressure) {
		var ret int32
		return ret
	}
	return *o.Pressure
}

// GetPressureOk returns a tuple with the Pressure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsEnvStat) GetPressureOk() (*int32, bool) {
	if o == nil || IsNil(o.Pressure) {
		return nil, false
	}
	return o.Pressure, true
}

// HasPressure returns a boolean if a field has been set.
func (o *ApStatsEnvStat) HasPressure() bool {
	if o != nil && !IsNil(o.Pressure) {
		return true
	}

	return false
}

// SetPressure gets a reference to the given int32 and assigns it to the Pressure field.
func (o *ApStatsEnvStat) SetPressure(v int32) {
	o.Pressure = &v
}

// GetVcoreVoltage returns the VcoreVoltage field value if set, zero value otherwise.
func (o *ApStatsEnvStat) GetVcoreVoltage() float32 {
	if o == nil || IsNil(o.VcoreVoltage) {
		var ret float32
		return ret
	}
	return *o.VcoreVoltage
}

// GetVcoreVoltageOk returns a tuple with the VcoreVoltage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsEnvStat) GetVcoreVoltageOk() (*float32, bool) {
	if o == nil || IsNil(o.VcoreVoltage) {
		return nil, false
	}
	return o.VcoreVoltage, true
}

// HasVcoreVoltage returns a boolean if a field has been set.
func (o *ApStatsEnvStat) HasVcoreVoltage() bool {
	if o != nil && !IsNil(o.VcoreVoltage) {
		return true
	}

	return false
}

// SetVcoreVoltage gets a reference to the given float32 and assigns it to the VcoreVoltage field.
func (o *ApStatsEnvStat) SetVcoreVoltage(v float32) {
	o.VcoreVoltage = &v
}

func (o ApStatsEnvStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApStatsEnvStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccelX) {
		toSerialize["accel_x"] = o.AccelX
	}
	if !IsNil(o.AccelY) {
		toSerialize["accel_y"] = o.AccelY
	}
	if !IsNil(o.AccelZ) {
		toSerialize["accel_z"] = o.AccelZ
	}
	if !IsNil(o.AmbientTemp) {
		toSerialize["ambient_temp"] = o.AmbientTemp
	}
	if !IsNil(o.Attitude) {
		toSerialize["attitude"] = o.Attitude
	}
	if !IsNil(o.CpuTemp) {
		toSerialize["cpu_temp"] = o.CpuTemp
	}
	if !IsNil(o.Humidity) {
		toSerialize["humidity"] = o.Humidity
	}
	if !IsNil(o.MagneX) {
		toSerialize["magne_x"] = o.MagneX
	}
	if !IsNil(o.MagneY) {
		toSerialize["magne_y"] = o.MagneY
	}
	if !IsNil(o.MagneZ) {
		toSerialize["magne_z"] = o.MagneZ
	}
	if !IsNil(o.Pressure) {
		toSerialize["pressure"] = o.Pressure
	}
	if !IsNil(o.VcoreVoltage) {
		toSerialize["vcore_voltage"] = o.VcoreVoltage
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApStatsEnvStat) UnmarshalJSON(data []byte) (err error) {
	varApStatsEnvStat := _ApStatsEnvStat{}

	err = json.Unmarshal(data, &varApStatsEnvStat)

	if err != nil {
		return err
	}

	*o = ApStatsEnvStat(varApStatsEnvStat)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accel_x")
		delete(additionalProperties, "accel_y")
		delete(additionalProperties, "accel_z")
		delete(additionalProperties, "ambient_temp")
		delete(additionalProperties, "attitude")
		delete(additionalProperties, "cpu_temp")
		delete(additionalProperties, "humidity")
		delete(additionalProperties, "magne_x")
		delete(additionalProperties, "magne_y")
		delete(additionalProperties, "magne_z")
		delete(additionalProperties, "pressure")
		delete(additionalProperties, "vcore_voltage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApStatsEnvStat struct {
	value *ApStatsEnvStat
	isSet bool
}

func (v NullableApStatsEnvStat) Get() *ApStatsEnvStat {
	return v.value
}

func (v *NullableApStatsEnvStat) Set(val *ApStatsEnvStat) {
	v.value = val
	v.isSet = true
}

func (v NullableApStatsEnvStat) IsSet() bool {
	return v.isSet
}

func (v *NullableApStatsEnvStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApStatsEnvStat(val *ApStatsEnvStat) *NullableApStatsEnvStat {
	return &NullableApStatsEnvStat{value: val, isSet: true}
}

func (v NullableApStatsEnvStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApStatsEnvStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


