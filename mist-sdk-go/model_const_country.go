/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the ConstCountry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConstCountry{}

// ConstCountry struct for ConstCountry
type ConstCountry struct {
	// country code, in two-character
	Alpha2 string `json:"alpha2"`
	Certified bool `json:"certified"`
	Name string `json:"name"`
	// country code, ISO 3166-1 numeric
	Numeric float32 `json:"numeric"`
	AdditionalProperties map[string]interface{}
}

type _ConstCountry ConstCountry

// NewConstCountry instantiates a new ConstCountry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConstCountry(alpha2 string, certified bool, name string, numeric float32) *ConstCountry {
	this := ConstCountry{}
	this.Alpha2 = alpha2
	this.Certified = certified
	this.Name = name
	this.Numeric = numeric
	return &this
}

// NewConstCountryWithDefaults instantiates a new ConstCountry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConstCountryWithDefaults() *ConstCountry {
	this := ConstCountry{}
	return &this
}

// GetAlpha2 returns the Alpha2 field value
func (o *ConstCountry) GetAlpha2() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Alpha2
}

// GetAlpha2Ok returns a tuple with the Alpha2 field value
// and a boolean to check if the value has been set.
func (o *ConstCountry) GetAlpha2Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Alpha2, true
}

// SetAlpha2 sets field value
func (o *ConstCountry) SetAlpha2(v string) {
	o.Alpha2 = v
}

// GetCertified returns the Certified field value
func (o *ConstCountry) GetCertified() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Certified
}

// GetCertifiedOk returns a tuple with the Certified field value
// and a boolean to check if the value has been set.
func (o *ConstCountry) GetCertifiedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Certified, true
}

// SetCertified sets field value
func (o *ConstCountry) SetCertified(v bool) {
	o.Certified = v
}

// GetName returns the Name field value
func (o *ConstCountry) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConstCountry) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConstCountry) SetName(v string) {
	o.Name = v
}

// GetNumeric returns the Numeric field value
func (o *ConstCountry) GetNumeric() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Numeric
}

// GetNumericOk returns a tuple with the Numeric field value
// and a boolean to check if the value has been set.
func (o *ConstCountry) GetNumericOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Numeric, true
}

// SetNumeric sets field value
func (o *ConstCountry) SetNumeric(v float32) {
	o.Numeric = v
}

func (o ConstCountry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConstCountry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["alpha2"] = o.Alpha2
	toSerialize["certified"] = o.Certified
	toSerialize["name"] = o.Name
	toSerialize["numeric"] = o.Numeric

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConstCountry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"alpha2",
		"certified",
		"name",
		"numeric",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConstCountry := _ConstCountry{}

	err = json.Unmarshal(data, &varConstCountry)

	if err != nil {
		return err
	}

	*o = ConstCountry(varConstCountry)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "alpha2")
		delete(additionalProperties, "certified")
		delete(additionalProperties, "name")
		delete(additionalProperties, "numeric")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConstCountry struct {
	value *ConstCountry
	isSet bool
}

func (v NullableConstCountry) Get() *ConstCountry {
	return v.value
}

func (v *NullableConstCountry) Set(val *ConstCountry) {
	v.value = val
	v.isSet = true
}

func (v NullableConstCountry) IsSet() bool {
	return v.isSet
}

func (v *NullableConstCountry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConstCountry(val *ConstCountry) *NullableConstCountry {
	return &NullableConstCountry{value: val, isSet: true}
}

func (v NullableConstCountry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConstCountry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


