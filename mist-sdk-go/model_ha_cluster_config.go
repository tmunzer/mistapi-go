/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the HaClusterConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HaClusterConfig{}

// HaClusterConfig struct for HaClusterConfig
type HaClusterConfig struct {
	// if the device is claimed
	DisableAutoConfig *bool `json:"disable_auto_config,omitempty"`
	// if the device is adopted
	Managed *bool `json:"managed,omitempty"`
	Nodes []HaClusterConfigNode `json:"nodes,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HaClusterConfig HaClusterConfig

// NewHaClusterConfig instantiates a new HaClusterConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHaClusterConfig() *HaClusterConfig {
	this := HaClusterConfig{}
	return &this
}

// NewHaClusterConfigWithDefaults instantiates a new HaClusterConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHaClusterConfigWithDefaults() *HaClusterConfig {
	this := HaClusterConfig{}
	return &this
}

// GetDisableAutoConfig returns the DisableAutoConfig field value if set, zero value otherwise.
func (o *HaClusterConfig) GetDisableAutoConfig() bool {
	if o == nil || IsNil(o.DisableAutoConfig) {
		var ret bool
		return ret
	}
	return *o.DisableAutoConfig
}

// GetDisableAutoConfigOk returns a tuple with the DisableAutoConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HaClusterConfig) GetDisableAutoConfigOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableAutoConfig) {
		return nil, false
	}
	return o.DisableAutoConfig, true
}

// HasDisableAutoConfig returns a boolean if a field has been set.
func (o *HaClusterConfig) HasDisableAutoConfig() bool {
	if o != nil && !IsNil(o.DisableAutoConfig) {
		return true
	}

	return false
}

// SetDisableAutoConfig gets a reference to the given bool and assigns it to the DisableAutoConfig field.
func (o *HaClusterConfig) SetDisableAutoConfig(v bool) {
	o.DisableAutoConfig = &v
}

// GetManaged returns the Managed field value if set, zero value otherwise.
func (o *HaClusterConfig) GetManaged() bool {
	if o == nil || IsNil(o.Managed) {
		var ret bool
		return ret
	}
	return *o.Managed
}

// GetManagedOk returns a tuple with the Managed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HaClusterConfig) GetManagedOk() (*bool, bool) {
	if o == nil || IsNil(o.Managed) {
		return nil, false
	}
	return o.Managed, true
}

// HasManaged returns a boolean if a field has been set.
func (o *HaClusterConfig) HasManaged() bool {
	if o != nil && !IsNil(o.Managed) {
		return true
	}

	return false
}

// SetManaged gets a reference to the given bool and assigns it to the Managed field.
func (o *HaClusterConfig) SetManaged(v bool) {
	o.Managed = &v
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *HaClusterConfig) GetNodes() []HaClusterConfigNode {
	if o == nil || IsNil(o.Nodes) {
		var ret []HaClusterConfigNode
		return ret
	}
	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HaClusterConfig) GetNodesOk() ([]HaClusterConfigNode, bool) {
	if o == nil || IsNil(o.Nodes) {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *HaClusterConfig) HasNodes() bool {
	if o != nil && !IsNil(o.Nodes) {
		return true
	}

	return false
}

// SetNodes gets a reference to the given []HaClusterConfigNode and assigns it to the Nodes field.
func (o *HaClusterConfig) SetNodes(v []HaClusterConfigNode) {
	o.Nodes = v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *HaClusterConfig) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HaClusterConfig) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *HaClusterConfig) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *HaClusterConfig) SetSiteId(v string) {
	o.SiteId = &v
}

func (o HaClusterConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HaClusterConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisableAutoConfig) {
		toSerialize["disable_auto_config"] = o.DisableAutoConfig
	}
	if !IsNil(o.Managed) {
		toSerialize["managed"] = o.Managed
	}
	if !IsNil(o.Nodes) {
		toSerialize["nodes"] = o.Nodes
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HaClusterConfig) UnmarshalJSON(data []byte) (err error) {
	varHaClusterConfig := _HaClusterConfig{}

	err = json.Unmarshal(data, &varHaClusterConfig)

	if err != nil {
		return err
	}

	*o = HaClusterConfig(varHaClusterConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "disable_auto_config")
		delete(additionalProperties, "managed")
		delete(additionalProperties, "nodes")
		delete(additionalProperties, "site_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHaClusterConfig struct {
	value *HaClusterConfig
	isSet bool
}

func (v NullableHaClusterConfig) Get() *HaClusterConfig {
	return v.value
}

func (v *NullableHaClusterConfig) Set(val *HaClusterConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableHaClusterConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableHaClusterConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHaClusterConfig(val *HaClusterConfig) *NullableHaClusterConfig {
	return &NullableHaClusterConfig{value: val, isSet: true}
}

func (v NullableHaClusterConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHaClusterConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


