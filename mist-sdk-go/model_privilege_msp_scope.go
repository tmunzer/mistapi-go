/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// PrivilegeMspScope the model 'PrivilegeMspScope'
type PrivilegeMspScope string

// List of privilege_msp_scope
const (
	PRIVILEGEMSPSCOPE_EMPTY PrivilegeMspScope = ""
	PRIVILEGEMSPSCOPE_ORG PrivilegeMspScope = "org"
	PRIVILEGEMSPSCOPE_MSP PrivilegeMspScope = "msp"
	PRIVILEGEMSPSCOPE_ORGGROUP PrivilegeMspScope = "orggroup"
)

// All allowed values of PrivilegeMspScope enum
var AllowedPrivilegeMspScopeEnumValues = []PrivilegeMspScope{
	"",
	"org",
	"msp",
	"orggroup",
}

func (v *PrivilegeMspScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PrivilegeMspScope(value)
	for _, existing := range AllowedPrivilegeMspScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PrivilegeMspScope", value)
}

// NewPrivilegeMspScopeFromValue returns a pointer to a valid PrivilegeMspScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrivilegeMspScopeFromValue(v string) (*PrivilegeMspScope, error) {
	ev := PrivilegeMspScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PrivilegeMspScope: valid values are %v", v, AllowedPrivilegeMspScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrivilegeMspScope) IsValid() bool {
	for _, existing := range AllowedPrivilegeMspScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to privilege_msp_scope value
func (v PrivilegeMspScope) Ptr() *PrivilegeMspScope {
	return &v
}

type NullablePrivilegeMspScope struct {
	value *PrivilegeMspScope
	isSet bool
}

func (v NullablePrivilegeMspScope) Get() *PrivilegeMspScope {
	return v.value
}

func (v *NullablePrivilegeMspScope) Set(val *PrivilegeMspScope) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivilegeMspScope) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivilegeMspScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivilegeMspScope(val *PrivilegeMspScope) *NullablePrivilegeMspScope {
	return &NullablePrivilegeMspScope{value: val, isSet: true}
}

func (v NullablePrivilegeMspScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivilegeMspScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

