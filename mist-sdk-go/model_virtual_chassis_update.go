/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the VirtualChassisUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualChassisUpdate{}

// VirtualChassisUpdate Virtual Chassis
type VirtualChassisUpdate struct {
	// Only if `op`==`renumber`
	Member *int32 `json:"member,omitempty"`
	Members []VirtualChassisMemberUpdate `json:"members,omitempty"`
	// Only if `op`==`renumber`
	NewMember *int32 `json:"new-member,omitempty"`
	Op *VirtualChassisUpdateOp `json:"op,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VirtualChassisUpdate VirtualChassisUpdate

// NewVirtualChassisUpdate instantiates a new VirtualChassisUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualChassisUpdate() *VirtualChassisUpdate {
	this := VirtualChassisUpdate{}
	return &this
}

// NewVirtualChassisUpdateWithDefaults instantiates a new VirtualChassisUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualChassisUpdateWithDefaults() *VirtualChassisUpdate {
	this := VirtualChassisUpdate{}
	return &this
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *VirtualChassisUpdate) GetMember() int32 {
	if o == nil || IsNil(o.Member) {
		var ret int32
		return ret
	}
	return *o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualChassisUpdate) GetMemberOk() (*int32, bool) {
	if o == nil || IsNil(o.Member) {
		return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *VirtualChassisUpdate) HasMember() bool {
	if o != nil && !IsNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given int32 and assigns it to the Member field.
func (o *VirtualChassisUpdate) SetMember(v int32) {
	o.Member = &v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *VirtualChassisUpdate) GetMembers() []VirtualChassisMemberUpdate {
	if o == nil || IsNil(o.Members) {
		var ret []VirtualChassisMemberUpdate
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualChassisUpdate) GetMembersOk() ([]VirtualChassisMemberUpdate, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *VirtualChassisUpdate) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []VirtualChassisMemberUpdate and assigns it to the Members field.
func (o *VirtualChassisUpdate) SetMembers(v []VirtualChassisMemberUpdate) {
	o.Members = v
}

// GetNewMember returns the NewMember field value if set, zero value otherwise.
func (o *VirtualChassisUpdate) GetNewMember() int32 {
	if o == nil || IsNil(o.NewMember) {
		var ret int32
		return ret
	}
	return *o.NewMember
}

// GetNewMemberOk returns a tuple with the NewMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualChassisUpdate) GetNewMemberOk() (*int32, bool) {
	if o == nil || IsNil(o.NewMember) {
		return nil, false
	}
	return o.NewMember, true
}

// HasNewMember returns a boolean if a field has been set.
func (o *VirtualChassisUpdate) HasNewMember() bool {
	if o != nil && !IsNil(o.NewMember) {
		return true
	}

	return false
}

// SetNewMember gets a reference to the given int32 and assigns it to the NewMember field.
func (o *VirtualChassisUpdate) SetNewMember(v int32) {
	o.NewMember = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *VirtualChassisUpdate) GetOp() VirtualChassisUpdateOp {
	if o == nil || IsNil(o.Op) {
		var ret VirtualChassisUpdateOp
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualChassisUpdate) GetOpOk() (*VirtualChassisUpdateOp, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *VirtualChassisUpdate) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given VirtualChassisUpdateOp and assigns it to the Op field.
func (o *VirtualChassisUpdate) SetOp(v VirtualChassisUpdateOp) {
	o.Op = &v
}

func (o VirtualChassisUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualChassisUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if !IsNil(o.NewMember) {
		toSerialize["new-member"] = o.NewMember
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VirtualChassisUpdate) UnmarshalJSON(data []byte) (err error) {
	varVirtualChassisUpdate := _VirtualChassisUpdate{}

	err = json.Unmarshal(data, &varVirtualChassisUpdate)

	if err != nil {
		return err
	}

	*o = VirtualChassisUpdate(varVirtualChassisUpdate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "member")
		delete(additionalProperties, "members")
		delete(additionalProperties, "new-member")
		delete(additionalProperties, "op")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVirtualChassisUpdate struct {
	value *VirtualChassisUpdate
	isSet bool
}

func (v NullableVirtualChassisUpdate) Get() *VirtualChassisUpdate {
	return v.value
}

func (v *NullableVirtualChassisUpdate) Set(val *VirtualChassisUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualChassisUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualChassisUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualChassisUpdate(val *VirtualChassisUpdate) *NullableVirtualChassisUpdate {
	return &NullableVirtualChassisUpdate{value: val, isSet: true}
}

func (v NullableVirtualChassisUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualChassisUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


