/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type SitesDevicesWANClusterAPI interface {

	/*
	CreateSiteDeviceHaCluster createSiteDeviceHaCluster

	## Create HA Cluster
Both nodes has to be in the same site. We expect the user to configure ha_sync / ha_data port in port_configs already

### SRX cabling

see [Chassis Cluster User Guide for SRX Series Devices](https://www.juniper.net/documentation/us/en/software/junos/chassis-cluster-security-devices/topics/concept/chassis-cluster-srx-series-node-interface-understanding.html) Here’s the recommended cabling.

#### SRX300

From ZTP / default state, ge-0/0/0 and ge-0/0/7 (SFP) are default WAN ports and will get DHCP IP. However, ge-0/0/0 becomes OOB/fxp0 after cluster is enabled (i.e. using it for reach Mist is not recommended)

1.  form cluster in UI
2.  configure ge-0/0/7,ge-1/0/7 for WAN (reth0)
3.  configure ge-0/0/2,ge-1/0/2 for ha_data
4.  configure ge-0/0/3- for LAN or additional WAN e.g.
    

``` json
{
    "port_config": {
        "ge-0/0/2,ge-1/0/2": {
            "usage": "ha_data"
        },
        "ge-0/0/7,ge-1/0/7": {
            "usage": "wan",
            "redundant": true,
            "reth_idx": 0,
            "ip_config": {"type": "dhcp"}
        },
    }
}

```

1.  connect ge-0/0/1 back to back for ha_control
2.  connect ge-0/0/2 back to back for ha_data
3.  connect both ge-0/0/7 to uplink switch to WAN and to reach Mist
4.  power up both devices
5.  it takes about 30 minutes for the cluster to form
    

#### SRX320

From ZTP / default state, ge-0/0/0, ge-0/0/7 (SFP) and cl-1/0/0 (LTE) are default WAN ports and will get DHCP IP. However, ge-0/0/0 becomes OOB/fxp0 after cluster is enabled (i.e. using it for reach Mist is not recommended)

##### ZTP via ge-0/0/7

Similar to SRX300

##### ZTP via cl-1/0/0 (LTE)

1.  form cluster in UI
2.  configure cl-1/0/0, cl-3/0/0 as WAN (reth0)
3.  configure ge-0/0/2,ge-3/0/2 for ha_data
4.  same as above
    

#### SRX340 / SRX345 / SRX380

SRX340/SRX345 has dedicated OOB/fxp0 ports

1.  form cluster in UI
2.  configure ge-0/0/0,ge-5/0/0 for WAN (reth0)
3.  configure ge-0/0/2,ge-5/0/2 for ha_data
4.  configure ge-0/0/3- for LAN or additional WAN
5.  connect ge-0/0/0 to uplink switch to WAN and to reach Mist
6.  connect ge-0/0/1 back-to-back for ha_control
7.  connect ge-0/0/2 back-to-back for ha_data (fabric); or for SRX380, xe-0/0/16 if 10G SFP+ is used
8.  connect ge-0/0/3- to LAN or additional WANs
    

#### SRX550

ge-0/0/0 becomes OOB/fxp0 after cluster is enabled, make suenable oob_ip_config as dhcp to maintain cloud connectivity

1.  connect ge-0/0/0 to reach Mist (after cluster is fully up, this port becomes OOB/fxp0)
2.  connect ge-0/0/1 back-to-back for ha_control
3.  connect ge-0/0/2 back-to-back for ha_data (fabric)
4.  connect ge-0/0/3 to WAN (after cluster is up, intended to be used for reth0)
5.  connect ge-0/0/4- to LAN or additional WANs
    

#### SRX1500

SRX1500 has, additionally, dedicated HA Control port

1.  form cluster in UI
2.  configure ge-0/0/0,ge-5/0/0 for WAN (reth0)
3.  configure ge-0/0/1,ge-5/0/1 for ha_data
4.  configure ge-0/0/2- for LAN or additional WAN
5.  connect dedicated ha_control back-to-back
6.  connect ge-0/0/0 to uplink switch to WAN and to reach Mist
7.  connect ge-0/0/1 back-to-back for ha_data
8.  connect ge-0/0/2- to LAN or additional WANs
    

#### SRX4100

SRX4100 has dedicated ha_control and ha_data (fabric) ports

1.  connect dedicated ha_control back-to-back
2.  connect dedicated ha_data back-to-back
3.  connect xe-0/0/0 to WAN to reach Mist
4.  connect xe-0/0/1- to LAN or additional WANs
    

#### VSRX

When standalone, VSRX has fxp0 as first Network Adapter, then ge-0/0/0-N When clustered, VSRX has fxp0, em0, then ge-0/0/0-N

1.  connect net0 (fxp0) to WAN to reach Mist
2.  connect net1 back-to-back for ha_control
3.  connect net2 (ge-0/0/0) back-to-back for ha_data (fab0/fab1)
4.  connect net3 (ge-0/0/1) to WAN, intended to be used for reth0
5.  connect net4 (ge-0/0/2) to LAN
    

SRX340/SRX345 has dedicated OOB/fxp0 ports VSRX has fxp0 as first Network Adapter, then ge-0/0/0-N

1.  connect ge-0/0/0 to WAN to reach Mist
2.  connect ge-0/0/1 back-to-back for ha_control
3.  connect ge-0/0/2 back-to-back for ha_data (fabric); or for SRX380, xe-0/0/16 if 10G SFP+ is used
4.  connect ge-0/0/3- to LAN or additional WANs
    

#### SRX550

ge-0/0/0 becomes OOB/fxp0 after cluster is enabled, make suenable oob_ip_config as dhcp to maintain cloud connectivity

1.  connect ge-0/0/0 to reach Mist (after cluster is fully up, this port becomes OOB/fxp0)
2.  connect ge-0/0/1 back-to-back for ha_control
3.  connect ge-0/0/2 back-to-back for ha_data (fabric)
4.  connect ge-0/0/3 to WAN (after cluster is up, intended to be used for reth0)
5.  connect ge-0/0/4- to LAN or additional WANs
    

#### SRX1500

SRX1500 has, additionally, dedicated HA Control port

1. form cluster in UI
2. configure ge-0/0/0,ge-7/0/0 for WAN (reth0)
3. configure ge-0/0/1,ge-7/0/1 for ha_data
4. configure ge-0/0/2- for LAN or additional WAN
5. connect dedicated ha_control back-to-back
6. connect ge-0/0/0 to uplink switch to WAN and to reach Mist
7. connect ge-0/0/1 back-to-back for ha_data
8. connect ge-0/0/2- to LAN or additional WANs

    
#### SRX1600

SRX1600 has, additionally, two dedicated HA Control port

1. form cluster in UI
2. configure ge-0/0/0,ge-7/0/0 for WAN (reth0)
3. configure ge-0/0/1,ge-7/0/1 for ha_data
4. configure ge-0/0/2- for LAN or additional WAN
5. connect dedicated both ha_control back-to-back
6. connect ge-0/0/0 to uplink switch to WAN and to reach Mist
7. connect ge-0/0/1 back-to-back for ha_data
8. connect ge-0/0/2- to LAN or additional WANs


#### SRX4100

SRX4100 has dedicated ha_control and ha_data (fabric) ports

1.  connect dedicated ha_control back-to-back
2.  connect dedicated ha_data back-to-back
3.  connect xe-0/0/0 to WAN to reach Mist
4.  connect xe-0/0/1- to LAN or additional WANs


## Replace a Node in a HA Cluster
Usually Device Replacement is done by Device Replacement API. For a HA cluster, you can also replace a node by another device in the same site.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@param deviceId
	@return ApiCreateSiteDeviceHaClusterRequest
	*/
	CreateSiteDeviceHaCluster(ctx context.Context, siteId string, deviceId string) ApiCreateSiteDeviceHaClusterRequest

	// CreateSiteDeviceHaClusterExecute executes the request
	CreateSiteDeviceHaClusterExecute(r ApiCreateSiteDeviceHaClusterRequest) (*http.Response, error)

	/*
	DeleteSiteDeviceHaCluster deleteSiteDeviceHaCluster

	Delete HA Cluster

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@param deviceId
	@return ApiDeleteSiteDeviceHaClusterRequest
	*/
	DeleteSiteDeviceHaCluster(ctx context.Context, siteId string, deviceId string) ApiDeleteSiteDeviceHaClusterRequest

	// DeleteSiteDeviceHaClusterExecute executes the request
	DeleteSiteDeviceHaClusterExecute(r ApiDeleteSiteDeviceHaClusterRequest) (*http.Response, error)

	/*
	SwapSiteDeviceHaClusterNode swapSiteDeviceHaClusterNode

	Swap nodes on the HA Cluster

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@param deviceId
	@return ApiSwapSiteDeviceHaClusterNodeRequest

	Deprecated
	*/
	SwapSiteDeviceHaClusterNode(ctx context.Context, siteId string, deviceId string) ApiSwapSiteDeviceHaClusterNodeRequest

	// SwapSiteDeviceHaClusterNodeExecute executes the request
	// Deprecated
	SwapSiteDeviceHaClusterNodeExecute(r ApiSwapSiteDeviceHaClusterNodeRequest) (*http.Response, error)
}

// SitesDevicesWANClusterAPIService SitesDevicesWANClusterAPI service
type SitesDevicesWANClusterAPIService service

type ApiCreateSiteDeviceHaClusterRequest struct {
	ctx context.Context
	ApiService SitesDevicesWANClusterAPI
	siteId string
	deviceId string
	gatewayClusterForm *GatewayClusterForm
}

func (r ApiCreateSiteDeviceHaClusterRequest) GatewayClusterForm(gatewayClusterForm GatewayClusterForm) ApiCreateSiteDeviceHaClusterRequest {
	r.gatewayClusterForm = &gatewayClusterForm
	return r
}

func (r ApiCreateSiteDeviceHaClusterRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateSiteDeviceHaClusterExecute(r)
}

/*
CreateSiteDeviceHaCluster createSiteDeviceHaCluster

## Create HA Cluster
Both nodes has to be in the same site. We expect the user to configure ha_sync / ha_data port in port_configs already

### SRX cabling

see [Chassis Cluster User Guide for SRX Series Devices](https://www.juniper.net/documentation/us/en/software/junos/chassis-cluster-security-devices/topics/concept/chassis-cluster-srx-series-node-interface-understanding.html) Here’s the recommended cabling.

#### SRX300

From ZTP / default state, ge-0/0/0 and ge-0/0/7 (SFP) are default WAN ports and will get DHCP IP. However, ge-0/0/0 becomes OOB/fxp0 after cluster is enabled (i.e. using it for reach Mist is not recommended)

1.  form cluster in UI
2.  configure ge-0/0/7,ge-1/0/7 for WAN (reth0)
3.  configure ge-0/0/2,ge-1/0/2 for ha_data
4.  configure ge-0/0/3- for LAN or additional WAN e.g.
    

``` json
{
    "port_config": {
        "ge-0/0/2,ge-1/0/2": {
            "usage": "ha_data"
        },
        "ge-0/0/7,ge-1/0/7": {
            "usage": "wan",
            "redundant": true,
            "reth_idx": 0,
            "ip_config": {"type": "dhcp"}
        },
    }
}

```

1.  connect ge-0/0/1 back to back for ha_control
2.  connect ge-0/0/2 back to back for ha_data
3.  connect both ge-0/0/7 to uplink switch to WAN and to reach Mist
4.  power up both devices
5.  it takes about 30 minutes for the cluster to form
    

#### SRX320

From ZTP / default state, ge-0/0/0, ge-0/0/7 (SFP) and cl-1/0/0 (LTE) are default WAN ports and will get DHCP IP. However, ge-0/0/0 becomes OOB/fxp0 after cluster is enabled (i.e. using it for reach Mist is not recommended)

##### ZTP via ge-0/0/7

Similar to SRX300

##### ZTP via cl-1/0/0 (LTE)

1.  form cluster in UI
2.  configure cl-1/0/0, cl-3/0/0 as WAN (reth0)
3.  configure ge-0/0/2,ge-3/0/2 for ha_data
4.  same as above
    

#### SRX340 / SRX345 / SRX380

SRX340/SRX345 has dedicated OOB/fxp0 ports

1.  form cluster in UI
2.  configure ge-0/0/0,ge-5/0/0 for WAN (reth0)
3.  configure ge-0/0/2,ge-5/0/2 for ha_data
4.  configure ge-0/0/3- for LAN or additional WAN
5.  connect ge-0/0/0 to uplink switch to WAN and to reach Mist
6.  connect ge-0/0/1 back-to-back for ha_control
7.  connect ge-0/0/2 back-to-back for ha_data (fabric); or for SRX380, xe-0/0/16 if 10G SFP+ is used
8.  connect ge-0/0/3- to LAN or additional WANs
    

#### SRX550

ge-0/0/0 becomes OOB/fxp0 after cluster is enabled, make suenable oob_ip_config as dhcp to maintain cloud connectivity

1.  connect ge-0/0/0 to reach Mist (after cluster is fully up, this port becomes OOB/fxp0)
2.  connect ge-0/0/1 back-to-back for ha_control
3.  connect ge-0/0/2 back-to-back for ha_data (fabric)
4.  connect ge-0/0/3 to WAN (after cluster is up, intended to be used for reth0)
5.  connect ge-0/0/4- to LAN or additional WANs
    

#### SRX1500

SRX1500 has, additionally, dedicated HA Control port

1.  form cluster in UI
2.  configure ge-0/0/0,ge-5/0/0 for WAN (reth0)
3.  configure ge-0/0/1,ge-5/0/1 for ha_data
4.  configure ge-0/0/2- for LAN or additional WAN
5.  connect dedicated ha_control back-to-back
6.  connect ge-0/0/0 to uplink switch to WAN and to reach Mist
7.  connect ge-0/0/1 back-to-back for ha_data
8.  connect ge-0/0/2- to LAN or additional WANs
    

#### SRX4100

SRX4100 has dedicated ha_control and ha_data (fabric) ports

1.  connect dedicated ha_control back-to-back
2.  connect dedicated ha_data back-to-back
3.  connect xe-0/0/0 to WAN to reach Mist
4.  connect xe-0/0/1- to LAN or additional WANs
    

#### VSRX

When standalone, VSRX has fxp0 as first Network Adapter, then ge-0/0/0-N When clustered, VSRX has fxp0, em0, then ge-0/0/0-N

1.  connect net0 (fxp0) to WAN to reach Mist
2.  connect net1 back-to-back for ha_control
3.  connect net2 (ge-0/0/0) back-to-back for ha_data (fab0/fab1)
4.  connect net3 (ge-0/0/1) to WAN, intended to be used for reth0
5.  connect net4 (ge-0/0/2) to LAN
    

SRX340/SRX345 has dedicated OOB/fxp0 ports VSRX has fxp0 as first Network Adapter, then ge-0/0/0-N

1.  connect ge-0/0/0 to WAN to reach Mist
2.  connect ge-0/0/1 back-to-back for ha_control
3.  connect ge-0/0/2 back-to-back for ha_data (fabric); or for SRX380, xe-0/0/16 if 10G SFP+ is used
4.  connect ge-0/0/3- to LAN or additional WANs
    

#### SRX550

ge-0/0/0 becomes OOB/fxp0 after cluster is enabled, make suenable oob_ip_config as dhcp to maintain cloud connectivity

1.  connect ge-0/0/0 to reach Mist (after cluster is fully up, this port becomes OOB/fxp0)
2.  connect ge-0/0/1 back-to-back for ha_control
3.  connect ge-0/0/2 back-to-back for ha_data (fabric)
4.  connect ge-0/0/3 to WAN (after cluster is up, intended to be used for reth0)
5.  connect ge-0/0/4- to LAN or additional WANs
    

#### SRX1500

SRX1500 has, additionally, dedicated HA Control port

1. form cluster in UI
2. configure ge-0/0/0,ge-7/0/0 for WAN (reth0)
3. configure ge-0/0/1,ge-7/0/1 for ha_data
4. configure ge-0/0/2- for LAN or additional WAN
5. connect dedicated ha_control back-to-back
6. connect ge-0/0/0 to uplink switch to WAN and to reach Mist
7. connect ge-0/0/1 back-to-back for ha_data
8. connect ge-0/0/2- to LAN or additional WANs

    
#### SRX1600

SRX1600 has, additionally, two dedicated HA Control port

1. form cluster in UI
2. configure ge-0/0/0,ge-7/0/0 for WAN (reth0)
3. configure ge-0/0/1,ge-7/0/1 for ha_data
4. configure ge-0/0/2- for LAN or additional WAN
5. connect dedicated both ha_control back-to-back
6. connect ge-0/0/0 to uplink switch to WAN and to reach Mist
7. connect ge-0/0/1 back-to-back for ha_data
8. connect ge-0/0/2- to LAN or additional WANs


#### SRX4100

SRX4100 has dedicated ha_control and ha_data (fabric) ports

1.  connect dedicated ha_control back-to-back
2.  connect dedicated ha_data back-to-back
3.  connect xe-0/0/0 to WAN to reach Mist
4.  connect xe-0/0/1- to LAN or additional WANs


## Replace a Node in a HA Cluster
Usually Device Replacement is done by Device Replacement API. For a HA cluster, you can also replace a node by another device in the same site.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @param deviceId
 @return ApiCreateSiteDeviceHaClusterRequest
*/
func (a *SitesDevicesWANClusterAPIService) CreateSiteDeviceHaCluster(ctx context.Context, siteId string, deviceId string) ApiCreateSiteDeviceHaClusterRequest {
	return ApiCreateSiteDeviceHaClusterRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		deviceId: deviceId,
	}
}

// Execute executes the request
func (a *SitesDevicesWANClusterAPIService) CreateSiteDeviceHaClusterExecute(r ApiCreateSiteDeviceHaClusterRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesDevicesWANClusterAPIService.CreateSiteDeviceHaCluster")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/devices/{device_id}/ha"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"device_id"+"}", url.PathEscape(parameterValueToString(r.deviceId, "deviceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gatewayClusterForm
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteSiteDeviceHaClusterRequest struct {
	ctx context.Context
	ApiService SitesDevicesWANClusterAPI
	siteId string
	deviceId string
}

func (r ApiDeleteSiteDeviceHaClusterRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSiteDeviceHaClusterExecute(r)
}

/*
DeleteSiteDeviceHaCluster deleteSiteDeviceHaCluster

Delete HA Cluster

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @param deviceId
 @return ApiDeleteSiteDeviceHaClusterRequest
*/
func (a *SitesDevicesWANClusterAPIService) DeleteSiteDeviceHaCluster(ctx context.Context, siteId string, deviceId string) ApiDeleteSiteDeviceHaClusterRequest {
	return ApiDeleteSiteDeviceHaClusterRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		deviceId: deviceId,
	}
}

// Execute executes the request
func (a *SitesDevicesWANClusterAPIService) DeleteSiteDeviceHaClusterExecute(r ApiDeleteSiteDeviceHaClusterRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesDevicesWANClusterAPIService.DeleteSiteDeviceHaCluster")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/devices/{device_id}/ha"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"device_id"+"}", url.PathEscape(parameterValueToString(r.deviceId, "deviceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSwapSiteDeviceHaClusterNodeRequest struct {
	ctx context.Context
	ApiService SitesDevicesWANClusterAPI
	siteId string
	deviceId string
	gatewayClusterSwap *GatewayClusterSwap
}

func (r ApiSwapSiteDeviceHaClusterNodeRequest) GatewayClusterSwap(gatewayClusterSwap GatewayClusterSwap) ApiSwapSiteDeviceHaClusterNodeRequest {
	r.gatewayClusterSwap = &gatewayClusterSwap
	return r
}

func (r ApiSwapSiteDeviceHaClusterNodeRequest) Execute() (*http.Response, error) {
	return r.ApiService.SwapSiteDeviceHaClusterNodeExecute(r)
}

/*
SwapSiteDeviceHaClusterNode swapSiteDeviceHaClusterNode

Swap nodes on the HA Cluster

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @param deviceId
 @return ApiSwapSiteDeviceHaClusterNodeRequest

Deprecated
*/
func (a *SitesDevicesWANClusterAPIService) SwapSiteDeviceHaClusterNode(ctx context.Context, siteId string, deviceId string) ApiSwapSiteDeviceHaClusterNodeRequest {
	return ApiSwapSiteDeviceHaClusterNodeRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		deviceId: deviceId,
	}
}

// Execute executes the request
// Deprecated
func (a *SitesDevicesWANClusterAPIService) SwapSiteDeviceHaClusterNodeExecute(r ApiSwapSiteDeviceHaClusterNodeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesDevicesWANClusterAPIService.SwapSiteDeviceHaClusterNode")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/devices/{device_id}/ha"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"device_id"+"}", url.PathEscape(parameterValueToString(r.deviceId, "deviceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gatewayClusterSwap
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
