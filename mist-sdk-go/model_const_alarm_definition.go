/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the ConstAlarmDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConstAlarmDefinition{}

// ConstAlarmDefinition struct for ConstAlarmDefinition
type ConstAlarmDefinition struct {
	// Description of the alarm type
	Display string `json:"display"`
	Example map[string]interface{} `json:"example,omitempty"`
	// List of fields available in an alarm details payload (in REST APIs & Webhooks); e.g. `aps`, `switches`, `gateways`, `hostnames`, `ssids`, `bssids`
	Fields []string `json:"fields"`
	// Group to which the alarm belongs
	Group string `json:"group"`
	// Key name of the alarm type
	Key string `json:"key"`
	// Marvis defined category to which the alarm belongs
	MarvisSuggestionCategory *string `json:"marvis_suggestion_category,omitempty"`
	// Severity of the alarm
	Severity string `json:"severity"`
	AdditionalProperties map[string]interface{}
}

type _ConstAlarmDefinition ConstAlarmDefinition

// NewConstAlarmDefinition instantiates a new ConstAlarmDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConstAlarmDefinition(display string, fields []string, group string, key string, severity string) *ConstAlarmDefinition {
	this := ConstAlarmDefinition{}
	this.Display = display
	this.Fields = fields
	this.Group = group
	this.Key = key
	this.Severity = severity
	return &this
}

// NewConstAlarmDefinitionWithDefaults instantiates a new ConstAlarmDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConstAlarmDefinitionWithDefaults() *ConstAlarmDefinition {
	this := ConstAlarmDefinition{}
	return &this
}

// GetDisplay returns the Display field value
func (o *ConstAlarmDefinition) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *ConstAlarmDefinition) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *ConstAlarmDefinition) SetDisplay(v string) {
	o.Display = v
}

// GetExample returns the Example field value if set, zero value otherwise.
func (o *ConstAlarmDefinition) GetExample() map[string]interface{} {
	if o == nil || IsNil(o.Example) {
		var ret map[string]interface{}
		return ret
	}
	return o.Example
}

// GetExampleOk returns a tuple with the Example field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstAlarmDefinition) GetExampleOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Example) {
		return map[string]interface{}{}, false
	}
	return o.Example, true
}

// HasExample returns a boolean if a field has been set.
func (o *ConstAlarmDefinition) HasExample() bool {
	if o != nil && !IsNil(o.Example) {
		return true
	}

	return false
}

// SetExample gets a reference to the given map[string]interface{} and assigns it to the Example field.
func (o *ConstAlarmDefinition) SetExample(v map[string]interface{}) {
	o.Example = v
}

// GetFields returns the Fields field value
func (o *ConstAlarmDefinition) GetFields() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *ConstAlarmDefinition) GetFieldsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fields, true
}

// SetFields sets field value
func (o *ConstAlarmDefinition) SetFields(v []string) {
	o.Fields = v
}

// GetGroup returns the Group field value
func (o *ConstAlarmDefinition) GetGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *ConstAlarmDefinition) GetGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *ConstAlarmDefinition) SetGroup(v string) {
	o.Group = v
}

// GetKey returns the Key field value
func (o *ConstAlarmDefinition) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ConstAlarmDefinition) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ConstAlarmDefinition) SetKey(v string) {
	o.Key = v
}

// GetMarvisSuggestionCategory returns the MarvisSuggestionCategory field value if set, zero value otherwise.
func (o *ConstAlarmDefinition) GetMarvisSuggestionCategory() string {
	if o == nil || IsNil(o.MarvisSuggestionCategory) {
		var ret string
		return ret
	}
	return *o.MarvisSuggestionCategory
}

// GetMarvisSuggestionCategoryOk returns a tuple with the MarvisSuggestionCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstAlarmDefinition) GetMarvisSuggestionCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.MarvisSuggestionCategory) {
		return nil, false
	}
	return o.MarvisSuggestionCategory, true
}

// HasMarvisSuggestionCategory returns a boolean if a field has been set.
func (o *ConstAlarmDefinition) HasMarvisSuggestionCategory() bool {
	if o != nil && !IsNil(o.MarvisSuggestionCategory) {
		return true
	}

	return false
}

// SetMarvisSuggestionCategory gets a reference to the given string and assigns it to the MarvisSuggestionCategory field.
func (o *ConstAlarmDefinition) SetMarvisSuggestionCategory(v string) {
	o.MarvisSuggestionCategory = &v
}

// GetSeverity returns the Severity field value
func (o *ConstAlarmDefinition) GetSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *ConstAlarmDefinition) GetSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Severity, true
}

// SetSeverity sets field value
func (o *ConstAlarmDefinition) SetSeverity(v string) {
	o.Severity = v
}

func (o ConstAlarmDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConstAlarmDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["display"] = o.Display
	if !IsNil(o.Example) {
		toSerialize["example"] = o.Example
	}
	toSerialize["fields"] = o.Fields
	toSerialize["group"] = o.Group
	toSerialize["key"] = o.Key
	if !IsNil(o.MarvisSuggestionCategory) {
		toSerialize["marvis_suggestion_category"] = o.MarvisSuggestionCategory
	}
	toSerialize["severity"] = o.Severity

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConstAlarmDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"display",
		"fields",
		"group",
		"key",
		"severity",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConstAlarmDefinition := _ConstAlarmDefinition{}

	err = json.Unmarshal(data, &varConstAlarmDefinition)

	if err != nil {
		return err
	}

	*o = ConstAlarmDefinition(varConstAlarmDefinition)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "display")
		delete(additionalProperties, "example")
		delete(additionalProperties, "fields")
		delete(additionalProperties, "group")
		delete(additionalProperties, "key")
		delete(additionalProperties, "marvis_suggestion_category")
		delete(additionalProperties, "severity")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConstAlarmDefinition struct {
	value *ConstAlarmDefinition
	isSet bool
}

func (v NullableConstAlarmDefinition) Get() *ConstAlarmDefinition {
	return v.value
}

func (v *NullableConstAlarmDefinition) Set(val *ConstAlarmDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableConstAlarmDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableConstAlarmDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConstAlarmDefinition(val *ConstAlarmDefinition) *NullableConstAlarmDefinition {
	return &NullableConstAlarmDefinition{value: val, isSet: true}
}

func (v NullableConstAlarmDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConstAlarmDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


