/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the RadiusConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RadiusConfig{}

// RadiusConfig Junos Radius config
type RadiusConfig struct {
	// how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
	AcctInterimInterval *int32 `json:"acct_interim_interval,omitempty"`
	AcctServers []RadiusAcctServer `json:"acct_servers,omitempty"`
	AuthServers []RadiusAuthServer `json:"auth_servers,omitempty"`
	// radius auth session retries
	AuthServersRetries *int32 `json:"auth_servers_retries,omitempty"`
	// radius auth session timeout
	AuthServersTimeout *int32 `json:"auth_servers_timeout,omitempty"`
	CoaEnabled *bool `json:"coa_enabled,omitempty"`
	CoaPort *int32 `json:"coa_port,omitempty"`
	// use `network`or `source_ip` which network the RADIUS server resides, if there's static IP for this network, we'd use it as source-ip
	Network *string `json:"network,omitempty"`
	// use `network`or `source_ip`
	SourceIp *string `json:"source_ip,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RadiusConfig RadiusConfig

// NewRadiusConfig instantiates a new RadiusConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRadiusConfig() *RadiusConfig {
	this := RadiusConfig{}
	var acctInterimInterval int32 = 0
	this.AcctInterimInterval = &acctInterimInterval
	var authServersRetries int32 = 3
	this.AuthServersRetries = &authServersRetries
	var authServersTimeout int32 = 5
	this.AuthServersTimeout = &authServersTimeout
	var coaEnabled bool = false
	this.CoaEnabled = &coaEnabled
	var coaPort int32 = 3799
	this.CoaPort = &coaPort
	return &this
}

// NewRadiusConfigWithDefaults instantiates a new RadiusConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRadiusConfigWithDefaults() *RadiusConfig {
	this := RadiusConfig{}
	var acctInterimInterval int32 = 0
	this.AcctInterimInterval = &acctInterimInterval
	var authServersRetries int32 = 3
	this.AuthServersRetries = &authServersRetries
	var authServersTimeout int32 = 5
	this.AuthServersTimeout = &authServersTimeout
	var coaEnabled bool = false
	this.CoaEnabled = &coaEnabled
	var coaPort int32 = 3799
	this.CoaPort = &coaPort
	return &this
}

// GetAcctInterimInterval returns the AcctInterimInterval field value if set, zero value otherwise.
func (o *RadiusConfig) GetAcctInterimInterval() int32 {
	if o == nil || IsNil(o.AcctInterimInterval) {
		var ret int32
		return ret
	}
	return *o.AcctInterimInterval
}

// GetAcctInterimIntervalOk returns a tuple with the AcctInterimInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfig) GetAcctInterimIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.AcctInterimInterval) {
		return nil, false
	}
	return o.AcctInterimInterval, true
}

// HasAcctInterimInterval returns a boolean if a field has been set.
func (o *RadiusConfig) HasAcctInterimInterval() bool {
	if o != nil && !IsNil(o.AcctInterimInterval) {
		return true
	}

	return false
}

// SetAcctInterimInterval gets a reference to the given int32 and assigns it to the AcctInterimInterval field.
func (o *RadiusConfig) SetAcctInterimInterval(v int32) {
	o.AcctInterimInterval = &v
}

// GetAcctServers returns the AcctServers field value if set, zero value otherwise.
func (o *RadiusConfig) GetAcctServers() []RadiusAcctServer {
	if o == nil || IsNil(o.AcctServers) {
		var ret []RadiusAcctServer
		return ret
	}
	return o.AcctServers
}

// GetAcctServersOk returns a tuple with the AcctServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfig) GetAcctServersOk() ([]RadiusAcctServer, bool) {
	if o == nil || IsNil(o.AcctServers) {
		return nil, false
	}
	return o.AcctServers, true
}

// HasAcctServers returns a boolean if a field has been set.
func (o *RadiusConfig) HasAcctServers() bool {
	if o != nil && !IsNil(o.AcctServers) {
		return true
	}

	return false
}

// SetAcctServers gets a reference to the given []RadiusAcctServer and assigns it to the AcctServers field.
func (o *RadiusConfig) SetAcctServers(v []RadiusAcctServer) {
	o.AcctServers = v
}

// GetAuthServers returns the AuthServers field value if set, zero value otherwise.
func (o *RadiusConfig) GetAuthServers() []RadiusAuthServer {
	if o == nil || IsNil(o.AuthServers) {
		var ret []RadiusAuthServer
		return ret
	}
	return o.AuthServers
}

// GetAuthServersOk returns a tuple with the AuthServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfig) GetAuthServersOk() ([]RadiusAuthServer, bool) {
	if o == nil || IsNil(o.AuthServers) {
		return nil, false
	}
	return o.AuthServers, true
}

// HasAuthServers returns a boolean if a field has been set.
func (o *RadiusConfig) HasAuthServers() bool {
	if o != nil && !IsNil(o.AuthServers) {
		return true
	}

	return false
}

// SetAuthServers gets a reference to the given []RadiusAuthServer and assigns it to the AuthServers field.
func (o *RadiusConfig) SetAuthServers(v []RadiusAuthServer) {
	o.AuthServers = v
}

// GetAuthServersRetries returns the AuthServersRetries field value if set, zero value otherwise.
func (o *RadiusConfig) GetAuthServersRetries() int32 {
	if o == nil || IsNil(o.AuthServersRetries) {
		var ret int32
		return ret
	}
	return *o.AuthServersRetries
}

// GetAuthServersRetriesOk returns a tuple with the AuthServersRetries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfig) GetAuthServersRetriesOk() (*int32, bool) {
	if o == nil || IsNil(o.AuthServersRetries) {
		return nil, false
	}
	return o.AuthServersRetries, true
}

// HasAuthServersRetries returns a boolean if a field has been set.
func (o *RadiusConfig) HasAuthServersRetries() bool {
	if o != nil && !IsNil(o.AuthServersRetries) {
		return true
	}

	return false
}

// SetAuthServersRetries gets a reference to the given int32 and assigns it to the AuthServersRetries field.
func (o *RadiusConfig) SetAuthServersRetries(v int32) {
	o.AuthServersRetries = &v
}

// GetAuthServersTimeout returns the AuthServersTimeout field value if set, zero value otherwise.
func (o *RadiusConfig) GetAuthServersTimeout() int32 {
	if o == nil || IsNil(o.AuthServersTimeout) {
		var ret int32
		return ret
	}
	return *o.AuthServersTimeout
}

// GetAuthServersTimeoutOk returns a tuple with the AuthServersTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfig) GetAuthServersTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.AuthServersTimeout) {
		return nil, false
	}
	return o.AuthServersTimeout, true
}

// HasAuthServersTimeout returns a boolean if a field has been set.
func (o *RadiusConfig) HasAuthServersTimeout() bool {
	if o != nil && !IsNil(o.AuthServersTimeout) {
		return true
	}

	return false
}

// SetAuthServersTimeout gets a reference to the given int32 and assigns it to the AuthServersTimeout field.
func (o *RadiusConfig) SetAuthServersTimeout(v int32) {
	o.AuthServersTimeout = &v
}

// GetCoaEnabled returns the CoaEnabled field value if set, zero value otherwise.
func (o *RadiusConfig) GetCoaEnabled() bool {
	if o == nil || IsNil(o.CoaEnabled) {
		var ret bool
		return ret
	}
	return *o.CoaEnabled
}

// GetCoaEnabledOk returns a tuple with the CoaEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfig) GetCoaEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CoaEnabled) {
		return nil, false
	}
	return o.CoaEnabled, true
}

// HasCoaEnabled returns a boolean if a field has been set.
func (o *RadiusConfig) HasCoaEnabled() bool {
	if o != nil && !IsNil(o.CoaEnabled) {
		return true
	}

	return false
}

// SetCoaEnabled gets a reference to the given bool and assigns it to the CoaEnabled field.
func (o *RadiusConfig) SetCoaEnabled(v bool) {
	o.CoaEnabled = &v
}

// GetCoaPort returns the CoaPort field value if set, zero value otherwise.
func (o *RadiusConfig) GetCoaPort() int32 {
	if o == nil || IsNil(o.CoaPort) {
		var ret int32
		return ret
	}
	return *o.CoaPort
}

// GetCoaPortOk returns a tuple with the CoaPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfig) GetCoaPortOk() (*int32, bool) {
	if o == nil || IsNil(o.CoaPort) {
		return nil, false
	}
	return o.CoaPort, true
}

// HasCoaPort returns a boolean if a field has been set.
func (o *RadiusConfig) HasCoaPort() bool {
	if o != nil && !IsNil(o.CoaPort) {
		return true
	}

	return false
}

// SetCoaPort gets a reference to the given int32 and assigns it to the CoaPort field.
func (o *RadiusConfig) SetCoaPort(v int32) {
	o.CoaPort = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *RadiusConfig) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfig) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *RadiusConfig) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *RadiusConfig) SetNetwork(v string) {
	o.Network = &v
}

// GetSourceIp returns the SourceIp field value if set, zero value otherwise.
func (o *RadiusConfig) GetSourceIp() string {
	if o == nil || IsNil(o.SourceIp) {
		var ret string
		return ret
	}
	return *o.SourceIp
}

// GetSourceIpOk returns a tuple with the SourceIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfig) GetSourceIpOk() (*string, bool) {
	if o == nil || IsNil(o.SourceIp) {
		return nil, false
	}
	return o.SourceIp, true
}

// HasSourceIp returns a boolean if a field has been set.
func (o *RadiusConfig) HasSourceIp() bool {
	if o != nil && !IsNil(o.SourceIp) {
		return true
	}

	return false
}

// SetSourceIp gets a reference to the given string and assigns it to the SourceIp field.
func (o *RadiusConfig) SetSourceIp(v string) {
	o.SourceIp = &v
}

func (o RadiusConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RadiusConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AcctInterimInterval) {
		toSerialize["acct_interim_interval"] = o.AcctInterimInterval
	}
	if !IsNil(o.AcctServers) {
		toSerialize["acct_servers"] = o.AcctServers
	}
	if !IsNil(o.AuthServers) {
		toSerialize["auth_servers"] = o.AuthServers
	}
	if !IsNil(o.AuthServersRetries) {
		toSerialize["auth_servers_retries"] = o.AuthServersRetries
	}
	if !IsNil(o.AuthServersTimeout) {
		toSerialize["auth_servers_timeout"] = o.AuthServersTimeout
	}
	if !IsNil(o.CoaEnabled) {
		toSerialize["coa_enabled"] = o.CoaEnabled
	}
	if !IsNil(o.CoaPort) {
		toSerialize["coa_port"] = o.CoaPort
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.SourceIp) {
		toSerialize["source_ip"] = o.SourceIp
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RadiusConfig) UnmarshalJSON(data []byte) (err error) {
	varRadiusConfig := _RadiusConfig{}

	err = json.Unmarshal(data, &varRadiusConfig)

	if err != nil {
		return err
	}

	*o = RadiusConfig(varRadiusConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "acct_interim_interval")
		delete(additionalProperties, "acct_servers")
		delete(additionalProperties, "auth_servers")
		delete(additionalProperties, "auth_servers_retries")
		delete(additionalProperties, "auth_servers_timeout")
		delete(additionalProperties, "coa_enabled")
		delete(additionalProperties, "coa_port")
		delete(additionalProperties, "network")
		delete(additionalProperties, "source_ip")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRadiusConfig struct {
	value *RadiusConfig
	isSet bool
}

func (v NullableRadiusConfig) Get() *RadiusConfig {
	return v.value
}

func (v *NullableRadiusConfig) Set(val *RadiusConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRadiusConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRadiusConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRadiusConfig(val *RadiusConfig) *NullableRadiusConfig {
	return &NullableRadiusConfig{value: val, isSet: true}
}

func (v NullableRadiusConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRadiusConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


