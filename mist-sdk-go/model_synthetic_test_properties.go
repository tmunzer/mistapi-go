/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the SyntheticTestProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyntheticTestProperties{}

// SyntheticTestProperties struct for SyntheticTestProperties
type SyntheticTestProperties struct {
	CustomTestUrls []string `json:"custom_test_urls,omitempty"`
	// for some vlans where we don't want this to run
	Disabled *bool `json:"disabled,omitempty"`
	VlanIds []int32 `json:"vlan_ids,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SyntheticTestProperties SyntheticTestProperties

// NewSyntheticTestProperties instantiates a new SyntheticTestProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticTestProperties() *SyntheticTestProperties {
	this := SyntheticTestProperties{}
	var disabled bool = false
	this.Disabled = &disabled
	return &this
}

// NewSyntheticTestPropertiesWithDefaults instantiates a new SyntheticTestProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticTestPropertiesWithDefaults() *SyntheticTestProperties {
	this := SyntheticTestProperties{}
	var disabled bool = false
	this.Disabled = &disabled
	return &this
}

// GetCustomTestUrls returns the CustomTestUrls field value if set, zero value otherwise.
func (o *SyntheticTestProperties) GetCustomTestUrls() []string {
	if o == nil || IsNil(o.CustomTestUrls) {
		var ret []string
		return ret
	}
	return o.CustomTestUrls
}

// GetCustomTestUrlsOk returns a tuple with the CustomTestUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticTestProperties) GetCustomTestUrlsOk() ([]string, bool) {
	if o == nil || IsNil(o.CustomTestUrls) {
		return nil, false
	}
	return o.CustomTestUrls, true
}

// HasCustomTestUrls returns a boolean if a field has been set.
func (o *SyntheticTestProperties) HasCustomTestUrls() bool {
	if o != nil && !IsNil(o.CustomTestUrls) {
		return true
	}

	return false
}

// SetCustomTestUrls gets a reference to the given []string and assigns it to the CustomTestUrls field.
func (o *SyntheticTestProperties) SetCustomTestUrls(v []string) {
	o.CustomTestUrls = v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *SyntheticTestProperties) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticTestProperties) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *SyntheticTestProperties) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *SyntheticTestProperties) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetVlanIds returns the VlanIds field value if set, zero value otherwise.
func (o *SyntheticTestProperties) GetVlanIds() []int32 {
	if o == nil || IsNil(o.VlanIds) {
		var ret []int32
		return ret
	}
	return o.VlanIds
}

// GetVlanIdsOk returns a tuple with the VlanIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticTestProperties) GetVlanIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.VlanIds) {
		return nil, false
	}
	return o.VlanIds, true
}

// HasVlanIds returns a boolean if a field has been set.
func (o *SyntheticTestProperties) HasVlanIds() bool {
	if o != nil && !IsNil(o.VlanIds) {
		return true
	}

	return false
}

// SetVlanIds gets a reference to the given []int32 and assigns it to the VlanIds field.
func (o *SyntheticTestProperties) SetVlanIds(v []int32) {
	o.VlanIds = v
}

func (o SyntheticTestProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyntheticTestProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomTestUrls) {
		toSerialize["custom_test_urls"] = o.CustomTestUrls
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.VlanIds) {
		toSerialize["vlan_ids"] = o.VlanIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SyntheticTestProperties) UnmarshalJSON(data []byte) (err error) {
	varSyntheticTestProperties := _SyntheticTestProperties{}

	err = json.Unmarshal(data, &varSyntheticTestProperties)

	if err != nil {
		return err
	}

	*o = SyntheticTestProperties(varSyntheticTestProperties)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "custom_test_urls")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "vlan_ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSyntheticTestProperties struct {
	value *SyntheticTestProperties
	isSet bool
}

func (v NullableSyntheticTestProperties) Get() *SyntheticTestProperties {
	return v.value
}

func (v *NullableSyntheticTestProperties) Set(val *SyntheticTestProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticTestProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticTestProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticTestProperties(val *SyntheticTestProperties) *NullableSyntheticTestProperties {
	return &NullableSyntheticTestProperties{value: val, isSet: true}
}

func (v NullableSyntheticTestProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticTestProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


