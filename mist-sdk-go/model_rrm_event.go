/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the RrmEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RrmEvent{}

// RrmEvent struct for RrmEvent
type RrmEvent struct {
	ApId string `json:"ap_id"`
	Band Dot11Band `json:"band"`
	Bandwidth Dot11Bandwidth `json:"bandwidth"`
	// channel for the band from rrm
	Channel int32 `json:"channel"`
	Event RrmEventType `json:"event"`
	// tx power of the radio
	Power int32 `json:"power"`
	PreBandwidth RrmEventPreBandwidth `json:"pre_bandwidth"`
	// (previously) channel for the band, 0 means no previously available
	PreChannel int32 `json:"pre_channel"`
	// (previously) tx power of the radio, 0 means no previously available
	PrePower float32 `json:"pre_power"`
	PreUsage string `json:"pre_usage"`
	// timestamp of the event
	Timestamp float32 `json:"timestamp"`
	Usage string `json:"usage"`
	AdditionalProperties map[string]interface{}
}

type _RrmEvent RrmEvent

// NewRrmEvent instantiates a new RrmEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRrmEvent(apId string, band Dot11Band, bandwidth Dot11Bandwidth, channel int32, event RrmEventType, power int32, preBandwidth RrmEventPreBandwidth, preChannel int32, prePower float32, preUsage string, timestamp float32, usage string) *RrmEvent {
	this := RrmEvent{}
	this.ApId = apId
	this.Band = band
	this.Bandwidth = bandwidth
	this.Channel = channel
	this.Event = event
	this.Power = power
	this.PreBandwidth = preBandwidth
	this.PreChannel = preChannel
	this.PrePower = prePower
	this.PreUsage = preUsage
	this.Timestamp = timestamp
	this.Usage = usage
	return &this
}

// NewRrmEventWithDefaults instantiates a new RrmEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRrmEventWithDefaults() *RrmEvent {
	this := RrmEvent{}
	return &this
}

// GetApId returns the ApId field value
func (o *RrmEvent) GetApId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApId
}

// GetApIdOk returns a tuple with the ApId field value
// and a boolean to check if the value has been set.
func (o *RrmEvent) GetApIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApId, true
}

// SetApId sets field value
func (o *RrmEvent) SetApId(v string) {
	o.ApId = v
}

// GetBand returns the Band field value
func (o *RrmEvent) GetBand() Dot11Band {
	if o == nil {
		var ret Dot11Band
		return ret
	}

	return o.Band
}

// GetBandOk returns a tuple with the Band field value
// and a boolean to check if the value has been set.
func (o *RrmEvent) GetBandOk() (*Dot11Band, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Band, true
}

// SetBand sets field value
func (o *RrmEvent) SetBand(v Dot11Band) {
	o.Band = v
}

// GetBandwidth returns the Bandwidth field value
func (o *RrmEvent) GetBandwidth() Dot11Bandwidth {
	if o == nil {
		var ret Dot11Bandwidth
		return ret
	}

	return o.Bandwidth
}

// GetBandwidthOk returns a tuple with the Bandwidth field value
// and a boolean to check if the value has been set.
func (o *RrmEvent) GetBandwidthOk() (*Dot11Bandwidth, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bandwidth, true
}

// SetBandwidth sets field value
func (o *RrmEvent) SetBandwidth(v Dot11Bandwidth) {
	o.Bandwidth = v
}

// GetChannel returns the Channel field value
func (o *RrmEvent) GetChannel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Channel
}

// GetChannelOk returns a tuple with the Channel field value
// and a boolean to check if the value has been set.
func (o *RrmEvent) GetChannelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Channel, true
}

// SetChannel sets field value
func (o *RrmEvent) SetChannel(v int32) {
	o.Channel = v
}

// GetEvent returns the Event field value
func (o *RrmEvent) GetEvent() RrmEventType {
	if o == nil {
		var ret RrmEventType
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *RrmEvent) GetEventOk() (*RrmEventType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *RrmEvent) SetEvent(v RrmEventType) {
	o.Event = v
}

// GetPower returns the Power field value
func (o *RrmEvent) GetPower() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Power
}

// GetPowerOk returns a tuple with the Power field value
// and a boolean to check if the value has been set.
func (o *RrmEvent) GetPowerOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Power, true
}

// SetPower sets field value
func (o *RrmEvent) SetPower(v int32) {
	o.Power = v
}

// GetPreBandwidth returns the PreBandwidth field value
func (o *RrmEvent) GetPreBandwidth() RrmEventPreBandwidth {
	if o == nil {
		var ret RrmEventPreBandwidth
		return ret
	}

	return o.PreBandwidth
}

// GetPreBandwidthOk returns a tuple with the PreBandwidth field value
// and a boolean to check if the value has been set.
func (o *RrmEvent) GetPreBandwidthOk() (*RrmEventPreBandwidth, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreBandwidth, true
}

// SetPreBandwidth sets field value
func (o *RrmEvent) SetPreBandwidth(v RrmEventPreBandwidth) {
	o.PreBandwidth = v
}

// GetPreChannel returns the PreChannel field value
func (o *RrmEvent) GetPreChannel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PreChannel
}

// GetPreChannelOk returns a tuple with the PreChannel field value
// and a boolean to check if the value has been set.
func (o *RrmEvent) GetPreChannelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreChannel, true
}

// SetPreChannel sets field value
func (o *RrmEvent) SetPreChannel(v int32) {
	o.PreChannel = v
}

// GetPrePower returns the PrePower field value
func (o *RrmEvent) GetPrePower() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PrePower
}

// GetPrePowerOk returns a tuple with the PrePower field value
// and a boolean to check if the value has been set.
func (o *RrmEvent) GetPrePowerOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrePower, true
}

// SetPrePower sets field value
func (o *RrmEvent) SetPrePower(v float32) {
	o.PrePower = v
}

// GetPreUsage returns the PreUsage field value
func (o *RrmEvent) GetPreUsage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PreUsage
}

// GetPreUsageOk returns a tuple with the PreUsage field value
// and a boolean to check if the value has been set.
func (o *RrmEvent) GetPreUsageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreUsage, true
}

// SetPreUsage sets field value
func (o *RrmEvent) SetPreUsage(v string) {
	o.PreUsage = v
}

// GetTimestamp returns the Timestamp field value
func (o *RrmEvent) GetTimestamp() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *RrmEvent) GetTimestampOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *RrmEvent) SetTimestamp(v float32) {
	o.Timestamp = v
}

// GetUsage returns the Usage field value
func (o *RrmEvent) GetUsage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Usage
}

// GetUsageOk returns a tuple with the Usage field value
// and a boolean to check if the value has been set.
func (o *RrmEvent) GetUsageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Usage, true
}

// SetUsage sets field value
func (o *RrmEvent) SetUsage(v string) {
	o.Usage = v
}

func (o RrmEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RrmEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ap_id"] = o.ApId
	toSerialize["band"] = o.Band
	toSerialize["bandwidth"] = o.Bandwidth
	toSerialize["channel"] = o.Channel
	toSerialize["event"] = o.Event
	toSerialize["power"] = o.Power
	toSerialize["pre_bandwidth"] = o.PreBandwidth
	toSerialize["pre_channel"] = o.PreChannel
	toSerialize["pre_power"] = o.PrePower
	toSerialize["pre_usage"] = o.PreUsage
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["usage"] = o.Usage

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RrmEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ap_id",
		"band",
		"bandwidth",
		"channel",
		"event",
		"power",
		"pre_bandwidth",
		"pre_channel",
		"pre_power",
		"pre_usage",
		"timestamp",
		"usage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRrmEvent := _RrmEvent{}

	err = json.Unmarshal(data, &varRrmEvent)

	if err != nil {
		return err
	}

	*o = RrmEvent(varRrmEvent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ap_id")
		delete(additionalProperties, "band")
		delete(additionalProperties, "bandwidth")
		delete(additionalProperties, "channel")
		delete(additionalProperties, "event")
		delete(additionalProperties, "power")
		delete(additionalProperties, "pre_bandwidth")
		delete(additionalProperties, "pre_channel")
		delete(additionalProperties, "pre_power")
		delete(additionalProperties, "pre_usage")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "usage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRrmEvent struct {
	value *RrmEvent
	isSet bool
}

func (v NullableRrmEvent) Get() *RrmEvent {
	return v.value
}

func (v *NullableRrmEvent) Set(val *RrmEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableRrmEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableRrmEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRrmEvent(val *RrmEvent) *NullableRrmEvent {
	return &NullableRrmEvent{value: val, isSet: true}
}

func (v NullableRrmEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRrmEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


