/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the AclPolicyAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AclPolicyAction{}

// AclPolicyAction struct for AclPolicyAction
type AclPolicyAction struct {
	Action *AllowDeny `json:"action,omitempty"`
	DstTag *string `json:"dst_tag,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AclPolicyAction AclPolicyAction

// NewAclPolicyAction instantiates a new AclPolicyAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAclPolicyAction() *AclPolicyAction {
	this := AclPolicyAction{}
	var action AllowDeny = ALLOWDENY_ALLOW
	this.Action = &action
	return &this
}

// NewAclPolicyActionWithDefaults instantiates a new AclPolicyAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAclPolicyActionWithDefaults() *AclPolicyAction {
	this := AclPolicyAction{}
	var action AllowDeny = ALLOWDENY_ALLOW
	this.Action = &action
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *AclPolicyAction) GetAction() AllowDeny {
	if o == nil || IsNil(o.Action) {
		var ret AllowDeny
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AclPolicyAction) GetActionOk() (*AllowDeny, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *AclPolicyAction) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given AllowDeny and assigns it to the Action field.
func (o *AclPolicyAction) SetAction(v AllowDeny) {
	o.Action = &v
}

// GetDstTag returns the DstTag field value if set, zero value otherwise.
func (o *AclPolicyAction) GetDstTag() string {
	if o == nil || IsNil(o.DstTag) {
		var ret string
		return ret
	}
	return *o.DstTag
}

// GetDstTagOk returns a tuple with the DstTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AclPolicyAction) GetDstTagOk() (*string, bool) {
	if o == nil || IsNil(o.DstTag) {
		return nil, false
	}
	return o.DstTag, true
}

// HasDstTag returns a boolean if a field has been set.
func (o *AclPolicyAction) HasDstTag() bool {
	if o != nil && !IsNil(o.DstTag) {
		return true
	}

	return false
}

// SetDstTag gets a reference to the given string and assigns it to the DstTag field.
func (o *AclPolicyAction) SetDstTag(v string) {
	o.DstTag = &v
}

func (o AclPolicyAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AclPolicyAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.DstTag) {
		toSerialize["dst_tag"] = o.DstTag
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AclPolicyAction) UnmarshalJSON(data []byte) (err error) {
	varAclPolicyAction := _AclPolicyAction{}

	err = json.Unmarshal(data, &varAclPolicyAction)

	if err != nil {
		return err
	}

	*o = AclPolicyAction(varAclPolicyAction)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "action")
		delete(additionalProperties, "dst_tag")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAclPolicyAction struct {
	value *AclPolicyAction
	isSet bool
}

func (v NullableAclPolicyAction) Get() *AclPolicyAction {
	return v.value
}

func (v *NullableAclPolicyAction) Set(val *AclPolicyAction) {
	v.value = val
	v.isSet = true
}

func (v NullableAclPolicyAction) IsSet() bool {
	return v.isSet
}

func (v *NullableAclPolicyAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAclPolicyAction(val *AclPolicyAction) *NullableAclPolicyAction {
	return &NullableAclPolicyAction{value: val, isSet: true}
}

func (v NullableAclPolicyAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAclPolicyAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


