/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the UnconnectedClientStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnconnectedClientStat{}

// UnconnectedClientStat Unconnected clients statistics
type UnconnectedClientStat struct {
	// mac address of the AP that heard the client
	ApMac string `json:"ap_mac"`
	// last seen timestamp
	LastSeen float32 `json:"last_seen"`
	// mac address of the (unconnected) client
	Mac string `json:"mac"`
	// device manufacture, through fingerprinting or OUI
	Manufacture string `json:"manufacture"`
	// map_id of the client (if known), or null
	MapId NullableString `json:"map_id,omitempty"`
	// client RSSI observered by the AP that heard the client (in dBm)
	Rssi int32 `json:"rssi"`
	// x (in pixels) of user location on the map (if known)
	X *int32 `json:"x,omitempty"`
	// y (in pixels) of user location on the map (if known)
	Y int32 `json:"y"`
	AdditionalProperties map[string]interface{}
}

type _UnconnectedClientStat UnconnectedClientStat

// NewUnconnectedClientStat instantiates a new UnconnectedClientStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnconnectedClientStat(apMac string, lastSeen float32, mac string, manufacture string, rssi int32, y int32) *UnconnectedClientStat {
	this := UnconnectedClientStat{}
	this.ApMac = apMac
	this.LastSeen = lastSeen
	this.Mac = mac
	this.Manufacture = manufacture
	this.Rssi = rssi
	this.Y = y
	return &this
}

// NewUnconnectedClientStatWithDefaults instantiates a new UnconnectedClientStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnconnectedClientStatWithDefaults() *UnconnectedClientStat {
	this := UnconnectedClientStat{}
	return &this
}

// GetApMac returns the ApMac field value
func (o *UnconnectedClientStat) GetApMac() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApMac
}

// GetApMacOk returns a tuple with the ApMac field value
// and a boolean to check if the value has been set.
func (o *UnconnectedClientStat) GetApMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApMac, true
}

// SetApMac sets field value
func (o *UnconnectedClientStat) SetApMac(v string) {
	o.ApMac = v
}

// GetLastSeen returns the LastSeen field value
func (o *UnconnectedClientStat) GetLastSeen() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.LastSeen
}

// GetLastSeenOk returns a tuple with the LastSeen field value
// and a boolean to check if the value has been set.
func (o *UnconnectedClientStat) GetLastSeenOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastSeen, true
}

// SetLastSeen sets field value
func (o *UnconnectedClientStat) SetLastSeen(v float32) {
	o.LastSeen = v
}

// GetMac returns the Mac field value
func (o *UnconnectedClientStat) GetMac() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mac
}

// GetMacOk returns a tuple with the Mac field value
// and a boolean to check if the value has been set.
func (o *UnconnectedClientStat) GetMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mac, true
}

// SetMac sets field value
func (o *UnconnectedClientStat) SetMac(v string) {
	o.Mac = v
}

// GetManufacture returns the Manufacture field value
func (o *UnconnectedClientStat) GetManufacture() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Manufacture
}

// GetManufactureOk returns a tuple with the Manufacture field value
// and a boolean to check if the value has been set.
func (o *UnconnectedClientStat) GetManufactureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Manufacture, true
}

// SetManufacture sets field value
func (o *UnconnectedClientStat) SetManufacture(v string) {
	o.Manufacture = v
}

// GetMapId returns the MapId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnconnectedClientStat) GetMapId() string {
	if o == nil || IsNil(o.MapId.Get()) {
		var ret string
		return ret
	}
	return *o.MapId.Get()
}

// GetMapIdOk returns a tuple with the MapId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnconnectedClientStat) GetMapIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MapId.Get(), o.MapId.IsSet()
}

// HasMapId returns a boolean if a field has been set.
func (o *UnconnectedClientStat) HasMapId() bool {
	if o != nil && o.MapId.IsSet() {
		return true
	}

	return false
}

// SetMapId gets a reference to the given NullableString and assigns it to the MapId field.
func (o *UnconnectedClientStat) SetMapId(v string) {
	o.MapId.Set(&v)
}
// SetMapIdNil sets the value for MapId to be an explicit nil
func (o *UnconnectedClientStat) SetMapIdNil() {
	o.MapId.Set(nil)
}

// UnsetMapId ensures that no value is present for MapId, not even an explicit nil
func (o *UnconnectedClientStat) UnsetMapId() {
	o.MapId.Unset()
}

// GetRssi returns the Rssi field value
func (o *UnconnectedClientStat) GetRssi() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Rssi
}

// GetRssiOk returns a tuple with the Rssi field value
// and a boolean to check if the value has been set.
func (o *UnconnectedClientStat) GetRssiOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rssi, true
}

// SetRssi sets field value
func (o *UnconnectedClientStat) SetRssi(v int32) {
	o.Rssi = v
}

// GetX returns the X field value if set, zero value otherwise.
func (o *UnconnectedClientStat) GetX() int32 {
	if o == nil || IsNil(o.X) {
		var ret int32
		return ret
	}
	return *o.X
}

// GetXOk returns a tuple with the X field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnconnectedClientStat) GetXOk() (*int32, bool) {
	if o == nil || IsNil(o.X) {
		return nil, false
	}
	return o.X, true
}

// HasX returns a boolean if a field has been set.
func (o *UnconnectedClientStat) HasX() bool {
	if o != nil && !IsNil(o.X) {
		return true
	}

	return false
}

// SetX gets a reference to the given int32 and assigns it to the X field.
func (o *UnconnectedClientStat) SetX(v int32) {
	o.X = &v
}

// GetY returns the Y field value
func (o *UnconnectedClientStat) GetY() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Y
}

// GetYOk returns a tuple with the Y field value
// and a boolean to check if the value has been set.
func (o *UnconnectedClientStat) GetYOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Y, true
}

// SetY sets field value
func (o *UnconnectedClientStat) SetY(v int32) {
	o.Y = v
}

func (o UnconnectedClientStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnconnectedClientStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ap_mac"] = o.ApMac
	toSerialize["last_seen"] = o.LastSeen
	toSerialize["mac"] = o.Mac
	toSerialize["manufacture"] = o.Manufacture
	if o.MapId.IsSet() {
		toSerialize["map_id"] = o.MapId.Get()
	}
	toSerialize["rssi"] = o.Rssi
	if !IsNil(o.X) {
		toSerialize["x"] = o.X
	}
	toSerialize["y"] = o.Y

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UnconnectedClientStat) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ap_mac",
		"last_seen",
		"mac",
		"manufacture",
		"rssi",
		"y",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUnconnectedClientStat := _UnconnectedClientStat{}

	err = json.Unmarshal(data, &varUnconnectedClientStat)

	if err != nil {
		return err
	}

	*o = UnconnectedClientStat(varUnconnectedClientStat)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ap_mac")
		delete(additionalProperties, "last_seen")
		delete(additionalProperties, "mac")
		delete(additionalProperties, "manufacture")
		delete(additionalProperties, "map_id")
		delete(additionalProperties, "rssi")
		delete(additionalProperties, "x")
		delete(additionalProperties, "y")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUnconnectedClientStat struct {
	value *UnconnectedClientStat
	isSet bool
}

func (v NullableUnconnectedClientStat) Get() *UnconnectedClientStat {
	return v.value
}

func (v *NullableUnconnectedClientStat) Set(val *UnconnectedClientStat) {
	v.value = val
	v.isSet = true
}

func (v NullableUnconnectedClientStat) IsSet() bool {
	return v.isSet
}

func (v *NullableUnconnectedClientStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnconnectedClientStat(val *UnconnectedClientStat) *NullableUnconnectedClientStat {
	return &NullableUnconnectedClientStat{value: val, isSet: true}
}

func (v NullableUnconnectedClientStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnconnectedClientStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


