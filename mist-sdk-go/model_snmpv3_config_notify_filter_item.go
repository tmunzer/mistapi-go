/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the Snmpv3ConfigNotifyFilterItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Snmpv3ConfigNotifyFilterItem{}

// Snmpv3ConfigNotifyFilterItem struct for Snmpv3ConfigNotifyFilterItem
type Snmpv3ConfigNotifyFilterItem struct {
	Contents []Snmpv3ConfigNotifyFilterItemContent `json:"contents,omitempty"`
	ProfileName *string `json:"profile_name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Snmpv3ConfigNotifyFilterItem Snmpv3ConfigNotifyFilterItem

// NewSnmpv3ConfigNotifyFilterItem instantiates a new Snmpv3ConfigNotifyFilterItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnmpv3ConfigNotifyFilterItem() *Snmpv3ConfigNotifyFilterItem {
	this := Snmpv3ConfigNotifyFilterItem{}
	return &this
}

// NewSnmpv3ConfigNotifyFilterItemWithDefaults instantiates a new Snmpv3ConfigNotifyFilterItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnmpv3ConfigNotifyFilterItemWithDefaults() *Snmpv3ConfigNotifyFilterItem {
	this := Snmpv3ConfigNotifyFilterItem{}
	return &this
}

// GetContents returns the Contents field value if set, zero value otherwise.
func (o *Snmpv3ConfigNotifyFilterItem) GetContents() []Snmpv3ConfigNotifyFilterItemContent {
	if o == nil || IsNil(o.Contents) {
		var ret []Snmpv3ConfigNotifyFilterItemContent
		return ret
	}
	return o.Contents
}

// GetContentsOk returns a tuple with the Contents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snmpv3ConfigNotifyFilterItem) GetContentsOk() ([]Snmpv3ConfigNotifyFilterItemContent, bool) {
	if o == nil || IsNil(o.Contents) {
		return nil, false
	}
	return o.Contents, true
}

// HasContents returns a boolean if a field has been set.
func (o *Snmpv3ConfigNotifyFilterItem) HasContents() bool {
	if o != nil && !IsNil(o.Contents) {
		return true
	}

	return false
}

// SetContents gets a reference to the given []Snmpv3ConfigNotifyFilterItemContent and assigns it to the Contents field.
func (o *Snmpv3ConfigNotifyFilterItem) SetContents(v []Snmpv3ConfigNotifyFilterItemContent) {
	o.Contents = v
}

// GetProfileName returns the ProfileName field value if set, zero value otherwise.
func (o *Snmpv3ConfigNotifyFilterItem) GetProfileName() string {
	if o == nil || IsNil(o.ProfileName) {
		var ret string
		return ret
	}
	return *o.ProfileName
}

// GetProfileNameOk returns a tuple with the ProfileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snmpv3ConfigNotifyFilterItem) GetProfileNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileName) {
		return nil, false
	}
	return o.ProfileName, true
}

// HasProfileName returns a boolean if a field has been set.
func (o *Snmpv3ConfigNotifyFilterItem) HasProfileName() bool {
	if o != nil && !IsNil(o.ProfileName) {
		return true
	}

	return false
}

// SetProfileName gets a reference to the given string and assigns it to the ProfileName field.
func (o *Snmpv3ConfigNotifyFilterItem) SetProfileName(v string) {
	o.ProfileName = &v
}

func (o Snmpv3ConfigNotifyFilterItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Snmpv3ConfigNotifyFilterItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Contents) {
		toSerialize["contents"] = o.Contents
	}
	if !IsNil(o.ProfileName) {
		toSerialize["profile_name"] = o.ProfileName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Snmpv3ConfigNotifyFilterItem) UnmarshalJSON(data []byte) (err error) {
	varSnmpv3ConfigNotifyFilterItem := _Snmpv3ConfigNotifyFilterItem{}

	err = json.Unmarshal(data, &varSnmpv3ConfigNotifyFilterItem)

	if err != nil {
		return err
	}

	*o = Snmpv3ConfigNotifyFilterItem(varSnmpv3ConfigNotifyFilterItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "contents")
		delete(additionalProperties, "profile_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSnmpv3ConfigNotifyFilterItem struct {
	value *Snmpv3ConfigNotifyFilterItem
	isSet bool
}

func (v NullableSnmpv3ConfigNotifyFilterItem) Get() *Snmpv3ConfigNotifyFilterItem {
	return v.value
}

func (v *NullableSnmpv3ConfigNotifyFilterItem) Set(val *Snmpv3ConfigNotifyFilterItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSnmpv3ConfigNotifyFilterItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSnmpv3ConfigNotifyFilterItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnmpv3ConfigNotifyFilterItem(val *Snmpv3ConfigNotifyFilterItem) *NullableSnmpv3ConfigNotifyFilterItem {
	return &NullableSnmpv3ConfigNotifyFilterItem{value: val, isSet: true}
}

func (v NullableSnmpv3ConfigNotifyFilterItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnmpv3ConfigNotifyFilterItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


