/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type SitesClientsNACAPI interface {

	/*
	CountSiteNacClientEvents countSiteNacClientEvents

	Count by Distinct Attributes of NAC Client-Events

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@return ApiCountSiteNacClientEventsRequest
	*/
	CountSiteNacClientEvents(ctx context.Context, siteId string) ApiCountSiteNacClientEventsRequest

	// CountSiteNacClientEventsExecute executes the request
	//  @return RepsonseCount
	CountSiteNacClientEventsExecute(r ApiCountSiteNacClientEventsRequest) (*RepsonseCount, *http.Response, error)

	/*
	CountSiteNacClients countSiteNacClients

	Count by Distinct Attributes of NAC Clients

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@return ApiCountSiteNacClientsRequest
	*/
	CountSiteNacClients(ctx context.Context, siteId string) ApiCountSiteNacClientsRequest

	// CountSiteNacClientsExecute executes the request
	//  @return RepsonseCount
	CountSiteNacClientsExecute(r ApiCountSiteNacClientsRequest) (*RepsonseCount, *http.Response, error)

	/*
	SearchSiteNacClients searchSiteNacClients

	Search Site NAC Clients

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@return ApiSearchSiteNacClientsRequest
	*/
	SearchSiteNacClients(ctx context.Context, siteId string) ApiSearchSiteNacClientsRequest

	// SearchSiteNacClientsExecute executes the request
	//  @return ResponseClientNacSearch
	SearchSiteNacClientsExecute(r ApiSearchSiteNacClientsRequest) (*ResponseClientNacSearch, *http.Response, error)

	/*
	SearcsearcSiteNacClientEventsacClientEvents searcsearcSiteNacClientEventsacClientEvents

	Search NAC Client Events

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@return ApiSearcsearcSiteNacClientEventsacClientEventsRequest
	*/
	SearcsearcSiteNacClientEventsacClientEvents(ctx context.Context, siteId string) ApiSearcsearcSiteNacClientEventsacClientEventsRequest

	// SearcsearcSiteNacClientEventsacClientEventsExecute executes the request
	//  @return ResponseEventsNacClientSearch
	SearcsearcSiteNacClientEventsacClientEventsExecute(r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) (*ResponseEventsNacClientSearch, *http.Response, error)
}

// SitesClientsNACAPIService SitesClientsNACAPI service
type SitesClientsNACAPIService service

type ApiCountSiteNacClientEventsRequest struct {
	ctx context.Context
	ApiService SitesClientsNACAPI
	siteId string
	distinct *SiteNacClientEventsCountDistinct
	type_ *string
	start *int32
	end *int32
	duration *string
	limit *int32
}

func (r ApiCountSiteNacClientEventsRequest) Distinct(distinct SiteNacClientEventsCountDistinct) ApiCountSiteNacClientEventsRequest {
	r.distinct = &distinct
	return r
}

// see [listDeviceEventsDefinitions]($e/Constants%20Events/listNacEventsDefinitions)
func (r ApiCountSiteNacClientEventsRequest) Type_(type_ string) ApiCountSiteNacClientEventsRequest {
	r.type_ = &type_
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiCountSiteNacClientEventsRequest) Start(start int32) ApiCountSiteNacClientEventsRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiCountSiteNacClientEventsRequest) End(end int32) ApiCountSiteNacClientEventsRequest {
	r.end = &end
	return r
}

// duration like 7d, 2w
func (r ApiCountSiteNacClientEventsRequest) Duration(duration string) ApiCountSiteNacClientEventsRequest {
	r.duration = &duration
	return r
}

func (r ApiCountSiteNacClientEventsRequest) Limit(limit int32) ApiCountSiteNacClientEventsRequest {
	r.limit = &limit
	return r
}

func (r ApiCountSiteNacClientEventsRequest) Execute() (*RepsonseCount, *http.Response, error) {
	return r.ApiService.CountSiteNacClientEventsExecute(r)
}

/*
CountSiteNacClientEvents countSiteNacClientEvents

Count by Distinct Attributes of NAC Client-Events

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @return ApiCountSiteNacClientEventsRequest
*/
func (a *SitesClientsNACAPIService) CountSiteNacClientEvents(ctx context.Context, siteId string) ApiCountSiteNacClientEventsRequest {
	return ApiCountSiteNacClientEventsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return RepsonseCount
func (a *SitesClientsNACAPIService) CountSiteNacClientEventsExecute(r ApiCountSiteNacClientEventsRequest) (*RepsonseCount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RepsonseCount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesClientsNACAPIService.CountSiteNacClientEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/nac_clients/events/count"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.distinct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinct", r.distinct, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCountSiteNacClientsRequest struct {
	ctx context.Context
	ApiService SitesClientsNACAPI
	siteId string
	distinct *SiteNacClientsCountDistinct
	lastNacruleId *string
	nacruleMatched *bool
	authType *string
	lastVlanId *string
	lastNasVendor *string
	idpId *string
	lastSsid *string
	lastUsername *string
	timestamp *float32
	lastAp *string
	mac *string
	lastStatus *string
	type_ *string
	mdmComplianceStatus *string
	mdmProvider *string
	start *int32
	end *int32
	duration *string
	limit *int32
	page *int32
}

// NAC Policy Rule ID, if matched
func (r ApiCountSiteNacClientsRequest) Distinct(distinct SiteNacClientsCountDistinct) ApiCountSiteNacClientsRequest {
	r.distinct = &distinct
	return r
}

// NAC Policy Rule ID, if matched
func (r ApiCountSiteNacClientsRequest) LastNacruleId(lastNacruleId string) ApiCountSiteNacClientsRequest {
	r.lastNacruleId = &lastNacruleId
	return r
}

// NAC Policy Rule Matched
func (r ApiCountSiteNacClientsRequest) NacruleMatched(nacruleMatched bool) ApiCountSiteNacClientsRequest {
	r.nacruleMatched = &nacruleMatched
	return r
}

// authentication type, e.g. “eap-tls”, “eap-ttls”, “eap-teap”, “mab”, “device-auth”
func (r ApiCountSiteNacClientsRequest) AuthType(authType string) ApiCountSiteNacClientsRequest {
	r.authType = &authType
	return r
}

// Vlan ID
func (r ApiCountSiteNacClientsRequest) LastVlanId(lastVlanId string) ApiCountSiteNacClientsRequest {
	r.lastVlanId = &lastVlanId
	return r
}

// vendor of NAS device
func (r ApiCountSiteNacClientsRequest) LastNasVendor(lastNasVendor string) ApiCountSiteNacClientsRequest {
	r.lastNasVendor = &lastNasVendor
	return r
}

// SSO ID, if present and used
func (r ApiCountSiteNacClientsRequest) IdpId(idpId string) ApiCountSiteNacClientsRequest {
	r.idpId = &idpId
	return r
}

// SSID
func (r ApiCountSiteNacClientsRequest) LastSsid(lastSsid string) ApiCountSiteNacClientsRequest {
	r.lastSsid = &lastSsid
	return r
}

// Username presented by the client
func (r ApiCountSiteNacClientsRequest) LastUsername(lastUsername string) ApiCountSiteNacClientsRequest {
	r.lastUsername = &lastUsername
	return r
}

// start time, in epoch
func (r ApiCountSiteNacClientsRequest) Timestamp(timestamp float32) ApiCountSiteNacClientsRequest {
	r.timestamp = &timestamp
	return r
}

// AP MAC connected to by client
func (r ApiCountSiteNacClientsRequest) LastAp(lastAp string) ApiCountSiteNacClientsRequest {
	r.lastAp = &lastAp
	return r
}

// MAC address
func (r ApiCountSiteNacClientsRequest) Mac(mac string) ApiCountSiteNacClientsRequest {
	r.mac = &mac
	return r
}

// Connection status of client i.e “permitted”, “denied, “session_ended”
func (r ApiCountSiteNacClientsRequest) LastStatus(lastStatus string) ApiCountSiteNacClientsRequest {
	r.lastStatus = &lastStatus
	return r
}

// Client type i.e. “wireless”, “wired” etc.
func (r ApiCountSiteNacClientsRequest) Type_(type_ string) ApiCountSiteNacClientsRequest {
	r.type_ = &type_
	return r
}

// MDM compliancy of client i.e “compliant”, “not compliant”
func (r ApiCountSiteNacClientsRequest) MdmComplianceStatus(mdmComplianceStatus string) ApiCountSiteNacClientsRequest {
	r.mdmComplianceStatus = &mdmComplianceStatus
	return r
}

// MDM provider of client’s organisation eg “intune”, “jamf”
func (r ApiCountSiteNacClientsRequest) MdmProvider(mdmProvider string) ApiCountSiteNacClientsRequest {
	r.mdmProvider = &mdmProvider
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiCountSiteNacClientsRequest) Start(start int32) ApiCountSiteNacClientsRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiCountSiteNacClientsRequest) End(end int32) ApiCountSiteNacClientsRequest {
	r.end = &end
	return r
}

// duration like 7d, 2w
func (r ApiCountSiteNacClientsRequest) Duration(duration string) ApiCountSiteNacClientsRequest {
	r.duration = &duration
	return r
}

func (r ApiCountSiteNacClientsRequest) Limit(limit int32) ApiCountSiteNacClientsRequest {
	r.limit = &limit
	return r
}

func (r ApiCountSiteNacClientsRequest) Page(page int32) ApiCountSiteNacClientsRequest {
	r.page = &page
	return r
}

func (r ApiCountSiteNacClientsRequest) Execute() (*RepsonseCount, *http.Response, error) {
	return r.ApiService.CountSiteNacClientsExecute(r)
}

/*
CountSiteNacClients countSiteNacClients

Count by Distinct Attributes of NAC Clients

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @return ApiCountSiteNacClientsRequest
*/
func (a *SitesClientsNACAPIService) CountSiteNacClients(ctx context.Context, siteId string) ApiCountSiteNacClientsRequest {
	return ApiCountSiteNacClientsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return RepsonseCount
func (a *SitesClientsNACAPIService) CountSiteNacClientsExecute(r ApiCountSiteNacClientsRequest) (*RepsonseCount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RepsonseCount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesClientsNACAPIService.CountSiteNacClients")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/nac_clients/count"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.distinct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinct", r.distinct, "")
	} else {
		var defaultValue SiteNacClientsCountDistinct = "type"
		r.distinct = &defaultValue
	}
	if r.lastNacruleId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_nacrule_id", r.lastNacruleId, "")
	}
	if r.nacruleMatched != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nacrule_matched", r.nacruleMatched, "")
	}
	if r.authType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type", r.authType, "")
	}
	if r.lastVlanId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_vlan_id", r.lastVlanId, "")
	}
	if r.lastNasVendor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_nas_vendor", r.lastNasVendor, "")
	}
	if r.idpId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idp_id", r.idpId, "")
	}
	if r.lastSsid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_ssid", r.lastSsid, "")
	}
	if r.lastUsername != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_username", r.lastUsername, "")
	}
	if r.timestamp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "")
	}
	if r.lastAp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_ap", r.lastAp, "")
	}
	if r.mac != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mac", r.mac, "")
	}
	if r.lastStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_status", r.lastStatus, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.mdmComplianceStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mdm_compliance_status", r.mdmComplianceStatus, "")
	}
	if r.mdmProvider != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mdm_provider", r.mdmProvider, "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchSiteNacClientsRequest struct {
	ctx context.Context
	ApiService SitesClientsNACAPI
	siteId string
	nacruleId *string
	nacruleMatched *bool
	authType *string
	vlan *string
	nasVendor *string
	idpId *string
	ssid *string
	username *string
	timestamp *float32
	ap *string
	mac *string
	mxedgeId *string
	nacruleName *string
	status *string
	type_ *string
	mdmCompliance *string
	mdmProvider *string
	start *int32
	end *int32
	duration *string
	limit *int32
	page *int32
}

// NAC Policy Rule ID, if matched
func (r ApiSearchSiteNacClientsRequest) NacruleId(nacruleId string) ApiSearchSiteNacClientsRequest {
	r.nacruleId = &nacruleId
	return r
}

// NAC Policy Rule Matched
func (r ApiSearchSiteNacClientsRequest) NacruleMatched(nacruleMatched bool) ApiSearchSiteNacClientsRequest {
	r.nacruleMatched = &nacruleMatched
	return r
}

// authentication type, e.g. “eap-tls”, “eap-ttls”, “eap-teap”, “mab”, “device-auth”
func (r ApiSearchSiteNacClientsRequest) AuthType(authType string) ApiSearchSiteNacClientsRequest {
	r.authType = &authType
	return r
}

// Vlan name or ID assigned to the client
func (r ApiSearchSiteNacClientsRequest) Vlan(vlan string) ApiSearchSiteNacClientsRequest {
	r.vlan = &vlan
	return r
}

// vendor of NAS device
func (r ApiSearchSiteNacClientsRequest) NasVendor(nasVendor string) ApiSearchSiteNacClientsRequest {
	r.nasVendor = &nasVendor
	return r
}

// SSO ID, if present and used
func (r ApiSearchSiteNacClientsRequest) IdpId(idpId string) ApiSearchSiteNacClientsRequest {
	r.idpId = &idpId
	return r
}

// SSID
func (r ApiSearchSiteNacClientsRequest) Ssid(ssid string) ApiSearchSiteNacClientsRequest {
	r.ssid = &ssid
	return r
}

// Username presented by the client
func (r ApiSearchSiteNacClientsRequest) Username(username string) ApiSearchSiteNacClientsRequest {
	r.username = &username
	return r
}

// start time, in epoch
func (r ApiSearchSiteNacClientsRequest) Timestamp(timestamp float32) ApiSearchSiteNacClientsRequest {
	r.timestamp = &timestamp
	return r
}

// AP MAC connected to by client
func (r ApiSearchSiteNacClientsRequest) Ap(ap string) ApiSearchSiteNacClientsRequest {
	r.ap = &ap
	return r
}

// MAC address
func (r ApiSearchSiteNacClientsRequest) Mac(mac string) ApiSearchSiteNacClientsRequest {
	r.mac = &mac
	return r
}

// ID of Mist Edge that the client is connected through
func (r ApiSearchSiteNacClientsRequest) MxedgeId(mxedgeId string) ApiSearchSiteNacClientsRequest {
	r.mxedgeId = &mxedgeId
	return r
}

// NAC Policy Rule Name matched
func (r ApiSearchSiteNacClientsRequest) NacruleName(nacruleName string) ApiSearchSiteNacClientsRequest {
	r.nacruleName = &nacruleName
	return r
}

// Connection status of client i.e “permitted”, “denied, “session_ended”
func (r ApiSearchSiteNacClientsRequest) Status(status string) ApiSearchSiteNacClientsRequest {
	r.status = &status
	return r
}

// Client type i.e. “wireless”, “wired” etc.
func (r ApiSearchSiteNacClientsRequest) Type_(type_ string) ApiSearchSiteNacClientsRequest {
	r.type_ = &type_
	return r
}

// MDM compliancy of client i.e “compliant”, “not compliant”
func (r ApiSearchSiteNacClientsRequest) MdmCompliance(mdmCompliance string) ApiSearchSiteNacClientsRequest {
	r.mdmCompliance = &mdmCompliance
	return r
}

// MDM provider of client’s organisation eg “intune”, “jamf”
func (r ApiSearchSiteNacClientsRequest) MdmProvider(mdmProvider string) ApiSearchSiteNacClientsRequest {
	r.mdmProvider = &mdmProvider
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiSearchSiteNacClientsRequest) Start(start int32) ApiSearchSiteNacClientsRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiSearchSiteNacClientsRequest) End(end int32) ApiSearchSiteNacClientsRequest {
	r.end = &end
	return r
}

// duration like 7d, 2w
func (r ApiSearchSiteNacClientsRequest) Duration(duration string) ApiSearchSiteNacClientsRequest {
	r.duration = &duration
	return r
}

func (r ApiSearchSiteNacClientsRequest) Limit(limit int32) ApiSearchSiteNacClientsRequest {
	r.limit = &limit
	return r
}

func (r ApiSearchSiteNacClientsRequest) Page(page int32) ApiSearchSiteNacClientsRequest {
	r.page = &page
	return r
}

func (r ApiSearchSiteNacClientsRequest) Execute() (*ResponseClientNacSearch, *http.Response, error) {
	return r.ApiService.SearchSiteNacClientsExecute(r)
}

/*
SearchSiteNacClients searchSiteNacClients

Search Site NAC Clients

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @return ApiSearchSiteNacClientsRequest
*/
func (a *SitesClientsNACAPIService) SearchSiteNacClients(ctx context.Context, siteId string) ApiSearchSiteNacClientsRequest {
	return ApiSearchSiteNacClientsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return ResponseClientNacSearch
func (a *SitesClientsNACAPIService) SearchSiteNacClientsExecute(r ApiSearchSiteNacClientsRequest) (*ResponseClientNacSearch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseClientNacSearch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesClientsNACAPIService.SearchSiteNacClients")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/nac_clients/search"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.nacruleId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nacrule_id", r.nacruleId, "")
	}
	if r.nacruleMatched != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nacrule_matched", r.nacruleMatched, "")
	}
	if r.authType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type", r.authType, "")
	}
	if r.vlan != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vlan", r.vlan, "")
	}
	if r.nasVendor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nas_vendor", r.nasVendor, "")
	}
	if r.idpId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idp_id", r.idpId, "")
	}
	if r.ssid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssid", r.ssid, "")
	}
	if r.username != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "username", r.username, "")
	}
	if r.timestamp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "")
	}
	if r.ap != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ap", r.ap, "")
	}
	if r.mac != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mac", r.mac, "")
	}
	if r.mxedgeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mxedge_id", r.mxedgeId, "")
	}
	if r.nacruleName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nacrule_name", r.nacruleName, "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.mdmCompliance != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mdm_compliance", r.mdmCompliance, "")
	}
	if r.mdmProvider != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mdm_provider", r.mdmProvider, "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearcsearcSiteNacClientEventsacClientEventsRequest struct {
	ctx context.Context
	ApiService SitesClientsNACAPI
	siteId string
	type_ *string
	nacruleId *string
	nacruleMatched *bool
	dryrunNacruleId *string
	dryrunNacruleMatched *bool
	authType *string
	vlan *int32
	vlanSource *string
	nasVendor *string
	bssid *string
	idpId *string
	idpRole *string
	idpUsername *string
	respAttrs *[]string
	ssid *string
	username *string
	usermacLabels *[]string
	ap *string
	randomMac *bool
	mac *string
	lookupTimeTaken *float32
	timestamp *float32
	start *int32
	end *int32
	duration *string
	limit *int32
}

// see [listDeviceEventsDefinitions]($e/Constants%20Events/listNacEventsDefinitions)
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) Type_(type_ string) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.type_ = &type_
	return r
}

// NAC Policy Rule ID, if matched
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) NacruleId(nacruleId string) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.nacruleId = &nacruleId
	return r
}

// NAC Policy Rule Matched
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) NacruleMatched(nacruleMatched bool) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.nacruleMatched = &nacruleMatched
	return r
}

// NAC Policy Dry Run Rule ID, if present and matched
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) DryrunNacruleId(dryrunNacruleId string) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.dryrunNacruleId = &dryrunNacruleId
	return r
}

// True - if dryrun rule present and matched with priority, False - if not matched or not present
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) DryrunNacruleMatched(dryrunNacruleMatched bool) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.dryrunNacruleMatched = &dryrunNacruleMatched
	return r
}

// authentication type, e.g. “eap-tls”, “eap-ttls”, “eap-teap”, “mab”, “device-auth”
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) AuthType(authType string) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.authType = &authType
	return r
}

// Vlan ID
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) Vlan(vlan int32) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.vlan = &vlan
	return r
}

// Vlan source, e.g. \&quot;nactag\&quot;, \&quot;usermac\&quot;
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) VlanSource(vlanSource string) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.vlanSource = &vlanSource
	return r
}

// vendor of NAS device
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) NasVendor(nasVendor string) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.nasVendor = &nasVendor
	return r
}

// SSID
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) Bssid(bssid string) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.bssid = &bssid
	return r
}

// SSO ID, if present and used
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) IdpId(idpId string) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.idpId = &idpId
	return r
}

// IDP returned roles/groups for the user
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) IdpRole(idpRole string) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.idpRole = &idpRole
	return r
}

// Username presented to the Identity Provider
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) IdpUsername(idpUsername string) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.idpUsername = &idpUsername
	return r
}

// Radius attributes returned by NAC to NAS Devive
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) RespAttrs(respAttrs []string) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.respAttrs = &respAttrs
	return r
}

// SSID
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) Ssid(ssid string) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.ssid = &ssid
	return r
}

// Username presented by the client
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) Username(username string) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.username = &username
	return r
}

// labels derived from usermac entry
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) UsermacLabels(usermacLabels []string) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.usermacLabels = &usermacLabels
	return r
}

// AP MAC
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) Ap(ap string) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.ap = &ap
	return r
}

// AP random macMAC
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) RandomMac(randomMac bool) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.randomMac = &randomMac
	return r
}

// MAC address
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) Mac(mac string) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.mac = &mac
	return r
}

// Lookup(IDP etc.,) time taken in seconds
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) LookupTimeTaken(lookupTimeTaken float32) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.lookupTimeTaken = &lookupTimeTaken
	return r
}

// time, in epoch
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) Timestamp(timestamp float32) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.timestamp = &timestamp
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) Start(start int32) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) End(end int32) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.end = &end
	return r
}

// duration like 7d, 2w
func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) Duration(duration string) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.duration = &duration
	return r
}

func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) Limit(limit int32) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	r.limit = &limit
	return r
}

func (r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) Execute() (*ResponseEventsNacClientSearch, *http.Response, error) {
	return r.ApiService.SearcsearcSiteNacClientEventsacClientEventsExecute(r)
}

/*
SearcsearcSiteNacClientEventsacClientEvents searcsearcSiteNacClientEventsacClientEvents

Search NAC Client Events

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @return ApiSearcsearcSiteNacClientEventsacClientEventsRequest
*/
func (a *SitesClientsNACAPIService) SearcsearcSiteNacClientEventsacClientEvents(ctx context.Context, siteId string) ApiSearcsearcSiteNacClientEventsacClientEventsRequest {
	return ApiSearcsearcSiteNacClientEventsacClientEventsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return ResponseEventsNacClientSearch
func (a *SitesClientsNACAPIService) SearcsearcSiteNacClientEventsacClientEventsExecute(r ApiSearcsearcSiteNacClientEventsacClientEventsRequest) (*ResponseEventsNacClientSearch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseEventsNacClientSearch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesClientsNACAPIService.SearcsearcSiteNacClientEventsacClientEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/nac_clients/events/search"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.nacruleId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nacrule_id", r.nacruleId, "")
	}
	if r.nacruleMatched != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nacrule_matched", r.nacruleMatched, "")
	}
	if r.dryrunNacruleId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryrun_nacrule_id", r.dryrunNacruleId, "")
	}
	if r.dryrunNacruleMatched != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dryrun_nacrule_matched", r.dryrunNacruleMatched, "")
	}
	if r.authType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type", r.authType, "")
	}
	if r.vlan != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vlan", r.vlan, "")
	}
	if r.vlanSource != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vlan_source", r.vlanSource, "")
	}
	if r.nasVendor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nas_vendor", r.nasVendor, "")
	}
	if r.bssid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bssid", r.bssid, "")
	}
	if r.idpId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idp_id", r.idpId, "")
	}
	if r.idpRole != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idp_role", r.idpRole, "")
	}
	if r.idpUsername != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idp_username", r.idpUsername, "")
	}
	if r.respAttrs != nil {
		t := *r.respAttrs
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "resp_attrs", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "resp_attrs", t, "multi")
		}
	}
	if r.ssid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssid", r.ssid, "")
	}
	if r.username != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "username", r.username, "")
	}
	if r.usermacLabels != nil {
		t := *r.usermacLabels
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "usermac_labels", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "usermac_labels", t, "multi")
		}
	}
	if r.ap != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ap", r.ap, "")
	}
	if r.randomMac != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "random_mac", r.randomMac, "")
	}
	if r.mac != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mac", r.mac, "")
	}
	if r.lookupTimeTaken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lookup_time_taken", r.lookupTimeTaken, "")
	}
	if r.timestamp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timestamp", r.timestamp, "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
