/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the SiteMxtunnelAdditionalMxtunnel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteMxtunnelAdditionalMxtunnel{}

// SiteMxtunnelAdditionalMxtunnel struct for SiteMxtunnelAdditionalMxtunnel
type SiteMxtunnelAdditionalMxtunnel struct {
	// for AP, how to connect to tunterm or radsecproxy
	Clusters []SiteMxtunnelCluster `json:"clusters,omitempty"`
	// in seconds, used as heartbeat to detect if a tunnel is alive. AP will try another peer after missing N hellos specified by hello_retries
	HelloInterval *int32 `json:"hello_interval,omitempty"`
	HelloRetries *int32 `json:"hello_retries,omitempty"`
	Protocol *SiteMxtunnelProtocol `json:"protocol,omitempty"`
	VlanIds []int32 `json:"vlan_ids,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SiteMxtunnelAdditionalMxtunnel SiteMxtunnelAdditionalMxtunnel

// NewSiteMxtunnelAdditionalMxtunnel instantiates a new SiteMxtunnelAdditionalMxtunnel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteMxtunnelAdditionalMxtunnel() *SiteMxtunnelAdditionalMxtunnel {
	this := SiteMxtunnelAdditionalMxtunnel{}
	var helloInterval int32 = 60
	this.HelloInterval = &helloInterval
	var helloRetries int32 = 7
	this.HelloRetries = &helloRetries
	return &this
}

// NewSiteMxtunnelAdditionalMxtunnelWithDefaults instantiates a new SiteMxtunnelAdditionalMxtunnel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteMxtunnelAdditionalMxtunnelWithDefaults() *SiteMxtunnelAdditionalMxtunnel {
	this := SiteMxtunnelAdditionalMxtunnel{}
	var helloInterval int32 = 60
	this.HelloInterval = &helloInterval
	var helloRetries int32 = 7
	this.HelloRetries = &helloRetries
	return &this
}

// GetClusters returns the Clusters field value if set, zero value otherwise.
func (o *SiteMxtunnelAdditionalMxtunnel) GetClusters() []SiteMxtunnelCluster {
	if o == nil || IsNil(o.Clusters) {
		var ret []SiteMxtunnelCluster
		return ret
	}
	return o.Clusters
}

// GetClustersOk returns a tuple with the Clusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnelAdditionalMxtunnel) GetClustersOk() ([]SiteMxtunnelCluster, bool) {
	if o == nil || IsNil(o.Clusters) {
		return nil, false
	}
	return o.Clusters, true
}

// HasClusters returns a boolean if a field has been set.
func (o *SiteMxtunnelAdditionalMxtunnel) HasClusters() bool {
	if o != nil && !IsNil(o.Clusters) {
		return true
	}

	return false
}

// SetClusters gets a reference to the given []SiteMxtunnelCluster and assigns it to the Clusters field.
func (o *SiteMxtunnelAdditionalMxtunnel) SetClusters(v []SiteMxtunnelCluster) {
	o.Clusters = v
}

// GetHelloInterval returns the HelloInterval field value if set, zero value otherwise.
func (o *SiteMxtunnelAdditionalMxtunnel) GetHelloInterval() int32 {
	if o == nil || IsNil(o.HelloInterval) {
		var ret int32
		return ret
	}
	return *o.HelloInterval
}

// GetHelloIntervalOk returns a tuple with the HelloInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnelAdditionalMxtunnel) GetHelloIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.HelloInterval) {
		return nil, false
	}
	return o.HelloInterval, true
}

// HasHelloInterval returns a boolean if a field has been set.
func (o *SiteMxtunnelAdditionalMxtunnel) HasHelloInterval() bool {
	if o != nil && !IsNil(o.HelloInterval) {
		return true
	}

	return false
}

// SetHelloInterval gets a reference to the given int32 and assigns it to the HelloInterval field.
func (o *SiteMxtunnelAdditionalMxtunnel) SetHelloInterval(v int32) {
	o.HelloInterval = &v
}

// GetHelloRetries returns the HelloRetries field value if set, zero value otherwise.
func (o *SiteMxtunnelAdditionalMxtunnel) GetHelloRetries() int32 {
	if o == nil || IsNil(o.HelloRetries) {
		var ret int32
		return ret
	}
	return *o.HelloRetries
}

// GetHelloRetriesOk returns a tuple with the HelloRetries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnelAdditionalMxtunnel) GetHelloRetriesOk() (*int32, bool) {
	if o == nil || IsNil(o.HelloRetries) {
		return nil, false
	}
	return o.HelloRetries, true
}

// HasHelloRetries returns a boolean if a field has been set.
func (o *SiteMxtunnelAdditionalMxtunnel) HasHelloRetries() bool {
	if o != nil && !IsNil(o.HelloRetries) {
		return true
	}

	return false
}

// SetHelloRetries gets a reference to the given int32 and assigns it to the HelloRetries field.
func (o *SiteMxtunnelAdditionalMxtunnel) SetHelloRetries(v int32) {
	o.HelloRetries = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *SiteMxtunnelAdditionalMxtunnel) GetProtocol() SiteMxtunnelProtocol {
	if o == nil || IsNil(o.Protocol) {
		var ret SiteMxtunnelProtocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnelAdditionalMxtunnel) GetProtocolOk() (*SiteMxtunnelProtocol, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *SiteMxtunnelAdditionalMxtunnel) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given SiteMxtunnelProtocol and assigns it to the Protocol field.
func (o *SiteMxtunnelAdditionalMxtunnel) SetProtocol(v SiteMxtunnelProtocol) {
	o.Protocol = &v
}

// GetVlanIds returns the VlanIds field value if set, zero value otherwise.
func (o *SiteMxtunnelAdditionalMxtunnel) GetVlanIds() []int32 {
	if o == nil || IsNil(o.VlanIds) {
		var ret []int32
		return ret
	}
	return o.VlanIds
}

// GetVlanIdsOk returns a tuple with the VlanIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnelAdditionalMxtunnel) GetVlanIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.VlanIds) {
		return nil, false
	}
	return o.VlanIds, true
}

// HasVlanIds returns a boolean if a field has been set.
func (o *SiteMxtunnelAdditionalMxtunnel) HasVlanIds() bool {
	if o != nil && !IsNil(o.VlanIds) {
		return true
	}

	return false
}

// SetVlanIds gets a reference to the given []int32 and assigns it to the VlanIds field.
func (o *SiteMxtunnelAdditionalMxtunnel) SetVlanIds(v []int32) {
	o.VlanIds = v
}

func (o SiteMxtunnelAdditionalMxtunnel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteMxtunnelAdditionalMxtunnel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Clusters) {
		toSerialize["clusters"] = o.Clusters
	}
	if !IsNil(o.HelloInterval) {
		toSerialize["hello_interval"] = o.HelloInterval
	}
	if !IsNil(o.HelloRetries) {
		toSerialize["hello_retries"] = o.HelloRetries
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.VlanIds) {
		toSerialize["vlan_ids"] = o.VlanIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SiteMxtunnelAdditionalMxtunnel) UnmarshalJSON(data []byte) (err error) {
	varSiteMxtunnelAdditionalMxtunnel := _SiteMxtunnelAdditionalMxtunnel{}

	err = json.Unmarshal(data, &varSiteMxtunnelAdditionalMxtunnel)

	if err != nil {
		return err
	}

	*o = SiteMxtunnelAdditionalMxtunnel(varSiteMxtunnelAdditionalMxtunnel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "clusters")
		delete(additionalProperties, "hello_interval")
		delete(additionalProperties, "hello_retries")
		delete(additionalProperties, "protocol")
		delete(additionalProperties, "vlan_ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSiteMxtunnelAdditionalMxtunnel struct {
	value *SiteMxtunnelAdditionalMxtunnel
	isSet bool
}

func (v NullableSiteMxtunnelAdditionalMxtunnel) Get() *SiteMxtunnelAdditionalMxtunnel {
	return v.value
}

func (v *NullableSiteMxtunnelAdditionalMxtunnel) Set(val *SiteMxtunnelAdditionalMxtunnel) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteMxtunnelAdditionalMxtunnel) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteMxtunnelAdditionalMxtunnel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteMxtunnelAdditionalMxtunnel(val *SiteMxtunnelAdditionalMxtunnel) *NullableSiteMxtunnelAdditionalMxtunnel {
	return &NullableSiteMxtunnelAdditionalMxtunnel{value: val, isSet: true}
}

func (v NullableSiteMxtunnelAdditionalMxtunnel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteMxtunnelAdditionalMxtunnel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


