/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the JunosOobIpConfigNode1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JunosOobIpConfigNode1{}

// JunosOobIpConfigNode1 for HA Cluster, node1 can have different IP Config
type JunosOobIpConfigNode1 struct {
	Ip *string `json:"ip,omitempty"`
	// used only if `subnet` is not specified in `networks`
	Netmask *string `json:"netmask,omitempty"`
	// optional, the network to be used for mgmt
	Network *string `json:"network,omitempty"`
	Type *IpConfigType `json:"type,omitempty"`
	// if supported on the platform. If enabled, DNS will be using this routing-instance, too
	UseMgmtVrf *bool `json:"use_mgmt_vrf,omitempty"`
	// whether to use `mgmt_junos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
	UseMgmtVrfForHostOut *bool `json:"use_mgmt_vrf_for_host_out,omitempty"`
	// optional, if different from parent
	VlanId *int32 `json:"vlan_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JunosOobIpConfigNode1 JunosOobIpConfigNode1

// NewJunosOobIpConfigNode1 instantiates a new JunosOobIpConfigNode1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJunosOobIpConfigNode1() *JunosOobIpConfigNode1 {
	this := JunosOobIpConfigNode1{}
	var type_ IpConfigType = IPCONFIGTYPE_DYNAMIC
	this.Type = &type_
	var useMgmtVrf bool = false
	this.UseMgmtVrf = &useMgmtVrf
	var useMgmtVrfForHostOut bool = false
	this.UseMgmtVrfForHostOut = &useMgmtVrfForHostOut
	return &this
}

// NewJunosOobIpConfigNode1WithDefaults instantiates a new JunosOobIpConfigNode1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJunosOobIpConfigNode1WithDefaults() *JunosOobIpConfigNode1 {
	this := JunosOobIpConfigNode1{}
	var type_ IpConfigType = IPCONFIGTYPE_DYNAMIC
	this.Type = &type_
	var useMgmtVrf bool = false
	this.UseMgmtVrf = &useMgmtVrf
	var useMgmtVrfForHostOut bool = false
	this.UseMgmtVrfForHostOut = &useMgmtVrfForHostOut
	return &this
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *JunosOobIpConfigNode1) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosOobIpConfigNode1) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *JunosOobIpConfigNode1) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *JunosOobIpConfigNode1) SetIp(v string) {
	o.Ip = &v
}

// GetNetmask returns the Netmask field value if set, zero value otherwise.
func (o *JunosOobIpConfigNode1) GetNetmask() string {
	if o == nil || IsNil(o.Netmask) {
		var ret string
		return ret
	}
	return *o.Netmask
}

// GetNetmaskOk returns a tuple with the Netmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosOobIpConfigNode1) GetNetmaskOk() (*string, bool) {
	if o == nil || IsNil(o.Netmask) {
		return nil, false
	}
	return o.Netmask, true
}

// HasNetmask returns a boolean if a field has been set.
func (o *JunosOobIpConfigNode1) HasNetmask() bool {
	if o != nil && !IsNil(o.Netmask) {
		return true
	}

	return false
}

// SetNetmask gets a reference to the given string and assigns it to the Netmask field.
func (o *JunosOobIpConfigNode1) SetNetmask(v string) {
	o.Netmask = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *JunosOobIpConfigNode1) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosOobIpConfigNode1) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *JunosOobIpConfigNode1) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *JunosOobIpConfigNode1) SetNetwork(v string) {
	o.Network = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *JunosOobIpConfigNode1) GetType() IpConfigType {
	if o == nil || IsNil(o.Type) {
		var ret IpConfigType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosOobIpConfigNode1) GetTypeOk() (*IpConfigType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *JunosOobIpConfigNode1) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given IpConfigType and assigns it to the Type field.
func (o *JunosOobIpConfigNode1) SetType(v IpConfigType) {
	o.Type = &v
}

// GetUseMgmtVrf returns the UseMgmtVrf field value if set, zero value otherwise.
func (o *JunosOobIpConfigNode1) GetUseMgmtVrf() bool {
	if o == nil || IsNil(o.UseMgmtVrf) {
		var ret bool
		return ret
	}
	return *o.UseMgmtVrf
}

// GetUseMgmtVrfOk returns a tuple with the UseMgmtVrf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosOobIpConfigNode1) GetUseMgmtVrfOk() (*bool, bool) {
	if o == nil || IsNil(o.UseMgmtVrf) {
		return nil, false
	}
	return o.UseMgmtVrf, true
}

// HasUseMgmtVrf returns a boolean if a field has been set.
func (o *JunosOobIpConfigNode1) HasUseMgmtVrf() bool {
	if o != nil && !IsNil(o.UseMgmtVrf) {
		return true
	}

	return false
}

// SetUseMgmtVrf gets a reference to the given bool and assigns it to the UseMgmtVrf field.
func (o *JunosOobIpConfigNode1) SetUseMgmtVrf(v bool) {
	o.UseMgmtVrf = &v
}

// GetUseMgmtVrfForHostOut returns the UseMgmtVrfForHostOut field value if set, zero value otherwise.
func (o *JunosOobIpConfigNode1) GetUseMgmtVrfForHostOut() bool {
	if o == nil || IsNil(o.UseMgmtVrfForHostOut) {
		var ret bool
		return ret
	}
	return *o.UseMgmtVrfForHostOut
}

// GetUseMgmtVrfForHostOutOk returns a tuple with the UseMgmtVrfForHostOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosOobIpConfigNode1) GetUseMgmtVrfForHostOutOk() (*bool, bool) {
	if o == nil || IsNil(o.UseMgmtVrfForHostOut) {
		return nil, false
	}
	return o.UseMgmtVrfForHostOut, true
}

// HasUseMgmtVrfForHostOut returns a boolean if a field has been set.
func (o *JunosOobIpConfigNode1) HasUseMgmtVrfForHostOut() bool {
	if o != nil && !IsNil(o.UseMgmtVrfForHostOut) {
		return true
	}

	return false
}

// SetUseMgmtVrfForHostOut gets a reference to the given bool and assigns it to the UseMgmtVrfForHostOut field.
func (o *JunosOobIpConfigNode1) SetUseMgmtVrfForHostOut(v bool) {
	o.UseMgmtVrfForHostOut = &v
}

// GetVlanId returns the VlanId field value if set, zero value otherwise.
func (o *JunosOobIpConfigNode1) GetVlanId() int32 {
	if o == nil || IsNil(o.VlanId) {
		var ret int32
		return ret
	}
	return *o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosOobIpConfigNode1) GetVlanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VlanId) {
		return nil, false
	}
	return o.VlanId, true
}

// HasVlanId returns a boolean if a field has been set.
func (o *JunosOobIpConfigNode1) HasVlanId() bool {
	if o != nil && !IsNil(o.VlanId) {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given int32 and assigns it to the VlanId field.
func (o *JunosOobIpConfigNode1) SetVlanId(v int32) {
	o.VlanId = &v
}

func (o JunosOobIpConfigNode1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JunosOobIpConfigNode1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Netmask) {
		toSerialize["netmask"] = o.Netmask
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UseMgmtVrf) {
		toSerialize["use_mgmt_vrf"] = o.UseMgmtVrf
	}
	if !IsNil(o.UseMgmtVrfForHostOut) {
		toSerialize["use_mgmt_vrf_for_host_out"] = o.UseMgmtVrfForHostOut
	}
	if !IsNil(o.VlanId) {
		toSerialize["vlan_id"] = o.VlanId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JunosOobIpConfigNode1) UnmarshalJSON(data []byte) (err error) {
	varJunosOobIpConfigNode1 := _JunosOobIpConfigNode1{}

	err = json.Unmarshal(data, &varJunosOobIpConfigNode1)

	if err != nil {
		return err
	}

	*o = JunosOobIpConfigNode1(varJunosOobIpConfigNode1)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ip")
		delete(additionalProperties, "netmask")
		delete(additionalProperties, "network")
		delete(additionalProperties, "type")
		delete(additionalProperties, "use_mgmt_vrf")
		delete(additionalProperties, "use_mgmt_vrf_for_host_out")
		delete(additionalProperties, "vlan_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJunosOobIpConfigNode1 struct {
	value *JunosOobIpConfigNode1
	isSet bool
}

func (v NullableJunosOobIpConfigNode1) Get() *JunosOobIpConfigNode1 {
	return v.value
}

func (v *NullableJunosOobIpConfigNode1) Set(val *JunosOobIpConfigNode1) {
	v.value = val
	v.isSet = true
}

func (v NullableJunosOobIpConfigNode1) IsSet() bool {
	return v.isSet
}

func (v *NullableJunosOobIpConfigNode1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJunosOobIpConfigNode1(val *JunosOobIpConfigNode1) *NullableJunosOobIpConfigNode1 {
	return &NullableJunosOobIpConfigNode1{value: val, isSet: true}
}

func (v NullableJunosOobIpConfigNode1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJunosOobIpConfigNode1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


