/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the ResponseLocationCoverage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseLocationCoverage{}

// ResponseLocationCoverage struct for ResponseLocationCoverage
type ResponseLocationCoverage struct {
	// list of [x, y, mean]s, x/y are in meters (UI would need to use map.ppm to calulate the pixel location from top-left).
	BeamsMeans [][]float32 `json:"beams_means"`
	End int32 `json:"end"`
	// the size of grid, in meter
	Gridsize float32 `json:"gridsize"`
	// list of names annotating the fields in results
	ResultDef []string `json:"result_def"`
	// list of results, see result_def.
	Results [][]float32 `json:"results"`
	Start int32 `json:"start"`
	AdditionalProperties map[string]interface{}
}

type _ResponseLocationCoverage ResponseLocationCoverage

// NewResponseLocationCoverage instantiates a new ResponseLocationCoverage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseLocationCoverage(beamsMeans [][]float32, end int32, gridsize float32, resultDef []string, results [][]float32, start int32) *ResponseLocationCoverage {
	this := ResponseLocationCoverage{}
	this.BeamsMeans = beamsMeans
	this.End = end
	this.Gridsize = gridsize
	this.ResultDef = resultDef
	this.Results = results
	this.Start = start
	return &this
}

// NewResponseLocationCoverageWithDefaults instantiates a new ResponseLocationCoverage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseLocationCoverageWithDefaults() *ResponseLocationCoverage {
	this := ResponseLocationCoverage{}
	return &this
}

// GetBeamsMeans returns the BeamsMeans field value
func (o *ResponseLocationCoverage) GetBeamsMeans() [][]float32 {
	if o == nil {
		var ret [][]float32
		return ret
	}

	return o.BeamsMeans
}

// GetBeamsMeansOk returns a tuple with the BeamsMeans field value
// and a boolean to check if the value has been set.
func (o *ResponseLocationCoverage) GetBeamsMeansOk() ([][]float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BeamsMeans, true
}

// SetBeamsMeans sets field value
func (o *ResponseLocationCoverage) SetBeamsMeans(v [][]float32) {
	o.BeamsMeans = v
}

// GetEnd returns the End field value
func (o *ResponseLocationCoverage) GetEnd() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.End
}

// GetEndOk returns a tuple with the End field value
// and a boolean to check if the value has been set.
func (o *ResponseLocationCoverage) GetEndOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.End, true
}

// SetEnd sets field value
func (o *ResponseLocationCoverage) SetEnd(v int32) {
	o.End = v
}

// GetGridsize returns the Gridsize field value
func (o *ResponseLocationCoverage) GetGridsize() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Gridsize
}

// GetGridsizeOk returns a tuple with the Gridsize field value
// and a boolean to check if the value has been set.
func (o *ResponseLocationCoverage) GetGridsizeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gridsize, true
}

// SetGridsize sets field value
func (o *ResponseLocationCoverage) SetGridsize(v float32) {
	o.Gridsize = v
}

// GetResultDef returns the ResultDef field value
func (o *ResponseLocationCoverage) GetResultDef() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ResultDef
}

// GetResultDefOk returns a tuple with the ResultDef field value
// and a boolean to check if the value has been set.
func (o *ResponseLocationCoverage) GetResultDefOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResultDef, true
}

// SetResultDef sets field value
func (o *ResponseLocationCoverage) SetResultDef(v []string) {
	o.ResultDef = v
}

// GetResults returns the Results field value
func (o *ResponseLocationCoverage) GetResults() [][]float32 {
	if o == nil {
		var ret [][]float32
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *ResponseLocationCoverage) GetResultsOk() ([][]float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *ResponseLocationCoverage) SetResults(v [][]float32) {
	o.Results = v
}

// GetStart returns the Start field value
func (o *ResponseLocationCoverage) GetStart() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *ResponseLocationCoverage) GetStartOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *ResponseLocationCoverage) SetStart(v int32) {
	o.Start = v
}

func (o ResponseLocationCoverage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseLocationCoverage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["beams_means"] = o.BeamsMeans
	toSerialize["end"] = o.End
	toSerialize["gridsize"] = o.Gridsize
	toSerialize["result_def"] = o.ResultDef
	toSerialize["results"] = o.Results
	toSerialize["start"] = o.Start

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResponseLocationCoverage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"beams_means",
		"end",
		"gridsize",
		"result_def",
		"results",
		"start",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResponseLocationCoverage := _ResponseLocationCoverage{}

	err = json.Unmarshal(data, &varResponseLocationCoverage)

	if err != nil {
		return err
	}

	*o = ResponseLocationCoverage(varResponseLocationCoverage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "beams_means")
		delete(additionalProperties, "end")
		delete(additionalProperties, "gridsize")
		delete(additionalProperties, "result_def")
		delete(additionalProperties, "results")
		delete(additionalProperties, "start")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResponseLocationCoverage struct {
	value *ResponseLocationCoverage
	isSet bool
}

func (v NullableResponseLocationCoverage) Get() *ResponseLocationCoverage {
	return v.value
}

func (v *NullableResponseLocationCoverage) Set(val *ResponseLocationCoverage) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseLocationCoverage) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseLocationCoverage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseLocationCoverage(val *ResponseLocationCoverage) *NullableResponseLocationCoverage {
	return &NullableResponseLocationCoverage{value: val, isSet: true}
}

func (v NullableResponseLocationCoverage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseLocationCoverage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


