/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// OrgClientsCountDistinct the model 'OrgClientsCountDistinct'
type OrgClientsCountDistinct string

// List of org_clients_count_distinct
const (
	ORGCLIENTSCOUNTDISTINCT_EMPTY OrgClientsCountDistinct = ""
	ORGCLIENTSCOUNTDISTINCT_MAC OrgClientsCountDistinct = "mac"
	ORGCLIENTSCOUNTDISTINCT_HOSTNAME OrgClientsCountDistinct = "hostname"
	ORGCLIENTSCOUNTDISTINCT_DEVICE OrgClientsCountDistinct = "device"
	ORGCLIENTSCOUNTDISTINCT_OS OrgClientsCountDistinct = "os"
	ORGCLIENTSCOUNTDISTINCT_MODEL OrgClientsCountDistinct = "model"
	ORGCLIENTSCOUNTDISTINCT_AP OrgClientsCountDistinct = "ap"
	ORGCLIENTSCOUNTDISTINCT_VLAN OrgClientsCountDistinct = "vlan"
	ORGCLIENTSCOUNTDISTINCT_SSID OrgClientsCountDistinct = "ssid"
	ORGCLIENTSCOUNTDISTINCT_IP OrgClientsCountDistinct = "ip"
)

// All allowed values of OrgClientsCountDistinct enum
var AllowedOrgClientsCountDistinctEnumValues = []OrgClientsCountDistinct{
	"",
	"mac",
	"hostname",
	"device",
	"os",
	"model",
	"ap",
	"vlan",
	"ssid",
	"ip",
}

func (v *OrgClientsCountDistinct) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrgClientsCountDistinct(value)
	for _, existing := range AllowedOrgClientsCountDistinctEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrgClientsCountDistinct", value)
}

// NewOrgClientsCountDistinctFromValue returns a pointer to a valid OrgClientsCountDistinct
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrgClientsCountDistinctFromValue(v string) (*OrgClientsCountDistinct, error) {
	ev := OrgClientsCountDistinct(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrgClientsCountDistinct: valid values are %v", v, AllowedOrgClientsCountDistinctEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrgClientsCountDistinct) IsValid() bool {
	for _, existing := range AllowedOrgClientsCountDistinctEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to org_clients_count_distinct value
func (v OrgClientsCountDistinct) Ptr() *OrgClientsCountDistinct {
	return &v
}

type NullableOrgClientsCountDistinct struct {
	value *OrgClientsCountDistinct
	isSet bool
}

func (v NullableOrgClientsCountDistinct) Get() *OrgClientsCountDistinct {
	return v.value
}

func (v *NullableOrgClientsCountDistinct) Set(val *OrgClientsCountDistinct) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgClientsCountDistinct) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgClientsCountDistinct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgClientsCountDistinct(val *OrgClientsCountDistinct) *NullableOrgClientsCountDistinct {
	return &NullableOrgClientsCountDistinct{value: val, isSet: true}
}

func (v NullableOrgClientsCountDistinct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgClientsCountDistinct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

