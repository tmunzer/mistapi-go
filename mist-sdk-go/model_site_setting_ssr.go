/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the SiteSettingSsr type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteSettingSsr{}

// SiteSettingSsr struct for SiteSettingSsr
type SiteSettingSsr struct {
	ConductorHosts []string `json:"conductor_hosts,omitempty"`
	DisableStats *bool `json:"disable_stats,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SiteSettingSsr SiteSettingSsr

// NewSiteSettingSsr instantiates a new SiteSettingSsr object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteSettingSsr() *SiteSettingSsr {
	this := SiteSettingSsr{}
	return &this
}

// NewSiteSettingSsrWithDefaults instantiates a new SiteSettingSsr object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteSettingSsrWithDefaults() *SiteSettingSsr {
	this := SiteSettingSsr{}
	return &this
}

// GetConductorHosts returns the ConductorHosts field value if set, zero value otherwise.
func (o *SiteSettingSsr) GetConductorHosts() []string {
	if o == nil || IsNil(o.ConductorHosts) {
		var ret []string
		return ret
	}
	return o.ConductorHosts
}

// GetConductorHostsOk returns a tuple with the ConductorHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSettingSsr) GetConductorHostsOk() ([]string, bool) {
	if o == nil || IsNil(o.ConductorHosts) {
		return nil, false
	}
	return o.ConductorHosts, true
}

// HasConductorHosts returns a boolean if a field has been set.
func (o *SiteSettingSsr) HasConductorHosts() bool {
	if o != nil && !IsNil(o.ConductorHosts) {
		return true
	}

	return false
}

// SetConductorHosts gets a reference to the given []string and assigns it to the ConductorHosts field.
func (o *SiteSettingSsr) SetConductorHosts(v []string) {
	o.ConductorHosts = v
}

// GetDisableStats returns the DisableStats field value if set, zero value otherwise.
func (o *SiteSettingSsr) GetDisableStats() bool {
	if o == nil || IsNil(o.DisableStats) {
		var ret bool
		return ret
	}
	return *o.DisableStats
}

// GetDisableStatsOk returns a tuple with the DisableStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSettingSsr) GetDisableStatsOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableStats) {
		return nil, false
	}
	return o.DisableStats, true
}

// HasDisableStats returns a boolean if a field has been set.
func (o *SiteSettingSsr) HasDisableStats() bool {
	if o != nil && !IsNil(o.DisableStats) {
		return true
	}

	return false
}

// SetDisableStats gets a reference to the given bool and assigns it to the DisableStats field.
func (o *SiteSettingSsr) SetDisableStats(v bool) {
	o.DisableStats = &v
}

func (o SiteSettingSsr) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteSettingSsr) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConductorHosts) {
		toSerialize["conductor_hosts"] = o.ConductorHosts
	}
	if !IsNil(o.DisableStats) {
		toSerialize["disable_stats"] = o.DisableStats
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SiteSettingSsr) UnmarshalJSON(data []byte) (err error) {
	varSiteSettingSsr := _SiteSettingSsr{}

	err = json.Unmarshal(data, &varSiteSettingSsr)

	if err != nil {
		return err
	}

	*o = SiteSettingSsr(varSiteSettingSsr)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "conductor_hosts")
		delete(additionalProperties, "disable_stats")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSiteSettingSsr struct {
	value *SiteSettingSsr
	isSet bool
}

func (v NullableSiteSettingSsr) Get() *SiteSettingSsr {
	return v.value
}

func (v *NullableSiteSettingSsr) Set(val *SiteSettingSsr) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteSettingSsr) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteSettingSsr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteSettingSsr(val *SiteSettingSsr) *NullableSiteSettingSsr {
	return &NullableSiteSettingSsr{value: val, isSet: true}
}

func (v NullableSiteSettingSsr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteSettingSsr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


