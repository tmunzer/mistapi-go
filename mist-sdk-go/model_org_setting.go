/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the OrgSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrgSetting{}

// OrgSetting Org Settings
type OrgSetting struct {
	// enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and `device_updown_threshold` is ignored.
	ApUpdownThreshold NullableInt32 `json:"ap_updown_threshold,omitempty"`
	ApiPolicy *OrgSettingApiPolicy `json:"api_policy,omitempty"`
	AutoDeviceNaming *OrgSettingAutoDeviceNaming `json:"auto_device_naming,omitempty"`
	AutoDeviceprofileAssignment *OrgSettingAutoDeviceprofileAssignment `json:"auto_deviceprofile_assignment,omitempty"`
	AutoSiteAssignment *OrgSettingAutoSiteAssignment `json:"auto_site_assignment,omitempty"`
	BlacklistUrl *string `json:"blacklist_url,omitempty"`
	// list of PEM-encoded ca certs
	Cacerts []string `json:"cacerts,omitempty"`
	Celona *OrgSettingCelona `json:"celona,omitempty"`
	Cloudshark *OrgSettingCloudshark `json:"cloudshark,omitempty"`
	Cradlepoint *OrgSettingCradlepoint `json:"cradlepoint,omitempty"`
	CreatedTime *float32 `json:"created_time,omitempty"`
	DeviceCert *OrgSettingDeviceCert `json:"device_cert,omitempty"`
	// enable threshold-based device down delivery via  1) device-updowns webhooks topic,  2) Mist Alert Framework; e.g. send AP/SW/GW down event only if AP/SW/GW Up is not seen within the threshold in minutes; 0 - 240, default is 0 (trigger immediate)
	DeviceUpdownThreshold *int32 `json:"device_updown_threshold,omitempty"`
	// whether to disallow Mist to analyze pcap files (this is required for marvis pcap)
	DisablePcap *bool `json:"disable_pcap,omitempty"`
	// whether to disable remote shell access for an entire org
	DisableRemoteShell *bool `json:"disable_remote_shell,omitempty"`
	ForSite *bool `json:"for_site,omitempty"`
	GatewayMgmt *OrgSettingGatewayMgmt `json:"gateway_mgmt,omitempty"`
	// enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and `device_updown_threshold` is ignored.
	GatewayUpdownThreshold NullableInt32 `json:"gateway_updown_threshold,omitempty"`
	Id *string `json:"id,omitempty"`
	Installer *OrgSettingInstaller `json:"installer,omitempty"`
	Jcloud *OrgSettingJcloud `json:"jcloud,omitempty"`
	Juniper *AccountJuniperInfo `json:"juniper,omitempty"`
	Mgmt *OrgSettingMgmt `json:"mgmt,omitempty"`
	MistNac *OrgSettingMistNac `json:"mist_nac,omitempty"`
	ModifiedTime *float32 `json:"modified_time,omitempty"`
	MspId *string `json:"msp_id,omitempty"`
	MxedgeFipsEnabled *bool `json:"mxedge_fips_enabled,omitempty"`
	MxedgeMgmt *MxedgeMgmt `json:"mxedge_mgmt,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	PasswordPolicy *OrgSettingPasswordPolicy `json:"password_policy,omitempty"`
	Pcap *OrgSettingPcap `json:"pcap,omitempty"`
	PcapBucketVerified *bool `json:"pcap_bucket_verified,omitempty"`
	Security *OrgSettingSecurity `json:"security,omitempty"`
	SimpleAlert *SimpleAlert `json:"simple_alert,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	SwitchMgmt *OrgSettingSwitchMgmt `json:"switch_mgmt,omitempty"`
	// enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and `device_updown_threshold` is ignored.
	SwitchUpdownThreshold NullableInt32 `json:"switch_updown_threshold,omitempty"`
	SyntheticTest *SyntheticTestConfig `json:"synthetic_test,omitempty"`
	// list of tags
	Tags []string `json:"tags,omitempty"`
	// automatically logout the user when UI session is inactive. `0` means disabled
	UiIdleTimeout *int32 `json:"ui_idle_timeout,omitempty"`
	VpnOptions *OrgSettingVpnOptions `json:"vpn_options,omitempty"`
	WanPma *OrgSettingWanPma `json:"wan_pma,omitempty"`
	WiredPma *OrgSettingWiredPma `json:"wired_pma,omitempty"`
	WirelessPma *OrgSettingWirelessPma `json:"wireless_pma,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrgSetting OrgSetting

// NewOrgSetting instantiates a new OrgSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgSetting() *OrgSetting {
	this := OrgSetting{}
	var deviceUpdownThreshold int32 = 0
	this.DeviceUpdownThreshold = &deviceUpdownThreshold
	var disablePcap bool = false
	this.DisablePcap = &disablePcap
	var disableRemoteShell bool = false
	this.DisableRemoteShell = &disableRemoteShell
	var mxedgeFipsEnabled bool = false
	this.MxedgeFipsEnabled = &mxedgeFipsEnabled
	var uiIdleTimeout int32 = 0
	this.UiIdleTimeout = &uiIdleTimeout
	return &this
}

// NewOrgSettingWithDefaults instantiates a new OrgSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgSettingWithDefaults() *OrgSetting {
	this := OrgSetting{}
	var deviceUpdownThreshold int32 = 0
	this.DeviceUpdownThreshold = &deviceUpdownThreshold
	var disablePcap bool = false
	this.DisablePcap = &disablePcap
	var disableRemoteShell bool = false
	this.DisableRemoteShell = &disableRemoteShell
	var mxedgeFipsEnabled bool = false
	this.MxedgeFipsEnabled = &mxedgeFipsEnabled
	var uiIdleTimeout int32 = 0
	this.UiIdleTimeout = &uiIdleTimeout
	return &this
}

// GetApUpdownThreshold returns the ApUpdownThreshold field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrgSetting) GetApUpdownThreshold() int32 {
	if o == nil || IsNil(o.ApUpdownThreshold.Get()) {
		var ret int32
		return ret
	}
	return *o.ApUpdownThreshold.Get()
}

// GetApUpdownThresholdOk returns a tuple with the ApUpdownThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrgSetting) GetApUpdownThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApUpdownThreshold.Get(), o.ApUpdownThreshold.IsSet()
}

// HasApUpdownThreshold returns a boolean if a field has been set.
func (o *OrgSetting) HasApUpdownThreshold() bool {
	if o != nil && o.ApUpdownThreshold.IsSet() {
		return true
	}

	return false
}

// SetApUpdownThreshold gets a reference to the given NullableInt32 and assigns it to the ApUpdownThreshold field.
func (o *OrgSetting) SetApUpdownThreshold(v int32) {
	o.ApUpdownThreshold.Set(&v)
}
// SetApUpdownThresholdNil sets the value for ApUpdownThreshold to be an explicit nil
func (o *OrgSetting) SetApUpdownThresholdNil() {
	o.ApUpdownThreshold.Set(nil)
}

// UnsetApUpdownThreshold ensures that no value is present for ApUpdownThreshold, not even an explicit nil
func (o *OrgSetting) UnsetApUpdownThreshold() {
	o.ApUpdownThreshold.Unset()
}

// GetApiPolicy returns the ApiPolicy field value if set, zero value otherwise.
func (o *OrgSetting) GetApiPolicy() OrgSettingApiPolicy {
	if o == nil || IsNil(o.ApiPolicy) {
		var ret OrgSettingApiPolicy
		return ret
	}
	return *o.ApiPolicy
}

// GetApiPolicyOk returns a tuple with the ApiPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetApiPolicyOk() (*OrgSettingApiPolicy, bool) {
	if o == nil || IsNil(o.ApiPolicy) {
		return nil, false
	}
	return o.ApiPolicy, true
}

// HasApiPolicy returns a boolean if a field has been set.
func (o *OrgSetting) HasApiPolicy() bool {
	if o != nil && !IsNil(o.ApiPolicy) {
		return true
	}

	return false
}

// SetApiPolicy gets a reference to the given OrgSettingApiPolicy and assigns it to the ApiPolicy field.
func (o *OrgSetting) SetApiPolicy(v OrgSettingApiPolicy) {
	o.ApiPolicy = &v
}

// GetAutoDeviceNaming returns the AutoDeviceNaming field value if set, zero value otherwise.
func (o *OrgSetting) GetAutoDeviceNaming() OrgSettingAutoDeviceNaming {
	if o == nil || IsNil(o.AutoDeviceNaming) {
		var ret OrgSettingAutoDeviceNaming
		return ret
	}
	return *o.AutoDeviceNaming
}

// GetAutoDeviceNamingOk returns a tuple with the AutoDeviceNaming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetAutoDeviceNamingOk() (*OrgSettingAutoDeviceNaming, bool) {
	if o == nil || IsNil(o.AutoDeviceNaming) {
		return nil, false
	}
	return o.AutoDeviceNaming, true
}

// HasAutoDeviceNaming returns a boolean if a field has been set.
func (o *OrgSetting) HasAutoDeviceNaming() bool {
	if o != nil && !IsNil(o.AutoDeviceNaming) {
		return true
	}

	return false
}

// SetAutoDeviceNaming gets a reference to the given OrgSettingAutoDeviceNaming and assigns it to the AutoDeviceNaming field.
func (o *OrgSetting) SetAutoDeviceNaming(v OrgSettingAutoDeviceNaming) {
	o.AutoDeviceNaming = &v
}

// GetAutoDeviceprofileAssignment returns the AutoDeviceprofileAssignment field value if set, zero value otherwise.
func (o *OrgSetting) GetAutoDeviceprofileAssignment() OrgSettingAutoDeviceprofileAssignment {
	if o == nil || IsNil(o.AutoDeviceprofileAssignment) {
		var ret OrgSettingAutoDeviceprofileAssignment
		return ret
	}
	return *o.AutoDeviceprofileAssignment
}

// GetAutoDeviceprofileAssignmentOk returns a tuple with the AutoDeviceprofileAssignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetAutoDeviceprofileAssignmentOk() (*OrgSettingAutoDeviceprofileAssignment, bool) {
	if o == nil || IsNil(o.AutoDeviceprofileAssignment) {
		return nil, false
	}
	return o.AutoDeviceprofileAssignment, true
}

// HasAutoDeviceprofileAssignment returns a boolean if a field has been set.
func (o *OrgSetting) HasAutoDeviceprofileAssignment() bool {
	if o != nil && !IsNil(o.AutoDeviceprofileAssignment) {
		return true
	}

	return false
}

// SetAutoDeviceprofileAssignment gets a reference to the given OrgSettingAutoDeviceprofileAssignment and assigns it to the AutoDeviceprofileAssignment field.
func (o *OrgSetting) SetAutoDeviceprofileAssignment(v OrgSettingAutoDeviceprofileAssignment) {
	o.AutoDeviceprofileAssignment = &v
}

// GetAutoSiteAssignment returns the AutoSiteAssignment field value if set, zero value otherwise.
func (o *OrgSetting) GetAutoSiteAssignment() OrgSettingAutoSiteAssignment {
	if o == nil || IsNil(o.AutoSiteAssignment) {
		var ret OrgSettingAutoSiteAssignment
		return ret
	}
	return *o.AutoSiteAssignment
}

// GetAutoSiteAssignmentOk returns a tuple with the AutoSiteAssignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetAutoSiteAssignmentOk() (*OrgSettingAutoSiteAssignment, bool) {
	if o == nil || IsNil(o.AutoSiteAssignment) {
		return nil, false
	}
	return o.AutoSiteAssignment, true
}

// HasAutoSiteAssignment returns a boolean if a field has been set.
func (o *OrgSetting) HasAutoSiteAssignment() bool {
	if o != nil && !IsNil(o.AutoSiteAssignment) {
		return true
	}

	return false
}

// SetAutoSiteAssignment gets a reference to the given OrgSettingAutoSiteAssignment and assigns it to the AutoSiteAssignment field.
func (o *OrgSetting) SetAutoSiteAssignment(v OrgSettingAutoSiteAssignment) {
	o.AutoSiteAssignment = &v
}

// GetBlacklistUrl returns the BlacklistUrl field value if set, zero value otherwise.
func (o *OrgSetting) GetBlacklistUrl() string {
	if o == nil || IsNil(o.BlacklistUrl) {
		var ret string
		return ret
	}
	return *o.BlacklistUrl
}

// GetBlacklistUrlOk returns a tuple with the BlacklistUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetBlacklistUrlOk() (*string, bool) {
	if o == nil || IsNil(o.BlacklistUrl) {
		return nil, false
	}
	return o.BlacklistUrl, true
}

// HasBlacklistUrl returns a boolean if a field has been set.
func (o *OrgSetting) HasBlacklistUrl() bool {
	if o != nil && !IsNil(o.BlacklistUrl) {
		return true
	}

	return false
}

// SetBlacklistUrl gets a reference to the given string and assigns it to the BlacklistUrl field.
func (o *OrgSetting) SetBlacklistUrl(v string) {
	o.BlacklistUrl = &v
}

// GetCacerts returns the Cacerts field value if set, zero value otherwise.
func (o *OrgSetting) GetCacerts() []string {
	if o == nil || IsNil(o.Cacerts) {
		var ret []string
		return ret
	}
	return o.Cacerts
}

// GetCacertsOk returns a tuple with the Cacerts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetCacertsOk() ([]string, bool) {
	if o == nil || IsNil(o.Cacerts) {
		return nil, false
	}
	return o.Cacerts, true
}

// HasCacerts returns a boolean if a field has been set.
func (o *OrgSetting) HasCacerts() bool {
	if o != nil && !IsNil(o.Cacerts) {
		return true
	}

	return false
}

// SetCacerts gets a reference to the given []string and assigns it to the Cacerts field.
func (o *OrgSetting) SetCacerts(v []string) {
	o.Cacerts = v
}

// GetCelona returns the Celona field value if set, zero value otherwise.
func (o *OrgSetting) GetCelona() OrgSettingCelona {
	if o == nil || IsNil(o.Celona) {
		var ret OrgSettingCelona
		return ret
	}
	return *o.Celona
}

// GetCelonaOk returns a tuple with the Celona field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetCelonaOk() (*OrgSettingCelona, bool) {
	if o == nil || IsNil(o.Celona) {
		return nil, false
	}
	return o.Celona, true
}

// HasCelona returns a boolean if a field has been set.
func (o *OrgSetting) HasCelona() bool {
	if o != nil && !IsNil(o.Celona) {
		return true
	}

	return false
}

// SetCelona gets a reference to the given OrgSettingCelona and assigns it to the Celona field.
func (o *OrgSetting) SetCelona(v OrgSettingCelona) {
	o.Celona = &v
}

// GetCloudshark returns the Cloudshark field value if set, zero value otherwise.
func (o *OrgSetting) GetCloudshark() OrgSettingCloudshark {
	if o == nil || IsNil(o.Cloudshark) {
		var ret OrgSettingCloudshark
		return ret
	}
	return *o.Cloudshark
}

// GetCloudsharkOk returns a tuple with the Cloudshark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetCloudsharkOk() (*OrgSettingCloudshark, bool) {
	if o == nil || IsNil(o.Cloudshark) {
		return nil, false
	}
	return o.Cloudshark, true
}

// HasCloudshark returns a boolean if a field has been set.
func (o *OrgSetting) HasCloudshark() bool {
	if o != nil && !IsNil(o.Cloudshark) {
		return true
	}

	return false
}

// SetCloudshark gets a reference to the given OrgSettingCloudshark and assigns it to the Cloudshark field.
func (o *OrgSetting) SetCloudshark(v OrgSettingCloudshark) {
	o.Cloudshark = &v
}

// GetCradlepoint returns the Cradlepoint field value if set, zero value otherwise.
func (o *OrgSetting) GetCradlepoint() OrgSettingCradlepoint {
	if o == nil || IsNil(o.Cradlepoint) {
		var ret OrgSettingCradlepoint
		return ret
	}
	return *o.Cradlepoint
}

// GetCradlepointOk returns a tuple with the Cradlepoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetCradlepointOk() (*OrgSettingCradlepoint, bool) {
	if o == nil || IsNil(o.Cradlepoint) {
		return nil, false
	}
	return o.Cradlepoint, true
}

// HasCradlepoint returns a boolean if a field has been set.
func (o *OrgSetting) HasCradlepoint() bool {
	if o != nil && !IsNil(o.Cradlepoint) {
		return true
	}

	return false
}

// SetCradlepoint gets a reference to the given OrgSettingCradlepoint and assigns it to the Cradlepoint field.
func (o *OrgSetting) SetCradlepoint(v OrgSettingCradlepoint) {
	o.Cradlepoint = &v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *OrgSetting) GetCreatedTime() float32 {
	if o == nil || IsNil(o.CreatedTime) {
		var ret float32
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetCreatedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *OrgSetting) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given float32 and assigns it to the CreatedTime field.
func (o *OrgSetting) SetCreatedTime(v float32) {
	o.CreatedTime = &v
}

// GetDeviceCert returns the DeviceCert field value if set, zero value otherwise.
func (o *OrgSetting) GetDeviceCert() OrgSettingDeviceCert {
	if o == nil || IsNil(o.DeviceCert) {
		var ret OrgSettingDeviceCert
		return ret
	}
	return *o.DeviceCert
}

// GetDeviceCertOk returns a tuple with the DeviceCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetDeviceCertOk() (*OrgSettingDeviceCert, bool) {
	if o == nil || IsNil(o.DeviceCert) {
		return nil, false
	}
	return o.DeviceCert, true
}

// HasDeviceCert returns a boolean if a field has been set.
func (o *OrgSetting) HasDeviceCert() bool {
	if o != nil && !IsNil(o.DeviceCert) {
		return true
	}

	return false
}

// SetDeviceCert gets a reference to the given OrgSettingDeviceCert and assigns it to the DeviceCert field.
func (o *OrgSetting) SetDeviceCert(v OrgSettingDeviceCert) {
	o.DeviceCert = &v
}

// GetDeviceUpdownThreshold returns the DeviceUpdownThreshold field value if set, zero value otherwise.
func (o *OrgSetting) GetDeviceUpdownThreshold() int32 {
	if o == nil || IsNil(o.DeviceUpdownThreshold) {
		var ret int32
		return ret
	}
	return *o.DeviceUpdownThreshold
}

// GetDeviceUpdownThresholdOk returns a tuple with the DeviceUpdownThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetDeviceUpdownThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.DeviceUpdownThreshold) {
		return nil, false
	}
	return o.DeviceUpdownThreshold, true
}

// HasDeviceUpdownThreshold returns a boolean if a field has been set.
func (o *OrgSetting) HasDeviceUpdownThreshold() bool {
	if o != nil && !IsNil(o.DeviceUpdownThreshold) {
		return true
	}

	return false
}

// SetDeviceUpdownThreshold gets a reference to the given int32 and assigns it to the DeviceUpdownThreshold field.
func (o *OrgSetting) SetDeviceUpdownThreshold(v int32) {
	o.DeviceUpdownThreshold = &v
}

// GetDisablePcap returns the DisablePcap field value if set, zero value otherwise.
func (o *OrgSetting) GetDisablePcap() bool {
	if o == nil || IsNil(o.DisablePcap) {
		var ret bool
		return ret
	}
	return *o.DisablePcap
}

// GetDisablePcapOk returns a tuple with the DisablePcap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetDisablePcapOk() (*bool, bool) {
	if o == nil || IsNil(o.DisablePcap) {
		return nil, false
	}
	return o.DisablePcap, true
}

// HasDisablePcap returns a boolean if a field has been set.
func (o *OrgSetting) HasDisablePcap() bool {
	if o != nil && !IsNil(o.DisablePcap) {
		return true
	}

	return false
}

// SetDisablePcap gets a reference to the given bool and assigns it to the DisablePcap field.
func (o *OrgSetting) SetDisablePcap(v bool) {
	o.DisablePcap = &v
}

// GetDisableRemoteShell returns the DisableRemoteShell field value if set, zero value otherwise.
func (o *OrgSetting) GetDisableRemoteShell() bool {
	if o == nil || IsNil(o.DisableRemoteShell) {
		var ret bool
		return ret
	}
	return *o.DisableRemoteShell
}

// GetDisableRemoteShellOk returns a tuple with the DisableRemoteShell field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetDisableRemoteShellOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableRemoteShell) {
		return nil, false
	}
	return o.DisableRemoteShell, true
}

// HasDisableRemoteShell returns a boolean if a field has been set.
func (o *OrgSetting) HasDisableRemoteShell() bool {
	if o != nil && !IsNil(o.DisableRemoteShell) {
		return true
	}

	return false
}

// SetDisableRemoteShell gets a reference to the given bool and assigns it to the DisableRemoteShell field.
func (o *OrgSetting) SetDisableRemoteShell(v bool) {
	o.DisableRemoteShell = &v
}

// GetForSite returns the ForSite field value if set, zero value otherwise.
func (o *OrgSetting) GetForSite() bool {
	if o == nil || IsNil(o.ForSite) {
		var ret bool
		return ret
	}
	return *o.ForSite
}

// GetForSiteOk returns a tuple with the ForSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetForSiteOk() (*bool, bool) {
	if o == nil || IsNil(o.ForSite) {
		return nil, false
	}
	return o.ForSite, true
}

// HasForSite returns a boolean if a field has been set.
func (o *OrgSetting) HasForSite() bool {
	if o != nil && !IsNil(o.ForSite) {
		return true
	}

	return false
}

// SetForSite gets a reference to the given bool and assigns it to the ForSite field.
func (o *OrgSetting) SetForSite(v bool) {
	o.ForSite = &v
}

// GetGatewayMgmt returns the GatewayMgmt field value if set, zero value otherwise.
func (o *OrgSetting) GetGatewayMgmt() OrgSettingGatewayMgmt {
	if o == nil || IsNil(o.GatewayMgmt) {
		var ret OrgSettingGatewayMgmt
		return ret
	}
	return *o.GatewayMgmt
}

// GetGatewayMgmtOk returns a tuple with the GatewayMgmt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetGatewayMgmtOk() (*OrgSettingGatewayMgmt, bool) {
	if o == nil || IsNil(o.GatewayMgmt) {
		return nil, false
	}
	return o.GatewayMgmt, true
}

// HasGatewayMgmt returns a boolean if a field has been set.
func (o *OrgSetting) HasGatewayMgmt() bool {
	if o != nil && !IsNil(o.GatewayMgmt) {
		return true
	}

	return false
}

// SetGatewayMgmt gets a reference to the given OrgSettingGatewayMgmt and assigns it to the GatewayMgmt field.
func (o *OrgSetting) SetGatewayMgmt(v OrgSettingGatewayMgmt) {
	o.GatewayMgmt = &v
}

// GetGatewayUpdownThreshold returns the GatewayUpdownThreshold field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrgSetting) GetGatewayUpdownThreshold() int32 {
	if o == nil || IsNil(o.GatewayUpdownThreshold.Get()) {
		var ret int32
		return ret
	}
	return *o.GatewayUpdownThreshold.Get()
}

// GetGatewayUpdownThresholdOk returns a tuple with the GatewayUpdownThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrgSetting) GetGatewayUpdownThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.GatewayUpdownThreshold.Get(), o.GatewayUpdownThreshold.IsSet()
}

// HasGatewayUpdownThreshold returns a boolean if a field has been set.
func (o *OrgSetting) HasGatewayUpdownThreshold() bool {
	if o != nil && o.GatewayUpdownThreshold.IsSet() {
		return true
	}

	return false
}

// SetGatewayUpdownThreshold gets a reference to the given NullableInt32 and assigns it to the GatewayUpdownThreshold field.
func (o *OrgSetting) SetGatewayUpdownThreshold(v int32) {
	o.GatewayUpdownThreshold.Set(&v)
}
// SetGatewayUpdownThresholdNil sets the value for GatewayUpdownThreshold to be an explicit nil
func (o *OrgSetting) SetGatewayUpdownThresholdNil() {
	o.GatewayUpdownThreshold.Set(nil)
}

// UnsetGatewayUpdownThreshold ensures that no value is present for GatewayUpdownThreshold, not even an explicit nil
func (o *OrgSetting) UnsetGatewayUpdownThreshold() {
	o.GatewayUpdownThreshold.Unset()
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OrgSetting) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OrgSetting) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OrgSetting) SetId(v string) {
	o.Id = &v
}

// GetInstaller returns the Installer field value if set, zero value otherwise.
func (o *OrgSetting) GetInstaller() OrgSettingInstaller {
	if o == nil || IsNil(o.Installer) {
		var ret OrgSettingInstaller
		return ret
	}
	return *o.Installer
}

// GetInstallerOk returns a tuple with the Installer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetInstallerOk() (*OrgSettingInstaller, bool) {
	if o == nil || IsNil(o.Installer) {
		return nil, false
	}
	return o.Installer, true
}

// HasInstaller returns a boolean if a field has been set.
func (o *OrgSetting) HasInstaller() bool {
	if o != nil && !IsNil(o.Installer) {
		return true
	}

	return false
}

// SetInstaller gets a reference to the given OrgSettingInstaller and assigns it to the Installer field.
func (o *OrgSetting) SetInstaller(v OrgSettingInstaller) {
	o.Installer = &v
}

// GetJcloud returns the Jcloud field value if set, zero value otherwise.
func (o *OrgSetting) GetJcloud() OrgSettingJcloud {
	if o == nil || IsNil(o.Jcloud) {
		var ret OrgSettingJcloud
		return ret
	}
	return *o.Jcloud
}

// GetJcloudOk returns a tuple with the Jcloud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetJcloudOk() (*OrgSettingJcloud, bool) {
	if o == nil || IsNil(o.Jcloud) {
		return nil, false
	}
	return o.Jcloud, true
}

// HasJcloud returns a boolean if a field has been set.
func (o *OrgSetting) HasJcloud() bool {
	if o != nil && !IsNil(o.Jcloud) {
		return true
	}

	return false
}

// SetJcloud gets a reference to the given OrgSettingJcloud and assigns it to the Jcloud field.
func (o *OrgSetting) SetJcloud(v OrgSettingJcloud) {
	o.Jcloud = &v
}

// GetJuniper returns the Juniper field value if set, zero value otherwise.
func (o *OrgSetting) GetJuniper() AccountJuniperInfo {
	if o == nil || IsNil(o.Juniper) {
		var ret AccountJuniperInfo
		return ret
	}
	return *o.Juniper
}

// GetJuniperOk returns a tuple with the Juniper field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetJuniperOk() (*AccountJuniperInfo, bool) {
	if o == nil || IsNil(o.Juniper) {
		return nil, false
	}
	return o.Juniper, true
}

// HasJuniper returns a boolean if a field has been set.
func (o *OrgSetting) HasJuniper() bool {
	if o != nil && !IsNil(o.Juniper) {
		return true
	}

	return false
}

// SetJuniper gets a reference to the given AccountJuniperInfo and assigns it to the Juniper field.
func (o *OrgSetting) SetJuniper(v AccountJuniperInfo) {
	o.Juniper = &v
}

// GetMgmt returns the Mgmt field value if set, zero value otherwise.
func (o *OrgSetting) GetMgmt() OrgSettingMgmt {
	if o == nil || IsNil(o.Mgmt) {
		var ret OrgSettingMgmt
		return ret
	}
	return *o.Mgmt
}

// GetMgmtOk returns a tuple with the Mgmt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetMgmtOk() (*OrgSettingMgmt, bool) {
	if o == nil || IsNil(o.Mgmt) {
		return nil, false
	}
	return o.Mgmt, true
}

// HasMgmt returns a boolean if a field has been set.
func (o *OrgSetting) HasMgmt() bool {
	if o != nil && !IsNil(o.Mgmt) {
		return true
	}

	return false
}

// SetMgmt gets a reference to the given OrgSettingMgmt and assigns it to the Mgmt field.
func (o *OrgSetting) SetMgmt(v OrgSettingMgmt) {
	o.Mgmt = &v
}

// GetMistNac returns the MistNac field value if set, zero value otherwise.
func (o *OrgSetting) GetMistNac() OrgSettingMistNac {
	if o == nil || IsNil(o.MistNac) {
		var ret OrgSettingMistNac
		return ret
	}
	return *o.MistNac
}

// GetMistNacOk returns a tuple with the MistNac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetMistNacOk() (*OrgSettingMistNac, bool) {
	if o == nil || IsNil(o.MistNac) {
		return nil, false
	}
	return o.MistNac, true
}

// HasMistNac returns a boolean if a field has been set.
func (o *OrgSetting) HasMistNac() bool {
	if o != nil && !IsNil(o.MistNac) {
		return true
	}

	return false
}

// SetMistNac gets a reference to the given OrgSettingMistNac and assigns it to the MistNac field.
func (o *OrgSetting) SetMistNac(v OrgSettingMistNac) {
	o.MistNac = &v
}

// GetModifiedTime returns the ModifiedTime field value if set, zero value otherwise.
func (o *OrgSetting) GetModifiedTime() float32 {
	if o == nil || IsNil(o.ModifiedTime) {
		var ret float32
		return ret
	}
	return *o.ModifiedTime
}

// GetModifiedTimeOk returns a tuple with the ModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetModifiedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.ModifiedTime) {
		return nil, false
	}
	return o.ModifiedTime, true
}

// HasModifiedTime returns a boolean if a field has been set.
func (o *OrgSetting) HasModifiedTime() bool {
	if o != nil && !IsNil(o.ModifiedTime) {
		return true
	}

	return false
}

// SetModifiedTime gets a reference to the given float32 and assigns it to the ModifiedTime field.
func (o *OrgSetting) SetModifiedTime(v float32) {
	o.ModifiedTime = &v
}

// GetMspId returns the MspId field value if set, zero value otherwise.
func (o *OrgSetting) GetMspId() string {
	if o == nil || IsNil(o.MspId) {
		var ret string
		return ret
	}
	return *o.MspId
}

// GetMspIdOk returns a tuple with the MspId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetMspIdOk() (*string, bool) {
	if o == nil || IsNil(o.MspId) {
		return nil, false
	}
	return o.MspId, true
}

// HasMspId returns a boolean if a field has been set.
func (o *OrgSetting) HasMspId() bool {
	if o != nil && !IsNil(o.MspId) {
		return true
	}

	return false
}

// SetMspId gets a reference to the given string and assigns it to the MspId field.
func (o *OrgSetting) SetMspId(v string) {
	o.MspId = &v
}

// GetMxedgeFipsEnabled returns the MxedgeFipsEnabled field value if set, zero value otherwise.
func (o *OrgSetting) GetMxedgeFipsEnabled() bool {
	if o == nil || IsNil(o.MxedgeFipsEnabled) {
		var ret bool
		return ret
	}
	return *o.MxedgeFipsEnabled
}

// GetMxedgeFipsEnabledOk returns a tuple with the MxedgeFipsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetMxedgeFipsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.MxedgeFipsEnabled) {
		return nil, false
	}
	return o.MxedgeFipsEnabled, true
}

// HasMxedgeFipsEnabled returns a boolean if a field has been set.
func (o *OrgSetting) HasMxedgeFipsEnabled() bool {
	if o != nil && !IsNil(o.MxedgeFipsEnabled) {
		return true
	}

	return false
}

// SetMxedgeFipsEnabled gets a reference to the given bool and assigns it to the MxedgeFipsEnabled field.
func (o *OrgSetting) SetMxedgeFipsEnabled(v bool) {
	o.MxedgeFipsEnabled = &v
}

// GetMxedgeMgmt returns the MxedgeMgmt field value if set, zero value otherwise.
func (o *OrgSetting) GetMxedgeMgmt() MxedgeMgmt {
	if o == nil || IsNil(o.MxedgeMgmt) {
		var ret MxedgeMgmt
		return ret
	}
	return *o.MxedgeMgmt
}

// GetMxedgeMgmtOk returns a tuple with the MxedgeMgmt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetMxedgeMgmtOk() (*MxedgeMgmt, bool) {
	if o == nil || IsNil(o.MxedgeMgmt) {
		return nil, false
	}
	return o.MxedgeMgmt, true
}

// HasMxedgeMgmt returns a boolean if a field has been set.
func (o *OrgSetting) HasMxedgeMgmt() bool {
	if o != nil && !IsNil(o.MxedgeMgmt) {
		return true
	}

	return false
}

// SetMxedgeMgmt gets a reference to the given MxedgeMgmt and assigns it to the MxedgeMgmt field.
func (o *OrgSetting) SetMxedgeMgmt(v MxedgeMgmt) {
	o.MxedgeMgmt = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *OrgSetting) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *OrgSetting) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *OrgSetting) SetOrgId(v string) {
	o.OrgId = &v
}

// GetPasswordPolicy returns the PasswordPolicy field value if set, zero value otherwise.
func (o *OrgSetting) GetPasswordPolicy() OrgSettingPasswordPolicy {
	if o == nil || IsNil(o.PasswordPolicy) {
		var ret OrgSettingPasswordPolicy
		return ret
	}
	return *o.PasswordPolicy
}

// GetPasswordPolicyOk returns a tuple with the PasswordPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetPasswordPolicyOk() (*OrgSettingPasswordPolicy, bool) {
	if o == nil || IsNil(o.PasswordPolicy) {
		return nil, false
	}
	return o.PasswordPolicy, true
}

// HasPasswordPolicy returns a boolean if a field has been set.
func (o *OrgSetting) HasPasswordPolicy() bool {
	if o != nil && !IsNil(o.PasswordPolicy) {
		return true
	}

	return false
}

// SetPasswordPolicy gets a reference to the given OrgSettingPasswordPolicy and assigns it to the PasswordPolicy field.
func (o *OrgSetting) SetPasswordPolicy(v OrgSettingPasswordPolicy) {
	o.PasswordPolicy = &v
}

// GetPcap returns the Pcap field value if set, zero value otherwise.
func (o *OrgSetting) GetPcap() OrgSettingPcap {
	if o == nil || IsNil(o.Pcap) {
		var ret OrgSettingPcap
		return ret
	}
	return *o.Pcap
}

// GetPcapOk returns a tuple with the Pcap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetPcapOk() (*OrgSettingPcap, bool) {
	if o == nil || IsNil(o.Pcap) {
		return nil, false
	}
	return o.Pcap, true
}

// HasPcap returns a boolean if a field has been set.
func (o *OrgSetting) HasPcap() bool {
	if o != nil && !IsNil(o.Pcap) {
		return true
	}

	return false
}

// SetPcap gets a reference to the given OrgSettingPcap and assigns it to the Pcap field.
func (o *OrgSetting) SetPcap(v OrgSettingPcap) {
	o.Pcap = &v
}

// GetPcapBucketVerified returns the PcapBucketVerified field value if set, zero value otherwise.
func (o *OrgSetting) GetPcapBucketVerified() bool {
	if o == nil || IsNil(o.PcapBucketVerified) {
		var ret bool
		return ret
	}
	return *o.PcapBucketVerified
}

// GetPcapBucketVerifiedOk returns a tuple with the PcapBucketVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetPcapBucketVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.PcapBucketVerified) {
		return nil, false
	}
	return o.PcapBucketVerified, true
}

// HasPcapBucketVerified returns a boolean if a field has been set.
func (o *OrgSetting) HasPcapBucketVerified() bool {
	if o != nil && !IsNil(o.PcapBucketVerified) {
		return true
	}

	return false
}

// SetPcapBucketVerified gets a reference to the given bool and assigns it to the PcapBucketVerified field.
func (o *OrgSetting) SetPcapBucketVerified(v bool) {
	o.PcapBucketVerified = &v
}

// GetSecurity returns the Security field value if set, zero value otherwise.
func (o *OrgSetting) GetSecurity() OrgSettingSecurity {
	if o == nil || IsNil(o.Security) {
		var ret OrgSettingSecurity
		return ret
	}
	return *o.Security
}

// GetSecurityOk returns a tuple with the Security field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetSecurityOk() (*OrgSettingSecurity, bool) {
	if o == nil || IsNil(o.Security) {
		return nil, false
	}
	return o.Security, true
}

// HasSecurity returns a boolean if a field has been set.
func (o *OrgSetting) HasSecurity() bool {
	if o != nil && !IsNil(o.Security) {
		return true
	}

	return false
}

// SetSecurity gets a reference to the given OrgSettingSecurity and assigns it to the Security field.
func (o *OrgSetting) SetSecurity(v OrgSettingSecurity) {
	o.Security = &v
}

// GetSimpleAlert returns the SimpleAlert field value if set, zero value otherwise.
func (o *OrgSetting) GetSimpleAlert() SimpleAlert {
	if o == nil || IsNil(o.SimpleAlert) {
		var ret SimpleAlert
		return ret
	}
	return *o.SimpleAlert
}

// GetSimpleAlertOk returns a tuple with the SimpleAlert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetSimpleAlertOk() (*SimpleAlert, bool) {
	if o == nil || IsNil(o.SimpleAlert) {
		return nil, false
	}
	return o.SimpleAlert, true
}

// HasSimpleAlert returns a boolean if a field has been set.
func (o *OrgSetting) HasSimpleAlert() bool {
	if o != nil && !IsNil(o.SimpleAlert) {
		return true
	}

	return false
}

// SetSimpleAlert gets a reference to the given SimpleAlert and assigns it to the SimpleAlert field.
func (o *OrgSetting) SetSimpleAlert(v SimpleAlert) {
	o.SimpleAlert = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *OrgSetting) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *OrgSetting) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *OrgSetting) SetSiteId(v string) {
	o.SiteId = &v
}

// GetSwitchMgmt returns the SwitchMgmt field value if set, zero value otherwise.
func (o *OrgSetting) GetSwitchMgmt() OrgSettingSwitchMgmt {
	if o == nil || IsNil(o.SwitchMgmt) {
		var ret OrgSettingSwitchMgmt
		return ret
	}
	return *o.SwitchMgmt
}

// GetSwitchMgmtOk returns a tuple with the SwitchMgmt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetSwitchMgmtOk() (*OrgSettingSwitchMgmt, bool) {
	if o == nil || IsNil(o.SwitchMgmt) {
		return nil, false
	}
	return o.SwitchMgmt, true
}

// HasSwitchMgmt returns a boolean if a field has been set.
func (o *OrgSetting) HasSwitchMgmt() bool {
	if o != nil && !IsNil(o.SwitchMgmt) {
		return true
	}

	return false
}

// SetSwitchMgmt gets a reference to the given OrgSettingSwitchMgmt and assigns it to the SwitchMgmt field.
func (o *OrgSetting) SetSwitchMgmt(v OrgSettingSwitchMgmt) {
	o.SwitchMgmt = &v
}

// GetSwitchUpdownThreshold returns the SwitchUpdownThreshold field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrgSetting) GetSwitchUpdownThreshold() int32 {
	if o == nil || IsNil(o.SwitchUpdownThreshold.Get()) {
		var ret int32
		return ret
	}
	return *o.SwitchUpdownThreshold.Get()
}

// GetSwitchUpdownThresholdOk returns a tuple with the SwitchUpdownThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrgSetting) GetSwitchUpdownThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SwitchUpdownThreshold.Get(), o.SwitchUpdownThreshold.IsSet()
}

// HasSwitchUpdownThreshold returns a boolean if a field has been set.
func (o *OrgSetting) HasSwitchUpdownThreshold() bool {
	if o != nil && o.SwitchUpdownThreshold.IsSet() {
		return true
	}

	return false
}

// SetSwitchUpdownThreshold gets a reference to the given NullableInt32 and assigns it to the SwitchUpdownThreshold field.
func (o *OrgSetting) SetSwitchUpdownThreshold(v int32) {
	o.SwitchUpdownThreshold.Set(&v)
}
// SetSwitchUpdownThresholdNil sets the value for SwitchUpdownThreshold to be an explicit nil
func (o *OrgSetting) SetSwitchUpdownThresholdNil() {
	o.SwitchUpdownThreshold.Set(nil)
}

// UnsetSwitchUpdownThreshold ensures that no value is present for SwitchUpdownThreshold, not even an explicit nil
func (o *OrgSetting) UnsetSwitchUpdownThreshold() {
	o.SwitchUpdownThreshold.Unset()
}

// GetSyntheticTest returns the SyntheticTest field value if set, zero value otherwise.
func (o *OrgSetting) GetSyntheticTest() SyntheticTestConfig {
	if o == nil || IsNil(o.SyntheticTest) {
		var ret SyntheticTestConfig
		return ret
	}
	return *o.SyntheticTest
}

// GetSyntheticTestOk returns a tuple with the SyntheticTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetSyntheticTestOk() (*SyntheticTestConfig, bool) {
	if o == nil || IsNil(o.SyntheticTest) {
		return nil, false
	}
	return o.SyntheticTest, true
}

// HasSyntheticTest returns a boolean if a field has been set.
func (o *OrgSetting) HasSyntheticTest() bool {
	if o != nil && !IsNil(o.SyntheticTest) {
		return true
	}

	return false
}

// SetSyntheticTest gets a reference to the given SyntheticTestConfig and assigns it to the SyntheticTest field.
func (o *OrgSetting) SetSyntheticTest(v SyntheticTestConfig) {
	o.SyntheticTest = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *OrgSetting) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *OrgSetting) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *OrgSetting) SetTags(v []string) {
	o.Tags = v
}

// GetUiIdleTimeout returns the UiIdleTimeout field value if set, zero value otherwise.
func (o *OrgSetting) GetUiIdleTimeout() int32 {
	if o == nil || IsNil(o.UiIdleTimeout) {
		var ret int32
		return ret
	}
	return *o.UiIdleTimeout
}

// GetUiIdleTimeoutOk returns a tuple with the UiIdleTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetUiIdleTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.UiIdleTimeout) {
		return nil, false
	}
	return o.UiIdleTimeout, true
}

// HasUiIdleTimeout returns a boolean if a field has been set.
func (o *OrgSetting) HasUiIdleTimeout() bool {
	if o != nil && !IsNil(o.UiIdleTimeout) {
		return true
	}

	return false
}

// SetUiIdleTimeout gets a reference to the given int32 and assigns it to the UiIdleTimeout field.
func (o *OrgSetting) SetUiIdleTimeout(v int32) {
	o.UiIdleTimeout = &v
}

// GetVpnOptions returns the VpnOptions field value if set, zero value otherwise.
func (o *OrgSetting) GetVpnOptions() OrgSettingVpnOptions {
	if o == nil || IsNil(o.VpnOptions) {
		var ret OrgSettingVpnOptions
		return ret
	}
	return *o.VpnOptions
}

// GetVpnOptionsOk returns a tuple with the VpnOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetVpnOptionsOk() (*OrgSettingVpnOptions, bool) {
	if o == nil || IsNil(o.VpnOptions) {
		return nil, false
	}
	return o.VpnOptions, true
}

// HasVpnOptions returns a boolean if a field has been set.
func (o *OrgSetting) HasVpnOptions() bool {
	if o != nil && !IsNil(o.VpnOptions) {
		return true
	}

	return false
}

// SetVpnOptions gets a reference to the given OrgSettingVpnOptions and assigns it to the VpnOptions field.
func (o *OrgSetting) SetVpnOptions(v OrgSettingVpnOptions) {
	o.VpnOptions = &v
}

// GetWanPma returns the WanPma field value if set, zero value otherwise.
func (o *OrgSetting) GetWanPma() OrgSettingWanPma {
	if o == nil || IsNil(o.WanPma) {
		var ret OrgSettingWanPma
		return ret
	}
	return *o.WanPma
}

// GetWanPmaOk returns a tuple with the WanPma field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetWanPmaOk() (*OrgSettingWanPma, bool) {
	if o == nil || IsNil(o.WanPma) {
		return nil, false
	}
	return o.WanPma, true
}

// HasWanPma returns a boolean if a field has been set.
func (o *OrgSetting) HasWanPma() bool {
	if o != nil && !IsNil(o.WanPma) {
		return true
	}

	return false
}

// SetWanPma gets a reference to the given OrgSettingWanPma and assigns it to the WanPma field.
func (o *OrgSetting) SetWanPma(v OrgSettingWanPma) {
	o.WanPma = &v
}

// GetWiredPma returns the WiredPma field value if set, zero value otherwise.
func (o *OrgSetting) GetWiredPma() OrgSettingWiredPma {
	if o == nil || IsNil(o.WiredPma) {
		var ret OrgSettingWiredPma
		return ret
	}
	return *o.WiredPma
}

// GetWiredPmaOk returns a tuple with the WiredPma field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetWiredPmaOk() (*OrgSettingWiredPma, bool) {
	if o == nil || IsNil(o.WiredPma) {
		return nil, false
	}
	return o.WiredPma, true
}

// HasWiredPma returns a boolean if a field has been set.
func (o *OrgSetting) HasWiredPma() bool {
	if o != nil && !IsNil(o.WiredPma) {
		return true
	}

	return false
}

// SetWiredPma gets a reference to the given OrgSettingWiredPma and assigns it to the WiredPma field.
func (o *OrgSetting) SetWiredPma(v OrgSettingWiredPma) {
	o.WiredPma = &v
}

// GetWirelessPma returns the WirelessPma field value if set, zero value otherwise.
func (o *OrgSetting) GetWirelessPma() OrgSettingWirelessPma {
	if o == nil || IsNil(o.WirelessPma) {
		var ret OrgSettingWirelessPma
		return ret
	}
	return *o.WirelessPma
}

// GetWirelessPmaOk returns a tuple with the WirelessPma field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgSetting) GetWirelessPmaOk() (*OrgSettingWirelessPma, bool) {
	if o == nil || IsNil(o.WirelessPma) {
		return nil, false
	}
	return o.WirelessPma, true
}

// HasWirelessPma returns a boolean if a field has been set.
func (o *OrgSetting) HasWirelessPma() bool {
	if o != nil && !IsNil(o.WirelessPma) {
		return true
	}

	return false
}

// SetWirelessPma gets a reference to the given OrgSettingWirelessPma and assigns it to the WirelessPma field.
func (o *OrgSetting) SetWirelessPma(v OrgSettingWirelessPma) {
	o.WirelessPma = &v
}

func (o OrgSetting) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrgSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ApUpdownThreshold.IsSet() {
		toSerialize["ap_updown_threshold"] = o.ApUpdownThreshold.Get()
	}
	if !IsNil(o.ApiPolicy) {
		toSerialize["api_policy"] = o.ApiPolicy
	}
	if !IsNil(o.AutoDeviceNaming) {
		toSerialize["auto_device_naming"] = o.AutoDeviceNaming
	}
	if !IsNil(o.AutoDeviceprofileAssignment) {
		toSerialize["auto_deviceprofile_assignment"] = o.AutoDeviceprofileAssignment
	}
	if !IsNil(o.AutoSiteAssignment) {
		toSerialize["auto_site_assignment"] = o.AutoSiteAssignment
	}
	if !IsNil(o.BlacklistUrl) {
		toSerialize["blacklist_url"] = o.BlacklistUrl
	}
	if !IsNil(o.Cacerts) {
		toSerialize["cacerts"] = o.Cacerts
	}
	if !IsNil(o.Celona) {
		toSerialize["celona"] = o.Celona
	}
	if !IsNil(o.Cloudshark) {
		toSerialize["cloudshark"] = o.Cloudshark
	}
	if !IsNil(o.Cradlepoint) {
		toSerialize["cradlepoint"] = o.Cradlepoint
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.DeviceCert) {
		toSerialize["device_cert"] = o.DeviceCert
	}
	if !IsNil(o.DeviceUpdownThreshold) {
		toSerialize["device_updown_threshold"] = o.DeviceUpdownThreshold
	}
	if !IsNil(o.DisablePcap) {
		toSerialize["disable_pcap"] = o.DisablePcap
	}
	if !IsNil(o.DisableRemoteShell) {
		toSerialize["disable_remote_shell"] = o.DisableRemoteShell
	}
	if !IsNil(o.ForSite) {
		toSerialize["for_site"] = o.ForSite
	}
	if !IsNil(o.GatewayMgmt) {
		toSerialize["gateway_mgmt"] = o.GatewayMgmt
	}
	if o.GatewayUpdownThreshold.IsSet() {
		toSerialize["gateway_updown_threshold"] = o.GatewayUpdownThreshold.Get()
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Installer) {
		toSerialize["installer"] = o.Installer
	}
	if !IsNil(o.Jcloud) {
		toSerialize["jcloud"] = o.Jcloud
	}
	if !IsNil(o.Juniper) {
		toSerialize["juniper"] = o.Juniper
	}
	if !IsNil(o.Mgmt) {
		toSerialize["mgmt"] = o.Mgmt
	}
	if !IsNil(o.MistNac) {
		toSerialize["mist_nac"] = o.MistNac
	}
	if !IsNil(o.ModifiedTime) {
		toSerialize["modified_time"] = o.ModifiedTime
	}
	if !IsNil(o.MspId) {
		toSerialize["msp_id"] = o.MspId
	}
	if !IsNil(o.MxedgeFipsEnabled) {
		toSerialize["mxedge_fips_enabled"] = o.MxedgeFipsEnabled
	}
	if !IsNil(o.MxedgeMgmt) {
		toSerialize["mxedge_mgmt"] = o.MxedgeMgmt
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.PasswordPolicy) {
		toSerialize["password_policy"] = o.PasswordPolicy
	}
	if !IsNil(o.Pcap) {
		toSerialize["pcap"] = o.Pcap
	}
	if !IsNil(o.PcapBucketVerified) {
		toSerialize["pcap_bucket_verified"] = o.PcapBucketVerified
	}
	if !IsNil(o.Security) {
		toSerialize["security"] = o.Security
	}
	if !IsNil(o.SimpleAlert) {
		toSerialize["simple_alert"] = o.SimpleAlert
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.SwitchMgmt) {
		toSerialize["switch_mgmt"] = o.SwitchMgmt
	}
	if o.SwitchUpdownThreshold.IsSet() {
		toSerialize["switch_updown_threshold"] = o.SwitchUpdownThreshold.Get()
	}
	if !IsNil(o.SyntheticTest) {
		toSerialize["synthetic_test"] = o.SyntheticTest
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.UiIdleTimeout) {
		toSerialize["ui_idle_timeout"] = o.UiIdleTimeout
	}
	if !IsNil(o.VpnOptions) {
		toSerialize["vpn_options"] = o.VpnOptions
	}
	if !IsNil(o.WanPma) {
		toSerialize["wan_pma"] = o.WanPma
	}
	if !IsNil(o.WiredPma) {
		toSerialize["wired_pma"] = o.WiredPma
	}
	if !IsNil(o.WirelessPma) {
		toSerialize["wireless_pma"] = o.WirelessPma
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrgSetting) UnmarshalJSON(data []byte) (err error) {
	varOrgSetting := _OrgSetting{}

	err = json.Unmarshal(data, &varOrgSetting)

	if err != nil {
		return err
	}

	*o = OrgSetting(varOrgSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ap_updown_threshold")
		delete(additionalProperties, "api_policy")
		delete(additionalProperties, "auto_device_naming")
		delete(additionalProperties, "auto_deviceprofile_assignment")
		delete(additionalProperties, "auto_site_assignment")
		delete(additionalProperties, "blacklist_url")
		delete(additionalProperties, "cacerts")
		delete(additionalProperties, "celona")
		delete(additionalProperties, "cloudshark")
		delete(additionalProperties, "cradlepoint")
		delete(additionalProperties, "created_time")
		delete(additionalProperties, "device_cert")
		delete(additionalProperties, "device_updown_threshold")
		delete(additionalProperties, "disable_pcap")
		delete(additionalProperties, "disable_remote_shell")
		delete(additionalProperties, "for_site")
		delete(additionalProperties, "gateway_mgmt")
		delete(additionalProperties, "gateway_updown_threshold")
		delete(additionalProperties, "id")
		delete(additionalProperties, "installer")
		delete(additionalProperties, "jcloud")
		delete(additionalProperties, "juniper")
		delete(additionalProperties, "mgmt")
		delete(additionalProperties, "mist_nac")
		delete(additionalProperties, "modified_time")
		delete(additionalProperties, "msp_id")
		delete(additionalProperties, "mxedge_fips_enabled")
		delete(additionalProperties, "mxedge_mgmt")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "password_policy")
		delete(additionalProperties, "pcap")
		delete(additionalProperties, "pcap_bucket_verified")
		delete(additionalProperties, "security")
		delete(additionalProperties, "simple_alert")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "switch_mgmt")
		delete(additionalProperties, "switch_updown_threshold")
		delete(additionalProperties, "synthetic_test")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "ui_idle_timeout")
		delete(additionalProperties, "vpn_options")
		delete(additionalProperties, "wan_pma")
		delete(additionalProperties, "wired_pma")
		delete(additionalProperties, "wireless_pma")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrgSetting struct {
	value *OrgSetting
	isSet bool
}

func (v NullableOrgSetting) Get() *OrgSetting {
	return v.value
}

func (v *NullableOrgSetting) Set(val *OrgSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgSetting(val *OrgSetting) *NullableOrgSetting {
	return &NullableOrgSetting{value: val, isSet: true}
}

func (v NullableOrgSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


