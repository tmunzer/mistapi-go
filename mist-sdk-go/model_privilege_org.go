/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the PrivilegeOrg type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivilegeOrg{}

// PrivilegeOrg Privilieges settings
type PrivilegeOrg struct {
	Role PrivilegeOrgRole `json:"role"`
	Scope PrivilegeOrgScope `json:"scope"`
	// if `scope`==`site`
	SiteId *string `json:"site_id,omitempty"`
	// if `scope`==`sitegroup`
	SitegroupId *string `json:"sitegroup_id,omitempty"`
	Views *PrivilegeOrgViews `json:"views,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PrivilegeOrg PrivilegeOrg

// NewPrivilegeOrg instantiates a new PrivilegeOrg object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivilegeOrg(role PrivilegeOrgRole, scope PrivilegeOrgScope) *PrivilegeOrg {
	this := PrivilegeOrg{}
	this.Role = role
	this.Scope = scope
	return &this
}

// NewPrivilegeOrgWithDefaults instantiates a new PrivilegeOrg object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivilegeOrgWithDefaults() *PrivilegeOrg {
	this := PrivilegeOrg{}
	return &this
}

// GetRole returns the Role field value
func (o *PrivilegeOrg) GetRole() PrivilegeOrgRole {
	if o == nil {
		var ret PrivilegeOrgRole
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *PrivilegeOrg) GetRoleOk() (*PrivilegeOrgRole, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *PrivilegeOrg) SetRole(v PrivilegeOrgRole) {
	o.Role = v
}

// GetScope returns the Scope field value
func (o *PrivilegeOrg) GetScope() PrivilegeOrgScope {
	if o == nil {
		var ret PrivilegeOrgScope
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *PrivilegeOrg) GetScopeOk() (*PrivilegeOrgScope, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *PrivilegeOrg) SetScope(v PrivilegeOrgScope) {
	o.Scope = v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *PrivilegeOrg) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegeOrg) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *PrivilegeOrg) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *PrivilegeOrg) SetSiteId(v string) {
	o.SiteId = &v
}

// GetSitegroupId returns the SitegroupId field value if set, zero value otherwise.
func (o *PrivilegeOrg) GetSitegroupId() string {
	if o == nil || IsNil(o.SitegroupId) {
		var ret string
		return ret
	}
	return *o.SitegroupId
}

// GetSitegroupIdOk returns a tuple with the SitegroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegeOrg) GetSitegroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.SitegroupId) {
		return nil, false
	}
	return o.SitegroupId, true
}

// HasSitegroupId returns a boolean if a field has been set.
func (o *PrivilegeOrg) HasSitegroupId() bool {
	if o != nil && !IsNil(o.SitegroupId) {
		return true
	}

	return false
}

// SetSitegroupId gets a reference to the given string and assigns it to the SitegroupId field.
func (o *PrivilegeOrg) SetSitegroupId(v string) {
	o.SitegroupId = &v
}

// GetViews returns the Views field value if set, zero value otherwise.
func (o *PrivilegeOrg) GetViews() PrivilegeOrgViews {
	if o == nil || IsNil(o.Views) {
		var ret PrivilegeOrgViews
		return ret
	}
	return *o.Views
}

// GetViewsOk returns a tuple with the Views field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegeOrg) GetViewsOk() (*PrivilegeOrgViews, bool) {
	if o == nil || IsNil(o.Views) {
		return nil, false
	}
	return o.Views, true
}

// HasViews returns a boolean if a field has been set.
func (o *PrivilegeOrg) HasViews() bool {
	if o != nil && !IsNil(o.Views) {
		return true
	}

	return false
}

// SetViews gets a reference to the given PrivilegeOrgViews and assigns it to the Views field.
func (o *PrivilegeOrg) SetViews(v PrivilegeOrgViews) {
	o.Views = &v
}

func (o PrivilegeOrg) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivilegeOrg) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["role"] = o.Role
	toSerialize["scope"] = o.Scope
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.SitegroupId) {
		toSerialize["sitegroup_id"] = o.SitegroupId
	}
	if !IsNil(o.Views) {
		toSerialize["views"] = o.Views
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PrivilegeOrg) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"role",
		"scope",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrivilegeOrg := _PrivilegeOrg{}

	err = json.Unmarshal(data, &varPrivilegeOrg)

	if err != nil {
		return err
	}

	*o = PrivilegeOrg(varPrivilegeOrg)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "role")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "sitegroup_id")
		delete(additionalProperties, "views")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePrivilegeOrg struct {
	value *PrivilegeOrg
	isSet bool
}

func (v NullablePrivilegeOrg) Get() *PrivilegeOrg {
	return v.value
}

func (v *NullablePrivilegeOrg) Set(val *PrivilegeOrg) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivilegeOrg) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivilegeOrg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivilegeOrg(val *PrivilegeOrg) *NullablePrivilegeOrg {
	return &NullablePrivilegeOrg{value: val, isSet: true}
}

func (v NullablePrivilegeOrg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivilegeOrg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


