/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the NetworkVpnAccessConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkVpnAccessConfig{}

// NetworkVpnAccessConfig struct for NetworkVpnAccessConfig
type NetworkVpnAccessConfig struct {
	// if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
	AdvertisedSubnet *string `json:"advertised_subnet,omitempty"`
	// whether to allow ping from vpn into this routed network
	AllowPing *bool `json:"allow_ping,omitempty"`
	// Property key may be an IP/Port (i.e. \"63.16.0.3:443\"), or a port (i.e. \":2222\")
	DestinationNat *map[string]NetworkDestinationNatProperty `json:"destination_nat,omitempty"`
	// if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
	NatPool *string `json:"nat_pool,omitempty"`
	// toward LAN-side BGP peers
	NoReadvertiseToLanBgp *bool `json:"no_readvertise_to_lan_bgp,omitempty"`
	// toward LAN-side OSPF peers
	NoReadvertiseToLanOspf *bool `json:"no_readvertise_to_lan_ospf,omitempty"`
	// toward overlay how HUB should deal with routes it received from Spokes
	NoReadvertiseToOverlay *bool `json:"no_readvertise_to_overlay,omitempty"`
	// by default, the routes are only readvertised toward the same vrf on spoke to allow it to be leaked to other vrfs
	OtherVrfs []string `json:"other_vrfs,omitempty"`
	// whether this network is routable
	Routed *bool `json:"routed,omitempty"`
	SourceNat *NetworkSourceNat `json:"source_nat,omitempty"`
	// Property key may be an IP Address (i.e. \"172.16.0.1\"), and IP Address and Port (i.e. \"172.16.0.1:8443\") or a CIDR (i.e. \"172.16.0.12/20\")
	StaticNat *map[string]NetworkStaticNatProperty `json:"static_nat,omitempty"`
	// toward overlay how HUB should deal with routes it received from Spokes
	SummarizedSubnet *string `json:"summarized_subnet,omitempty"`
	// toward LAN-side BGP peers
	SummarizedSubnetToLanBgp *string `json:"summarized_subnet_to_lan_bgp,omitempty"`
	// toward LAN-side OSPF peers
	SummarizedSubnetToLanOspf *string `json:"summarized_subnet_to_lan_ospf,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetworkVpnAccessConfig NetworkVpnAccessConfig

// NewNetworkVpnAccessConfig instantiates a new NetworkVpnAccessConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkVpnAccessConfig() *NetworkVpnAccessConfig {
	this := NetworkVpnAccessConfig{}
	var noReadvertiseToLanBgp bool = false
	this.NoReadvertiseToLanBgp = &noReadvertiseToLanBgp
	var noReadvertiseToLanOspf bool = false
	this.NoReadvertiseToLanOspf = &noReadvertiseToLanOspf
	return &this
}

// NewNetworkVpnAccessConfigWithDefaults instantiates a new NetworkVpnAccessConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkVpnAccessConfigWithDefaults() *NetworkVpnAccessConfig {
	this := NetworkVpnAccessConfig{}
	var noReadvertiseToLanBgp bool = false
	this.NoReadvertiseToLanBgp = &noReadvertiseToLanBgp
	var noReadvertiseToLanOspf bool = false
	this.NoReadvertiseToLanOspf = &noReadvertiseToLanOspf
	return &this
}

// GetAdvertisedSubnet returns the AdvertisedSubnet field value if set, zero value otherwise.
func (o *NetworkVpnAccessConfig) GetAdvertisedSubnet() string {
	if o == nil || IsNil(o.AdvertisedSubnet) {
		var ret string
		return ret
	}
	return *o.AdvertisedSubnet
}

// GetAdvertisedSubnetOk returns a tuple with the AdvertisedSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVpnAccessConfig) GetAdvertisedSubnetOk() (*string, bool) {
	if o == nil || IsNil(o.AdvertisedSubnet) {
		return nil, false
	}
	return o.AdvertisedSubnet, true
}

// HasAdvertisedSubnet returns a boolean if a field has been set.
func (o *NetworkVpnAccessConfig) HasAdvertisedSubnet() bool {
	if o != nil && !IsNil(o.AdvertisedSubnet) {
		return true
	}

	return false
}

// SetAdvertisedSubnet gets a reference to the given string and assigns it to the AdvertisedSubnet field.
func (o *NetworkVpnAccessConfig) SetAdvertisedSubnet(v string) {
	o.AdvertisedSubnet = &v
}

// GetAllowPing returns the AllowPing field value if set, zero value otherwise.
func (o *NetworkVpnAccessConfig) GetAllowPing() bool {
	if o == nil || IsNil(o.AllowPing) {
		var ret bool
		return ret
	}
	return *o.AllowPing
}

// GetAllowPingOk returns a tuple with the AllowPing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVpnAccessConfig) GetAllowPingOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowPing) {
		return nil, false
	}
	return o.AllowPing, true
}

// HasAllowPing returns a boolean if a field has been set.
func (o *NetworkVpnAccessConfig) HasAllowPing() bool {
	if o != nil && !IsNil(o.AllowPing) {
		return true
	}

	return false
}

// SetAllowPing gets a reference to the given bool and assigns it to the AllowPing field.
func (o *NetworkVpnAccessConfig) SetAllowPing(v bool) {
	o.AllowPing = &v
}

// GetDestinationNat returns the DestinationNat field value if set, zero value otherwise.
func (o *NetworkVpnAccessConfig) GetDestinationNat() map[string]NetworkDestinationNatProperty {
	if o == nil || IsNil(o.DestinationNat) {
		var ret map[string]NetworkDestinationNatProperty
		return ret
	}
	return *o.DestinationNat
}

// GetDestinationNatOk returns a tuple with the DestinationNat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVpnAccessConfig) GetDestinationNatOk() (*map[string]NetworkDestinationNatProperty, bool) {
	if o == nil || IsNil(o.DestinationNat) {
		return nil, false
	}
	return o.DestinationNat, true
}

// HasDestinationNat returns a boolean if a field has been set.
func (o *NetworkVpnAccessConfig) HasDestinationNat() bool {
	if o != nil && !IsNil(o.DestinationNat) {
		return true
	}

	return false
}

// SetDestinationNat gets a reference to the given map[string]NetworkDestinationNatProperty and assigns it to the DestinationNat field.
func (o *NetworkVpnAccessConfig) SetDestinationNat(v map[string]NetworkDestinationNatProperty) {
	o.DestinationNat = &v
}

// GetNatPool returns the NatPool field value if set, zero value otherwise.
func (o *NetworkVpnAccessConfig) GetNatPool() string {
	if o == nil || IsNil(o.NatPool) {
		var ret string
		return ret
	}
	return *o.NatPool
}

// GetNatPoolOk returns a tuple with the NatPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVpnAccessConfig) GetNatPoolOk() (*string, bool) {
	if o == nil || IsNil(o.NatPool) {
		return nil, false
	}
	return o.NatPool, true
}

// HasNatPool returns a boolean if a field has been set.
func (o *NetworkVpnAccessConfig) HasNatPool() bool {
	if o != nil && !IsNil(o.NatPool) {
		return true
	}

	return false
}

// SetNatPool gets a reference to the given string and assigns it to the NatPool field.
func (o *NetworkVpnAccessConfig) SetNatPool(v string) {
	o.NatPool = &v
}

// GetNoReadvertiseToLanBgp returns the NoReadvertiseToLanBgp field value if set, zero value otherwise.
func (o *NetworkVpnAccessConfig) GetNoReadvertiseToLanBgp() bool {
	if o == nil || IsNil(o.NoReadvertiseToLanBgp) {
		var ret bool
		return ret
	}
	return *o.NoReadvertiseToLanBgp
}

// GetNoReadvertiseToLanBgpOk returns a tuple with the NoReadvertiseToLanBgp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVpnAccessConfig) GetNoReadvertiseToLanBgpOk() (*bool, bool) {
	if o == nil || IsNil(o.NoReadvertiseToLanBgp) {
		return nil, false
	}
	return o.NoReadvertiseToLanBgp, true
}

// HasNoReadvertiseToLanBgp returns a boolean if a field has been set.
func (o *NetworkVpnAccessConfig) HasNoReadvertiseToLanBgp() bool {
	if o != nil && !IsNil(o.NoReadvertiseToLanBgp) {
		return true
	}

	return false
}

// SetNoReadvertiseToLanBgp gets a reference to the given bool and assigns it to the NoReadvertiseToLanBgp field.
func (o *NetworkVpnAccessConfig) SetNoReadvertiseToLanBgp(v bool) {
	o.NoReadvertiseToLanBgp = &v
}

// GetNoReadvertiseToLanOspf returns the NoReadvertiseToLanOspf field value if set, zero value otherwise.
func (o *NetworkVpnAccessConfig) GetNoReadvertiseToLanOspf() bool {
	if o == nil || IsNil(o.NoReadvertiseToLanOspf) {
		var ret bool
		return ret
	}
	return *o.NoReadvertiseToLanOspf
}

// GetNoReadvertiseToLanOspfOk returns a tuple with the NoReadvertiseToLanOspf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVpnAccessConfig) GetNoReadvertiseToLanOspfOk() (*bool, bool) {
	if o == nil || IsNil(o.NoReadvertiseToLanOspf) {
		return nil, false
	}
	return o.NoReadvertiseToLanOspf, true
}

// HasNoReadvertiseToLanOspf returns a boolean if a field has been set.
func (o *NetworkVpnAccessConfig) HasNoReadvertiseToLanOspf() bool {
	if o != nil && !IsNil(o.NoReadvertiseToLanOspf) {
		return true
	}

	return false
}

// SetNoReadvertiseToLanOspf gets a reference to the given bool and assigns it to the NoReadvertiseToLanOspf field.
func (o *NetworkVpnAccessConfig) SetNoReadvertiseToLanOspf(v bool) {
	o.NoReadvertiseToLanOspf = &v
}

// GetNoReadvertiseToOverlay returns the NoReadvertiseToOverlay field value if set, zero value otherwise.
func (o *NetworkVpnAccessConfig) GetNoReadvertiseToOverlay() bool {
	if o == nil || IsNil(o.NoReadvertiseToOverlay) {
		var ret bool
		return ret
	}
	return *o.NoReadvertiseToOverlay
}

// GetNoReadvertiseToOverlayOk returns a tuple with the NoReadvertiseToOverlay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVpnAccessConfig) GetNoReadvertiseToOverlayOk() (*bool, bool) {
	if o == nil || IsNil(o.NoReadvertiseToOverlay) {
		return nil, false
	}
	return o.NoReadvertiseToOverlay, true
}

// HasNoReadvertiseToOverlay returns a boolean if a field has been set.
func (o *NetworkVpnAccessConfig) HasNoReadvertiseToOverlay() bool {
	if o != nil && !IsNil(o.NoReadvertiseToOverlay) {
		return true
	}

	return false
}

// SetNoReadvertiseToOverlay gets a reference to the given bool and assigns it to the NoReadvertiseToOverlay field.
func (o *NetworkVpnAccessConfig) SetNoReadvertiseToOverlay(v bool) {
	o.NoReadvertiseToOverlay = &v
}

// GetOtherVrfs returns the OtherVrfs field value if set, zero value otherwise.
func (o *NetworkVpnAccessConfig) GetOtherVrfs() []string {
	if o == nil || IsNil(o.OtherVrfs) {
		var ret []string
		return ret
	}
	return o.OtherVrfs
}

// GetOtherVrfsOk returns a tuple with the OtherVrfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVpnAccessConfig) GetOtherVrfsOk() ([]string, bool) {
	if o == nil || IsNil(o.OtherVrfs) {
		return nil, false
	}
	return o.OtherVrfs, true
}

// HasOtherVrfs returns a boolean if a field has been set.
func (o *NetworkVpnAccessConfig) HasOtherVrfs() bool {
	if o != nil && !IsNil(o.OtherVrfs) {
		return true
	}

	return false
}

// SetOtherVrfs gets a reference to the given []string and assigns it to the OtherVrfs field.
func (o *NetworkVpnAccessConfig) SetOtherVrfs(v []string) {
	o.OtherVrfs = v
}

// GetRouted returns the Routed field value if set, zero value otherwise.
func (o *NetworkVpnAccessConfig) GetRouted() bool {
	if o == nil || IsNil(o.Routed) {
		var ret bool
		return ret
	}
	return *o.Routed
}

// GetRoutedOk returns a tuple with the Routed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVpnAccessConfig) GetRoutedOk() (*bool, bool) {
	if o == nil || IsNil(o.Routed) {
		return nil, false
	}
	return o.Routed, true
}

// HasRouted returns a boolean if a field has been set.
func (o *NetworkVpnAccessConfig) HasRouted() bool {
	if o != nil && !IsNil(o.Routed) {
		return true
	}

	return false
}

// SetRouted gets a reference to the given bool and assigns it to the Routed field.
func (o *NetworkVpnAccessConfig) SetRouted(v bool) {
	o.Routed = &v
}

// GetSourceNat returns the SourceNat field value if set, zero value otherwise.
func (o *NetworkVpnAccessConfig) GetSourceNat() NetworkSourceNat {
	if o == nil || IsNil(o.SourceNat) {
		var ret NetworkSourceNat
		return ret
	}
	return *o.SourceNat
}

// GetSourceNatOk returns a tuple with the SourceNat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVpnAccessConfig) GetSourceNatOk() (*NetworkSourceNat, bool) {
	if o == nil || IsNil(o.SourceNat) {
		return nil, false
	}
	return o.SourceNat, true
}

// HasSourceNat returns a boolean if a field has been set.
func (o *NetworkVpnAccessConfig) HasSourceNat() bool {
	if o != nil && !IsNil(o.SourceNat) {
		return true
	}

	return false
}

// SetSourceNat gets a reference to the given NetworkSourceNat and assigns it to the SourceNat field.
func (o *NetworkVpnAccessConfig) SetSourceNat(v NetworkSourceNat) {
	o.SourceNat = &v
}

// GetStaticNat returns the StaticNat field value if set, zero value otherwise.
func (o *NetworkVpnAccessConfig) GetStaticNat() map[string]NetworkStaticNatProperty {
	if o == nil || IsNil(o.StaticNat) {
		var ret map[string]NetworkStaticNatProperty
		return ret
	}
	return *o.StaticNat
}

// GetStaticNatOk returns a tuple with the StaticNat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVpnAccessConfig) GetStaticNatOk() (*map[string]NetworkStaticNatProperty, bool) {
	if o == nil || IsNil(o.StaticNat) {
		return nil, false
	}
	return o.StaticNat, true
}

// HasStaticNat returns a boolean if a field has been set.
func (o *NetworkVpnAccessConfig) HasStaticNat() bool {
	if o != nil && !IsNil(o.StaticNat) {
		return true
	}

	return false
}

// SetStaticNat gets a reference to the given map[string]NetworkStaticNatProperty and assigns it to the StaticNat field.
func (o *NetworkVpnAccessConfig) SetStaticNat(v map[string]NetworkStaticNatProperty) {
	o.StaticNat = &v
}

// GetSummarizedSubnet returns the SummarizedSubnet field value if set, zero value otherwise.
func (o *NetworkVpnAccessConfig) GetSummarizedSubnet() string {
	if o == nil || IsNil(o.SummarizedSubnet) {
		var ret string
		return ret
	}
	return *o.SummarizedSubnet
}

// GetSummarizedSubnetOk returns a tuple with the SummarizedSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVpnAccessConfig) GetSummarizedSubnetOk() (*string, bool) {
	if o == nil || IsNil(o.SummarizedSubnet) {
		return nil, false
	}
	return o.SummarizedSubnet, true
}

// HasSummarizedSubnet returns a boolean if a field has been set.
func (o *NetworkVpnAccessConfig) HasSummarizedSubnet() bool {
	if o != nil && !IsNil(o.SummarizedSubnet) {
		return true
	}

	return false
}

// SetSummarizedSubnet gets a reference to the given string and assigns it to the SummarizedSubnet field.
func (o *NetworkVpnAccessConfig) SetSummarizedSubnet(v string) {
	o.SummarizedSubnet = &v
}

// GetSummarizedSubnetToLanBgp returns the SummarizedSubnetToLanBgp field value if set, zero value otherwise.
func (o *NetworkVpnAccessConfig) GetSummarizedSubnetToLanBgp() string {
	if o == nil || IsNil(o.SummarizedSubnetToLanBgp) {
		var ret string
		return ret
	}
	return *o.SummarizedSubnetToLanBgp
}

// GetSummarizedSubnetToLanBgpOk returns a tuple with the SummarizedSubnetToLanBgp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVpnAccessConfig) GetSummarizedSubnetToLanBgpOk() (*string, bool) {
	if o == nil || IsNil(o.SummarizedSubnetToLanBgp) {
		return nil, false
	}
	return o.SummarizedSubnetToLanBgp, true
}

// HasSummarizedSubnetToLanBgp returns a boolean if a field has been set.
func (o *NetworkVpnAccessConfig) HasSummarizedSubnetToLanBgp() bool {
	if o != nil && !IsNil(o.SummarizedSubnetToLanBgp) {
		return true
	}

	return false
}

// SetSummarizedSubnetToLanBgp gets a reference to the given string and assigns it to the SummarizedSubnetToLanBgp field.
func (o *NetworkVpnAccessConfig) SetSummarizedSubnetToLanBgp(v string) {
	o.SummarizedSubnetToLanBgp = &v
}

// GetSummarizedSubnetToLanOspf returns the SummarizedSubnetToLanOspf field value if set, zero value otherwise.
func (o *NetworkVpnAccessConfig) GetSummarizedSubnetToLanOspf() string {
	if o == nil || IsNil(o.SummarizedSubnetToLanOspf) {
		var ret string
		return ret
	}
	return *o.SummarizedSubnetToLanOspf
}

// GetSummarizedSubnetToLanOspfOk returns a tuple with the SummarizedSubnetToLanOspf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkVpnAccessConfig) GetSummarizedSubnetToLanOspfOk() (*string, bool) {
	if o == nil || IsNil(o.SummarizedSubnetToLanOspf) {
		return nil, false
	}
	return o.SummarizedSubnetToLanOspf, true
}

// HasSummarizedSubnetToLanOspf returns a boolean if a field has been set.
func (o *NetworkVpnAccessConfig) HasSummarizedSubnetToLanOspf() bool {
	if o != nil && !IsNil(o.SummarizedSubnetToLanOspf) {
		return true
	}

	return false
}

// SetSummarizedSubnetToLanOspf gets a reference to the given string and assigns it to the SummarizedSubnetToLanOspf field.
func (o *NetworkVpnAccessConfig) SetSummarizedSubnetToLanOspf(v string) {
	o.SummarizedSubnetToLanOspf = &v
}

func (o NetworkVpnAccessConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkVpnAccessConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdvertisedSubnet) {
		toSerialize["advertised_subnet"] = o.AdvertisedSubnet
	}
	if !IsNil(o.AllowPing) {
		toSerialize["allow_ping"] = o.AllowPing
	}
	if !IsNil(o.DestinationNat) {
		toSerialize["destination_nat"] = o.DestinationNat
	}
	if !IsNil(o.NatPool) {
		toSerialize["nat_pool"] = o.NatPool
	}
	if !IsNil(o.NoReadvertiseToLanBgp) {
		toSerialize["no_readvertise_to_lan_bgp"] = o.NoReadvertiseToLanBgp
	}
	if !IsNil(o.NoReadvertiseToLanOspf) {
		toSerialize["no_readvertise_to_lan_ospf"] = o.NoReadvertiseToLanOspf
	}
	if !IsNil(o.NoReadvertiseToOverlay) {
		toSerialize["no_readvertise_to_overlay"] = o.NoReadvertiseToOverlay
	}
	if !IsNil(o.OtherVrfs) {
		toSerialize["other_vrfs"] = o.OtherVrfs
	}
	if !IsNil(o.Routed) {
		toSerialize["routed"] = o.Routed
	}
	if !IsNil(o.SourceNat) {
		toSerialize["source_nat"] = o.SourceNat
	}
	if !IsNil(o.StaticNat) {
		toSerialize["static_nat"] = o.StaticNat
	}
	if !IsNil(o.SummarizedSubnet) {
		toSerialize["summarized_subnet"] = o.SummarizedSubnet
	}
	if !IsNil(o.SummarizedSubnetToLanBgp) {
		toSerialize["summarized_subnet_to_lan_bgp"] = o.SummarizedSubnetToLanBgp
	}
	if !IsNil(o.SummarizedSubnetToLanOspf) {
		toSerialize["summarized_subnet_to_lan_ospf"] = o.SummarizedSubnetToLanOspf
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworkVpnAccessConfig) UnmarshalJSON(data []byte) (err error) {
	varNetworkVpnAccessConfig := _NetworkVpnAccessConfig{}

	err = json.Unmarshal(data, &varNetworkVpnAccessConfig)

	if err != nil {
		return err
	}

	*o = NetworkVpnAccessConfig(varNetworkVpnAccessConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "advertised_subnet")
		delete(additionalProperties, "allow_ping")
		delete(additionalProperties, "destination_nat")
		delete(additionalProperties, "nat_pool")
		delete(additionalProperties, "no_readvertise_to_lan_bgp")
		delete(additionalProperties, "no_readvertise_to_lan_ospf")
		delete(additionalProperties, "no_readvertise_to_overlay")
		delete(additionalProperties, "other_vrfs")
		delete(additionalProperties, "routed")
		delete(additionalProperties, "source_nat")
		delete(additionalProperties, "static_nat")
		delete(additionalProperties, "summarized_subnet")
		delete(additionalProperties, "summarized_subnet_to_lan_bgp")
		delete(additionalProperties, "summarized_subnet_to_lan_ospf")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkVpnAccessConfig struct {
	value *NetworkVpnAccessConfig
	isSet bool
}

func (v NullableNetworkVpnAccessConfig) Get() *NetworkVpnAccessConfig {
	return v.value
}

func (v *NullableNetworkVpnAccessConfig) Set(val *NetworkVpnAccessConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkVpnAccessConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkVpnAccessConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkVpnAccessConfig(val *NetworkVpnAccessConfig) *NullableNetworkVpnAccessConfig {
	return &NullableNetworkVpnAccessConfig{value: val, isSet: true}
}

func (v NullableNetworkVpnAccessConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkVpnAccessConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


