/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the SwitchPortStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwitchPortStats{}

// SwitchPortStats Switch port statistics
type SwitchPortStats struct {
	// Indicates if interface is active/inactive
	Active *bool `json:"active,omitempty"`
	AuthState *SwitchPortStatsAuthState `json:"auth_state,omitempty"`
	ForSite *bool `json:"for_site,omitempty"`
	// indicates full or half duplex
	FullDuplex *bool `json:"full_duplex,omitempty"`
	// Last sampled jitter of the interface
	Jitter *float32 `json:"jitter,omitempty"`
	// Last sampled latency of the interface
	Latency *float32 `json:"latency,omitempty"`
	// Last sampled loss of the interface
	Loss *float32 `json:"loss,omitempty"`
	// LTE ICCID value, Check for null/empty
	LteIccid NullableString `json:"lte_iccid,omitempty"`
	// LTE IMEI value, Check for null/empty
	LteImei NullableString `json:"lte_imei,omitempty"`
	// LTE IMSI value, Check for null/empty
	LteImsi NullableString `json:"lte_imsi,omitempty"`
	Mac string `json:"mac"`
	// Number of mac addresses in the forwarding table
	MacCount *int32 `json:"mac_count,omitempty"`
	// Limit on number of dynamically learned macs
	MacLimit *int32 `json:"mac_limit,omitempty"`
	// chassis identifier of the chassis type listed
	NeighborMac string `json:"neighbor_mac"`
	// description supplied by the system on the interface E.g. “GigabitEthernet2/0/39”
	NeighborPortDesc *string `json:"neighbor_port_desc,omitempty"`
	// name supplied by the system on the interface E.g. neighbor system name E.g. “Kumar-Acc-SW.mist.local”
	NeighborSystemName *string `json:"neighbor_system_name,omitempty"`
	OrgId string `json:"org_id"`
	// is the POE configured not be disabled.
	PoeDisabled *bool `json:"poe_disabled,omitempty"`
	PoeMode *SwitchPortStatsPoeMode `json:"poe_mode,omitempty"`
	// is the device attached to POE
	PoeOn *bool `json:"poe_on,omitempty"`
	PortId string `json:"port_id"`
	// interface mac address
	PortMac string `json:"port_mac"`
	PortUsage *SwitchPortStatsPortUsage `json:"port_usage,omitempty"`
	// Amount of power being used by the interface at the time the command is executed. Unit in watts.
	PowerDraw *float32 `json:"power_draw,omitempty"`
	// Broadcast input packets
	RxBcastPkts *int32 `json:"rx_bcast_pkts,omitempty"`
	// Input rate
	RxBps *int32 `json:"rx_bps,omitempty"`
	// rx bytes
	RxBytes int32 `json:"rx_bytes"`
	// Input errors
	RxErrors *int32 `json:"rx_errors,omitempty"`
	// Multicast input packets
	RxMcastPkts *int32 `json:"rx_mcast_pkts,omitempty"`
	// rx packets
	RxPkts int32 `json:"rx_pkts"`
	SiteId string `json:"site_id"`
	// port speed
	Speed *int32 `json:"speed,omitempty"`
	StpRole *SwitchPortStatsStpRole `json:"stp_role,omitempty"`
	StpState *SwitchPortStatsStpState `json:"stp_state,omitempty"`
	// Broadcast output packets
	TxBcastPkts *int32 `json:"tx_bcast_pkts,omitempty"`
	// Output rate
	TxBps *int32 `json:"tx_bps,omitempty"`
	// tx bytes
	TxBytes int32 `json:"tx_bytes"`
	// Output errors
	TxErrors *int32 `json:"tx_errors,omitempty"`
	// Multicast output packets
	TxMcastPkts *int32 `json:"tx_mcast_pkts,omitempty"`
	// tx packets
	TxPkts int32 `json:"tx_pkts"`
	Type *SwitchPortStatsType `json:"type,omitempty"`
	// indicates if interface is unconfigured
	Unconfigured *bool `json:"unconfigured,omitempty"`
	// indicates if interface is up
	Up *bool `json:"up,omitempty"`
	// Optic Slot ModelName, Check for null/empty
	XcvrModel *string `json:"xcvr_model,omitempty"`
	// Optic Slot Partnumber, Check for null/empty
	XcvrPartNumber *string `json:"xcvr_part_number,omitempty"`
	// Optic Slot SerialNumber, Check for null/empty
	XcvrSerial *string `json:"xcvr_serial,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SwitchPortStats SwitchPortStats

// NewSwitchPortStats instantiates a new SwitchPortStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwitchPortStats(mac string, neighborMac string, orgId string, portId string, portMac string, rxBytes int32, rxPkts int32, siteId string, txBytes int32, txPkts int32) *SwitchPortStats {
	this := SwitchPortStats{}
	this.Mac = mac
	this.NeighborMac = neighborMac
	this.OrgId = orgId
	this.PortId = portId
	this.PortMac = portMac
	this.RxBytes = rxBytes
	this.RxPkts = rxPkts
	this.SiteId = siteId
	this.TxBytes = txBytes
	this.TxPkts = txPkts
	return &this
}

// NewSwitchPortStatsWithDefaults instantiates a new SwitchPortStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwitchPortStatsWithDefaults() *SwitchPortStats {
	this := SwitchPortStats{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *SwitchPortStats) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *SwitchPortStats) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *SwitchPortStats) SetActive(v bool) {
	o.Active = &v
}

// GetAuthState returns the AuthState field value if set, zero value otherwise.
func (o *SwitchPortStats) GetAuthState() SwitchPortStatsAuthState {
	if o == nil || IsNil(o.AuthState) {
		var ret SwitchPortStatsAuthState
		return ret
	}
	return *o.AuthState
}

// GetAuthStateOk returns a tuple with the AuthState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetAuthStateOk() (*SwitchPortStatsAuthState, bool) {
	if o == nil || IsNil(o.AuthState) {
		return nil, false
	}
	return o.AuthState, true
}

// HasAuthState returns a boolean if a field has been set.
func (o *SwitchPortStats) HasAuthState() bool {
	if o != nil && !IsNil(o.AuthState) {
		return true
	}

	return false
}

// SetAuthState gets a reference to the given SwitchPortStatsAuthState and assigns it to the AuthState field.
func (o *SwitchPortStats) SetAuthState(v SwitchPortStatsAuthState) {
	o.AuthState = &v
}

// GetForSite returns the ForSite field value if set, zero value otherwise.
func (o *SwitchPortStats) GetForSite() bool {
	if o == nil || IsNil(o.ForSite) {
		var ret bool
		return ret
	}
	return *o.ForSite
}

// GetForSiteOk returns a tuple with the ForSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetForSiteOk() (*bool, bool) {
	if o == nil || IsNil(o.ForSite) {
		return nil, false
	}
	return o.ForSite, true
}

// HasForSite returns a boolean if a field has been set.
func (o *SwitchPortStats) HasForSite() bool {
	if o != nil && !IsNil(o.ForSite) {
		return true
	}

	return false
}

// SetForSite gets a reference to the given bool and assigns it to the ForSite field.
func (o *SwitchPortStats) SetForSite(v bool) {
	o.ForSite = &v
}

// GetFullDuplex returns the FullDuplex field value if set, zero value otherwise.
func (o *SwitchPortStats) GetFullDuplex() bool {
	if o == nil || IsNil(o.FullDuplex) {
		var ret bool
		return ret
	}
	return *o.FullDuplex
}

// GetFullDuplexOk returns a tuple with the FullDuplex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetFullDuplexOk() (*bool, bool) {
	if o == nil || IsNil(o.FullDuplex) {
		return nil, false
	}
	return o.FullDuplex, true
}

// HasFullDuplex returns a boolean if a field has been set.
func (o *SwitchPortStats) HasFullDuplex() bool {
	if o != nil && !IsNil(o.FullDuplex) {
		return true
	}

	return false
}

// SetFullDuplex gets a reference to the given bool and assigns it to the FullDuplex field.
func (o *SwitchPortStats) SetFullDuplex(v bool) {
	o.FullDuplex = &v
}

// GetJitter returns the Jitter field value if set, zero value otherwise.
func (o *SwitchPortStats) GetJitter() float32 {
	if o == nil || IsNil(o.Jitter) {
		var ret float32
		return ret
	}
	return *o.Jitter
}

// GetJitterOk returns a tuple with the Jitter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetJitterOk() (*float32, bool) {
	if o == nil || IsNil(o.Jitter) {
		return nil, false
	}
	return o.Jitter, true
}

// HasJitter returns a boolean if a field has been set.
func (o *SwitchPortStats) HasJitter() bool {
	if o != nil && !IsNil(o.Jitter) {
		return true
	}

	return false
}

// SetJitter gets a reference to the given float32 and assigns it to the Jitter field.
func (o *SwitchPortStats) SetJitter(v float32) {
	o.Jitter = &v
}

// GetLatency returns the Latency field value if set, zero value otherwise.
func (o *SwitchPortStats) GetLatency() float32 {
	if o == nil || IsNil(o.Latency) {
		var ret float32
		return ret
	}
	return *o.Latency
}

// GetLatencyOk returns a tuple with the Latency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetLatencyOk() (*float32, bool) {
	if o == nil || IsNil(o.Latency) {
		return nil, false
	}
	return o.Latency, true
}

// HasLatency returns a boolean if a field has been set.
func (o *SwitchPortStats) HasLatency() bool {
	if o != nil && !IsNil(o.Latency) {
		return true
	}

	return false
}

// SetLatency gets a reference to the given float32 and assigns it to the Latency field.
func (o *SwitchPortStats) SetLatency(v float32) {
	o.Latency = &v
}

// GetLoss returns the Loss field value if set, zero value otherwise.
func (o *SwitchPortStats) GetLoss() float32 {
	if o == nil || IsNil(o.Loss) {
		var ret float32
		return ret
	}
	return *o.Loss
}

// GetLossOk returns a tuple with the Loss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetLossOk() (*float32, bool) {
	if o == nil || IsNil(o.Loss) {
		return nil, false
	}
	return o.Loss, true
}

// HasLoss returns a boolean if a field has been set.
func (o *SwitchPortStats) HasLoss() bool {
	if o != nil && !IsNil(o.Loss) {
		return true
	}

	return false
}

// SetLoss gets a reference to the given float32 and assigns it to the Loss field.
func (o *SwitchPortStats) SetLoss(v float32) {
	o.Loss = &v
}

// GetLteIccid returns the LteIccid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SwitchPortStats) GetLteIccid() string {
	if o == nil || IsNil(o.LteIccid.Get()) {
		var ret string
		return ret
	}
	return *o.LteIccid.Get()
}

// GetLteIccidOk returns a tuple with the LteIccid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SwitchPortStats) GetLteIccidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LteIccid.Get(), o.LteIccid.IsSet()
}

// HasLteIccid returns a boolean if a field has been set.
func (o *SwitchPortStats) HasLteIccid() bool {
	if o != nil && o.LteIccid.IsSet() {
		return true
	}

	return false
}

// SetLteIccid gets a reference to the given NullableString and assigns it to the LteIccid field.
func (o *SwitchPortStats) SetLteIccid(v string) {
	o.LteIccid.Set(&v)
}
// SetLteIccidNil sets the value for LteIccid to be an explicit nil
func (o *SwitchPortStats) SetLteIccidNil() {
	o.LteIccid.Set(nil)
}

// UnsetLteIccid ensures that no value is present for LteIccid, not even an explicit nil
func (o *SwitchPortStats) UnsetLteIccid() {
	o.LteIccid.Unset()
}

// GetLteImei returns the LteImei field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SwitchPortStats) GetLteImei() string {
	if o == nil || IsNil(o.LteImei.Get()) {
		var ret string
		return ret
	}
	return *o.LteImei.Get()
}

// GetLteImeiOk returns a tuple with the LteImei field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SwitchPortStats) GetLteImeiOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LteImei.Get(), o.LteImei.IsSet()
}

// HasLteImei returns a boolean if a field has been set.
func (o *SwitchPortStats) HasLteImei() bool {
	if o != nil && o.LteImei.IsSet() {
		return true
	}

	return false
}

// SetLteImei gets a reference to the given NullableString and assigns it to the LteImei field.
func (o *SwitchPortStats) SetLteImei(v string) {
	o.LteImei.Set(&v)
}
// SetLteImeiNil sets the value for LteImei to be an explicit nil
func (o *SwitchPortStats) SetLteImeiNil() {
	o.LteImei.Set(nil)
}

// UnsetLteImei ensures that no value is present for LteImei, not even an explicit nil
func (o *SwitchPortStats) UnsetLteImei() {
	o.LteImei.Unset()
}

// GetLteImsi returns the LteImsi field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SwitchPortStats) GetLteImsi() string {
	if o == nil || IsNil(o.LteImsi.Get()) {
		var ret string
		return ret
	}
	return *o.LteImsi.Get()
}

// GetLteImsiOk returns a tuple with the LteImsi field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SwitchPortStats) GetLteImsiOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LteImsi.Get(), o.LteImsi.IsSet()
}

// HasLteImsi returns a boolean if a field has been set.
func (o *SwitchPortStats) HasLteImsi() bool {
	if o != nil && o.LteImsi.IsSet() {
		return true
	}

	return false
}

// SetLteImsi gets a reference to the given NullableString and assigns it to the LteImsi field.
func (o *SwitchPortStats) SetLteImsi(v string) {
	o.LteImsi.Set(&v)
}
// SetLteImsiNil sets the value for LteImsi to be an explicit nil
func (o *SwitchPortStats) SetLteImsiNil() {
	o.LteImsi.Set(nil)
}

// UnsetLteImsi ensures that no value is present for LteImsi, not even an explicit nil
func (o *SwitchPortStats) UnsetLteImsi() {
	o.LteImsi.Unset()
}

// GetMac returns the Mac field value
func (o *SwitchPortStats) GetMac() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mac
}

// GetMacOk returns a tuple with the Mac field value
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mac, true
}

// SetMac sets field value
func (o *SwitchPortStats) SetMac(v string) {
	o.Mac = v
}

// GetMacCount returns the MacCount field value if set, zero value otherwise.
func (o *SwitchPortStats) GetMacCount() int32 {
	if o == nil || IsNil(o.MacCount) {
		var ret int32
		return ret
	}
	return *o.MacCount
}

// GetMacCountOk returns a tuple with the MacCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetMacCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MacCount) {
		return nil, false
	}
	return o.MacCount, true
}

// HasMacCount returns a boolean if a field has been set.
func (o *SwitchPortStats) HasMacCount() bool {
	if o != nil && !IsNil(o.MacCount) {
		return true
	}

	return false
}

// SetMacCount gets a reference to the given int32 and assigns it to the MacCount field.
func (o *SwitchPortStats) SetMacCount(v int32) {
	o.MacCount = &v
}

// GetMacLimit returns the MacLimit field value if set, zero value otherwise.
func (o *SwitchPortStats) GetMacLimit() int32 {
	if o == nil || IsNil(o.MacLimit) {
		var ret int32
		return ret
	}
	return *o.MacLimit
}

// GetMacLimitOk returns a tuple with the MacLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetMacLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.MacLimit) {
		return nil, false
	}
	return o.MacLimit, true
}

// HasMacLimit returns a boolean if a field has been set.
func (o *SwitchPortStats) HasMacLimit() bool {
	if o != nil && !IsNil(o.MacLimit) {
		return true
	}

	return false
}

// SetMacLimit gets a reference to the given int32 and assigns it to the MacLimit field.
func (o *SwitchPortStats) SetMacLimit(v int32) {
	o.MacLimit = &v
}

// GetNeighborMac returns the NeighborMac field value
func (o *SwitchPortStats) GetNeighborMac() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NeighborMac
}

// GetNeighborMacOk returns a tuple with the NeighborMac field value
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetNeighborMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NeighborMac, true
}

// SetNeighborMac sets field value
func (o *SwitchPortStats) SetNeighborMac(v string) {
	o.NeighborMac = v
}

// GetNeighborPortDesc returns the NeighborPortDesc field value if set, zero value otherwise.
func (o *SwitchPortStats) GetNeighborPortDesc() string {
	if o == nil || IsNil(o.NeighborPortDesc) {
		var ret string
		return ret
	}
	return *o.NeighborPortDesc
}

// GetNeighborPortDescOk returns a tuple with the NeighborPortDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetNeighborPortDescOk() (*string, bool) {
	if o == nil || IsNil(o.NeighborPortDesc) {
		return nil, false
	}
	return o.NeighborPortDesc, true
}

// HasNeighborPortDesc returns a boolean if a field has been set.
func (o *SwitchPortStats) HasNeighborPortDesc() bool {
	if o != nil && !IsNil(o.NeighborPortDesc) {
		return true
	}

	return false
}

// SetNeighborPortDesc gets a reference to the given string and assigns it to the NeighborPortDesc field.
func (o *SwitchPortStats) SetNeighborPortDesc(v string) {
	o.NeighborPortDesc = &v
}

// GetNeighborSystemName returns the NeighborSystemName field value if set, zero value otherwise.
func (o *SwitchPortStats) GetNeighborSystemName() string {
	if o == nil || IsNil(o.NeighborSystemName) {
		var ret string
		return ret
	}
	return *o.NeighborSystemName
}

// GetNeighborSystemNameOk returns a tuple with the NeighborSystemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetNeighborSystemNameOk() (*string, bool) {
	if o == nil || IsNil(o.NeighborSystemName) {
		return nil, false
	}
	return o.NeighborSystemName, true
}

// HasNeighborSystemName returns a boolean if a field has been set.
func (o *SwitchPortStats) HasNeighborSystemName() bool {
	if o != nil && !IsNil(o.NeighborSystemName) {
		return true
	}

	return false
}

// SetNeighborSystemName gets a reference to the given string and assigns it to the NeighborSystemName field.
func (o *SwitchPortStats) SetNeighborSystemName(v string) {
	o.NeighborSystemName = &v
}

// GetOrgId returns the OrgId field value
func (o *SwitchPortStats) GetOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *SwitchPortStats) SetOrgId(v string) {
	o.OrgId = v
}

// GetPoeDisabled returns the PoeDisabled field value if set, zero value otherwise.
func (o *SwitchPortStats) GetPoeDisabled() bool {
	if o == nil || IsNil(o.PoeDisabled) {
		var ret bool
		return ret
	}
	return *o.PoeDisabled
}

// GetPoeDisabledOk returns a tuple with the PoeDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetPoeDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PoeDisabled) {
		return nil, false
	}
	return o.PoeDisabled, true
}

// HasPoeDisabled returns a boolean if a field has been set.
func (o *SwitchPortStats) HasPoeDisabled() bool {
	if o != nil && !IsNil(o.PoeDisabled) {
		return true
	}

	return false
}

// SetPoeDisabled gets a reference to the given bool and assigns it to the PoeDisabled field.
func (o *SwitchPortStats) SetPoeDisabled(v bool) {
	o.PoeDisabled = &v
}

// GetPoeMode returns the PoeMode field value if set, zero value otherwise.
func (o *SwitchPortStats) GetPoeMode() SwitchPortStatsPoeMode {
	if o == nil || IsNil(o.PoeMode) {
		var ret SwitchPortStatsPoeMode
		return ret
	}
	return *o.PoeMode
}

// GetPoeModeOk returns a tuple with the PoeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetPoeModeOk() (*SwitchPortStatsPoeMode, bool) {
	if o == nil || IsNil(o.PoeMode) {
		return nil, false
	}
	return o.PoeMode, true
}

// HasPoeMode returns a boolean if a field has been set.
func (o *SwitchPortStats) HasPoeMode() bool {
	if o != nil && !IsNil(o.PoeMode) {
		return true
	}

	return false
}

// SetPoeMode gets a reference to the given SwitchPortStatsPoeMode and assigns it to the PoeMode field.
func (o *SwitchPortStats) SetPoeMode(v SwitchPortStatsPoeMode) {
	o.PoeMode = &v
}

// GetPoeOn returns the PoeOn field value if set, zero value otherwise.
func (o *SwitchPortStats) GetPoeOn() bool {
	if o == nil || IsNil(o.PoeOn) {
		var ret bool
		return ret
	}
	return *o.PoeOn
}

// GetPoeOnOk returns a tuple with the PoeOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetPoeOnOk() (*bool, bool) {
	if o == nil || IsNil(o.PoeOn) {
		return nil, false
	}
	return o.PoeOn, true
}

// HasPoeOn returns a boolean if a field has been set.
func (o *SwitchPortStats) HasPoeOn() bool {
	if o != nil && !IsNil(o.PoeOn) {
		return true
	}

	return false
}

// SetPoeOn gets a reference to the given bool and assigns it to the PoeOn field.
func (o *SwitchPortStats) SetPoeOn(v bool) {
	o.PoeOn = &v
}

// GetPortId returns the PortId field value
func (o *SwitchPortStats) GetPortId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PortId
}

// GetPortIdOk returns a tuple with the PortId field value
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetPortIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PortId, true
}

// SetPortId sets field value
func (o *SwitchPortStats) SetPortId(v string) {
	o.PortId = v
}

// GetPortMac returns the PortMac field value
func (o *SwitchPortStats) GetPortMac() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PortMac
}

// GetPortMacOk returns a tuple with the PortMac field value
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetPortMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PortMac, true
}

// SetPortMac sets field value
func (o *SwitchPortStats) SetPortMac(v string) {
	o.PortMac = v
}

// GetPortUsage returns the PortUsage field value if set, zero value otherwise.
func (o *SwitchPortStats) GetPortUsage() SwitchPortStatsPortUsage {
	if o == nil || IsNil(o.PortUsage) {
		var ret SwitchPortStatsPortUsage
		return ret
	}
	return *o.PortUsage
}

// GetPortUsageOk returns a tuple with the PortUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetPortUsageOk() (*SwitchPortStatsPortUsage, bool) {
	if o == nil || IsNil(o.PortUsage) {
		return nil, false
	}
	return o.PortUsage, true
}

// HasPortUsage returns a boolean if a field has been set.
func (o *SwitchPortStats) HasPortUsage() bool {
	if o != nil && !IsNil(o.PortUsage) {
		return true
	}

	return false
}

// SetPortUsage gets a reference to the given SwitchPortStatsPortUsage and assigns it to the PortUsage field.
func (o *SwitchPortStats) SetPortUsage(v SwitchPortStatsPortUsage) {
	o.PortUsage = &v
}

// GetPowerDraw returns the PowerDraw field value if set, zero value otherwise.
func (o *SwitchPortStats) GetPowerDraw() float32 {
	if o == nil || IsNil(o.PowerDraw) {
		var ret float32
		return ret
	}
	return *o.PowerDraw
}

// GetPowerDrawOk returns a tuple with the PowerDraw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetPowerDrawOk() (*float32, bool) {
	if o == nil || IsNil(o.PowerDraw) {
		return nil, false
	}
	return o.PowerDraw, true
}

// HasPowerDraw returns a boolean if a field has been set.
func (o *SwitchPortStats) HasPowerDraw() bool {
	if o != nil && !IsNil(o.PowerDraw) {
		return true
	}

	return false
}

// SetPowerDraw gets a reference to the given float32 and assigns it to the PowerDraw field.
func (o *SwitchPortStats) SetPowerDraw(v float32) {
	o.PowerDraw = &v
}

// GetRxBcastPkts returns the RxBcastPkts field value if set, zero value otherwise.
func (o *SwitchPortStats) GetRxBcastPkts() int32 {
	if o == nil || IsNil(o.RxBcastPkts) {
		var ret int32
		return ret
	}
	return *o.RxBcastPkts
}

// GetRxBcastPktsOk returns a tuple with the RxBcastPkts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetRxBcastPktsOk() (*int32, bool) {
	if o == nil || IsNil(o.RxBcastPkts) {
		return nil, false
	}
	return o.RxBcastPkts, true
}

// HasRxBcastPkts returns a boolean if a field has been set.
func (o *SwitchPortStats) HasRxBcastPkts() bool {
	if o != nil && !IsNil(o.RxBcastPkts) {
		return true
	}

	return false
}

// SetRxBcastPkts gets a reference to the given int32 and assigns it to the RxBcastPkts field.
func (o *SwitchPortStats) SetRxBcastPkts(v int32) {
	o.RxBcastPkts = &v
}

// GetRxBps returns the RxBps field value if set, zero value otherwise.
func (o *SwitchPortStats) GetRxBps() int32 {
	if o == nil || IsNil(o.RxBps) {
		var ret int32
		return ret
	}
	return *o.RxBps
}

// GetRxBpsOk returns a tuple with the RxBps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetRxBpsOk() (*int32, bool) {
	if o == nil || IsNil(o.RxBps) {
		return nil, false
	}
	return o.RxBps, true
}

// HasRxBps returns a boolean if a field has been set.
func (o *SwitchPortStats) HasRxBps() bool {
	if o != nil && !IsNil(o.RxBps) {
		return true
	}

	return false
}

// SetRxBps gets a reference to the given int32 and assigns it to the RxBps field.
func (o *SwitchPortStats) SetRxBps(v int32) {
	o.RxBps = &v
}

// GetRxBytes returns the RxBytes field value
func (o *SwitchPortStats) GetRxBytes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RxBytes
}

// GetRxBytesOk returns a tuple with the RxBytes field value
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetRxBytesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RxBytes, true
}

// SetRxBytes sets field value
func (o *SwitchPortStats) SetRxBytes(v int32) {
	o.RxBytes = v
}

// GetRxErrors returns the RxErrors field value if set, zero value otherwise.
func (o *SwitchPortStats) GetRxErrors() int32 {
	if o == nil || IsNil(o.RxErrors) {
		var ret int32
		return ret
	}
	return *o.RxErrors
}

// GetRxErrorsOk returns a tuple with the RxErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetRxErrorsOk() (*int32, bool) {
	if o == nil || IsNil(o.RxErrors) {
		return nil, false
	}
	return o.RxErrors, true
}

// HasRxErrors returns a boolean if a field has been set.
func (o *SwitchPortStats) HasRxErrors() bool {
	if o != nil && !IsNil(o.RxErrors) {
		return true
	}

	return false
}

// SetRxErrors gets a reference to the given int32 and assigns it to the RxErrors field.
func (o *SwitchPortStats) SetRxErrors(v int32) {
	o.RxErrors = &v
}

// GetRxMcastPkts returns the RxMcastPkts field value if set, zero value otherwise.
func (o *SwitchPortStats) GetRxMcastPkts() int32 {
	if o == nil || IsNil(o.RxMcastPkts) {
		var ret int32
		return ret
	}
	return *o.RxMcastPkts
}

// GetRxMcastPktsOk returns a tuple with the RxMcastPkts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetRxMcastPktsOk() (*int32, bool) {
	if o == nil || IsNil(o.RxMcastPkts) {
		return nil, false
	}
	return o.RxMcastPkts, true
}

// HasRxMcastPkts returns a boolean if a field has been set.
func (o *SwitchPortStats) HasRxMcastPkts() bool {
	if o != nil && !IsNil(o.RxMcastPkts) {
		return true
	}

	return false
}

// SetRxMcastPkts gets a reference to the given int32 and assigns it to the RxMcastPkts field.
func (o *SwitchPortStats) SetRxMcastPkts(v int32) {
	o.RxMcastPkts = &v
}

// GetRxPkts returns the RxPkts field value
func (o *SwitchPortStats) GetRxPkts() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RxPkts
}

// GetRxPktsOk returns a tuple with the RxPkts field value
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetRxPktsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RxPkts, true
}

// SetRxPkts sets field value
func (o *SwitchPortStats) SetRxPkts(v int32) {
	o.RxPkts = v
}

// GetSiteId returns the SiteId field value
func (o *SwitchPortStats) GetSiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetSiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *SwitchPortStats) SetSiteId(v string) {
	o.SiteId = v
}

// GetSpeed returns the Speed field value if set, zero value otherwise.
func (o *SwitchPortStats) GetSpeed() int32 {
	if o == nil || IsNil(o.Speed) {
		var ret int32
		return ret
	}
	return *o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetSpeedOk() (*int32, bool) {
	if o == nil || IsNil(o.Speed) {
		return nil, false
	}
	return o.Speed, true
}

// HasSpeed returns a boolean if a field has been set.
func (o *SwitchPortStats) HasSpeed() bool {
	if o != nil && !IsNil(o.Speed) {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given int32 and assigns it to the Speed field.
func (o *SwitchPortStats) SetSpeed(v int32) {
	o.Speed = &v
}

// GetStpRole returns the StpRole field value if set, zero value otherwise.
func (o *SwitchPortStats) GetStpRole() SwitchPortStatsStpRole {
	if o == nil || IsNil(o.StpRole) {
		var ret SwitchPortStatsStpRole
		return ret
	}
	return *o.StpRole
}

// GetStpRoleOk returns a tuple with the StpRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetStpRoleOk() (*SwitchPortStatsStpRole, bool) {
	if o == nil || IsNil(o.StpRole) {
		return nil, false
	}
	return o.StpRole, true
}

// HasStpRole returns a boolean if a field has been set.
func (o *SwitchPortStats) HasStpRole() bool {
	if o != nil && !IsNil(o.StpRole) {
		return true
	}

	return false
}

// SetStpRole gets a reference to the given SwitchPortStatsStpRole and assigns it to the StpRole field.
func (o *SwitchPortStats) SetStpRole(v SwitchPortStatsStpRole) {
	o.StpRole = &v
}

// GetStpState returns the StpState field value if set, zero value otherwise.
func (o *SwitchPortStats) GetStpState() SwitchPortStatsStpState {
	if o == nil || IsNil(o.StpState) {
		var ret SwitchPortStatsStpState
		return ret
	}
	return *o.StpState
}

// GetStpStateOk returns a tuple with the StpState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetStpStateOk() (*SwitchPortStatsStpState, bool) {
	if o == nil || IsNil(o.StpState) {
		return nil, false
	}
	return o.StpState, true
}

// HasStpState returns a boolean if a field has been set.
func (o *SwitchPortStats) HasStpState() bool {
	if o != nil && !IsNil(o.StpState) {
		return true
	}

	return false
}

// SetStpState gets a reference to the given SwitchPortStatsStpState and assigns it to the StpState field.
func (o *SwitchPortStats) SetStpState(v SwitchPortStatsStpState) {
	o.StpState = &v
}

// GetTxBcastPkts returns the TxBcastPkts field value if set, zero value otherwise.
func (o *SwitchPortStats) GetTxBcastPkts() int32 {
	if o == nil || IsNil(o.TxBcastPkts) {
		var ret int32
		return ret
	}
	return *o.TxBcastPkts
}

// GetTxBcastPktsOk returns a tuple with the TxBcastPkts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetTxBcastPktsOk() (*int32, bool) {
	if o == nil || IsNil(o.TxBcastPkts) {
		return nil, false
	}
	return o.TxBcastPkts, true
}

// HasTxBcastPkts returns a boolean if a field has been set.
func (o *SwitchPortStats) HasTxBcastPkts() bool {
	if o != nil && !IsNil(o.TxBcastPkts) {
		return true
	}

	return false
}

// SetTxBcastPkts gets a reference to the given int32 and assigns it to the TxBcastPkts field.
func (o *SwitchPortStats) SetTxBcastPkts(v int32) {
	o.TxBcastPkts = &v
}

// GetTxBps returns the TxBps field value if set, zero value otherwise.
func (o *SwitchPortStats) GetTxBps() int32 {
	if o == nil || IsNil(o.TxBps) {
		var ret int32
		return ret
	}
	return *o.TxBps
}

// GetTxBpsOk returns a tuple with the TxBps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetTxBpsOk() (*int32, bool) {
	if o == nil || IsNil(o.TxBps) {
		return nil, false
	}
	return o.TxBps, true
}

// HasTxBps returns a boolean if a field has been set.
func (o *SwitchPortStats) HasTxBps() bool {
	if o != nil && !IsNil(o.TxBps) {
		return true
	}

	return false
}

// SetTxBps gets a reference to the given int32 and assigns it to the TxBps field.
func (o *SwitchPortStats) SetTxBps(v int32) {
	o.TxBps = &v
}

// GetTxBytes returns the TxBytes field value
func (o *SwitchPortStats) GetTxBytes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TxBytes
}

// GetTxBytesOk returns a tuple with the TxBytes field value
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetTxBytesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxBytes, true
}

// SetTxBytes sets field value
func (o *SwitchPortStats) SetTxBytes(v int32) {
	o.TxBytes = v
}

// GetTxErrors returns the TxErrors field value if set, zero value otherwise.
func (o *SwitchPortStats) GetTxErrors() int32 {
	if o == nil || IsNil(o.TxErrors) {
		var ret int32
		return ret
	}
	return *o.TxErrors
}

// GetTxErrorsOk returns a tuple with the TxErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetTxErrorsOk() (*int32, bool) {
	if o == nil || IsNil(o.TxErrors) {
		return nil, false
	}
	return o.TxErrors, true
}

// HasTxErrors returns a boolean if a field has been set.
func (o *SwitchPortStats) HasTxErrors() bool {
	if o != nil && !IsNil(o.TxErrors) {
		return true
	}

	return false
}

// SetTxErrors gets a reference to the given int32 and assigns it to the TxErrors field.
func (o *SwitchPortStats) SetTxErrors(v int32) {
	o.TxErrors = &v
}

// GetTxMcastPkts returns the TxMcastPkts field value if set, zero value otherwise.
func (o *SwitchPortStats) GetTxMcastPkts() int32 {
	if o == nil || IsNil(o.TxMcastPkts) {
		var ret int32
		return ret
	}
	return *o.TxMcastPkts
}

// GetTxMcastPktsOk returns a tuple with the TxMcastPkts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetTxMcastPktsOk() (*int32, bool) {
	if o == nil || IsNil(o.TxMcastPkts) {
		return nil, false
	}
	return o.TxMcastPkts, true
}

// HasTxMcastPkts returns a boolean if a field has been set.
func (o *SwitchPortStats) HasTxMcastPkts() bool {
	if o != nil && !IsNil(o.TxMcastPkts) {
		return true
	}

	return false
}

// SetTxMcastPkts gets a reference to the given int32 and assigns it to the TxMcastPkts field.
func (o *SwitchPortStats) SetTxMcastPkts(v int32) {
	o.TxMcastPkts = &v
}

// GetTxPkts returns the TxPkts field value
func (o *SwitchPortStats) GetTxPkts() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TxPkts
}

// GetTxPktsOk returns a tuple with the TxPkts field value
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetTxPktsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxPkts, true
}

// SetTxPkts sets field value
func (o *SwitchPortStats) SetTxPkts(v int32) {
	o.TxPkts = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SwitchPortStats) GetType() SwitchPortStatsType {
	if o == nil || IsNil(o.Type) {
		var ret SwitchPortStatsType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetTypeOk() (*SwitchPortStatsType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SwitchPortStats) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given SwitchPortStatsType and assigns it to the Type field.
func (o *SwitchPortStats) SetType(v SwitchPortStatsType) {
	o.Type = &v
}

// GetUnconfigured returns the Unconfigured field value if set, zero value otherwise.
func (o *SwitchPortStats) GetUnconfigured() bool {
	if o == nil || IsNil(o.Unconfigured) {
		var ret bool
		return ret
	}
	return *o.Unconfigured
}

// GetUnconfiguredOk returns a tuple with the Unconfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetUnconfiguredOk() (*bool, bool) {
	if o == nil || IsNil(o.Unconfigured) {
		return nil, false
	}
	return o.Unconfigured, true
}

// HasUnconfigured returns a boolean if a field has been set.
func (o *SwitchPortStats) HasUnconfigured() bool {
	if o != nil && !IsNil(o.Unconfigured) {
		return true
	}

	return false
}

// SetUnconfigured gets a reference to the given bool and assigns it to the Unconfigured field.
func (o *SwitchPortStats) SetUnconfigured(v bool) {
	o.Unconfigured = &v
}

// GetUp returns the Up field value if set, zero value otherwise.
func (o *SwitchPortStats) GetUp() bool {
	if o == nil || IsNil(o.Up) {
		var ret bool
		return ret
	}
	return *o.Up
}

// GetUpOk returns a tuple with the Up field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetUpOk() (*bool, bool) {
	if o == nil || IsNil(o.Up) {
		return nil, false
	}
	return o.Up, true
}

// HasUp returns a boolean if a field has been set.
func (o *SwitchPortStats) HasUp() bool {
	if o != nil && !IsNil(o.Up) {
		return true
	}

	return false
}

// SetUp gets a reference to the given bool and assigns it to the Up field.
func (o *SwitchPortStats) SetUp(v bool) {
	o.Up = &v
}

// GetXcvrModel returns the XcvrModel field value if set, zero value otherwise.
func (o *SwitchPortStats) GetXcvrModel() string {
	if o == nil || IsNil(o.XcvrModel) {
		var ret string
		return ret
	}
	return *o.XcvrModel
}

// GetXcvrModelOk returns a tuple with the XcvrModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetXcvrModelOk() (*string, bool) {
	if o == nil || IsNil(o.XcvrModel) {
		return nil, false
	}
	return o.XcvrModel, true
}

// HasXcvrModel returns a boolean if a field has been set.
func (o *SwitchPortStats) HasXcvrModel() bool {
	if o != nil && !IsNil(o.XcvrModel) {
		return true
	}

	return false
}

// SetXcvrModel gets a reference to the given string and assigns it to the XcvrModel field.
func (o *SwitchPortStats) SetXcvrModel(v string) {
	o.XcvrModel = &v
}

// GetXcvrPartNumber returns the XcvrPartNumber field value if set, zero value otherwise.
func (o *SwitchPortStats) GetXcvrPartNumber() string {
	if o == nil || IsNil(o.XcvrPartNumber) {
		var ret string
		return ret
	}
	return *o.XcvrPartNumber
}

// GetXcvrPartNumberOk returns a tuple with the XcvrPartNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetXcvrPartNumberOk() (*string, bool) {
	if o == nil || IsNil(o.XcvrPartNumber) {
		return nil, false
	}
	return o.XcvrPartNumber, true
}

// HasXcvrPartNumber returns a boolean if a field has been set.
func (o *SwitchPortStats) HasXcvrPartNumber() bool {
	if o != nil && !IsNil(o.XcvrPartNumber) {
		return true
	}

	return false
}

// SetXcvrPartNumber gets a reference to the given string and assigns it to the XcvrPartNumber field.
func (o *SwitchPortStats) SetXcvrPartNumber(v string) {
	o.XcvrPartNumber = &v
}

// GetXcvrSerial returns the XcvrSerial field value if set, zero value otherwise.
func (o *SwitchPortStats) GetXcvrSerial() string {
	if o == nil || IsNil(o.XcvrSerial) {
		var ret string
		return ret
	}
	return *o.XcvrSerial
}

// GetXcvrSerialOk returns a tuple with the XcvrSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchPortStats) GetXcvrSerialOk() (*string, bool) {
	if o == nil || IsNil(o.XcvrSerial) {
		return nil, false
	}
	return o.XcvrSerial, true
}

// HasXcvrSerial returns a boolean if a field has been set.
func (o *SwitchPortStats) HasXcvrSerial() bool {
	if o != nil && !IsNil(o.XcvrSerial) {
		return true
	}

	return false
}

// SetXcvrSerial gets a reference to the given string and assigns it to the XcvrSerial field.
func (o *SwitchPortStats) SetXcvrSerial(v string) {
	o.XcvrSerial = &v
}

func (o SwitchPortStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwitchPortStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.AuthState) {
		toSerialize["auth_state"] = o.AuthState
	}
	if !IsNil(o.ForSite) {
		toSerialize["for_site"] = o.ForSite
	}
	if !IsNil(o.FullDuplex) {
		toSerialize["full_duplex"] = o.FullDuplex
	}
	if !IsNil(o.Jitter) {
		toSerialize["jitter"] = o.Jitter
	}
	if !IsNil(o.Latency) {
		toSerialize["latency"] = o.Latency
	}
	if !IsNil(o.Loss) {
		toSerialize["loss"] = o.Loss
	}
	if o.LteIccid.IsSet() {
		toSerialize["lte_iccid"] = o.LteIccid.Get()
	}
	if o.LteImei.IsSet() {
		toSerialize["lte_imei"] = o.LteImei.Get()
	}
	if o.LteImsi.IsSet() {
		toSerialize["lte_imsi"] = o.LteImsi.Get()
	}
	toSerialize["mac"] = o.Mac
	if !IsNil(o.MacCount) {
		toSerialize["mac_count"] = o.MacCount
	}
	if !IsNil(o.MacLimit) {
		toSerialize["mac_limit"] = o.MacLimit
	}
	toSerialize["neighbor_mac"] = o.NeighborMac
	if !IsNil(o.NeighborPortDesc) {
		toSerialize["neighbor_port_desc"] = o.NeighborPortDesc
	}
	if !IsNil(o.NeighborSystemName) {
		toSerialize["neighbor_system_name"] = o.NeighborSystemName
	}
	toSerialize["org_id"] = o.OrgId
	if !IsNil(o.PoeDisabled) {
		toSerialize["poe_disabled"] = o.PoeDisabled
	}
	if !IsNil(o.PoeMode) {
		toSerialize["poe_mode"] = o.PoeMode
	}
	if !IsNil(o.PoeOn) {
		toSerialize["poe_on"] = o.PoeOn
	}
	toSerialize["port_id"] = o.PortId
	toSerialize["port_mac"] = o.PortMac
	if !IsNil(o.PortUsage) {
		toSerialize["port_usage"] = o.PortUsage
	}
	if !IsNil(o.PowerDraw) {
		toSerialize["power_draw"] = o.PowerDraw
	}
	if !IsNil(o.RxBcastPkts) {
		toSerialize["rx_bcast_pkts"] = o.RxBcastPkts
	}
	if !IsNil(o.RxBps) {
		toSerialize["rx_bps"] = o.RxBps
	}
	toSerialize["rx_bytes"] = o.RxBytes
	if !IsNil(o.RxErrors) {
		toSerialize["rx_errors"] = o.RxErrors
	}
	if !IsNil(o.RxMcastPkts) {
		toSerialize["rx_mcast_pkts"] = o.RxMcastPkts
	}
	toSerialize["rx_pkts"] = o.RxPkts
	toSerialize["site_id"] = o.SiteId
	if !IsNil(o.Speed) {
		toSerialize["speed"] = o.Speed
	}
	if !IsNil(o.StpRole) {
		toSerialize["stp_role"] = o.StpRole
	}
	if !IsNil(o.StpState) {
		toSerialize["stp_state"] = o.StpState
	}
	if !IsNil(o.TxBcastPkts) {
		toSerialize["tx_bcast_pkts"] = o.TxBcastPkts
	}
	if !IsNil(o.TxBps) {
		toSerialize["tx_bps"] = o.TxBps
	}
	toSerialize["tx_bytes"] = o.TxBytes
	if !IsNil(o.TxErrors) {
		toSerialize["tx_errors"] = o.TxErrors
	}
	if !IsNil(o.TxMcastPkts) {
		toSerialize["tx_mcast_pkts"] = o.TxMcastPkts
	}
	toSerialize["tx_pkts"] = o.TxPkts
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Unconfigured) {
		toSerialize["unconfigured"] = o.Unconfigured
	}
	if !IsNil(o.Up) {
		toSerialize["up"] = o.Up
	}
	if !IsNil(o.XcvrModel) {
		toSerialize["xcvr_model"] = o.XcvrModel
	}
	if !IsNil(o.XcvrPartNumber) {
		toSerialize["xcvr_part_number"] = o.XcvrPartNumber
	}
	if !IsNil(o.XcvrSerial) {
		toSerialize["xcvr_serial"] = o.XcvrSerial
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SwitchPortStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mac",
		"neighbor_mac",
		"org_id",
		"port_id",
		"port_mac",
		"rx_bytes",
		"rx_pkts",
		"site_id",
		"tx_bytes",
		"tx_pkts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSwitchPortStats := _SwitchPortStats{}

	err = json.Unmarshal(data, &varSwitchPortStats)

	if err != nil {
		return err
	}

	*o = SwitchPortStats(varSwitchPortStats)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "active")
		delete(additionalProperties, "auth_state")
		delete(additionalProperties, "for_site")
		delete(additionalProperties, "full_duplex")
		delete(additionalProperties, "jitter")
		delete(additionalProperties, "latency")
		delete(additionalProperties, "loss")
		delete(additionalProperties, "lte_iccid")
		delete(additionalProperties, "lte_imei")
		delete(additionalProperties, "lte_imsi")
		delete(additionalProperties, "mac")
		delete(additionalProperties, "mac_count")
		delete(additionalProperties, "mac_limit")
		delete(additionalProperties, "neighbor_mac")
		delete(additionalProperties, "neighbor_port_desc")
		delete(additionalProperties, "neighbor_system_name")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "poe_disabled")
		delete(additionalProperties, "poe_mode")
		delete(additionalProperties, "poe_on")
		delete(additionalProperties, "port_id")
		delete(additionalProperties, "port_mac")
		delete(additionalProperties, "port_usage")
		delete(additionalProperties, "power_draw")
		delete(additionalProperties, "rx_bcast_pkts")
		delete(additionalProperties, "rx_bps")
		delete(additionalProperties, "rx_bytes")
		delete(additionalProperties, "rx_errors")
		delete(additionalProperties, "rx_mcast_pkts")
		delete(additionalProperties, "rx_pkts")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "speed")
		delete(additionalProperties, "stp_role")
		delete(additionalProperties, "stp_state")
		delete(additionalProperties, "tx_bcast_pkts")
		delete(additionalProperties, "tx_bps")
		delete(additionalProperties, "tx_bytes")
		delete(additionalProperties, "tx_errors")
		delete(additionalProperties, "tx_mcast_pkts")
		delete(additionalProperties, "tx_pkts")
		delete(additionalProperties, "type")
		delete(additionalProperties, "unconfigured")
		delete(additionalProperties, "up")
		delete(additionalProperties, "xcvr_model")
		delete(additionalProperties, "xcvr_part_number")
		delete(additionalProperties, "xcvr_serial")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSwitchPortStats struct {
	value *SwitchPortStats
	isSet bool
}

func (v NullableSwitchPortStats) Get() *SwitchPortStats {
	return v.value
}

func (v *NullableSwitchPortStats) Set(val *SwitchPortStats) {
	v.value = val
	v.isSet = true
}

func (v NullableSwitchPortStats) IsSet() bool {
	return v.isSet
}

func (v *NullableSwitchPortStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwitchPortStats(val *SwitchPortStats) *NullableSwitchPortStats {
	return &NullableSwitchPortStats{value: val, isSet: true}
}

func (v NullableSwitchPortStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwitchPortStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


