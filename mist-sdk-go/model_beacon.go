/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the Beacon type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Beacon{}

// Beacon Beacon
type Beacon struct {
	CreatedTime *float32 `json:"created_time,omitempty"`
	// Eddystone-UID instance (6 bytes) in hexstring format
	EddystoneInstance *string `json:"eddystone_instance,omitempty"`
	// Eddystone-UID namespace (10 bytes) in hexstring format
	EddystoneNamespace *string `json:"eddystone_namespace,omitempty"`
	// Eddystone-URL url
	EddystoneUrl *string `json:"eddystone_url,omitempty"`
	ForSite *bool `json:"for_site,omitempty"`
	// bluetooth tag major
	IbeaconMajor *int32 `json:"ibeacon_major,omitempty"`
	// bluetooth tag minor
	IbeaconMinor *int32 `json:"ibeacon_minor,omitempty"`
	// bluetooth tag UUID
	IbeaconUuid *string `json:"ibeacon_uuid,omitempty"`
	Id *string `json:"id,omitempty"`
	// optiona, MAC of the beacon, currently used only to identify battery voltage
	Mac *string `json:"mac,omitempty"`
	// map where the device belongs to
	MapId *string `json:"map_id,omitempty"`
	ModifiedTime *float32 `json:"modified_time,omitempty"`
	// name / label of the device
	Name *string `json:"name,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	// in dBm
	Power *int32 `json:"power,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	Type *BeaconType `json:"type,omitempty"`
	// x in pixel
	X *float32 `json:"x,omitempty"`
	// y in pixel
	Y *float32 `json:"y,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Beacon Beacon

// NewBeacon instantiates a new Beacon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBeacon() *Beacon {
	this := Beacon{}
	var power int32 = -12
	this.Power = &power
	var type_ BeaconType = BEACONTYPE_EDDYSTONE_UID
	this.Type = &type_
	return &this
}

// NewBeaconWithDefaults instantiates a new Beacon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBeaconWithDefaults() *Beacon {
	this := Beacon{}
	var power int32 = -12
	this.Power = &power
	var type_ BeaconType = BEACONTYPE_EDDYSTONE_UID
	this.Type = &type_
	return &this
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *Beacon) GetCreatedTime() float32 {
	if o == nil || IsNil(o.CreatedTime) {
		var ret float32
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Beacon) GetCreatedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *Beacon) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given float32 and assigns it to the CreatedTime field.
func (o *Beacon) SetCreatedTime(v float32) {
	o.CreatedTime = &v
}

// GetEddystoneInstance returns the EddystoneInstance field value if set, zero value otherwise.
func (o *Beacon) GetEddystoneInstance() string {
	if o == nil || IsNil(o.EddystoneInstance) {
		var ret string
		return ret
	}
	return *o.EddystoneInstance
}

// GetEddystoneInstanceOk returns a tuple with the EddystoneInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Beacon) GetEddystoneInstanceOk() (*string, bool) {
	if o == nil || IsNil(o.EddystoneInstance) {
		return nil, false
	}
	return o.EddystoneInstance, true
}

// HasEddystoneInstance returns a boolean if a field has been set.
func (o *Beacon) HasEddystoneInstance() bool {
	if o != nil && !IsNil(o.EddystoneInstance) {
		return true
	}

	return false
}

// SetEddystoneInstance gets a reference to the given string and assigns it to the EddystoneInstance field.
func (o *Beacon) SetEddystoneInstance(v string) {
	o.EddystoneInstance = &v
}

// GetEddystoneNamespace returns the EddystoneNamespace field value if set, zero value otherwise.
func (o *Beacon) GetEddystoneNamespace() string {
	if o == nil || IsNil(o.EddystoneNamespace) {
		var ret string
		return ret
	}
	return *o.EddystoneNamespace
}

// GetEddystoneNamespaceOk returns a tuple with the EddystoneNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Beacon) GetEddystoneNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.EddystoneNamespace) {
		return nil, false
	}
	return o.EddystoneNamespace, true
}

// HasEddystoneNamespace returns a boolean if a field has been set.
func (o *Beacon) HasEddystoneNamespace() bool {
	if o != nil && !IsNil(o.EddystoneNamespace) {
		return true
	}

	return false
}

// SetEddystoneNamespace gets a reference to the given string and assigns it to the EddystoneNamespace field.
func (o *Beacon) SetEddystoneNamespace(v string) {
	o.EddystoneNamespace = &v
}

// GetEddystoneUrl returns the EddystoneUrl field value if set, zero value otherwise.
func (o *Beacon) GetEddystoneUrl() string {
	if o == nil || IsNil(o.EddystoneUrl) {
		var ret string
		return ret
	}
	return *o.EddystoneUrl
}

// GetEddystoneUrlOk returns a tuple with the EddystoneUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Beacon) GetEddystoneUrlOk() (*string, bool) {
	if o == nil || IsNil(o.EddystoneUrl) {
		return nil, false
	}
	return o.EddystoneUrl, true
}

// HasEddystoneUrl returns a boolean if a field has been set.
func (o *Beacon) HasEddystoneUrl() bool {
	if o != nil && !IsNil(o.EddystoneUrl) {
		return true
	}

	return false
}

// SetEddystoneUrl gets a reference to the given string and assigns it to the EddystoneUrl field.
func (o *Beacon) SetEddystoneUrl(v string) {
	o.EddystoneUrl = &v
}

// GetForSite returns the ForSite field value if set, zero value otherwise.
func (o *Beacon) GetForSite() bool {
	if o == nil || IsNil(o.ForSite) {
		var ret bool
		return ret
	}
	return *o.ForSite
}

// GetForSiteOk returns a tuple with the ForSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Beacon) GetForSiteOk() (*bool, bool) {
	if o == nil || IsNil(o.ForSite) {
		return nil, false
	}
	return o.ForSite, true
}

// HasForSite returns a boolean if a field has been set.
func (o *Beacon) HasForSite() bool {
	if o != nil && !IsNil(o.ForSite) {
		return true
	}

	return false
}

// SetForSite gets a reference to the given bool and assigns it to the ForSite field.
func (o *Beacon) SetForSite(v bool) {
	o.ForSite = &v
}

// GetIbeaconMajor returns the IbeaconMajor field value if set, zero value otherwise.
func (o *Beacon) GetIbeaconMajor() int32 {
	if o == nil || IsNil(o.IbeaconMajor) {
		var ret int32
		return ret
	}
	return *o.IbeaconMajor
}

// GetIbeaconMajorOk returns a tuple with the IbeaconMajor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Beacon) GetIbeaconMajorOk() (*int32, bool) {
	if o == nil || IsNil(o.IbeaconMajor) {
		return nil, false
	}
	return o.IbeaconMajor, true
}

// HasIbeaconMajor returns a boolean if a field has been set.
func (o *Beacon) HasIbeaconMajor() bool {
	if o != nil && !IsNil(o.IbeaconMajor) {
		return true
	}

	return false
}

// SetIbeaconMajor gets a reference to the given int32 and assigns it to the IbeaconMajor field.
func (o *Beacon) SetIbeaconMajor(v int32) {
	o.IbeaconMajor = &v
}

// GetIbeaconMinor returns the IbeaconMinor field value if set, zero value otherwise.
func (o *Beacon) GetIbeaconMinor() int32 {
	if o == nil || IsNil(o.IbeaconMinor) {
		var ret int32
		return ret
	}
	return *o.IbeaconMinor
}

// GetIbeaconMinorOk returns a tuple with the IbeaconMinor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Beacon) GetIbeaconMinorOk() (*int32, bool) {
	if o == nil || IsNil(o.IbeaconMinor) {
		return nil, false
	}
	return o.IbeaconMinor, true
}

// HasIbeaconMinor returns a boolean if a field has been set.
func (o *Beacon) HasIbeaconMinor() bool {
	if o != nil && !IsNil(o.IbeaconMinor) {
		return true
	}

	return false
}

// SetIbeaconMinor gets a reference to the given int32 and assigns it to the IbeaconMinor field.
func (o *Beacon) SetIbeaconMinor(v int32) {
	o.IbeaconMinor = &v
}

// GetIbeaconUuid returns the IbeaconUuid field value if set, zero value otherwise.
func (o *Beacon) GetIbeaconUuid() string {
	if o == nil || IsNil(o.IbeaconUuid) {
		var ret string
		return ret
	}
	return *o.IbeaconUuid
}

// GetIbeaconUuidOk returns a tuple with the IbeaconUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Beacon) GetIbeaconUuidOk() (*string, bool) {
	if o == nil || IsNil(o.IbeaconUuid) {
		return nil, false
	}
	return o.IbeaconUuid, true
}

// HasIbeaconUuid returns a boolean if a field has been set.
func (o *Beacon) HasIbeaconUuid() bool {
	if o != nil && !IsNil(o.IbeaconUuid) {
		return true
	}

	return false
}

// SetIbeaconUuid gets a reference to the given string and assigns it to the IbeaconUuid field.
func (o *Beacon) SetIbeaconUuid(v string) {
	o.IbeaconUuid = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Beacon) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Beacon) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Beacon) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Beacon) SetId(v string) {
	o.Id = &v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *Beacon) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Beacon) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *Beacon) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *Beacon) SetMac(v string) {
	o.Mac = &v
}

// GetMapId returns the MapId field value if set, zero value otherwise.
func (o *Beacon) GetMapId() string {
	if o == nil || IsNil(o.MapId) {
		var ret string
		return ret
	}
	return *o.MapId
}

// GetMapIdOk returns a tuple with the MapId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Beacon) GetMapIdOk() (*string, bool) {
	if o == nil || IsNil(o.MapId) {
		return nil, false
	}
	return o.MapId, true
}

// HasMapId returns a boolean if a field has been set.
func (o *Beacon) HasMapId() bool {
	if o != nil && !IsNil(o.MapId) {
		return true
	}

	return false
}

// SetMapId gets a reference to the given string and assigns it to the MapId field.
func (o *Beacon) SetMapId(v string) {
	o.MapId = &v
}

// GetModifiedTime returns the ModifiedTime field value if set, zero value otherwise.
func (o *Beacon) GetModifiedTime() float32 {
	if o == nil || IsNil(o.ModifiedTime) {
		var ret float32
		return ret
	}
	return *o.ModifiedTime
}

// GetModifiedTimeOk returns a tuple with the ModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Beacon) GetModifiedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.ModifiedTime) {
		return nil, false
	}
	return o.ModifiedTime, true
}

// HasModifiedTime returns a boolean if a field has been set.
func (o *Beacon) HasModifiedTime() bool {
	if o != nil && !IsNil(o.ModifiedTime) {
		return true
	}

	return false
}

// SetModifiedTime gets a reference to the given float32 and assigns it to the ModifiedTime field.
func (o *Beacon) SetModifiedTime(v float32) {
	o.ModifiedTime = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Beacon) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Beacon) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Beacon) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Beacon) SetName(v string) {
	o.Name = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *Beacon) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Beacon) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *Beacon) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *Beacon) SetOrgId(v string) {
	o.OrgId = &v
}

// GetPower returns the Power field value if set, zero value otherwise.
func (o *Beacon) GetPower() int32 {
	if o == nil || IsNil(o.Power) {
		var ret int32
		return ret
	}
	return *o.Power
}

// GetPowerOk returns a tuple with the Power field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Beacon) GetPowerOk() (*int32, bool) {
	if o == nil || IsNil(o.Power) {
		return nil, false
	}
	return o.Power, true
}

// HasPower returns a boolean if a field has been set.
func (o *Beacon) HasPower() bool {
	if o != nil && !IsNil(o.Power) {
		return true
	}

	return false
}

// SetPower gets a reference to the given int32 and assigns it to the Power field.
func (o *Beacon) SetPower(v int32) {
	o.Power = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *Beacon) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Beacon) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *Beacon) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *Beacon) SetSiteId(v string) {
	o.SiteId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Beacon) GetType() BeaconType {
	if o == nil || IsNil(o.Type) {
		var ret BeaconType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Beacon) GetTypeOk() (*BeaconType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Beacon) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given BeaconType and assigns it to the Type field.
func (o *Beacon) SetType(v BeaconType) {
	o.Type = &v
}

// GetX returns the X field value if set, zero value otherwise.
func (o *Beacon) GetX() float32 {
	if o == nil || IsNil(o.X) {
		var ret float32
		return ret
	}
	return *o.X
}

// GetXOk returns a tuple with the X field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Beacon) GetXOk() (*float32, bool) {
	if o == nil || IsNil(o.X) {
		return nil, false
	}
	return o.X, true
}

// HasX returns a boolean if a field has been set.
func (o *Beacon) HasX() bool {
	if o != nil && !IsNil(o.X) {
		return true
	}

	return false
}

// SetX gets a reference to the given float32 and assigns it to the X field.
func (o *Beacon) SetX(v float32) {
	o.X = &v
}

// GetY returns the Y field value if set, zero value otherwise.
func (o *Beacon) GetY() float32 {
	if o == nil || IsNil(o.Y) {
		var ret float32
		return ret
	}
	return *o.Y
}

// GetYOk returns a tuple with the Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Beacon) GetYOk() (*float32, bool) {
	if o == nil || IsNil(o.Y) {
		return nil, false
	}
	return o.Y, true
}

// HasY returns a boolean if a field has been set.
func (o *Beacon) HasY() bool {
	if o != nil && !IsNil(o.Y) {
		return true
	}

	return false
}

// SetY gets a reference to the given float32 and assigns it to the Y field.
func (o *Beacon) SetY(v float32) {
	o.Y = &v
}

func (o Beacon) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Beacon) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.EddystoneInstance) {
		toSerialize["eddystone_instance"] = o.EddystoneInstance
	}
	if !IsNil(o.EddystoneNamespace) {
		toSerialize["eddystone_namespace"] = o.EddystoneNamespace
	}
	if !IsNil(o.EddystoneUrl) {
		toSerialize["eddystone_url"] = o.EddystoneUrl
	}
	if !IsNil(o.ForSite) {
		toSerialize["for_site"] = o.ForSite
	}
	if !IsNil(o.IbeaconMajor) {
		toSerialize["ibeacon_major"] = o.IbeaconMajor
	}
	if !IsNil(o.IbeaconMinor) {
		toSerialize["ibeacon_minor"] = o.IbeaconMinor
	}
	if !IsNil(o.IbeaconUuid) {
		toSerialize["ibeacon_uuid"] = o.IbeaconUuid
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if !IsNil(o.MapId) {
		toSerialize["map_id"] = o.MapId
	}
	if !IsNil(o.ModifiedTime) {
		toSerialize["modified_time"] = o.ModifiedTime
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.Power) {
		toSerialize["power"] = o.Power
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.X) {
		toSerialize["x"] = o.X
	}
	if !IsNil(o.Y) {
		toSerialize["y"] = o.Y
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Beacon) UnmarshalJSON(data []byte) (err error) {
	varBeacon := _Beacon{}

	err = json.Unmarshal(data, &varBeacon)

	if err != nil {
		return err
	}

	*o = Beacon(varBeacon)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "created_time")
		delete(additionalProperties, "eddystone_instance")
		delete(additionalProperties, "eddystone_namespace")
		delete(additionalProperties, "eddystone_url")
		delete(additionalProperties, "for_site")
		delete(additionalProperties, "ibeacon_major")
		delete(additionalProperties, "ibeacon_minor")
		delete(additionalProperties, "ibeacon_uuid")
		delete(additionalProperties, "id")
		delete(additionalProperties, "mac")
		delete(additionalProperties, "map_id")
		delete(additionalProperties, "modified_time")
		delete(additionalProperties, "name")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "power")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "x")
		delete(additionalProperties, "y")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBeacon struct {
	value *Beacon
	isSet bool
}

func (v NullableBeacon) Get() *Beacon {
	return v.value
}

func (v *NullableBeacon) Set(val *Beacon) {
	v.value = val
	v.isSet = true
}

func (v NullableBeacon) IsSet() bool {
	return v.isSet
}

func (v *NullableBeacon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBeacon(val *Beacon) *NullableBeacon {
	return &NullableBeacon{value: val, isSet: true}
}

func (v NullableBeacon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBeacon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


