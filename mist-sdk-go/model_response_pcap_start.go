/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the ResponsePcapStart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponsePcapStart{}

// ResponsePcapStart struct for ResponsePcapStart
type ResponsePcapStart struct {
	ApCount *int32 `json:"ap_count,omitempty"`
	Aps []string `json:"aps,omitempty"`
	ClientMac NullableString `json:"client_mac,omitempty"`
	Duration *float32 `json:"duration,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Expiry *float32 `json:"expiry,omitempty"`
	Format *string `json:"format,omitempty"`
	Id string `json:"id"`
	IncludeMcast *bool `json:"include_mcast,omitempty"`
	MaxPktLen *int32 `json:"max_pkt_len,omitempty"`
	NumPackets *int32 `json:"num_packets,omitempty"`
	OrgId string `json:"org_id"`
	Raw *bool `json:"raw,omitempty"`
	SiteId string `json:"site_id"`
	Ssid NullableString `json:"ssid,omitempty"`
	TcpdumpParserExpression NullableString `json:"tcpdump_parser_expression,omitempty"`
	Timestamp float32 `json:"timestamp"`
	Type string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _ResponsePcapStart ResponsePcapStart

// NewResponsePcapStart instantiates a new ResponsePcapStart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponsePcapStart(id string, orgId string, siteId string, timestamp float32, type_ string) *ResponsePcapStart {
	this := ResponsePcapStart{}
	this.Id = id
	this.OrgId = orgId
	this.SiteId = siteId
	this.Timestamp = timestamp
	this.Type = type_
	return &this
}

// NewResponsePcapStartWithDefaults instantiates a new ResponsePcapStart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponsePcapStartWithDefaults() *ResponsePcapStart {
	this := ResponsePcapStart{}
	return &this
}

// GetApCount returns the ApCount field value if set, zero value otherwise.
func (o *ResponsePcapStart) GetApCount() int32 {
	if o == nil || IsNil(o.ApCount) {
		var ret int32
		return ret
	}
	return *o.ApCount
}

// GetApCountOk returns a tuple with the ApCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsePcapStart) GetApCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ApCount) {
		return nil, false
	}
	return o.ApCount, true
}

// HasApCount returns a boolean if a field has been set.
func (o *ResponsePcapStart) HasApCount() bool {
	if o != nil && !IsNil(o.ApCount) {
		return true
	}

	return false
}

// SetApCount gets a reference to the given int32 and assigns it to the ApCount field.
func (o *ResponsePcapStart) SetApCount(v int32) {
	o.ApCount = &v
}

// GetAps returns the Aps field value if set, zero value otherwise.
func (o *ResponsePcapStart) GetAps() []string {
	if o == nil || IsNil(o.Aps) {
		var ret []string
		return ret
	}
	return o.Aps
}

// GetApsOk returns a tuple with the Aps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsePcapStart) GetApsOk() ([]string, bool) {
	if o == nil || IsNil(o.Aps) {
		return nil, false
	}
	return o.Aps, true
}

// HasAps returns a boolean if a field has been set.
func (o *ResponsePcapStart) HasAps() bool {
	if o != nil && !IsNil(o.Aps) {
		return true
	}

	return false
}

// SetAps gets a reference to the given []string and assigns it to the Aps field.
func (o *ResponsePcapStart) SetAps(v []string) {
	o.Aps = v
}

// GetClientMac returns the ClientMac field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResponsePcapStart) GetClientMac() string {
	if o == nil || IsNil(o.ClientMac.Get()) {
		var ret string
		return ret
	}
	return *o.ClientMac.Get()
}

// GetClientMacOk returns a tuple with the ClientMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponsePcapStart) GetClientMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClientMac.Get(), o.ClientMac.IsSet()
}

// HasClientMac returns a boolean if a field has been set.
func (o *ResponsePcapStart) HasClientMac() bool {
	if o != nil && o.ClientMac.IsSet() {
		return true
	}

	return false
}

// SetClientMac gets a reference to the given NullableString and assigns it to the ClientMac field.
func (o *ResponsePcapStart) SetClientMac(v string) {
	o.ClientMac.Set(&v)
}
// SetClientMacNil sets the value for ClientMac to be an explicit nil
func (o *ResponsePcapStart) SetClientMacNil() {
	o.ClientMac.Set(nil)
}

// UnsetClientMac ensures that no value is present for ClientMac, not even an explicit nil
func (o *ResponsePcapStart) UnsetClientMac() {
	o.ClientMac.Unset()
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *ResponsePcapStart) GetDuration() float32 {
	if o == nil || IsNil(o.Duration) {
		var ret float32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsePcapStart) GetDurationOk() (*float32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *ResponsePcapStart) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given float32 and assigns it to the Duration field.
func (o *ResponsePcapStart) SetDuration(v float32) {
	o.Duration = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ResponsePcapStart) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsePcapStart) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ResponsePcapStart) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ResponsePcapStart) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetExpiry returns the Expiry field value if set, zero value otherwise.
func (o *ResponsePcapStart) GetExpiry() float32 {
	if o == nil || IsNil(o.Expiry) {
		var ret float32
		return ret
	}
	return *o.Expiry
}

// GetExpiryOk returns a tuple with the Expiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsePcapStart) GetExpiryOk() (*float32, bool) {
	if o == nil || IsNil(o.Expiry) {
		return nil, false
	}
	return o.Expiry, true
}

// HasExpiry returns a boolean if a field has been set.
func (o *ResponsePcapStart) HasExpiry() bool {
	if o != nil && !IsNil(o.Expiry) {
		return true
	}

	return false
}

// SetExpiry gets a reference to the given float32 and assigns it to the Expiry field.
func (o *ResponsePcapStart) SetExpiry(v float32) {
	o.Expiry = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *ResponsePcapStart) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsePcapStart) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *ResponsePcapStart) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *ResponsePcapStart) SetFormat(v string) {
	o.Format = &v
}

// GetId returns the Id field value
func (o *ResponsePcapStart) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ResponsePcapStart) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ResponsePcapStart) SetId(v string) {
	o.Id = v
}

// GetIncludeMcast returns the IncludeMcast field value if set, zero value otherwise.
func (o *ResponsePcapStart) GetIncludeMcast() bool {
	if o == nil || IsNil(o.IncludeMcast) {
		var ret bool
		return ret
	}
	return *o.IncludeMcast
}

// GetIncludeMcastOk returns a tuple with the IncludeMcast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsePcapStart) GetIncludeMcastOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeMcast) {
		return nil, false
	}
	return o.IncludeMcast, true
}

// HasIncludeMcast returns a boolean if a field has been set.
func (o *ResponsePcapStart) HasIncludeMcast() bool {
	if o != nil && !IsNil(o.IncludeMcast) {
		return true
	}

	return false
}

// SetIncludeMcast gets a reference to the given bool and assigns it to the IncludeMcast field.
func (o *ResponsePcapStart) SetIncludeMcast(v bool) {
	o.IncludeMcast = &v
}

// GetMaxPktLen returns the MaxPktLen field value if set, zero value otherwise.
func (o *ResponsePcapStart) GetMaxPktLen() int32 {
	if o == nil || IsNil(o.MaxPktLen) {
		var ret int32
		return ret
	}
	return *o.MaxPktLen
}

// GetMaxPktLenOk returns a tuple with the MaxPktLen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsePcapStart) GetMaxPktLenOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxPktLen) {
		return nil, false
	}
	return o.MaxPktLen, true
}

// HasMaxPktLen returns a boolean if a field has been set.
func (o *ResponsePcapStart) HasMaxPktLen() bool {
	if o != nil && !IsNil(o.MaxPktLen) {
		return true
	}

	return false
}

// SetMaxPktLen gets a reference to the given int32 and assigns it to the MaxPktLen field.
func (o *ResponsePcapStart) SetMaxPktLen(v int32) {
	o.MaxPktLen = &v
}

// GetNumPackets returns the NumPackets field value if set, zero value otherwise.
func (o *ResponsePcapStart) GetNumPackets() int32 {
	if o == nil || IsNil(o.NumPackets) {
		var ret int32
		return ret
	}
	return *o.NumPackets
}

// GetNumPacketsOk returns a tuple with the NumPackets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsePcapStart) GetNumPacketsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumPackets) {
		return nil, false
	}
	return o.NumPackets, true
}

// HasNumPackets returns a boolean if a field has been set.
func (o *ResponsePcapStart) HasNumPackets() bool {
	if o != nil && !IsNil(o.NumPackets) {
		return true
	}

	return false
}

// SetNumPackets gets a reference to the given int32 and assigns it to the NumPackets field.
func (o *ResponsePcapStart) SetNumPackets(v int32) {
	o.NumPackets = &v
}

// GetOrgId returns the OrgId field value
func (o *ResponsePcapStart) GetOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *ResponsePcapStart) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *ResponsePcapStart) SetOrgId(v string) {
	o.OrgId = v
}

// GetRaw returns the Raw field value if set, zero value otherwise.
func (o *ResponsePcapStart) GetRaw() bool {
	if o == nil || IsNil(o.Raw) {
		var ret bool
		return ret
	}
	return *o.Raw
}

// GetRawOk returns a tuple with the Raw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsePcapStart) GetRawOk() (*bool, bool) {
	if o == nil || IsNil(o.Raw) {
		return nil, false
	}
	return o.Raw, true
}

// HasRaw returns a boolean if a field has been set.
func (o *ResponsePcapStart) HasRaw() bool {
	if o != nil && !IsNil(o.Raw) {
		return true
	}

	return false
}

// SetRaw gets a reference to the given bool and assigns it to the Raw field.
func (o *ResponsePcapStart) SetRaw(v bool) {
	o.Raw = &v
}

// GetSiteId returns the SiteId field value
func (o *ResponsePcapStart) GetSiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *ResponsePcapStart) GetSiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *ResponsePcapStart) SetSiteId(v string) {
	o.SiteId = v
}

// GetSsid returns the Ssid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResponsePcapStart) GetSsid() string {
	if o == nil || IsNil(o.Ssid.Get()) {
		var ret string
		return ret
	}
	return *o.Ssid.Get()
}

// GetSsidOk returns a tuple with the Ssid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponsePcapStart) GetSsidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ssid.Get(), o.Ssid.IsSet()
}

// HasSsid returns a boolean if a field has been set.
func (o *ResponsePcapStart) HasSsid() bool {
	if o != nil && o.Ssid.IsSet() {
		return true
	}

	return false
}

// SetSsid gets a reference to the given NullableString and assigns it to the Ssid field.
func (o *ResponsePcapStart) SetSsid(v string) {
	o.Ssid.Set(&v)
}
// SetSsidNil sets the value for Ssid to be an explicit nil
func (o *ResponsePcapStart) SetSsidNil() {
	o.Ssid.Set(nil)
}

// UnsetSsid ensures that no value is present for Ssid, not even an explicit nil
func (o *ResponsePcapStart) UnsetSsid() {
	o.Ssid.Unset()
}

// GetTcpdumpParserExpression returns the TcpdumpParserExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResponsePcapStart) GetTcpdumpParserExpression() string {
	if o == nil || IsNil(o.TcpdumpParserExpression.Get()) {
		var ret string
		return ret
	}
	return *o.TcpdumpParserExpression.Get()
}

// GetTcpdumpParserExpressionOk returns a tuple with the TcpdumpParserExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponsePcapStart) GetTcpdumpParserExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TcpdumpParserExpression.Get(), o.TcpdumpParserExpression.IsSet()
}

// HasTcpdumpParserExpression returns a boolean if a field has been set.
func (o *ResponsePcapStart) HasTcpdumpParserExpression() bool {
	if o != nil && o.TcpdumpParserExpression.IsSet() {
		return true
	}

	return false
}

// SetTcpdumpParserExpression gets a reference to the given NullableString and assigns it to the TcpdumpParserExpression field.
func (o *ResponsePcapStart) SetTcpdumpParserExpression(v string) {
	o.TcpdumpParserExpression.Set(&v)
}
// SetTcpdumpParserExpressionNil sets the value for TcpdumpParserExpression to be an explicit nil
func (o *ResponsePcapStart) SetTcpdumpParserExpressionNil() {
	o.TcpdumpParserExpression.Set(nil)
}

// UnsetTcpdumpParserExpression ensures that no value is present for TcpdumpParserExpression, not even an explicit nil
func (o *ResponsePcapStart) UnsetTcpdumpParserExpression() {
	o.TcpdumpParserExpression.Unset()
}

// GetTimestamp returns the Timestamp field value
func (o *ResponsePcapStart) GetTimestamp() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *ResponsePcapStart) GetTimestampOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *ResponsePcapStart) SetTimestamp(v float32) {
	o.Timestamp = v
}

// GetType returns the Type field value
func (o *ResponsePcapStart) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ResponsePcapStart) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ResponsePcapStart) SetType(v string) {
	o.Type = v
}

func (o ResponsePcapStart) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponsePcapStart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApCount) {
		toSerialize["ap_count"] = o.ApCount
	}
	if !IsNil(o.Aps) {
		toSerialize["aps"] = o.Aps
	}
	if o.ClientMac.IsSet() {
		toSerialize["client_mac"] = o.ClientMac.Get()
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Expiry) {
		toSerialize["expiry"] = o.Expiry
	}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.IncludeMcast) {
		toSerialize["include_mcast"] = o.IncludeMcast
	}
	if !IsNil(o.MaxPktLen) {
		toSerialize["max_pkt_len"] = o.MaxPktLen
	}
	if !IsNil(o.NumPackets) {
		toSerialize["num_packets"] = o.NumPackets
	}
	toSerialize["org_id"] = o.OrgId
	if !IsNil(o.Raw) {
		toSerialize["raw"] = o.Raw
	}
	toSerialize["site_id"] = o.SiteId
	if o.Ssid.IsSet() {
		toSerialize["ssid"] = o.Ssid.Get()
	}
	if o.TcpdumpParserExpression.IsSet() {
		toSerialize["tcpdump_parser_expression"] = o.TcpdumpParserExpression.Get()
	}
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResponsePcapStart) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"org_id",
		"site_id",
		"timestamp",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResponsePcapStart := _ResponsePcapStart{}

	err = json.Unmarshal(data, &varResponsePcapStart)

	if err != nil {
		return err
	}

	*o = ResponsePcapStart(varResponsePcapStart)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ap_count")
		delete(additionalProperties, "aps")
		delete(additionalProperties, "client_mac")
		delete(additionalProperties, "duration")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "expiry")
		delete(additionalProperties, "format")
		delete(additionalProperties, "id")
		delete(additionalProperties, "include_mcast")
		delete(additionalProperties, "max_pkt_len")
		delete(additionalProperties, "num_packets")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "raw")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "ssid")
		delete(additionalProperties, "tcpdump_parser_expression")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResponsePcapStart struct {
	value *ResponsePcapStart
	isSet bool
}

func (v NullableResponsePcapStart) Get() *ResponsePcapStart {
	return v.value
}

func (v *NullableResponsePcapStart) Set(val *ResponsePcapStart) {
	v.value = val
	v.isSet = true
}

func (v NullableResponsePcapStart) IsSet() bool {
	return v.isSet
}

func (v *NullableResponsePcapStart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponsePcapStart(val *ResponsePcapStart) *NullableResponsePcapStart {
	return &NullableResponsePcapStart{value: val, isSet: true}
}

func (v NullableResponsePcapStart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponsePcapStart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


