/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the ApIot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApIot{}

// ApIot IoT AP settings
type ApIot struct {
	A1 *ApIotOutput `json:"A1,omitempty"`
	A2 *ApIotOutput `json:"A2,omitempty"`
	A3 *ApIotOutput `json:"A3,omitempty"`
	A4 *ApIotOutput `json:"A4,omitempty"`
	DI1 *ApIotInput `json:"DI1,omitempty"`
	DI2 *ApIotInput `json:"DI2,omitempty"`
	DO *ApIotOutput `json:"DO,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApIot ApIot

// NewApIot instantiates a new ApIot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApIot() *ApIot {
	this := ApIot{}
	return &this
}

// NewApIotWithDefaults instantiates a new ApIot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApIotWithDefaults() *ApIot {
	this := ApIot{}
	return &this
}

// GetA1 returns the A1 field value if set, zero value otherwise.
func (o *ApIot) GetA1() ApIotOutput {
	if o == nil || IsNil(o.A1) {
		var ret ApIotOutput
		return ret
	}
	return *o.A1
}

// GetA1Ok returns a tuple with the A1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApIot) GetA1Ok() (*ApIotOutput, bool) {
	if o == nil || IsNil(o.A1) {
		return nil, false
	}
	return o.A1, true
}

// HasA1 returns a boolean if a field has been set.
func (o *ApIot) HasA1() bool {
	if o != nil && !IsNil(o.A1) {
		return true
	}

	return false
}

// SetA1 gets a reference to the given ApIotOutput and assigns it to the A1 field.
func (o *ApIot) SetA1(v ApIotOutput) {
	o.A1 = &v
}

// GetA2 returns the A2 field value if set, zero value otherwise.
func (o *ApIot) GetA2() ApIotOutput {
	if o == nil || IsNil(o.A2) {
		var ret ApIotOutput
		return ret
	}
	return *o.A2
}

// GetA2Ok returns a tuple with the A2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApIot) GetA2Ok() (*ApIotOutput, bool) {
	if o == nil || IsNil(o.A2) {
		return nil, false
	}
	return o.A2, true
}

// HasA2 returns a boolean if a field has been set.
func (o *ApIot) HasA2() bool {
	if o != nil && !IsNil(o.A2) {
		return true
	}

	return false
}

// SetA2 gets a reference to the given ApIotOutput and assigns it to the A2 field.
func (o *ApIot) SetA2(v ApIotOutput) {
	o.A2 = &v
}

// GetA3 returns the A3 field value if set, zero value otherwise.
func (o *ApIot) GetA3() ApIotOutput {
	if o == nil || IsNil(o.A3) {
		var ret ApIotOutput
		return ret
	}
	return *o.A3
}

// GetA3Ok returns a tuple with the A3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApIot) GetA3Ok() (*ApIotOutput, bool) {
	if o == nil || IsNil(o.A3) {
		return nil, false
	}
	return o.A3, true
}

// HasA3 returns a boolean if a field has been set.
func (o *ApIot) HasA3() bool {
	if o != nil && !IsNil(o.A3) {
		return true
	}

	return false
}

// SetA3 gets a reference to the given ApIotOutput and assigns it to the A3 field.
func (o *ApIot) SetA3(v ApIotOutput) {
	o.A3 = &v
}

// GetA4 returns the A4 field value if set, zero value otherwise.
func (o *ApIot) GetA4() ApIotOutput {
	if o == nil || IsNil(o.A4) {
		var ret ApIotOutput
		return ret
	}
	return *o.A4
}

// GetA4Ok returns a tuple with the A4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApIot) GetA4Ok() (*ApIotOutput, bool) {
	if o == nil || IsNil(o.A4) {
		return nil, false
	}
	return o.A4, true
}

// HasA4 returns a boolean if a field has been set.
func (o *ApIot) HasA4() bool {
	if o != nil && !IsNil(o.A4) {
		return true
	}

	return false
}

// SetA4 gets a reference to the given ApIotOutput and assigns it to the A4 field.
func (o *ApIot) SetA4(v ApIotOutput) {
	o.A4 = &v
}

// GetDI1 returns the DI1 field value if set, zero value otherwise.
func (o *ApIot) GetDI1() ApIotInput {
	if o == nil || IsNil(o.DI1) {
		var ret ApIotInput
		return ret
	}
	return *o.DI1
}

// GetDI1Ok returns a tuple with the DI1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApIot) GetDI1Ok() (*ApIotInput, bool) {
	if o == nil || IsNil(o.DI1) {
		return nil, false
	}
	return o.DI1, true
}

// HasDI1 returns a boolean if a field has been set.
func (o *ApIot) HasDI1() bool {
	if o != nil && !IsNil(o.DI1) {
		return true
	}

	return false
}

// SetDI1 gets a reference to the given ApIotInput and assigns it to the DI1 field.
func (o *ApIot) SetDI1(v ApIotInput) {
	o.DI1 = &v
}

// GetDI2 returns the DI2 field value if set, zero value otherwise.
func (o *ApIot) GetDI2() ApIotInput {
	if o == nil || IsNil(o.DI2) {
		var ret ApIotInput
		return ret
	}
	return *o.DI2
}

// GetDI2Ok returns a tuple with the DI2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApIot) GetDI2Ok() (*ApIotInput, bool) {
	if o == nil || IsNil(o.DI2) {
		return nil, false
	}
	return o.DI2, true
}

// HasDI2 returns a boolean if a field has been set.
func (o *ApIot) HasDI2() bool {
	if o != nil && !IsNil(o.DI2) {
		return true
	}

	return false
}

// SetDI2 gets a reference to the given ApIotInput and assigns it to the DI2 field.
func (o *ApIot) SetDI2(v ApIotInput) {
	o.DI2 = &v
}

// GetDO returns the DO field value if set, zero value otherwise.
func (o *ApIot) GetDO() ApIotOutput {
	if o == nil || IsNil(o.DO) {
		var ret ApIotOutput
		return ret
	}
	return *o.DO
}

// GetDOOk returns a tuple with the DO field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApIot) GetDOOk() (*ApIotOutput, bool) {
	if o == nil || IsNil(o.DO) {
		return nil, false
	}
	return o.DO, true
}

// HasDO returns a boolean if a field has been set.
func (o *ApIot) HasDO() bool {
	if o != nil && !IsNil(o.DO) {
		return true
	}

	return false
}

// SetDO gets a reference to the given ApIotOutput and assigns it to the DO field.
func (o *ApIot) SetDO(v ApIotOutput) {
	o.DO = &v
}

func (o ApIot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApIot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.A1) {
		toSerialize["A1"] = o.A1
	}
	if !IsNil(o.A2) {
		toSerialize["A2"] = o.A2
	}
	if !IsNil(o.A3) {
		toSerialize["A3"] = o.A3
	}
	if !IsNil(o.A4) {
		toSerialize["A4"] = o.A4
	}
	if !IsNil(o.DI1) {
		toSerialize["DI1"] = o.DI1
	}
	if !IsNil(o.DI2) {
		toSerialize["DI2"] = o.DI2
	}
	if !IsNil(o.DO) {
		toSerialize["DO"] = o.DO
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApIot) UnmarshalJSON(data []byte) (err error) {
	varApIot := _ApIot{}

	err = json.Unmarshal(data, &varApIot)

	if err != nil {
		return err
	}

	*o = ApIot(varApIot)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "A1")
		delete(additionalProperties, "A2")
		delete(additionalProperties, "A3")
		delete(additionalProperties, "A4")
		delete(additionalProperties, "DI1")
		delete(additionalProperties, "DI2")
		delete(additionalProperties, "DO")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApIot struct {
	value *ApIot
	isSet bool
}

func (v NullableApIot) Get() *ApIot {
	return v.value
}

func (v *NullableApIot) Set(val *ApIot) {
	v.value = val
	v.isSet = true
}

func (v NullableApIot) IsSet() bool {
	return v.isSet
}

func (v *NullableApIot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApIot(val *ApIot) *NullableApIot {
	return &NullableApIot{value: val, isSet: true}
}

func (v NullableApIot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApIot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


