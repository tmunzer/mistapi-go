/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type OrgsClientsWirelessAPI interface {

	/*
	CountOrgWirelessClients countOrgWirelessClients

	Count Org Wireless Clients

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orgId
	@return ApiCountOrgWirelessClientsRequest
	*/
	CountOrgWirelessClients(ctx context.Context, orgId string) ApiCountOrgWirelessClientsRequest

	// CountOrgWirelessClientsExecute executes the request
	//  @return RepsonseCount
	CountOrgWirelessClientsExecute(r ApiCountOrgWirelessClientsRequest) (*RepsonseCount, *http.Response, error)

	/*
	CountOrgWirelessClientsSessions countOrgWirelessClientsSessions

	Count Org Wireless Clients Sessions

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orgId
	@return ApiCountOrgWirelessClientsSessionsRequest
	*/
	CountOrgWirelessClientsSessions(ctx context.Context, orgId string) ApiCountOrgWirelessClientsSessionsRequest

	// CountOrgWirelessClientsSessionsExecute executes the request
	//  @return RepsonseCount
	CountOrgWirelessClientsSessionsExecute(r ApiCountOrgWirelessClientsSessionsRequest) (*RepsonseCount, *http.Response, error)

	/*
	SearchOrgWirelessClientEvents searchOrgWirelessClientEvents

	Get Org Clients Events

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orgId
	@return ApiSearchOrgWirelessClientEventsRequest
	*/
	SearchOrgWirelessClientEvents(ctx context.Context, orgId string) ApiSearchOrgWirelessClientEventsRequest

	// SearchOrgWirelessClientEventsExecute executes the request
	//  @return ResponseEventsSearch
	SearchOrgWirelessClientEventsExecute(r ApiSearchOrgWirelessClientEventsRequest) (*ResponseEventsSearch, *http.Response, error)

	/*
	SearchOrgWirelessClientSessions searchOrgWirelessClientSessions

	Search Org Wireless Clients Sessions

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orgId
	@return ApiSearchOrgWirelessClientSessionsRequest
	*/
	SearchOrgWirelessClientSessions(ctx context.Context, orgId string) ApiSearchOrgWirelessClientSessionsRequest

	// SearchOrgWirelessClientSessionsExecute executes the request
	//  @return SearchWirelssClientSession
	SearchOrgWirelessClientSessionsExecute(r ApiSearchOrgWirelessClientSessionsRequest) (*SearchWirelssClientSession, *http.Response, error)

	/*
	SearchOrgWirelessClients searchOrgWirelessClients

	Search Org Wireless Clients

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orgId
	@return ApiSearchOrgWirelessClientsRequest
	*/
	SearchOrgWirelessClients(ctx context.Context, orgId string) ApiSearchOrgWirelessClientsRequest

	// SearchOrgWirelessClientsExecute executes the request
	//  @return ResponseClientSearch
	SearchOrgWirelessClientsExecute(r ApiSearchOrgWirelessClientsRequest) (*ResponseClientSearch, *http.Response, error)
}

// OrgsClientsWirelessAPIService OrgsClientsWirelessAPI service
type OrgsClientsWirelessAPIService service

type ApiCountOrgWirelessClientsRequest struct {
	ctx context.Context
	ApiService OrgsClientsWirelessAPI
	orgId string
	distinct *OrgClientsCountDistinct
	mac *string
	hostname *string
	device *string
	os *string
	model *string
	ap *string
	vlan *string
	ssid *string
	ipAddress *string
	page *int32
	limit *int32
	start *int32
	end *int32
	duration *string
}

func (r ApiCountOrgWirelessClientsRequest) Distinct(distinct OrgClientsCountDistinct) ApiCountOrgWirelessClientsRequest {
	r.distinct = &distinct
	return r
}

// partial / full MAC address
func (r ApiCountOrgWirelessClientsRequest) Mac(mac string) ApiCountOrgWirelessClientsRequest {
	r.mac = &mac
	return r
}

// partial / full hostname
func (r ApiCountOrgWirelessClientsRequest) Hostname(hostname string) ApiCountOrgWirelessClientsRequest {
	r.hostname = &hostname
	return r
}

// device type, e.g. Mac, Nvidia, iPhone
func (r ApiCountOrgWirelessClientsRequest) Device(device string) ApiCountOrgWirelessClientsRequest {
	r.device = &device
	return r
}

// os, e.g. Sierra, Yosemite, Windows 10
func (r ApiCountOrgWirelessClientsRequest) Os(os string) ApiCountOrgWirelessClientsRequest {
	r.os = &os
	return r
}

// model, e.g. “MBP 15 late 2013”, 6, 6s, “8+ GSM”
func (r ApiCountOrgWirelessClientsRequest) Model(model string) ApiCountOrgWirelessClientsRequest {
	r.model = &model
	return r
}

// AP mac where the client has connected to
func (r ApiCountOrgWirelessClientsRequest) Ap(ap string) ApiCountOrgWirelessClientsRequest {
	r.ap = &ap
	return r
}

// vlan
func (r ApiCountOrgWirelessClientsRequest) Vlan(vlan string) ApiCountOrgWirelessClientsRequest {
	r.vlan = &vlan
	return r
}

// SSID
func (r ApiCountOrgWirelessClientsRequest) Ssid(ssid string) ApiCountOrgWirelessClientsRequest {
	r.ssid = &ssid
	return r
}

func (r ApiCountOrgWirelessClientsRequest) IpAddress(ipAddress string) ApiCountOrgWirelessClientsRequest {
	r.ipAddress = &ipAddress
	return r
}

func (r ApiCountOrgWirelessClientsRequest) Page(page int32) ApiCountOrgWirelessClientsRequest {
	r.page = &page
	return r
}

func (r ApiCountOrgWirelessClientsRequest) Limit(limit int32) ApiCountOrgWirelessClientsRequest {
	r.limit = &limit
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiCountOrgWirelessClientsRequest) Start(start int32) ApiCountOrgWirelessClientsRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiCountOrgWirelessClientsRequest) End(end int32) ApiCountOrgWirelessClientsRequest {
	r.end = &end
	return r
}

// duration like 7d, 2w
func (r ApiCountOrgWirelessClientsRequest) Duration(duration string) ApiCountOrgWirelessClientsRequest {
	r.duration = &duration
	return r
}

func (r ApiCountOrgWirelessClientsRequest) Execute() (*RepsonseCount, *http.Response, error) {
	return r.ApiService.CountOrgWirelessClientsExecute(r)
}

/*
CountOrgWirelessClients countOrgWirelessClients

Count Org Wireless Clients

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId
 @return ApiCountOrgWirelessClientsRequest
*/
func (a *OrgsClientsWirelessAPIService) CountOrgWirelessClients(ctx context.Context, orgId string) ApiCountOrgWirelessClientsRequest {
	return ApiCountOrgWirelessClientsRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
	}
}

// Execute executes the request
//  @return RepsonseCount
func (a *OrgsClientsWirelessAPIService) CountOrgWirelessClientsExecute(r ApiCountOrgWirelessClientsRequest) (*RepsonseCount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RepsonseCount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrgsClientsWirelessAPIService.CountOrgWirelessClients")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/orgs/{org_id}/clients/count"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.distinct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinct", r.distinct, "")
	} else {
		var defaultValue OrgClientsCountDistinct = "device"
		r.distinct = &defaultValue
	}
	if r.mac != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mac", r.mac, "")
	}
	if r.hostname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hostname", r.hostname, "")
	}
	if r.device != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "device", r.device, "")
	}
	if r.os != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "os", r.os, "")
	}
	if r.model != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "model", r.model, "")
	}
	if r.ap != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ap", r.ap, "")
	}
	if r.vlan != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vlan", r.vlan, "")
	}
	if r.ssid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssid", r.ssid, "")
	}
	if r.ipAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ip_address", r.ipAddress, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCountOrgWirelessClientsSessionsRequest struct {
	ctx context.Context
	ApiService OrgsClientsWirelessAPI
	orgId string
	distinct *OrgClientSessionsCountDistinct
	ap *string
	band *Dot11Band
	clientFamily *string
	clientManufacture *string
	clientModel *string
	clientOs *string
	ssid *string
	wlanId *string
	page *int32
	limit *int32
	start *int32
	end *int32
	duration *string
}

func (r ApiCountOrgWirelessClientsSessionsRequest) Distinct(distinct OrgClientSessionsCountDistinct) ApiCountOrgWirelessClientsSessionsRequest {
	r.distinct = &distinct
	return r
}

// AP MAC
func (r ApiCountOrgWirelessClientsSessionsRequest) Ap(ap string) ApiCountOrgWirelessClientsSessionsRequest {
	r.ap = &ap
	return r
}

// 802.11 Band
func (r ApiCountOrgWirelessClientsSessionsRequest) Band(band Dot11Band) ApiCountOrgWirelessClientsSessionsRequest {
	r.band = &band
	return r
}

// E.g. “Mac”, “iPhone”, “Apple watch”
func (r ApiCountOrgWirelessClientsSessionsRequest) ClientFamily(clientFamily string) ApiCountOrgWirelessClientsSessionsRequest {
	r.clientFamily = &clientFamily
	return r
}

// E.g. “Apple”
func (r ApiCountOrgWirelessClientsSessionsRequest) ClientManufacture(clientManufacture string) ApiCountOrgWirelessClientsSessionsRequest {
	r.clientManufacture = &clientManufacture
	return r
}

// E.g. “8+”, “XS”
func (r ApiCountOrgWirelessClientsSessionsRequest) ClientModel(clientModel string) ApiCountOrgWirelessClientsSessionsRequest {
	r.clientModel = &clientModel
	return r
}

// E.g. “Mojave”, “Windows 10”, “Linux”
func (r ApiCountOrgWirelessClientsSessionsRequest) ClientOs(clientOs string) ApiCountOrgWirelessClientsSessionsRequest {
	r.clientOs = &clientOs
	return r
}

// SSID
func (r ApiCountOrgWirelessClientsSessionsRequest) Ssid(ssid string) ApiCountOrgWirelessClientsSessionsRequest {
	r.ssid = &ssid
	return r
}

// wlan_id
func (r ApiCountOrgWirelessClientsSessionsRequest) WlanId(wlanId string) ApiCountOrgWirelessClientsSessionsRequest {
	r.wlanId = &wlanId
	return r
}

func (r ApiCountOrgWirelessClientsSessionsRequest) Page(page int32) ApiCountOrgWirelessClientsSessionsRequest {
	r.page = &page
	return r
}

func (r ApiCountOrgWirelessClientsSessionsRequest) Limit(limit int32) ApiCountOrgWirelessClientsSessionsRequest {
	r.limit = &limit
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiCountOrgWirelessClientsSessionsRequest) Start(start int32) ApiCountOrgWirelessClientsSessionsRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiCountOrgWirelessClientsSessionsRequest) End(end int32) ApiCountOrgWirelessClientsSessionsRequest {
	r.end = &end
	return r
}

// duration like 7d, 2w
func (r ApiCountOrgWirelessClientsSessionsRequest) Duration(duration string) ApiCountOrgWirelessClientsSessionsRequest {
	r.duration = &duration
	return r
}

func (r ApiCountOrgWirelessClientsSessionsRequest) Execute() (*RepsonseCount, *http.Response, error) {
	return r.ApiService.CountOrgWirelessClientsSessionsExecute(r)
}

/*
CountOrgWirelessClientsSessions countOrgWirelessClientsSessions

Count Org Wireless Clients Sessions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId
 @return ApiCountOrgWirelessClientsSessionsRequest
*/
func (a *OrgsClientsWirelessAPIService) CountOrgWirelessClientsSessions(ctx context.Context, orgId string) ApiCountOrgWirelessClientsSessionsRequest {
	return ApiCountOrgWirelessClientsSessionsRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
	}
}

// Execute executes the request
//  @return RepsonseCount
func (a *OrgsClientsWirelessAPIService) CountOrgWirelessClientsSessionsExecute(r ApiCountOrgWirelessClientsSessionsRequest) (*RepsonseCount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RepsonseCount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrgsClientsWirelessAPIService.CountOrgWirelessClientsSessions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/orgs/{org_id}/clients/sessions/count"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.distinct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinct", r.distinct, "")
	} else {
		var defaultValue OrgClientSessionsCountDistinct = "device"
		r.distinct = &defaultValue
	}
	if r.ap != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ap", r.ap, "")
	}
	if r.band != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "band", r.band, "")
	}
	if r.clientFamily != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_family", r.clientFamily, "")
	}
	if r.clientManufacture != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_manufacture", r.clientManufacture, "")
	}
	if r.clientModel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_model", r.clientModel, "")
	}
	if r.clientOs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_os", r.clientOs, "")
	}
	if r.ssid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssid", r.ssid, "")
	}
	if r.wlanId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wlan_id", r.wlanId, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchOrgWirelessClientEventsRequest struct {
	ctx context.Context
	ApiService OrgsClientsWirelessAPI
	orgId string
	type_ *string
	reasonCode *int32
	ssid *string
	ap *string
	proto *Dot11Proto
	band *Dot11Band
	wlanId *string
	nacruleId *string
	limit *int32
	start *int32
	end *int32
	duration *string
}

// see [listDeviceEventsDefinitions]($e/Constants%20Events/listDeviceEventsDefinitions)
func (r ApiSearchOrgWirelessClientEventsRequest) Type_(type_ string) ApiSearchOrgWirelessClientEventsRequest {
	r.type_ = &type_
	return r
}

// for assoc/disassoc events
func (r ApiSearchOrgWirelessClientEventsRequest) ReasonCode(reasonCode int32) ApiSearchOrgWirelessClientEventsRequest {
	r.reasonCode = &reasonCode
	return r
}

// SSID Name
func (r ApiSearchOrgWirelessClientEventsRequest) Ssid(ssid string) ApiSearchOrgWirelessClientEventsRequest {
	r.ssid = &ssid
	return r
}

// AP MAC
func (r ApiSearchOrgWirelessClientEventsRequest) Ap(ap string) ApiSearchOrgWirelessClientEventsRequest {
	r.ap = &ap
	return r
}

// a / b / g / n / ac / ax
func (r ApiSearchOrgWirelessClientEventsRequest) Proto(proto Dot11Proto) ApiSearchOrgWirelessClientEventsRequest {
	r.proto = &proto
	return r
}

// 802.11 Band
func (r ApiSearchOrgWirelessClientEventsRequest) Band(band Dot11Band) ApiSearchOrgWirelessClientEventsRequest {
	r.band = &band
	return r
}

// wlan_id
func (r ApiSearchOrgWirelessClientEventsRequest) WlanId(wlanId string) ApiSearchOrgWirelessClientEventsRequest {
	r.wlanId = &wlanId
	return r
}

// nacrule_id
func (r ApiSearchOrgWirelessClientEventsRequest) NacruleId(nacruleId string) ApiSearchOrgWirelessClientEventsRequest {
	r.nacruleId = &nacruleId
	return r
}

func (r ApiSearchOrgWirelessClientEventsRequest) Limit(limit int32) ApiSearchOrgWirelessClientEventsRequest {
	r.limit = &limit
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiSearchOrgWirelessClientEventsRequest) Start(start int32) ApiSearchOrgWirelessClientEventsRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiSearchOrgWirelessClientEventsRequest) End(end int32) ApiSearchOrgWirelessClientEventsRequest {
	r.end = &end
	return r
}

// duration like 7d, 2w
func (r ApiSearchOrgWirelessClientEventsRequest) Duration(duration string) ApiSearchOrgWirelessClientEventsRequest {
	r.duration = &duration
	return r
}

func (r ApiSearchOrgWirelessClientEventsRequest) Execute() (*ResponseEventsSearch, *http.Response, error) {
	return r.ApiService.SearchOrgWirelessClientEventsExecute(r)
}

/*
SearchOrgWirelessClientEvents searchOrgWirelessClientEvents

Get Org Clients Events

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId
 @return ApiSearchOrgWirelessClientEventsRequest
*/
func (a *OrgsClientsWirelessAPIService) SearchOrgWirelessClientEvents(ctx context.Context, orgId string) ApiSearchOrgWirelessClientEventsRequest {
	return ApiSearchOrgWirelessClientEventsRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
	}
}

// Execute executes the request
//  @return ResponseEventsSearch
func (a *OrgsClientsWirelessAPIService) SearchOrgWirelessClientEventsExecute(r ApiSearchOrgWirelessClientEventsRequest) (*ResponseEventsSearch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseEventsSearch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrgsClientsWirelessAPIService.SearchOrgWirelessClientEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/orgs/{org_id}/clients/events/search"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.reasonCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reason_code", r.reasonCode, "")
	}
	if r.ssid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssid", r.ssid, "")
	}
	if r.ap != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ap", r.ap, "")
	}
	if r.proto != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "proto", r.proto, "")
	}
	if r.band != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "band", r.band, "")
	}
	if r.wlanId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wlan_id", r.wlanId, "")
	}
	if r.nacruleId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nacrule_id", r.nacruleId, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchOrgWirelessClientSessionsRequest struct {
	ctx context.Context
	ApiService OrgsClientsWirelessAPI
	orgId string
	ap *string
	band *Dot11Band
	clientFamily *string
	clientManufacture *string
	clientModel *string
	clientUsername *string
	clientOs *string
	ssid *string
	wlanId *string
	pskId *string
	pskName *string
	limit *int32
	start *int32
	end *int32
	duration *string
}

// AP MAC
func (r ApiSearchOrgWirelessClientSessionsRequest) Ap(ap string) ApiSearchOrgWirelessClientSessionsRequest {
	r.ap = &ap
	return r
}

// 802.11 Band
func (r ApiSearchOrgWirelessClientSessionsRequest) Band(band Dot11Band) ApiSearchOrgWirelessClientSessionsRequest {
	r.band = &band
	return r
}

// E.g. “Mac”, “iPhone”, “Apple watch”
func (r ApiSearchOrgWirelessClientSessionsRequest) ClientFamily(clientFamily string) ApiSearchOrgWirelessClientSessionsRequest {
	r.clientFamily = &clientFamily
	return r
}

// E.g. “Apple”
func (r ApiSearchOrgWirelessClientSessionsRequest) ClientManufacture(clientManufacture string) ApiSearchOrgWirelessClientSessionsRequest {
	r.clientManufacture = &clientManufacture
	return r
}

// E.g. “8+”, “XS”
func (r ApiSearchOrgWirelessClientSessionsRequest) ClientModel(clientModel string) ApiSearchOrgWirelessClientSessionsRequest {
	r.clientModel = &clientModel
	return r
}

// Username
func (r ApiSearchOrgWirelessClientSessionsRequest) ClientUsername(clientUsername string) ApiSearchOrgWirelessClientSessionsRequest {
	r.clientUsername = &clientUsername
	return r
}

// E.g. “Mojave”, “Windows 10”, “Linux”
func (r ApiSearchOrgWirelessClientSessionsRequest) ClientOs(clientOs string) ApiSearchOrgWirelessClientSessionsRequest {
	r.clientOs = &clientOs
	return r
}

// SSID
func (r ApiSearchOrgWirelessClientSessionsRequest) Ssid(ssid string) ApiSearchOrgWirelessClientSessionsRequest {
	r.ssid = &ssid
	return r
}

// wlan_id
func (r ApiSearchOrgWirelessClientSessionsRequest) WlanId(wlanId string) ApiSearchOrgWirelessClientSessionsRequest {
	r.wlanId = &wlanId
	return r
}

// PSK ID
func (r ApiSearchOrgWirelessClientSessionsRequest) PskId(pskId string) ApiSearchOrgWirelessClientSessionsRequest {
	r.pskId = &pskId
	return r
}

// PSK Name
func (r ApiSearchOrgWirelessClientSessionsRequest) PskName(pskName string) ApiSearchOrgWirelessClientSessionsRequest {
	r.pskName = &pskName
	return r
}

func (r ApiSearchOrgWirelessClientSessionsRequest) Limit(limit int32) ApiSearchOrgWirelessClientSessionsRequest {
	r.limit = &limit
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiSearchOrgWirelessClientSessionsRequest) Start(start int32) ApiSearchOrgWirelessClientSessionsRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiSearchOrgWirelessClientSessionsRequest) End(end int32) ApiSearchOrgWirelessClientSessionsRequest {
	r.end = &end
	return r
}

// duration like 7d, 2w
func (r ApiSearchOrgWirelessClientSessionsRequest) Duration(duration string) ApiSearchOrgWirelessClientSessionsRequest {
	r.duration = &duration
	return r
}

func (r ApiSearchOrgWirelessClientSessionsRequest) Execute() (*SearchWirelssClientSession, *http.Response, error) {
	return r.ApiService.SearchOrgWirelessClientSessionsExecute(r)
}

/*
SearchOrgWirelessClientSessions searchOrgWirelessClientSessions

Search Org Wireless Clients Sessions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId
 @return ApiSearchOrgWirelessClientSessionsRequest
*/
func (a *OrgsClientsWirelessAPIService) SearchOrgWirelessClientSessions(ctx context.Context, orgId string) ApiSearchOrgWirelessClientSessionsRequest {
	return ApiSearchOrgWirelessClientSessionsRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
	}
}

// Execute executes the request
//  @return SearchWirelssClientSession
func (a *OrgsClientsWirelessAPIService) SearchOrgWirelessClientSessionsExecute(r ApiSearchOrgWirelessClientSessionsRequest) (*SearchWirelssClientSession, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchWirelssClientSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrgsClientsWirelessAPIService.SearchOrgWirelessClientSessions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/orgs/{org_id}/clients/sessions/search"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ap != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ap", r.ap, "")
	}
	if r.band != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "band", r.band, "")
	}
	if r.clientFamily != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_family", r.clientFamily, "")
	}
	if r.clientManufacture != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_manufacture", r.clientManufacture, "")
	}
	if r.clientModel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_model", r.clientModel, "")
	}
	if r.clientUsername != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_username", r.clientUsername, "")
	}
	if r.clientOs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_os", r.clientOs, "")
	}
	if r.ssid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssid", r.ssid, "")
	}
	if r.wlanId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wlan_id", r.wlanId, "")
	}
	if r.pskId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "psk_id", r.pskId, "")
	}
	if r.pskName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "psk_name", r.pskName, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchOrgWirelessClientsRequest struct {
	ctx context.Context
	ApiService OrgsClientsWirelessAPI
	orgId string
	siteId *string
	mac *string
	ipAddress *string
	hostname *string
	device *string
	os *string
	model *string
	ap *string
	pskId *string
	pskName *string
	vlan *string
	ssid *string
	text *string
	limit *int32
	start *int32
	end *int32
	duration *string
}

// Site ID
func (r ApiSearchOrgWirelessClientsRequest) SiteId(siteId string) ApiSearchOrgWirelessClientsRequest {
	r.siteId = &siteId
	return r
}

// partial / full MAC address
func (r ApiSearchOrgWirelessClientsRequest) Mac(mac string) ApiSearchOrgWirelessClientsRequest {
	r.mac = &mac
	return r
}

func (r ApiSearchOrgWirelessClientsRequest) IpAddress(ipAddress string) ApiSearchOrgWirelessClientsRequest {
	r.ipAddress = &ipAddress
	return r
}

// partial / full hostname
func (r ApiSearchOrgWirelessClientsRequest) Hostname(hostname string) ApiSearchOrgWirelessClientsRequest {
	r.hostname = &hostname
	return r
}

// device type, e.g. Mac, Nvidia, iPhone
func (r ApiSearchOrgWirelessClientsRequest) Device(device string) ApiSearchOrgWirelessClientsRequest {
	r.device = &device
	return r
}

// os, e.g. Sierra, Yosemite, Windows 10
func (r ApiSearchOrgWirelessClientsRequest) Os(os string) ApiSearchOrgWirelessClientsRequest {
	r.os = &os
	return r
}

// model, e.g. “MBP 15 late 2013”, 6, 6s, “8+ GSM”
func (r ApiSearchOrgWirelessClientsRequest) Model(model string) ApiSearchOrgWirelessClientsRequest {
	r.model = &model
	return r
}

// AP mac where the client has connected to
func (r ApiSearchOrgWirelessClientsRequest) Ap(ap string) ApiSearchOrgWirelessClientsRequest {
	r.ap = &ap
	return r
}

// PSK ID
func (r ApiSearchOrgWirelessClientsRequest) PskId(pskId string) ApiSearchOrgWirelessClientsRequest {
	r.pskId = &pskId
	return r
}

// PSK Name
func (r ApiSearchOrgWirelessClientsRequest) PskName(pskName string) ApiSearchOrgWirelessClientsRequest {
	r.pskName = &pskName
	return r
}

// vlan
func (r ApiSearchOrgWirelessClientsRequest) Vlan(vlan string) ApiSearchOrgWirelessClientsRequest {
	r.vlan = &vlan
	return r
}

// SSID
func (r ApiSearchOrgWirelessClientsRequest) Ssid(ssid string) ApiSearchOrgWirelessClientsRequest {
	r.ssid = &ssid
	return r
}

// partial / full MAC address, hostname, username, psk_name or ip
func (r ApiSearchOrgWirelessClientsRequest) Text(text string) ApiSearchOrgWirelessClientsRequest {
	r.text = &text
	return r
}

func (r ApiSearchOrgWirelessClientsRequest) Limit(limit int32) ApiSearchOrgWirelessClientsRequest {
	r.limit = &limit
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiSearchOrgWirelessClientsRequest) Start(start int32) ApiSearchOrgWirelessClientsRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiSearchOrgWirelessClientsRequest) End(end int32) ApiSearchOrgWirelessClientsRequest {
	r.end = &end
	return r
}

// duration like 7d, 2w
func (r ApiSearchOrgWirelessClientsRequest) Duration(duration string) ApiSearchOrgWirelessClientsRequest {
	r.duration = &duration
	return r
}

func (r ApiSearchOrgWirelessClientsRequest) Execute() (*ResponseClientSearch, *http.Response, error) {
	return r.ApiService.SearchOrgWirelessClientsExecute(r)
}

/*
SearchOrgWirelessClients searchOrgWirelessClients

Search Org Wireless Clients

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId
 @return ApiSearchOrgWirelessClientsRequest
*/
func (a *OrgsClientsWirelessAPIService) SearchOrgWirelessClients(ctx context.Context, orgId string) ApiSearchOrgWirelessClientsRequest {
	return ApiSearchOrgWirelessClientsRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
	}
}

// Execute executes the request
//  @return ResponseClientSearch
func (a *OrgsClientsWirelessAPIService) SearchOrgWirelessClientsExecute(r ApiSearchOrgWirelessClientsRequest) (*ResponseClientSearch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseClientSearch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrgsClientsWirelessAPIService.SearchOrgWirelessClients")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/orgs/{org_id}/clients/search"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.siteId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", r.siteId, "")
	}
	if r.mac != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mac", r.mac, "")
	}
	if r.ipAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ip_address", r.ipAddress, "")
	}
	if r.hostname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hostname", r.hostname, "")
	}
	if r.device != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "device", r.device, "")
	}
	if r.os != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "os", r.os, "")
	}
	if r.model != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "model", r.model, "")
	}
	if r.ap != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ap", r.ap, "")
	}
	if r.pskId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "psk_id", r.pskId, "")
	}
	if r.pskName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "psk_name", r.pskName, "")
	}
	if r.vlan != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vlan", r.vlan, "")
	}
	if r.ssid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssid", r.ssid, "")
	}
	if r.text != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "text", r.text, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
