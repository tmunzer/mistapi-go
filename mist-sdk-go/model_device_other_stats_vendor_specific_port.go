/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the DeviceOtherStatsVendorSpecificPort type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceOtherStatsVendorSpecificPort{}

// DeviceOtherStatsVendorSpecificPort struct for DeviceOtherStatsVendorSpecificPort
type DeviceOtherStatsVendorSpecificPort struct {
	BytesIn *int32 `json:"bytes_in,omitempty"`
	BytesOut *int32 `json:"bytes_out,omitempty"`
	HealthCategory *string `json:"health_category,omitempty"`
	HealthScore *int32 `json:"health_score,omitempty"`
	Id *string `json:"id,omitempty"`
	Mode *string `json:"mode,omitempty"`
	Model *string `json:"model,omitempty"`
	State *string `json:"state,omitempty"`
	Type *string `json:"type,omitempty"`
	Uptime *float32 `json:"uptime,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeviceOtherStatsVendorSpecificPort DeviceOtherStatsVendorSpecificPort

// NewDeviceOtherStatsVendorSpecificPort instantiates a new DeviceOtherStatsVendorSpecificPort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceOtherStatsVendorSpecificPort() *DeviceOtherStatsVendorSpecificPort {
	this := DeviceOtherStatsVendorSpecificPort{}
	return &this
}

// NewDeviceOtherStatsVendorSpecificPortWithDefaults instantiates a new DeviceOtherStatsVendorSpecificPort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceOtherStatsVendorSpecificPortWithDefaults() *DeviceOtherStatsVendorSpecificPort {
	this := DeviceOtherStatsVendorSpecificPort{}
	return &this
}

// GetBytesIn returns the BytesIn field value if set, zero value otherwise.
func (o *DeviceOtherStatsVendorSpecificPort) GetBytesIn() int32 {
	if o == nil || IsNil(o.BytesIn) {
		var ret int32
		return ret
	}
	return *o.BytesIn
}

// GetBytesInOk returns a tuple with the BytesIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceOtherStatsVendorSpecificPort) GetBytesInOk() (*int32, bool) {
	if o == nil || IsNil(o.BytesIn) {
		return nil, false
	}
	return o.BytesIn, true
}

// HasBytesIn returns a boolean if a field has been set.
func (o *DeviceOtherStatsVendorSpecificPort) HasBytesIn() bool {
	if o != nil && !IsNil(o.BytesIn) {
		return true
	}

	return false
}

// SetBytesIn gets a reference to the given int32 and assigns it to the BytesIn field.
func (o *DeviceOtherStatsVendorSpecificPort) SetBytesIn(v int32) {
	o.BytesIn = &v
}

// GetBytesOut returns the BytesOut field value if set, zero value otherwise.
func (o *DeviceOtherStatsVendorSpecificPort) GetBytesOut() int32 {
	if o == nil || IsNil(o.BytesOut) {
		var ret int32
		return ret
	}
	return *o.BytesOut
}

// GetBytesOutOk returns a tuple with the BytesOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceOtherStatsVendorSpecificPort) GetBytesOutOk() (*int32, bool) {
	if o == nil || IsNil(o.BytesOut) {
		return nil, false
	}
	return o.BytesOut, true
}

// HasBytesOut returns a boolean if a field has been set.
func (o *DeviceOtherStatsVendorSpecificPort) HasBytesOut() bool {
	if o != nil && !IsNil(o.BytesOut) {
		return true
	}

	return false
}

// SetBytesOut gets a reference to the given int32 and assigns it to the BytesOut field.
func (o *DeviceOtherStatsVendorSpecificPort) SetBytesOut(v int32) {
	o.BytesOut = &v
}

// GetHealthCategory returns the HealthCategory field value if set, zero value otherwise.
func (o *DeviceOtherStatsVendorSpecificPort) GetHealthCategory() string {
	if o == nil || IsNil(o.HealthCategory) {
		var ret string
		return ret
	}
	return *o.HealthCategory
}

// GetHealthCategoryOk returns a tuple with the HealthCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceOtherStatsVendorSpecificPort) GetHealthCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.HealthCategory) {
		return nil, false
	}
	return o.HealthCategory, true
}

// HasHealthCategory returns a boolean if a field has been set.
func (o *DeviceOtherStatsVendorSpecificPort) HasHealthCategory() bool {
	if o != nil && !IsNil(o.HealthCategory) {
		return true
	}

	return false
}

// SetHealthCategory gets a reference to the given string and assigns it to the HealthCategory field.
func (o *DeviceOtherStatsVendorSpecificPort) SetHealthCategory(v string) {
	o.HealthCategory = &v
}

// GetHealthScore returns the HealthScore field value if set, zero value otherwise.
func (o *DeviceOtherStatsVendorSpecificPort) GetHealthScore() int32 {
	if o == nil || IsNil(o.HealthScore) {
		var ret int32
		return ret
	}
	return *o.HealthScore
}

// GetHealthScoreOk returns a tuple with the HealthScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceOtherStatsVendorSpecificPort) GetHealthScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.HealthScore) {
		return nil, false
	}
	return o.HealthScore, true
}

// HasHealthScore returns a boolean if a field has been set.
func (o *DeviceOtherStatsVendorSpecificPort) HasHealthScore() bool {
	if o != nil && !IsNil(o.HealthScore) {
		return true
	}

	return false
}

// SetHealthScore gets a reference to the given int32 and assigns it to the HealthScore field.
func (o *DeviceOtherStatsVendorSpecificPort) SetHealthScore(v int32) {
	o.HealthScore = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeviceOtherStatsVendorSpecificPort) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceOtherStatsVendorSpecificPort) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeviceOtherStatsVendorSpecificPort) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DeviceOtherStatsVendorSpecificPort) SetId(v string) {
	o.Id = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *DeviceOtherStatsVendorSpecificPort) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceOtherStatsVendorSpecificPort) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *DeviceOtherStatsVendorSpecificPort) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *DeviceOtherStatsVendorSpecificPort) SetMode(v string) {
	o.Mode = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *DeviceOtherStatsVendorSpecificPort) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceOtherStatsVendorSpecificPort) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *DeviceOtherStatsVendorSpecificPort) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *DeviceOtherStatsVendorSpecificPort) SetModel(v string) {
	o.Model = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *DeviceOtherStatsVendorSpecificPort) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceOtherStatsVendorSpecificPort) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *DeviceOtherStatsVendorSpecificPort) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *DeviceOtherStatsVendorSpecificPort) SetState(v string) {
	o.State = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DeviceOtherStatsVendorSpecificPort) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceOtherStatsVendorSpecificPort) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DeviceOtherStatsVendorSpecificPort) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DeviceOtherStatsVendorSpecificPort) SetType(v string) {
	o.Type = &v
}

// GetUptime returns the Uptime field value if set, zero value otherwise.
func (o *DeviceOtherStatsVendorSpecificPort) GetUptime() float32 {
	if o == nil || IsNil(o.Uptime) {
		var ret float32
		return ret
	}
	return *o.Uptime
}

// GetUptimeOk returns a tuple with the Uptime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceOtherStatsVendorSpecificPort) GetUptimeOk() (*float32, bool) {
	if o == nil || IsNil(o.Uptime) {
		return nil, false
	}
	return o.Uptime, true
}

// HasUptime returns a boolean if a field has been set.
func (o *DeviceOtherStatsVendorSpecificPort) HasUptime() bool {
	if o != nil && !IsNil(o.Uptime) {
		return true
	}

	return false
}

// SetUptime gets a reference to the given float32 and assigns it to the Uptime field.
func (o *DeviceOtherStatsVendorSpecificPort) SetUptime(v float32) {
	o.Uptime = &v
}

func (o DeviceOtherStatsVendorSpecificPort) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceOtherStatsVendorSpecificPort) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BytesIn) {
		toSerialize["bytes_in"] = o.BytesIn
	}
	if !IsNil(o.BytesOut) {
		toSerialize["bytes_out"] = o.BytesOut
	}
	if !IsNil(o.HealthCategory) {
		toSerialize["health_category"] = o.HealthCategory
	}
	if !IsNil(o.HealthScore) {
		toSerialize["health_score"] = o.HealthScore
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Uptime) {
		toSerialize["uptime"] = o.Uptime
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceOtherStatsVendorSpecificPort) UnmarshalJSON(data []byte) (err error) {
	varDeviceOtherStatsVendorSpecificPort := _DeviceOtherStatsVendorSpecificPort{}

	err = json.Unmarshal(data, &varDeviceOtherStatsVendorSpecificPort)

	if err != nil {
		return err
	}

	*o = DeviceOtherStatsVendorSpecificPort(varDeviceOtherStatsVendorSpecificPort)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "bytes_in")
		delete(additionalProperties, "bytes_out")
		delete(additionalProperties, "health_category")
		delete(additionalProperties, "health_score")
		delete(additionalProperties, "id")
		delete(additionalProperties, "mode")
		delete(additionalProperties, "model")
		delete(additionalProperties, "state")
		delete(additionalProperties, "type")
		delete(additionalProperties, "uptime")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceOtherStatsVendorSpecificPort struct {
	value *DeviceOtherStatsVendorSpecificPort
	isSet bool
}

func (v NullableDeviceOtherStatsVendorSpecificPort) Get() *DeviceOtherStatsVendorSpecificPort {
	return v.value
}

func (v *NullableDeviceOtherStatsVendorSpecificPort) Set(val *DeviceOtherStatsVendorSpecificPort) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceOtherStatsVendorSpecificPort) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceOtherStatsVendorSpecificPort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceOtherStatsVendorSpecificPort(val *DeviceOtherStatsVendorSpecificPort) *NullableDeviceOtherStatsVendorSpecificPort {
	return &NullableDeviceOtherStatsVendorSpecificPort{value: val, isSet: true}
}

func (v NullableDeviceOtherStatsVendorSpecificPort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceOtherStatsVendorSpecificPort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


