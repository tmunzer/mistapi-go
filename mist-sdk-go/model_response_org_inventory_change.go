/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the ResponseOrgInventoryChange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseOrgInventoryChange{}

// ResponseOrgInventoryChange struct for ResponseOrgInventoryChange
type ResponseOrgInventoryChange struct {
	Error []string `json:"error"`
	Op ResponseOrgInventoryChangeOp `json:"op"`
	Reason []string `json:"reason"`
	Success []string `json:"success"`
	AdditionalProperties map[string]interface{}
}

type _ResponseOrgInventoryChange ResponseOrgInventoryChange

// NewResponseOrgInventoryChange instantiates a new ResponseOrgInventoryChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseOrgInventoryChange(error_ []string, op ResponseOrgInventoryChangeOp, reason []string, success []string) *ResponseOrgInventoryChange {
	this := ResponseOrgInventoryChange{}
	this.Error = error_
	this.Op = op
	this.Reason = reason
	this.Success = success
	return &this
}

// NewResponseOrgInventoryChangeWithDefaults instantiates a new ResponseOrgInventoryChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseOrgInventoryChangeWithDefaults() *ResponseOrgInventoryChange {
	this := ResponseOrgInventoryChange{}
	return &this
}

// GetError returns the Error field value
func (o *ResponseOrgInventoryChange) GetError() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *ResponseOrgInventoryChange) GetErrorOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Error, true
}

// SetError sets field value
func (o *ResponseOrgInventoryChange) SetError(v []string) {
	o.Error = v
}

// GetOp returns the Op field value
func (o *ResponseOrgInventoryChange) GetOp() ResponseOrgInventoryChangeOp {
	if o == nil {
		var ret ResponseOrgInventoryChangeOp
		return ret
	}

	return o.Op
}

// GetOpOk returns a tuple with the Op field value
// and a boolean to check if the value has been set.
func (o *ResponseOrgInventoryChange) GetOpOk() (*ResponseOrgInventoryChangeOp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Op, true
}

// SetOp sets field value
func (o *ResponseOrgInventoryChange) SetOp(v ResponseOrgInventoryChangeOp) {
	o.Op = v
}

// GetReason returns the Reason field value
func (o *ResponseOrgInventoryChange) GetReason() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *ResponseOrgInventoryChange) GetReasonOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reason, true
}

// SetReason sets field value
func (o *ResponseOrgInventoryChange) SetReason(v []string) {
	o.Reason = v
}

// GetSuccess returns the Success field value
func (o *ResponseOrgInventoryChange) GetSuccess() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *ResponseOrgInventoryChange) GetSuccessOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Success, true
}

// SetSuccess sets field value
func (o *ResponseOrgInventoryChange) SetSuccess(v []string) {
	o.Success = v
}

func (o ResponseOrgInventoryChange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseOrgInventoryChange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["error"] = o.Error
	toSerialize["op"] = o.Op
	toSerialize["reason"] = o.Reason
	toSerialize["success"] = o.Success

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResponseOrgInventoryChange) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"error",
		"op",
		"reason",
		"success",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResponseOrgInventoryChange := _ResponseOrgInventoryChange{}

	err = json.Unmarshal(data, &varResponseOrgInventoryChange)

	if err != nil {
		return err
	}

	*o = ResponseOrgInventoryChange(varResponseOrgInventoryChange)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "error")
		delete(additionalProperties, "op")
		delete(additionalProperties, "reason")
		delete(additionalProperties, "success")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResponseOrgInventoryChange struct {
	value *ResponseOrgInventoryChange
	isSet bool
}

func (v NullableResponseOrgInventoryChange) Get() *ResponseOrgInventoryChange {
	return v.value
}

func (v *NullableResponseOrgInventoryChange) Set(val *ResponseOrgInventoryChange) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseOrgInventoryChange) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseOrgInventoryChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseOrgInventoryChange(val *ResponseOrgInventoryChange) *NullableResponseOrgInventoryChange {
	return &NullableResponseOrgInventoryChange{value: val, isSet: true}
}

func (v NullableResponseOrgInventoryChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseOrgInventoryChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


