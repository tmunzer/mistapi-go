/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// WxlanTagMatch the model 'WxlanTagMatch'
type WxlanTagMatch string

// List of wxlan_tag_match
const (
	WXLANTAGMATCH_EMPTY WxlanTagMatch = ""
	WXLANTAGMATCH_AP_ID WxlanTagMatch = "ap_id"
	WXLANTAGMATCH_APP WxlanTagMatch = "app"
	WXLANTAGMATCH_ASSET_MAC WxlanTagMatch = "asset_mac"
	WXLANTAGMATCH_CLIENT_MAC WxlanTagMatch = "client_mac"
	WXLANTAGMATCH_HOSTNAME WxlanTagMatch = "hostname"
	WXLANTAGMATCH_IP_RANGE_SUBNET WxlanTagMatch = "ip_range_subnet"
	WXLANTAGMATCH_PORT WxlanTagMatch = "port"
	WXLANTAGMATCH_RADIUS_ATTR WxlanTagMatch = "radius_attr"
	WXLANTAGMATCH_RADIUS_GROUP WxlanTagMatch = "radius_group"
	WXLANTAGMATCH_RADIUS_USERNAME WxlanTagMatch = "radius_username"
	WXLANTAGMATCH_WLAN_ID WxlanTagMatch = "wlan_id"
	WXLANTAGMATCH_PSK_NAME WxlanTagMatch = "psk_name"
	WXLANTAGMATCH_PSK_ROLE WxlanTagMatch = "psk_role"
)

// All allowed values of WxlanTagMatch enum
var AllowedWxlanTagMatchEnumValues = []WxlanTagMatch{
	"",
	"ap_id",
	"app",
	"asset_mac",
	"client_mac",
	"hostname",
	"ip_range_subnet",
	"port",
	"radius_attr",
	"radius_group",
	"radius_username",
	"wlan_id",
	"psk_name",
	"psk_role",
}

func (v *WxlanTagMatch) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WxlanTagMatch(value)
	for _, existing := range AllowedWxlanTagMatchEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WxlanTagMatch", value)
}

// NewWxlanTagMatchFromValue returns a pointer to a valid WxlanTagMatch
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWxlanTagMatchFromValue(v string) (*WxlanTagMatch, error) {
	ev := WxlanTagMatch(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WxlanTagMatch: valid values are %v", v, AllowedWxlanTagMatchEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WxlanTagMatch) IsValid() bool {
	for _, existing := range AllowedWxlanTagMatchEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to wxlan_tag_match value
func (v WxlanTagMatch) Ptr() *WxlanTagMatch {
	return &v
}

type NullableWxlanTagMatch struct {
	value *WxlanTagMatch
	isSet bool
}

func (v NullableWxlanTagMatch) Get() *WxlanTagMatch {
	return v.value
}

func (v *NullableWxlanTagMatch) Set(val *WxlanTagMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableWxlanTagMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableWxlanTagMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWxlanTagMatch(val *WxlanTagMatch) *NullableWxlanTagMatch {
	return &NullableWxlanTagMatch{value: val, isSet: true}
}

func (v NullableWxlanTagMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWxlanTagMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

