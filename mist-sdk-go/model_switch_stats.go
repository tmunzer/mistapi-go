/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the SwitchStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwitchStats{}

// SwitchStats Switch statistics
type SwitchStats struct {
	ApRedundancy *SwitchStatsApRedundancy `json:"ap_redundancy,omitempty"`
	Clients []SwitchStatsClient `json:"clients,omitempty"`
	CpuStat *CpuStat `json:"cpu_stat,omitempty"`
	// whether the switch supports packet capture
	HasPcap *bool `json:"has_pcap,omitempty"`
	// hostname reported by the device
	Hostname *string `json:"hostname,omitempty"`
	// Property key is the interface name
	IfStat *map[string]SwitchStatsIfStat `json:"if_stat,omitempty"`
	Ip *string `json:"ip,omitempty"`
	IpStat *IpStat `json:"ip_stat,omitempty"`
	LastSeen *int32 `json:"last_seen,omitempty"`
	LastTrouble *LastTrouble `json:"last_trouble,omitempty"`
	Mac *MemoryStat `json:"mac,omitempty"`
	Model *string `json:"model,omitempty"`
	ModuleStat []ModuleStat `json:"module_stat,omitempty"`
	// device name if configured
	Name *string `json:"name,omitempty"`
	NumClients *SwitchStatsNumClients `json:"num_clients,omitempty"`
	Serial *string `json:"serial,omitempty"`
	Status *string `json:"status,omitempty"`
	Type *string `json:"type,omitempty"`
	Uptime *float32 `json:"uptime,omitempty"`
	Version *string `json:"version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SwitchStats SwitchStats

// NewSwitchStats instantiates a new SwitchStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwitchStats() *SwitchStats {
	this := SwitchStats{}
	return &this
}

// NewSwitchStatsWithDefaults instantiates a new SwitchStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwitchStatsWithDefaults() *SwitchStats {
	this := SwitchStats{}
	return &this
}

// GetApRedundancy returns the ApRedundancy field value if set, zero value otherwise.
func (o *SwitchStats) GetApRedundancy() SwitchStatsApRedundancy {
	if o == nil || IsNil(o.ApRedundancy) {
		var ret SwitchStatsApRedundancy
		return ret
	}
	return *o.ApRedundancy
}

// GetApRedundancyOk returns a tuple with the ApRedundancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchStats) GetApRedundancyOk() (*SwitchStatsApRedundancy, bool) {
	if o == nil || IsNil(o.ApRedundancy) {
		return nil, false
	}
	return o.ApRedundancy, true
}

// HasApRedundancy returns a boolean if a field has been set.
func (o *SwitchStats) HasApRedundancy() bool {
	if o != nil && !IsNil(o.ApRedundancy) {
		return true
	}

	return false
}

// SetApRedundancy gets a reference to the given SwitchStatsApRedundancy and assigns it to the ApRedundancy field.
func (o *SwitchStats) SetApRedundancy(v SwitchStatsApRedundancy) {
	o.ApRedundancy = &v
}

// GetClients returns the Clients field value if set, zero value otherwise.
func (o *SwitchStats) GetClients() []SwitchStatsClient {
	if o == nil || IsNil(o.Clients) {
		var ret []SwitchStatsClient
		return ret
	}
	return o.Clients
}

// GetClientsOk returns a tuple with the Clients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchStats) GetClientsOk() ([]SwitchStatsClient, bool) {
	if o == nil || IsNil(o.Clients) {
		return nil, false
	}
	return o.Clients, true
}

// HasClients returns a boolean if a field has been set.
func (o *SwitchStats) HasClients() bool {
	if o != nil && !IsNil(o.Clients) {
		return true
	}

	return false
}

// SetClients gets a reference to the given []SwitchStatsClient and assigns it to the Clients field.
func (o *SwitchStats) SetClients(v []SwitchStatsClient) {
	o.Clients = v
}

// GetCpuStat returns the CpuStat field value if set, zero value otherwise.
func (o *SwitchStats) GetCpuStat() CpuStat {
	if o == nil || IsNil(o.CpuStat) {
		var ret CpuStat
		return ret
	}
	return *o.CpuStat
}

// GetCpuStatOk returns a tuple with the CpuStat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchStats) GetCpuStatOk() (*CpuStat, bool) {
	if o == nil || IsNil(o.CpuStat) {
		return nil, false
	}
	return o.CpuStat, true
}

// HasCpuStat returns a boolean if a field has been set.
func (o *SwitchStats) HasCpuStat() bool {
	if o != nil && !IsNil(o.CpuStat) {
		return true
	}

	return false
}

// SetCpuStat gets a reference to the given CpuStat and assigns it to the CpuStat field.
func (o *SwitchStats) SetCpuStat(v CpuStat) {
	o.CpuStat = &v
}

// GetHasPcap returns the HasPcap field value if set, zero value otherwise.
func (o *SwitchStats) GetHasPcap() bool {
	if o == nil || IsNil(o.HasPcap) {
		var ret bool
		return ret
	}
	return *o.HasPcap
}

// GetHasPcapOk returns a tuple with the HasPcap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchStats) GetHasPcapOk() (*bool, bool) {
	if o == nil || IsNil(o.HasPcap) {
		return nil, false
	}
	return o.HasPcap, true
}

// HasHasPcap returns a boolean if a field has been set.
func (o *SwitchStats) HasHasPcap() bool {
	if o != nil && !IsNil(o.HasPcap) {
		return true
	}

	return false
}

// SetHasPcap gets a reference to the given bool and assigns it to the HasPcap field.
func (o *SwitchStats) SetHasPcap(v bool) {
	o.HasPcap = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *SwitchStats) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchStats) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *SwitchStats) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *SwitchStats) SetHostname(v string) {
	o.Hostname = &v
}

// GetIfStat returns the IfStat field value if set, zero value otherwise.
func (o *SwitchStats) GetIfStat() map[string]SwitchStatsIfStat {
	if o == nil || IsNil(o.IfStat) {
		var ret map[string]SwitchStatsIfStat
		return ret
	}
	return *o.IfStat
}

// GetIfStatOk returns a tuple with the IfStat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchStats) GetIfStatOk() (*map[string]SwitchStatsIfStat, bool) {
	if o == nil || IsNil(o.IfStat) {
		return nil, false
	}
	return o.IfStat, true
}

// HasIfStat returns a boolean if a field has been set.
func (o *SwitchStats) HasIfStat() bool {
	if o != nil && !IsNil(o.IfStat) {
		return true
	}

	return false
}

// SetIfStat gets a reference to the given map[string]SwitchStatsIfStat and assigns it to the IfStat field.
func (o *SwitchStats) SetIfStat(v map[string]SwitchStatsIfStat) {
	o.IfStat = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *SwitchStats) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchStats) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *SwitchStats) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *SwitchStats) SetIp(v string) {
	o.Ip = &v
}

// GetIpStat returns the IpStat field value if set, zero value otherwise.
func (o *SwitchStats) GetIpStat() IpStat {
	if o == nil || IsNil(o.IpStat) {
		var ret IpStat
		return ret
	}
	return *o.IpStat
}

// GetIpStatOk returns a tuple with the IpStat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchStats) GetIpStatOk() (*IpStat, bool) {
	if o == nil || IsNil(o.IpStat) {
		return nil, false
	}
	return o.IpStat, true
}

// HasIpStat returns a boolean if a field has been set.
func (o *SwitchStats) HasIpStat() bool {
	if o != nil && !IsNil(o.IpStat) {
		return true
	}

	return false
}

// SetIpStat gets a reference to the given IpStat and assigns it to the IpStat field.
func (o *SwitchStats) SetIpStat(v IpStat) {
	o.IpStat = &v
}

// GetLastSeen returns the LastSeen field value if set, zero value otherwise.
func (o *SwitchStats) GetLastSeen() int32 {
	if o == nil || IsNil(o.LastSeen) {
		var ret int32
		return ret
	}
	return *o.LastSeen
}

// GetLastSeenOk returns a tuple with the LastSeen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchStats) GetLastSeenOk() (*int32, bool) {
	if o == nil || IsNil(o.LastSeen) {
		return nil, false
	}
	return o.LastSeen, true
}

// HasLastSeen returns a boolean if a field has been set.
func (o *SwitchStats) HasLastSeen() bool {
	if o != nil && !IsNil(o.LastSeen) {
		return true
	}

	return false
}

// SetLastSeen gets a reference to the given int32 and assigns it to the LastSeen field.
func (o *SwitchStats) SetLastSeen(v int32) {
	o.LastSeen = &v
}

// GetLastTrouble returns the LastTrouble field value if set, zero value otherwise.
func (o *SwitchStats) GetLastTrouble() LastTrouble {
	if o == nil || IsNil(o.LastTrouble) {
		var ret LastTrouble
		return ret
	}
	return *o.LastTrouble
}

// GetLastTroubleOk returns a tuple with the LastTrouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchStats) GetLastTroubleOk() (*LastTrouble, bool) {
	if o == nil || IsNil(o.LastTrouble) {
		return nil, false
	}
	return o.LastTrouble, true
}

// HasLastTrouble returns a boolean if a field has been set.
func (o *SwitchStats) HasLastTrouble() bool {
	if o != nil && !IsNil(o.LastTrouble) {
		return true
	}

	return false
}

// SetLastTrouble gets a reference to the given LastTrouble and assigns it to the LastTrouble field.
func (o *SwitchStats) SetLastTrouble(v LastTrouble) {
	o.LastTrouble = &v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *SwitchStats) GetMac() MemoryStat {
	if o == nil || IsNil(o.Mac) {
		var ret MemoryStat
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchStats) GetMacOk() (*MemoryStat, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *SwitchStats) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given MemoryStat and assigns it to the Mac field.
func (o *SwitchStats) SetMac(v MemoryStat) {
	o.Mac = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *SwitchStats) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchStats) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *SwitchStats) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *SwitchStats) SetModel(v string) {
	o.Model = &v
}

// GetModuleStat returns the ModuleStat field value if set, zero value otherwise.
func (o *SwitchStats) GetModuleStat() []ModuleStat {
	if o == nil || IsNil(o.ModuleStat) {
		var ret []ModuleStat
		return ret
	}
	return o.ModuleStat
}

// GetModuleStatOk returns a tuple with the ModuleStat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchStats) GetModuleStatOk() ([]ModuleStat, bool) {
	if o == nil || IsNil(o.ModuleStat) {
		return nil, false
	}
	return o.ModuleStat, true
}

// HasModuleStat returns a boolean if a field has been set.
func (o *SwitchStats) HasModuleStat() bool {
	if o != nil && !IsNil(o.ModuleStat) {
		return true
	}

	return false
}

// SetModuleStat gets a reference to the given []ModuleStat and assigns it to the ModuleStat field.
func (o *SwitchStats) SetModuleStat(v []ModuleStat) {
	o.ModuleStat = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SwitchStats) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchStats) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SwitchStats) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SwitchStats) SetName(v string) {
	o.Name = &v
}

// GetNumClients returns the NumClients field value if set, zero value otherwise.
func (o *SwitchStats) GetNumClients() SwitchStatsNumClients {
	if o == nil || IsNil(o.NumClients) {
		var ret SwitchStatsNumClients
		return ret
	}
	return *o.NumClients
}

// GetNumClientsOk returns a tuple with the NumClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchStats) GetNumClientsOk() (*SwitchStatsNumClients, bool) {
	if o == nil || IsNil(o.NumClients) {
		return nil, false
	}
	return o.NumClients, true
}

// HasNumClients returns a boolean if a field has been set.
func (o *SwitchStats) HasNumClients() bool {
	if o != nil && !IsNil(o.NumClients) {
		return true
	}

	return false
}

// SetNumClients gets a reference to the given SwitchStatsNumClients and assigns it to the NumClients field.
func (o *SwitchStats) SetNumClients(v SwitchStatsNumClients) {
	o.NumClients = &v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *SwitchStats) GetSerial() string {
	if o == nil || IsNil(o.Serial) {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchStats) GetSerialOk() (*string, bool) {
	if o == nil || IsNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *SwitchStats) HasSerial() bool {
	if o != nil && !IsNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *SwitchStats) SetSerial(v string) {
	o.Serial = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SwitchStats) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchStats) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SwitchStats) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SwitchStats) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SwitchStats) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchStats) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SwitchStats) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SwitchStats) SetType(v string) {
	o.Type = &v
}

// GetUptime returns the Uptime field value if set, zero value otherwise.
func (o *SwitchStats) GetUptime() float32 {
	if o == nil || IsNil(o.Uptime) {
		var ret float32
		return ret
	}
	return *o.Uptime
}

// GetUptimeOk returns a tuple with the Uptime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchStats) GetUptimeOk() (*float32, bool) {
	if o == nil || IsNil(o.Uptime) {
		return nil, false
	}
	return o.Uptime, true
}

// HasUptime returns a boolean if a field has been set.
func (o *SwitchStats) HasUptime() bool {
	if o != nil && !IsNil(o.Uptime) {
		return true
	}

	return false
}

// SetUptime gets a reference to the given float32 and assigns it to the Uptime field.
func (o *SwitchStats) SetUptime(v float32) {
	o.Uptime = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *SwitchStats) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwitchStats) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *SwitchStats) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *SwitchStats) SetVersion(v string) {
	o.Version = &v
}

func (o SwitchStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwitchStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApRedundancy) {
		toSerialize["ap_redundancy"] = o.ApRedundancy
	}
	if !IsNil(o.Clients) {
		toSerialize["clients"] = o.Clients
	}
	if !IsNil(o.CpuStat) {
		toSerialize["cpu_stat"] = o.CpuStat
	}
	if !IsNil(o.HasPcap) {
		toSerialize["has_pcap"] = o.HasPcap
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.IfStat) {
		toSerialize["if_stat"] = o.IfStat
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.IpStat) {
		toSerialize["ip_stat"] = o.IpStat
	}
	if !IsNil(o.LastSeen) {
		toSerialize["last_seen"] = o.LastSeen
	}
	if !IsNil(o.LastTrouble) {
		toSerialize["last_trouble"] = o.LastTrouble
	}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.ModuleStat) {
		toSerialize["module_stat"] = o.ModuleStat
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NumClients) {
		toSerialize["num_clients"] = o.NumClients
	}
	if !IsNil(o.Serial) {
		toSerialize["serial"] = o.Serial
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Uptime) {
		toSerialize["uptime"] = o.Uptime
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SwitchStats) UnmarshalJSON(data []byte) (err error) {
	varSwitchStats := _SwitchStats{}

	err = json.Unmarshal(data, &varSwitchStats)

	if err != nil {
		return err
	}

	*o = SwitchStats(varSwitchStats)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ap_redundancy")
		delete(additionalProperties, "clients")
		delete(additionalProperties, "cpu_stat")
		delete(additionalProperties, "has_pcap")
		delete(additionalProperties, "hostname")
		delete(additionalProperties, "if_stat")
		delete(additionalProperties, "ip")
		delete(additionalProperties, "ip_stat")
		delete(additionalProperties, "last_seen")
		delete(additionalProperties, "last_trouble")
		delete(additionalProperties, "mac")
		delete(additionalProperties, "model")
		delete(additionalProperties, "module_stat")
		delete(additionalProperties, "name")
		delete(additionalProperties, "num_clients")
		delete(additionalProperties, "serial")
		delete(additionalProperties, "status")
		delete(additionalProperties, "type")
		delete(additionalProperties, "uptime")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSwitchStats struct {
	value *SwitchStats
	isSet bool
}

func (v NullableSwitchStats) Get() *SwitchStats {
	return v.value
}

func (v *NullableSwitchStats) Set(val *SwitchStats) {
	v.value = val
	v.isSet = true
}

func (v NullableSwitchStats) IsSet() bool {
	return v.isSet
}

func (v *NullableSwitchStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwitchStats(val *SwitchStats) *NullableSwitchStats {
	return &NullableSwitchStats{value: val, isSet: true}
}

func (v NullableSwitchStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwitchStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


