/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// SiteAssetsCountDistinct the model 'SiteAssetsCountDistinct'
type SiteAssetsCountDistinct string

// List of site_assets_count_distinct
const (
	SITEASSETSCOUNTDISTINCT_EMPTY SiteAssetsCountDistinct = ""
	SITEASSETSCOUNTDISTINCT_MAC SiteAssetsCountDistinct = "mac"
	SITEASSETSCOUNTDISTINCT_MAP_ID SiteAssetsCountDistinct = "map_id"
	SITEASSETSCOUNTDISTINCT_IBEACON_UUID SiteAssetsCountDistinct = "ibeacon_uuid"
	SITEASSETSCOUNTDISTINCT_IBEACON_MAJOR SiteAssetsCountDistinct = "ibeacon_major"
	SITEASSETSCOUNTDISTINCT_IBEACON_MINOR SiteAssetsCountDistinct = "ibeacon_minor"
	SITEASSETSCOUNTDISTINCT_EDDYSTONE_UID_NAMESPACE SiteAssetsCountDistinct = "eddystone_uid_namespace"
	SITEASSETSCOUNTDISTINCT_EDDYSTONE_UID_INSTANCE SiteAssetsCountDistinct = "eddystone_uid_instance"
	SITEASSETSCOUNTDISTINCT_EDDYSTONE_URL SiteAssetsCountDistinct = "eddystone_url"
	SITEASSETSCOUNTDISTINCT_BY SiteAssetsCountDistinct = "by"
	SITEASSETSCOUNTDISTINCT_NAME SiteAssetsCountDistinct = "name"
	SITEASSETSCOUNTDISTINCT_DEVICE_NAME SiteAssetsCountDistinct = "device_name"
)

// All allowed values of SiteAssetsCountDistinct enum
var AllowedSiteAssetsCountDistinctEnumValues = []SiteAssetsCountDistinct{
	"",
	"mac",
	"map_id",
	"ibeacon_uuid",
	"ibeacon_major",
	"ibeacon_minor",
	"eddystone_uid_namespace",
	"eddystone_uid_instance",
	"eddystone_url",
	"by",
	"name",
	"device_name",
}

func (v *SiteAssetsCountDistinct) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SiteAssetsCountDistinct(value)
	for _, existing := range AllowedSiteAssetsCountDistinctEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SiteAssetsCountDistinct", value)
}

// NewSiteAssetsCountDistinctFromValue returns a pointer to a valid SiteAssetsCountDistinct
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSiteAssetsCountDistinctFromValue(v string) (*SiteAssetsCountDistinct, error) {
	ev := SiteAssetsCountDistinct(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SiteAssetsCountDistinct: valid values are %v", v, AllowedSiteAssetsCountDistinctEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SiteAssetsCountDistinct) IsValid() bool {
	for _, existing := range AllowedSiteAssetsCountDistinctEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to site_assets_count_distinct value
func (v SiteAssetsCountDistinct) Ptr() *SiteAssetsCountDistinct {
	return &v
}

type NullableSiteAssetsCountDistinct struct {
	value *SiteAssetsCountDistinct
	isSet bool
}

func (v NullableSiteAssetsCountDistinct) Get() *SiteAssetsCountDistinct {
	return v.value
}

func (v *NullableSiteAssetsCountDistinct) Set(val *SiteAssetsCountDistinct) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteAssetsCountDistinct) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteAssetsCountDistinct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteAssetsCountDistinct(val *SiteAssetsCountDistinct) *NullableSiteAssetsCountDistinct {
	return &NullableSiteAssetsCountDistinct{value: val, isSet: true}
}

func (v NullableSiteAssetsCountDistinct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteAssetsCountDistinct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

