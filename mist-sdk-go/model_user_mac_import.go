/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the UserMacImport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserMacImport{}

// UserMacImport struct for UserMacImport
type UserMacImport struct {
	Added []string `json:"added,omitempty"`
	Errors []string `json:"errors,omitempty"`
	Updated []string `json:"updated,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserMacImport UserMacImport

// NewUserMacImport instantiates a new UserMacImport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserMacImport() *UserMacImport {
	this := UserMacImport{}
	return &this
}

// NewUserMacImportWithDefaults instantiates a new UserMacImport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserMacImportWithDefaults() *UserMacImport {
	this := UserMacImport{}
	return &this
}

// GetAdded returns the Added field value if set, zero value otherwise.
func (o *UserMacImport) GetAdded() []string {
	if o == nil || IsNil(o.Added) {
		var ret []string
		return ret
	}
	return o.Added
}

// GetAddedOk returns a tuple with the Added field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserMacImport) GetAddedOk() ([]string, bool) {
	if o == nil || IsNil(o.Added) {
		return nil, false
	}
	return o.Added, true
}

// HasAdded returns a boolean if a field has been set.
func (o *UserMacImport) HasAdded() bool {
	if o != nil && !IsNil(o.Added) {
		return true
	}

	return false
}

// SetAdded gets a reference to the given []string and assigns it to the Added field.
func (o *UserMacImport) SetAdded(v []string) {
	o.Added = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *UserMacImport) GetErrors() []string {
	if o == nil || IsNil(o.Errors) {
		var ret []string
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserMacImport) GetErrorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *UserMacImport) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []string and assigns it to the Errors field.
func (o *UserMacImport) SetErrors(v []string) {
	o.Errors = v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *UserMacImport) GetUpdated() []string {
	if o == nil || IsNil(o.Updated) {
		var ret []string
		return ret
	}
	return o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserMacImport) GetUpdatedOk() ([]string, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *UserMacImport) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given []string and assigns it to the Updated field.
func (o *UserMacImport) SetUpdated(v []string) {
	o.Updated = v
}

func (o UserMacImport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserMacImport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Added) {
		toSerialize["added"] = o.Added
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserMacImport) UnmarshalJSON(data []byte) (err error) {
	varUserMacImport := _UserMacImport{}

	err = json.Unmarshal(data, &varUserMacImport)

	if err != nil {
		return err
	}

	*o = UserMacImport(varUserMacImport)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "added")
		delete(additionalProperties, "errors")
		delete(additionalProperties, "updated")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserMacImport struct {
	value *UserMacImport
	isSet bool
}

func (v NullableUserMacImport) Get() *UserMacImport {
	return v.value
}

func (v *NullableUserMacImport) Set(val *UserMacImport) {
	v.value = val
	v.isSet = true
}

func (v NullableUserMacImport) IsSet() bool {
	return v.isSet
}

func (v *NullableUserMacImport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserMacImport(val *UserMacImport) *NullableUserMacImport {
	return &NullableUserMacImport{value: val, isSet: true}
}

func (v NullableUserMacImport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserMacImport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


