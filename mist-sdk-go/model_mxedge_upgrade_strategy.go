/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// MxedgeUpgradeStrategy * `big_bang`: upgrade all at once * `serial`: one at a time
type MxedgeUpgradeStrategy string

// List of mxedge_upgrade_strategy
const (
	MXEDGEUPGRADESTRATEGY_EMPTY MxedgeUpgradeStrategy = ""
	MXEDGEUPGRADESTRATEGY_BIG_BANG MxedgeUpgradeStrategy = "big_bang"
	MXEDGEUPGRADESTRATEGY_SERIAL MxedgeUpgradeStrategy = "serial"
)

// All allowed values of MxedgeUpgradeStrategy enum
var AllowedMxedgeUpgradeStrategyEnumValues = []MxedgeUpgradeStrategy{
	"",
	"big_bang",
	"serial",
}

func (v *MxedgeUpgradeStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MxedgeUpgradeStrategy(value)
	for _, existing := range AllowedMxedgeUpgradeStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MxedgeUpgradeStrategy", value)
}

// NewMxedgeUpgradeStrategyFromValue returns a pointer to a valid MxedgeUpgradeStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMxedgeUpgradeStrategyFromValue(v string) (*MxedgeUpgradeStrategy, error) {
	ev := MxedgeUpgradeStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MxedgeUpgradeStrategy: valid values are %v", v, AllowedMxedgeUpgradeStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MxedgeUpgradeStrategy) IsValid() bool {
	for _, existing := range AllowedMxedgeUpgradeStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to mxedge_upgrade_strategy value
func (v MxedgeUpgradeStrategy) Ptr() *MxedgeUpgradeStrategy {
	return &v
}

type NullableMxedgeUpgradeStrategy struct {
	value *MxedgeUpgradeStrategy
	isSet bool
}

func (v NullableMxedgeUpgradeStrategy) Get() *MxedgeUpgradeStrategy {
	return v.value
}

func (v *NullableMxedgeUpgradeStrategy) Set(val *MxedgeUpgradeStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableMxedgeUpgradeStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableMxedgeUpgradeStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMxedgeUpgradeStrategy(val *MxedgeUpgradeStrategy) *NullableMxedgeUpgradeStrategy {
	return &NullableMxedgeUpgradeStrategy{value: val, isSet: true}
}

func (v NullableMxedgeUpgradeStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMxedgeUpgradeStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

