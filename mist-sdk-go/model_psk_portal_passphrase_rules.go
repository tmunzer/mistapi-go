/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the PskPortalPassphraseRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PskPortalPassphraseRules{}

// PskPortalPassphraseRules struct for PskPortalPassphraseRules
type PskPortalPassphraseRules struct {
	AlphabertsEnabled *bool `json:"alphaberts_enabled,omitempty"`
	Length *int32 `json:"length,omitempty"`
	// for valid `max_length` and `min_length`, passphrase size is set randomly from that range. - if `max_length` and/or `min_length` are invalid, passphrase size is equal to `length` parameter - if `length` is not set or is invalid, default passphrase size is 8. valid `max_length`, `min_length`, `length` should be an integer between 8 to 63. Also, `max_length` > `min_length`
	MaxLength *int32 `json:"max_length,omitempty"`
	// for valid `max_length` and `min_length`, passphrase size is set randomly from that range. - if `max_length` and/or `min_length` are invalid, passphrase size is equal to `length` parameter - if `length` is not set or is invalid, default passphrase size is 8. valid `max_length`, `min_length`, `length` should be an integer between 8 to 63. Also, `max_length` > `min_length`
	MinLength *int32 `json:"min_length,omitempty"`
	NumericsEnabled *bool `json:"numerics_enabled,omitempty"`
	Symbols *string `json:"symbols,omitempty"`
	SymbolsEnabled *bool `json:"symbols_enabled,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PskPortalPassphraseRules PskPortalPassphraseRules

// NewPskPortalPassphraseRules instantiates a new PskPortalPassphraseRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPskPortalPassphraseRules() *PskPortalPassphraseRules {
	this := PskPortalPassphraseRules{}
	var alphabertsEnabled bool = true
	this.AlphabertsEnabled = &alphabertsEnabled
	var numericsEnabled bool = true
	this.NumericsEnabled = &numericsEnabled
	var symbolsEnabled bool = true
	this.SymbolsEnabled = &symbolsEnabled
	return &this
}

// NewPskPortalPassphraseRulesWithDefaults instantiates a new PskPortalPassphraseRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPskPortalPassphraseRulesWithDefaults() *PskPortalPassphraseRules {
	this := PskPortalPassphraseRules{}
	var alphabertsEnabled bool = true
	this.AlphabertsEnabled = &alphabertsEnabled
	var numericsEnabled bool = true
	this.NumericsEnabled = &numericsEnabled
	var symbolsEnabled bool = true
	this.SymbolsEnabled = &symbolsEnabled
	return &this
}

// GetAlphabertsEnabled returns the AlphabertsEnabled field value if set, zero value otherwise.
func (o *PskPortalPassphraseRules) GetAlphabertsEnabled() bool {
	if o == nil || IsNil(o.AlphabertsEnabled) {
		var ret bool
		return ret
	}
	return *o.AlphabertsEnabled
}

// GetAlphabertsEnabledOk returns a tuple with the AlphabertsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PskPortalPassphraseRules) GetAlphabertsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AlphabertsEnabled) {
		return nil, false
	}
	return o.AlphabertsEnabled, true
}

// HasAlphabertsEnabled returns a boolean if a field has been set.
func (o *PskPortalPassphraseRules) HasAlphabertsEnabled() bool {
	if o != nil && !IsNil(o.AlphabertsEnabled) {
		return true
	}

	return false
}

// SetAlphabertsEnabled gets a reference to the given bool and assigns it to the AlphabertsEnabled field.
func (o *PskPortalPassphraseRules) SetAlphabertsEnabled(v bool) {
	o.AlphabertsEnabled = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *PskPortalPassphraseRules) GetLength() int32 {
	if o == nil || IsNil(o.Length) {
		var ret int32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PskPortalPassphraseRules) GetLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.Length) {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *PskPortalPassphraseRules) HasLength() bool {
	if o != nil && !IsNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given int32 and assigns it to the Length field.
func (o *PskPortalPassphraseRules) SetLength(v int32) {
	o.Length = &v
}

// GetMaxLength returns the MaxLength field value if set, zero value otherwise.
func (o *PskPortalPassphraseRules) GetMaxLength() int32 {
	if o == nil || IsNil(o.MaxLength) {
		var ret int32
		return ret
	}
	return *o.MaxLength
}

// GetMaxLengthOk returns a tuple with the MaxLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PskPortalPassphraseRules) GetMaxLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxLength) {
		return nil, false
	}
	return o.MaxLength, true
}

// HasMaxLength returns a boolean if a field has been set.
func (o *PskPortalPassphraseRules) HasMaxLength() bool {
	if o != nil && !IsNil(o.MaxLength) {
		return true
	}

	return false
}

// SetMaxLength gets a reference to the given int32 and assigns it to the MaxLength field.
func (o *PskPortalPassphraseRules) SetMaxLength(v int32) {
	o.MaxLength = &v
}

// GetMinLength returns the MinLength field value if set, zero value otherwise.
func (o *PskPortalPassphraseRules) GetMinLength() int32 {
	if o == nil || IsNil(o.MinLength) {
		var ret int32
		return ret
	}
	return *o.MinLength
}

// GetMinLengthOk returns a tuple with the MinLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PskPortalPassphraseRules) GetMinLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MinLength) {
		return nil, false
	}
	return o.MinLength, true
}

// HasMinLength returns a boolean if a field has been set.
func (o *PskPortalPassphraseRules) HasMinLength() bool {
	if o != nil && !IsNil(o.MinLength) {
		return true
	}

	return false
}

// SetMinLength gets a reference to the given int32 and assigns it to the MinLength field.
func (o *PskPortalPassphraseRules) SetMinLength(v int32) {
	o.MinLength = &v
}

// GetNumericsEnabled returns the NumericsEnabled field value if set, zero value otherwise.
func (o *PskPortalPassphraseRules) GetNumericsEnabled() bool {
	if o == nil || IsNil(o.NumericsEnabled) {
		var ret bool
		return ret
	}
	return *o.NumericsEnabled
}

// GetNumericsEnabledOk returns a tuple with the NumericsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PskPortalPassphraseRules) GetNumericsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.NumericsEnabled) {
		return nil, false
	}
	return o.NumericsEnabled, true
}

// HasNumericsEnabled returns a boolean if a field has been set.
func (o *PskPortalPassphraseRules) HasNumericsEnabled() bool {
	if o != nil && !IsNil(o.NumericsEnabled) {
		return true
	}

	return false
}

// SetNumericsEnabled gets a reference to the given bool and assigns it to the NumericsEnabled field.
func (o *PskPortalPassphraseRules) SetNumericsEnabled(v bool) {
	o.NumericsEnabled = &v
}

// GetSymbols returns the Symbols field value if set, zero value otherwise.
func (o *PskPortalPassphraseRules) GetSymbols() string {
	if o == nil || IsNil(o.Symbols) {
		var ret string
		return ret
	}
	return *o.Symbols
}

// GetSymbolsOk returns a tuple with the Symbols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PskPortalPassphraseRules) GetSymbolsOk() (*string, bool) {
	if o == nil || IsNil(o.Symbols) {
		return nil, false
	}
	return o.Symbols, true
}

// HasSymbols returns a boolean if a field has been set.
func (o *PskPortalPassphraseRules) HasSymbols() bool {
	if o != nil && !IsNil(o.Symbols) {
		return true
	}

	return false
}

// SetSymbols gets a reference to the given string and assigns it to the Symbols field.
func (o *PskPortalPassphraseRules) SetSymbols(v string) {
	o.Symbols = &v
}

// GetSymbolsEnabled returns the SymbolsEnabled field value if set, zero value otherwise.
func (o *PskPortalPassphraseRules) GetSymbolsEnabled() bool {
	if o == nil || IsNil(o.SymbolsEnabled) {
		var ret bool
		return ret
	}
	return *o.SymbolsEnabled
}

// GetSymbolsEnabledOk returns a tuple with the SymbolsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PskPortalPassphraseRules) GetSymbolsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SymbolsEnabled) {
		return nil, false
	}
	return o.SymbolsEnabled, true
}

// HasSymbolsEnabled returns a boolean if a field has been set.
func (o *PskPortalPassphraseRules) HasSymbolsEnabled() bool {
	if o != nil && !IsNil(o.SymbolsEnabled) {
		return true
	}

	return false
}

// SetSymbolsEnabled gets a reference to the given bool and assigns it to the SymbolsEnabled field.
func (o *PskPortalPassphraseRules) SetSymbolsEnabled(v bool) {
	o.SymbolsEnabled = &v
}

func (o PskPortalPassphraseRules) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PskPortalPassphraseRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AlphabertsEnabled) {
		toSerialize["alphaberts_enabled"] = o.AlphabertsEnabled
	}
	if !IsNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if !IsNil(o.MaxLength) {
		toSerialize["max_length"] = o.MaxLength
	}
	if !IsNil(o.MinLength) {
		toSerialize["min_length"] = o.MinLength
	}
	if !IsNil(o.NumericsEnabled) {
		toSerialize["numerics_enabled"] = o.NumericsEnabled
	}
	if !IsNil(o.Symbols) {
		toSerialize["symbols"] = o.Symbols
	}
	if !IsNil(o.SymbolsEnabled) {
		toSerialize["symbols_enabled"] = o.SymbolsEnabled
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PskPortalPassphraseRules) UnmarshalJSON(data []byte) (err error) {
	varPskPortalPassphraseRules := _PskPortalPassphraseRules{}

	err = json.Unmarshal(data, &varPskPortalPassphraseRules)

	if err != nil {
		return err
	}

	*o = PskPortalPassphraseRules(varPskPortalPassphraseRules)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "alphaberts_enabled")
		delete(additionalProperties, "length")
		delete(additionalProperties, "max_length")
		delete(additionalProperties, "min_length")
		delete(additionalProperties, "numerics_enabled")
		delete(additionalProperties, "symbols")
		delete(additionalProperties, "symbols_enabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePskPortalPassphraseRules struct {
	value *PskPortalPassphraseRules
	isSet bool
}

func (v NullablePskPortalPassphraseRules) Get() *PskPortalPassphraseRules {
	return v.value
}

func (v *NullablePskPortalPassphraseRules) Set(val *PskPortalPassphraseRules) {
	v.value = val
	v.isSet = true
}

func (v NullablePskPortalPassphraseRules) IsSet() bool {
	return v.isSet
}

func (v *NullablePskPortalPassphraseRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePskPortalPassphraseRules(val *PskPortalPassphraseRules) *NullablePskPortalPassphraseRules {
	return &NullablePskPortalPassphraseRules{value: val, isSet: true}
}

func (v NullablePskPortalPassphraseRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePskPortalPassphraseRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


