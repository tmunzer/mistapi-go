/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the WlanDnsServerRewrite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WlanDnsServerRewrite{}

// WlanDnsServerRewrite for radius_group-based DNS server (rewrite DNS request depending on the Group RADIUS server returns)
type WlanDnsServerRewrite struct {
	Enabled *bool `json:"enabled,omitempty"`
	// map between radius_group and the desired DNS server (IPv4 only) Property key is the RADIUS group, property value is the desired DNS Server
	RadiusGroups *map[string]string `json:"radius_groups,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WlanDnsServerRewrite WlanDnsServerRewrite

// NewWlanDnsServerRewrite instantiates a new WlanDnsServerRewrite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWlanDnsServerRewrite() *WlanDnsServerRewrite {
	this := WlanDnsServerRewrite{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// NewWlanDnsServerRewriteWithDefaults instantiates a new WlanDnsServerRewrite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWlanDnsServerRewriteWithDefaults() *WlanDnsServerRewrite {
	this := WlanDnsServerRewrite{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *WlanDnsServerRewrite) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanDnsServerRewrite) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *WlanDnsServerRewrite) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *WlanDnsServerRewrite) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRadiusGroups returns the RadiusGroups field value if set, zero value otherwise.
func (o *WlanDnsServerRewrite) GetRadiusGroups() map[string]string {
	if o == nil || IsNil(o.RadiusGroups) {
		var ret map[string]string
		return ret
	}
	return *o.RadiusGroups
}

// GetRadiusGroupsOk returns a tuple with the RadiusGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanDnsServerRewrite) GetRadiusGroupsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.RadiusGroups) {
		return nil, false
	}
	return o.RadiusGroups, true
}

// HasRadiusGroups returns a boolean if a field has been set.
func (o *WlanDnsServerRewrite) HasRadiusGroups() bool {
	if o != nil && !IsNil(o.RadiusGroups) {
		return true
	}

	return false
}

// SetRadiusGroups gets a reference to the given map[string]string and assigns it to the RadiusGroups field.
func (o *WlanDnsServerRewrite) SetRadiusGroups(v map[string]string) {
	o.RadiusGroups = &v
}

func (o WlanDnsServerRewrite) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WlanDnsServerRewrite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.RadiusGroups) {
		toSerialize["radius_groups"] = o.RadiusGroups
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WlanDnsServerRewrite) UnmarshalJSON(data []byte) (err error) {
	varWlanDnsServerRewrite := _WlanDnsServerRewrite{}

	err = json.Unmarshal(data, &varWlanDnsServerRewrite)

	if err != nil {
		return err
	}

	*o = WlanDnsServerRewrite(varWlanDnsServerRewrite)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "radius_groups")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWlanDnsServerRewrite struct {
	value *WlanDnsServerRewrite
	isSet bool
}

func (v NullableWlanDnsServerRewrite) Get() *WlanDnsServerRewrite {
	return v.value
}

func (v *NullableWlanDnsServerRewrite) Set(val *WlanDnsServerRewrite) {
	v.value = val
	v.isSet = true
}

func (v NullableWlanDnsServerRewrite) IsSet() bool {
	return v.isSet
}

func (v *NullableWlanDnsServerRewrite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWlanDnsServerRewrite(val *WlanDnsServerRewrite) *NullableWlanDnsServerRewrite {
	return &NullableWlanDnsServerRewrite{value: val, isSet: true}
}

func (v NullableWlanDnsServerRewrite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWlanDnsServerRewrite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


