/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the SiteMxtunnelRadsec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteMxtunnelRadsec{}

// SiteMxtunnelRadsec struct for SiteMxtunnelRadsec
type SiteMxtunnelRadsec struct {
	AcctServers []RadiusAcctServer `json:"acct_servers,omitempty"`
	AuthServers []RadiusAuthServer `json:"auth_servers,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	UseMxedge *bool `json:"use_mxedge,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SiteMxtunnelRadsec SiteMxtunnelRadsec

// NewSiteMxtunnelRadsec instantiates a new SiteMxtunnelRadsec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteMxtunnelRadsec() *SiteMxtunnelRadsec {
	this := SiteMxtunnelRadsec{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// NewSiteMxtunnelRadsecWithDefaults instantiates a new SiteMxtunnelRadsec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteMxtunnelRadsecWithDefaults() *SiteMxtunnelRadsec {
	this := SiteMxtunnelRadsec{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// GetAcctServers returns the AcctServers field value if set, zero value otherwise.
func (o *SiteMxtunnelRadsec) GetAcctServers() []RadiusAcctServer {
	if o == nil || IsNil(o.AcctServers) {
		var ret []RadiusAcctServer
		return ret
	}
	return o.AcctServers
}

// GetAcctServersOk returns a tuple with the AcctServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnelRadsec) GetAcctServersOk() ([]RadiusAcctServer, bool) {
	if o == nil || IsNil(o.AcctServers) {
		return nil, false
	}
	return o.AcctServers, true
}

// HasAcctServers returns a boolean if a field has been set.
func (o *SiteMxtunnelRadsec) HasAcctServers() bool {
	if o != nil && !IsNil(o.AcctServers) {
		return true
	}

	return false
}

// SetAcctServers gets a reference to the given []RadiusAcctServer and assigns it to the AcctServers field.
func (o *SiteMxtunnelRadsec) SetAcctServers(v []RadiusAcctServer) {
	o.AcctServers = v
}

// GetAuthServers returns the AuthServers field value if set, zero value otherwise.
func (o *SiteMxtunnelRadsec) GetAuthServers() []RadiusAuthServer {
	if o == nil || IsNil(o.AuthServers) {
		var ret []RadiusAuthServer
		return ret
	}
	return o.AuthServers
}

// GetAuthServersOk returns a tuple with the AuthServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnelRadsec) GetAuthServersOk() ([]RadiusAuthServer, bool) {
	if o == nil || IsNil(o.AuthServers) {
		return nil, false
	}
	return o.AuthServers, true
}

// HasAuthServers returns a boolean if a field has been set.
func (o *SiteMxtunnelRadsec) HasAuthServers() bool {
	if o != nil && !IsNil(o.AuthServers) {
		return true
	}

	return false
}

// SetAuthServers gets a reference to the given []RadiusAuthServer and assigns it to the AuthServers field.
func (o *SiteMxtunnelRadsec) SetAuthServers(v []RadiusAuthServer) {
	o.AuthServers = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SiteMxtunnelRadsec) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnelRadsec) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SiteMxtunnelRadsec) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SiteMxtunnelRadsec) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetUseMxedge returns the UseMxedge field value if set, zero value otherwise.
func (o *SiteMxtunnelRadsec) GetUseMxedge() bool {
	if o == nil || IsNil(o.UseMxedge) {
		var ret bool
		return ret
	}
	return *o.UseMxedge
}

// GetUseMxedgeOk returns a tuple with the UseMxedge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMxtunnelRadsec) GetUseMxedgeOk() (*bool, bool) {
	if o == nil || IsNil(o.UseMxedge) {
		return nil, false
	}
	return o.UseMxedge, true
}

// HasUseMxedge returns a boolean if a field has been set.
func (o *SiteMxtunnelRadsec) HasUseMxedge() bool {
	if o != nil && !IsNil(o.UseMxedge) {
		return true
	}

	return false
}

// SetUseMxedge gets a reference to the given bool and assigns it to the UseMxedge field.
func (o *SiteMxtunnelRadsec) SetUseMxedge(v bool) {
	o.UseMxedge = &v
}

func (o SiteMxtunnelRadsec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteMxtunnelRadsec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AcctServers) {
		toSerialize["acct_servers"] = o.AcctServers
	}
	if !IsNil(o.AuthServers) {
		toSerialize["auth_servers"] = o.AuthServers
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.UseMxedge) {
		toSerialize["use_mxedge"] = o.UseMxedge
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SiteMxtunnelRadsec) UnmarshalJSON(data []byte) (err error) {
	varSiteMxtunnelRadsec := _SiteMxtunnelRadsec{}

	err = json.Unmarshal(data, &varSiteMxtunnelRadsec)

	if err != nil {
		return err
	}

	*o = SiteMxtunnelRadsec(varSiteMxtunnelRadsec)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "acct_servers")
		delete(additionalProperties, "auth_servers")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "use_mxedge")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSiteMxtunnelRadsec struct {
	value *SiteMxtunnelRadsec
	isSet bool
}

func (v NullableSiteMxtunnelRadsec) Get() *SiteMxtunnelRadsec {
	return v.value
}

func (v *NullableSiteMxtunnelRadsec) Set(val *SiteMxtunnelRadsec) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteMxtunnelRadsec) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteMxtunnelRadsec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteMxtunnelRadsec(val *SiteMxtunnelRadsec) *NullableSiteMxtunnelRadsec {
	return &NullableSiteMxtunnelRadsec{value: val, isSet: true}
}

func (v NullableSiteMxtunnelRadsec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteMxtunnelRadsec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


