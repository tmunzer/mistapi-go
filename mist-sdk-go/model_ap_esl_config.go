/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the ApEslConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApEslConfig{}

// ApEslConfig struct for ApEslConfig
type ApEslConfig struct {
	// Only if `type`==`imagotag` or `type`==`native`
	Cacert *string `json:"cacert,omitempty"`
	// Only if `type`==`imagotag` or `type`==`native`
	Channel *int32 `json:"channel,omitempty"`
	// usb_config is ignored if esl_config enabled
	Enabled *bool `json:"enabled,omitempty"`
	// Only if `type`==`imagotag` or `type`==`native`
	Host *string `json:"host,omitempty"`
	// Only if `type`==`imagotag` or `type`==`native`
	Port *int32 `json:"port,omitempty"`
	Type *ApEslType `json:"type,omitempty"`
	// Only if `type`==`imagotag` or `type`==`native`
	VerifyCert *bool `json:"verify_cert,omitempty"`
	// Only if `type`==`solum` or `type`==`hansho`
	VlanId *int32 `json:"vlan_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApEslConfig ApEslConfig

// NewApEslConfig instantiates a new ApEslConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApEslConfig() *ApEslConfig {
	this := ApEslConfig{}
	var enabled bool = false
	this.Enabled = &enabled
	var vlanId int32 = 1
	this.VlanId = &vlanId
	return &this
}

// NewApEslConfigWithDefaults instantiates a new ApEslConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApEslConfigWithDefaults() *ApEslConfig {
	this := ApEslConfig{}
	var enabled bool = false
	this.Enabled = &enabled
	var vlanId int32 = 1
	this.VlanId = &vlanId
	return &this
}

// GetCacert returns the Cacert field value if set, zero value otherwise.
func (o *ApEslConfig) GetCacert() string {
	if o == nil || IsNil(o.Cacert) {
		var ret string
		return ret
	}
	return *o.Cacert
}

// GetCacertOk returns a tuple with the Cacert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApEslConfig) GetCacertOk() (*string, bool) {
	if o == nil || IsNil(o.Cacert) {
		return nil, false
	}
	return o.Cacert, true
}

// HasCacert returns a boolean if a field has been set.
func (o *ApEslConfig) HasCacert() bool {
	if o != nil && !IsNil(o.Cacert) {
		return true
	}

	return false
}

// SetCacert gets a reference to the given string and assigns it to the Cacert field.
func (o *ApEslConfig) SetCacert(v string) {
	o.Cacert = &v
}

// GetChannel returns the Channel field value if set, zero value otherwise.
func (o *ApEslConfig) GetChannel() int32 {
	if o == nil || IsNil(o.Channel) {
		var ret int32
		return ret
	}
	return *o.Channel
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApEslConfig) GetChannelOk() (*int32, bool) {
	if o == nil || IsNil(o.Channel) {
		return nil, false
	}
	return o.Channel, true
}

// HasChannel returns a boolean if a field has been set.
func (o *ApEslConfig) HasChannel() bool {
	if o != nil && !IsNil(o.Channel) {
		return true
	}

	return false
}

// SetChannel gets a reference to the given int32 and assigns it to the Channel field.
func (o *ApEslConfig) SetChannel(v int32) {
	o.Channel = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ApEslConfig) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApEslConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ApEslConfig) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ApEslConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *ApEslConfig) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApEslConfig) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *ApEslConfig) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *ApEslConfig) SetHost(v string) {
	o.Host = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *ApEslConfig) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApEslConfig) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *ApEslConfig) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *ApEslConfig) SetPort(v int32) {
	o.Port = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ApEslConfig) GetType() ApEslType {
	if o == nil || IsNil(o.Type) {
		var ret ApEslType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApEslConfig) GetTypeOk() (*ApEslType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ApEslConfig) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ApEslType and assigns it to the Type field.
func (o *ApEslConfig) SetType(v ApEslType) {
	o.Type = &v
}

// GetVerifyCert returns the VerifyCert field value if set, zero value otherwise.
func (o *ApEslConfig) GetVerifyCert() bool {
	if o == nil || IsNil(o.VerifyCert) {
		var ret bool
		return ret
	}
	return *o.VerifyCert
}

// GetVerifyCertOk returns a tuple with the VerifyCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApEslConfig) GetVerifyCertOk() (*bool, bool) {
	if o == nil || IsNil(o.VerifyCert) {
		return nil, false
	}
	return o.VerifyCert, true
}

// HasVerifyCert returns a boolean if a field has been set.
func (o *ApEslConfig) HasVerifyCert() bool {
	if o != nil && !IsNil(o.VerifyCert) {
		return true
	}

	return false
}

// SetVerifyCert gets a reference to the given bool and assigns it to the VerifyCert field.
func (o *ApEslConfig) SetVerifyCert(v bool) {
	o.VerifyCert = &v
}

// GetVlanId returns the VlanId field value if set, zero value otherwise.
func (o *ApEslConfig) GetVlanId() int32 {
	if o == nil || IsNil(o.VlanId) {
		var ret int32
		return ret
	}
	return *o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApEslConfig) GetVlanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VlanId) {
		return nil, false
	}
	return o.VlanId, true
}

// HasVlanId returns a boolean if a field has been set.
func (o *ApEslConfig) HasVlanId() bool {
	if o != nil && !IsNil(o.VlanId) {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given int32 and assigns it to the VlanId field.
func (o *ApEslConfig) SetVlanId(v int32) {
	o.VlanId = &v
}

func (o ApEslConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApEslConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cacert) {
		toSerialize["cacert"] = o.Cacert
	}
	if !IsNil(o.Channel) {
		toSerialize["channel"] = o.Channel
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.VerifyCert) {
		toSerialize["verify_cert"] = o.VerifyCert
	}
	if !IsNil(o.VlanId) {
		toSerialize["vlan_id"] = o.VlanId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApEslConfig) UnmarshalJSON(data []byte) (err error) {
	varApEslConfig := _ApEslConfig{}

	err = json.Unmarshal(data, &varApEslConfig)

	if err != nil {
		return err
	}

	*o = ApEslConfig(varApEslConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cacert")
		delete(additionalProperties, "channel")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "host")
		delete(additionalProperties, "port")
		delete(additionalProperties, "type")
		delete(additionalProperties, "verify_cert")
		delete(additionalProperties, "vlan_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApEslConfig struct {
	value *ApEslConfig
	isSet bool
}

func (v NullableApEslConfig) Get() *ApEslConfig {
	return v.value
}

func (v *NullableApEslConfig) Set(val *ApEslConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableApEslConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableApEslConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApEslConfig(val *ApEslConfig) *NullableApEslConfig {
	return &NullableApEslConfig{value: val, isSet: true}
}

func (v NullableApEslConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApEslConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


