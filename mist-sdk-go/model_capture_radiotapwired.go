/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the CaptureRadiotapwired type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CaptureRadiotapwired{}

// CaptureRadiotapwired Initiate a Radiotap Packet Capture and Wired Packet Capture
type CaptureRadiotapwired struct {
	ApMac NullableString `json:"ap_mac,omitempty"`
	Band *CaptureRadiotapwiredBand `json:"band,omitempty"`
	ClientMac NullableString `json:"client_mac,omitempty"`
	// duration of the capture, in seconds
	Duration *int32 `json:"duration,omitempty"`
	Format *CaptureRadiotapwiredFormat `json:"format,omitempty"`
	// max_len of each packet to capture
	MaxPktLen *int32 `json:"max_pkt_len,omitempty"`
	// number of packets to capture, 0 for unlimited
	NumPackets *int32 `json:"num_packets,omitempty"`
	// tcpdump expression for radiotap interface (802.11 + radio headers)
	RadiotapTcpdumpExpression *string `json:"radiotap_tcpdump_expression,omitempty"`
	Ssid NullableString `json:"ssid,omitempty"`
	// tcpdump expression common for wired,radiotap
	TcpdumpExpression *string `json:"tcpdump_expression,omitempty"`
	Type CaptureRadiotapwiredType `json:"type"`
	// tcpdump expression for wired
	WiredTcpdumpExpression *string `json:"wired_tcpdump_expression,omitempty"`
	// tcpdump expression for radiotap interface (802.11)
	WirelessTcpdumpExpression *string `json:"wireless_tcpdump_expression,omitempty"`
	// wlan id associated with the respective ssid.
	WlanId NullableString `json:"wlan_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CaptureRadiotapwired CaptureRadiotapwired

// NewCaptureRadiotapwired instantiates a new CaptureRadiotapwired object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCaptureRadiotapwired(type_ CaptureRadiotapwiredType) *CaptureRadiotapwired {
	this := CaptureRadiotapwired{}
	var band CaptureRadiotapwiredBand = CAPTURERADIOTAPWIREDBAND__24
	this.Band = &band
	var duration int32 = 600
	this.Duration = &duration
	var format CaptureRadiotapwiredFormat = CAPTURERADIOTAPWIREDFORMAT_PCAP
	this.Format = &format
	var maxPktLen int32 = 128
	this.MaxPktLen = &maxPktLen
	var numPackets int32 = 1024
	this.NumPackets = &numPackets
	this.Type = type_
	return &this
}

// NewCaptureRadiotapwiredWithDefaults instantiates a new CaptureRadiotapwired object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCaptureRadiotapwiredWithDefaults() *CaptureRadiotapwired {
	this := CaptureRadiotapwired{}
	var band CaptureRadiotapwiredBand = CAPTURERADIOTAPWIREDBAND__24
	this.Band = &band
	var duration int32 = 600
	this.Duration = &duration
	var format CaptureRadiotapwiredFormat = CAPTURERADIOTAPWIREDFORMAT_PCAP
	this.Format = &format
	var maxPktLen int32 = 128
	this.MaxPktLen = &maxPktLen
	var numPackets int32 = 1024
	this.NumPackets = &numPackets
	return &this
}

// GetApMac returns the ApMac field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CaptureRadiotapwired) GetApMac() string {
	if o == nil || IsNil(o.ApMac.Get()) {
		var ret string
		return ret
	}
	return *o.ApMac.Get()
}

// GetApMacOk returns a tuple with the ApMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CaptureRadiotapwired) GetApMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApMac.Get(), o.ApMac.IsSet()
}

// HasApMac returns a boolean if a field has been set.
func (o *CaptureRadiotapwired) HasApMac() bool {
	if o != nil && o.ApMac.IsSet() {
		return true
	}

	return false
}

// SetApMac gets a reference to the given NullableString and assigns it to the ApMac field.
func (o *CaptureRadiotapwired) SetApMac(v string) {
	o.ApMac.Set(&v)
}
// SetApMacNil sets the value for ApMac to be an explicit nil
func (o *CaptureRadiotapwired) SetApMacNil() {
	o.ApMac.Set(nil)
}

// UnsetApMac ensures that no value is present for ApMac, not even an explicit nil
func (o *CaptureRadiotapwired) UnsetApMac() {
	o.ApMac.Unset()
}

// GetBand returns the Band field value if set, zero value otherwise.
func (o *CaptureRadiotapwired) GetBand() CaptureRadiotapwiredBand {
	if o == nil || IsNil(o.Band) {
		var ret CaptureRadiotapwiredBand
		return ret
	}
	return *o.Band
}

// GetBandOk returns a tuple with the Band field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaptureRadiotapwired) GetBandOk() (*CaptureRadiotapwiredBand, bool) {
	if o == nil || IsNil(o.Band) {
		return nil, false
	}
	return o.Band, true
}

// HasBand returns a boolean if a field has been set.
func (o *CaptureRadiotapwired) HasBand() bool {
	if o != nil && !IsNil(o.Band) {
		return true
	}

	return false
}

// SetBand gets a reference to the given CaptureRadiotapwiredBand and assigns it to the Band field.
func (o *CaptureRadiotapwired) SetBand(v CaptureRadiotapwiredBand) {
	o.Band = &v
}

// GetClientMac returns the ClientMac field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CaptureRadiotapwired) GetClientMac() string {
	if o == nil || IsNil(o.ClientMac.Get()) {
		var ret string
		return ret
	}
	return *o.ClientMac.Get()
}

// GetClientMacOk returns a tuple with the ClientMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CaptureRadiotapwired) GetClientMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClientMac.Get(), o.ClientMac.IsSet()
}

// HasClientMac returns a boolean if a field has been set.
func (o *CaptureRadiotapwired) HasClientMac() bool {
	if o != nil && o.ClientMac.IsSet() {
		return true
	}

	return false
}

// SetClientMac gets a reference to the given NullableString and assigns it to the ClientMac field.
func (o *CaptureRadiotapwired) SetClientMac(v string) {
	o.ClientMac.Set(&v)
}
// SetClientMacNil sets the value for ClientMac to be an explicit nil
func (o *CaptureRadiotapwired) SetClientMacNil() {
	o.ClientMac.Set(nil)
}

// UnsetClientMac ensures that no value is present for ClientMac, not even an explicit nil
func (o *CaptureRadiotapwired) UnsetClientMac() {
	o.ClientMac.Unset()
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *CaptureRadiotapwired) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaptureRadiotapwired) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *CaptureRadiotapwired) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *CaptureRadiotapwired) SetDuration(v int32) {
	o.Duration = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *CaptureRadiotapwired) GetFormat() CaptureRadiotapwiredFormat {
	if o == nil || IsNil(o.Format) {
		var ret CaptureRadiotapwiredFormat
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaptureRadiotapwired) GetFormatOk() (*CaptureRadiotapwiredFormat, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *CaptureRadiotapwired) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given CaptureRadiotapwiredFormat and assigns it to the Format field.
func (o *CaptureRadiotapwired) SetFormat(v CaptureRadiotapwiredFormat) {
	o.Format = &v
}

// GetMaxPktLen returns the MaxPktLen field value if set, zero value otherwise.
func (o *CaptureRadiotapwired) GetMaxPktLen() int32 {
	if o == nil || IsNil(o.MaxPktLen) {
		var ret int32
		return ret
	}
	return *o.MaxPktLen
}

// GetMaxPktLenOk returns a tuple with the MaxPktLen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaptureRadiotapwired) GetMaxPktLenOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxPktLen) {
		return nil, false
	}
	return o.MaxPktLen, true
}

// HasMaxPktLen returns a boolean if a field has been set.
func (o *CaptureRadiotapwired) HasMaxPktLen() bool {
	if o != nil && !IsNil(o.MaxPktLen) {
		return true
	}

	return false
}

// SetMaxPktLen gets a reference to the given int32 and assigns it to the MaxPktLen field.
func (o *CaptureRadiotapwired) SetMaxPktLen(v int32) {
	o.MaxPktLen = &v
}

// GetNumPackets returns the NumPackets field value if set, zero value otherwise.
func (o *CaptureRadiotapwired) GetNumPackets() int32 {
	if o == nil || IsNil(o.NumPackets) {
		var ret int32
		return ret
	}
	return *o.NumPackets
}

// GetNumPacketsOk returns a tuple with the NumPackets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaptureRadiotapwired) GetNumPacketsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumPackets) {
		return nil, false
	}
	return o.NumPackets, true
}

// HasNumPackets returns a boolean if a field has been set.
func (o *CaptureRadiotapwired) HasNumPackets() bool {
	if o != nil && !IsNil(o.NumPackets) {
		return true
	}

	return false
}

// SetNumPackets gets a reference to the given int32 and assigns it to the NumPackets field.
func (o *CaptureRadiotapwired) SetNumPackets(v int32) {
	o.NumPackets = &v
}

// GetRadiotapTcpdumpExpression returns the RadiotapTcpdumpExpression field value if set, zero value otherwise.
func (o *CaptureRadiotapwired) GetRadiotapTcpdumpExpression() string {
	if o == nil || IsNil(o.RadiotapTcpdumpExpression) {
		var ret string
		return ret
	}
	return *o.RadiotapTcpdumpExpression
}

// GetRadiotapTcpdumpExpressionOk returns a tuple with the RadiotapTcpdumpExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaptureRadiotapwired) GetRadiotapTcpdumpExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.RadiotapTcpdumpExpression) {
		return nil, false
	}
	return o.RadiotapTcpdumpExpression, true
}

// HasRadiotapTcpdumpExpression returns a boolean if a field has been set.
func (o *CaptureRadiotapwired) HasRadiotapTcpdumpExpression() bool {
	if o != nil && !IsNil(o.RadiotapTcpdumpExpression) {
		return true
	}

	return false
}

// SetRadiotapTcpdumpExpression gets a reference to the given string and assigns it to the RadiotapTcpdumpExpression field.
func (o *CaptureRadiotapwired) SetRadiotapTcpdumpExpression(v string) {
	o.RadiotapTcpdumpExpression = &v
}

// GetSsid returns the Ssid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CaptureRadiotapwired) GetSsid() string {
	if o == nil || IsNil(o.Ssid.Get()) {
		var ret string
		return ret
	}
	return *o.Ssid.Get()
}

// GetSsidOk returns a tuple with the Ssid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CaptureRadiotapwired) GetSsidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ssid.Get(), o.Ssid.IsSet()
}

// HasSsid returns a boolean if a field has been set.
func (o *CaptureRadiotapwired) HasSsid() bool {
	if o != nil && o.Ssid.IsSet() {
		return true
	}

	return false
}

// SetSsid gets a reference to the given NullableString and assigns it to the Ssid field.
func (o *CaptureRadiotapwired) SetSsid(v string) {
	o.Ssid.Set(&v)
}
// SetSsidNil sets the value for Ssid to be an explicit nil
func (o *CaptureRadiotapwired) SetSsidNil() {
	o.Ssid.Set(nil)
}

// UnsetSsid ensures that no value is present for Ssid, not even an explicit nil
func (o *CaptureRadiotapwired) UnsetSsid() {
	o.Ssid.Unset()
}

// GetTcpdumpExpression returns the TcpdumpExpression field value if set, zero value otherwise.
func (o *CaptureRadiotapwired) GetTcpdumpExpression() string {
	if o == nil || IsNil(o.TcpdumpExpression) {
		var ret string
		return ret
	}
	return *o.TcpdumpExpression
}

// GetTcpdumpExpressionOk returns a tuple with the TcpdumpExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaptureRadiotapwired) GetTcpdumpExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.TcpdumpExpression) {
		return nil, false
	}
	return o.TcpdumpExpression, true
}

// HasTcpdumpExpression returns a boolean if a field has been set.
func (o *CaptureRadiotapwired) HasTcpdumpExpression() bool {
	if o != nil && !IsNil(o.TcpdumpExpression) {
		return true
	}

	return false
}

// SetTcpdumpExpression gets a reference to the given string and assigns it to the TcpdumpExpression field.
func (o *CaptureRadiotapwired) SetTcpdumpExpression(v string) {
	o.TcpdumpExpression = &v
}

// GetType returns the Type field value
func (o *CaptureRadiotapwired) GetType() CaptureRadiotapwiredType {
	if o == nil {
		var ret CaptureRadiotapwiredType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CaptureRadiotapwired) GetTypeOk() (*CaptureRadiotapwiredType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CaptureRadiotapwired) SetType(v CaptureRadiotapwiredType) {
	o.Type = v
}

// GetWiredTcpdumpExpression returns the WiredTcpdumpExpression field value if set, zero value otherwise.
func (o *CaptureRadiotapwired) GetWiredTcpdumpExpression() string {
	if o == nil || IsNil(o.WiredTcpdumpExpression) {
		var ret string
		return ret
	}
	return *o.WiredTcpdumpExpression
}

// GetWiredTcpdumpExpressionOk returns a tuple with the WiredTcpdumpExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaptureRadiotapwired) GetWiredTcpdumpExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.WiredTcpdumpExpression) {
		return nil, false
	}
	return o.WiredTcpdumpExpression, true
}

// HasWiredTcpdumpExpression returns a boolean if a field has been set.
func (o *CaptureRadiotapwired) HasWiredTcpdumpExpression() bool {
	if o != nil && !IsNil(o.WiredTcpdumpExpression) {
		return true
	}

	return false
}

// SetWiredTcpdumpExpression gets a reference to the given string and assigns it to the WiredTcpdumpExpression field.
func (o *CaptureRadiotapwired) SetWiredTcpdumpExpression(v string) {
	o.WiredTcpdumpExpression = &v
}

// GetWirelessTcpdumpExpression returns the WirelessTcpdumpExpression field value if set, zero value otherwise.
func (o *CaptureRadiotapwired) GetWirelessTcpdumpExpression() string {
	if o == nil || IsNil(o.WirelessTcpdumpExpression) {
		var ret string
		return ret
	}
	return *o.WirelessTcpdumpExpression
}

// GetWirelessTcpdumpExpressionOk returns a tuple with the WirelessTcpdumpExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaptureRadiotapwired) GetWirelessTcpdumpExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.WirelessTcpdumpExpression) {
		return nil, false
	}
	return o.WirelessTcpdumpExpression, true
}

// HasWirelessTcpdumpExpression returns a boolean if a field has been set.
func (o *CaptureRadiotapwired) HasWirelessTcpdumpExpression() bool {
	if o != nil && !IsNil(o.WirelessTcpdumpExpression) {
		return true
	}

	return false
}

// SetWirelessTcpdumpExpression gets a reference to the given string and assigns it to the WirelessTcpdumpExpression field.
func (o *CaptureRadiotapwired) SetWirelessTcpdumpExpression(v string) {
	o.WirelessTcpdumpExpression = &v
}

// GetWlanId returns the WlanId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CaptureRadiotapwired) GetWlanId() string {
	if o == nil || IsNil(o.WlanId.Get()) {
		var ret string
		return ret
	}
	return *o.WlanId.Get()
}

// GetWlanIdOk returns a tuple with the WlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CaptureRadiotapwired) GetWlanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WlanId.Get(), o.WlanId.IsSet()
}

// HasWlanId returns a boolean if a field has been set.
func (o *CaptureRadiotapwired) HasWlanId() bool {
	if o != nil && o.WlanId.IsSet() {
		return true
	}

	return false
}

// SetWlanId gets a reference to the given NullableString and assigns it to the WlanId field.
func (o *CaptureRadiotapwired) SetWlanId(v string) {
	o.WlanId.Set(&v)
}
// SetWlanIdNil sets the value for WlanId to be an explicit nil
func (o *CaptureRadiotapwired) SetWlanIdNil() {
	o.WlanId.Set(nil)
}

// UnsetWlanId ensures that no value is present for WlanId, not even an explicit nil
func (o *CaptureRadiotapwired) UnsetWlanId() {
	o.WlanId.Unset()
}

func (o CaptureRadiotapwired) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CaptureRadiotapwired) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ApMac.IsSet() {
		toSerialize["ap_mac"] = o.ApMac.Get()
	}
	if !IsNil(o.Band) {
		toSerialize["band"] = o.Band
	}
	if o.ClientMac.IsSet() {
		toSerialize["client_mac"] = o.ClientMac.Get()
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	if !IsNil(o.MaxPktLen) {
		toSerialize["max_pkt_len"] = o.MaxPktLen
	}
	if !IsNil(o.NumPackets) {
		toSerialize["num_packets"] = o.NumPackets
	}
	if !IsNil(o.RadiotapTcpdumpExpression) {
		toSerialize["radiotap_tcpdump_expression"] = o.RadiotapTcpdumpExpression
	}
	if o.Ssid.IsSet() {
		toSerialize["ssid"] = o.Ssid.Get()
	}
	if !IsNil(o.TcpdumpExpression) {
		toSerialize["tcpdump_expression"] = o.TcpdumpExpression
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.WiredTcpdumpExpression) {
		toSerialize["wired_tcpdump_expression"] = o.WiredTcpdumpExpression
	}
	if !IsNil(o.WirelessTcpdumpExpression) {
		toSerialize["wireless_tcpdump_expression"] = o.WirelessTcpdumpExpression
	}
	if o.WlanId.IsSet() {
		toSerialize["wlan_id"] = o.WlanId.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CaptureRadiotapwired) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCaptureRadiotapwired := _CaptureRadiotapwired{}

	err = json.Unmarshal(data, &varCaptureRadiotapwired)

	if err != nil {
		return err
	}

	*o = CaptureRadiotapwired(varCaptureRadiotapwired)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ap_mac")
		delete(additionalProperties, "band")
		delete(additionalProperties, "client_mac")
		delete(additionalProperties, "duration")
		delete(additionalProperties, "format")
		delete(additionalProperties, "max_pkt_len")
		delete(additionalProperties, "num_packets")
		delete(additionalProperties, "radiotap_tcpdump_expression")
		delete(additionalProperties, "ssid")
		delete(additionalProperties, "tcpdump_expression")
		delete(additionalProperties, "type")
		delete(additionalProperties, "wired_tcpdump_expression")
		delete(additionalProperties, "wireless_tcpdump_expression")
		delete(additionalProperties, "wlan_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCaptureRadiotapwired struct {
	value *CaptureRadiotapwired
	isSet bool
}

func (v NullableCaptureRadiotapwired) Get() *CaptureRadiotapwired {
	return v.value
}

func (v *NullableCaptureRadiotapwired) Set(val *CaptureRadiotapwired) {
	v.value = val
	v.isSet = true
}

func (v NullableCaptureRadiotapwired) IsSet() bool {
	return v.isSet
}

func (v *NullableCaptureRadiotapwired) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaptureRadiotapwired(val *CaptureRadiotapwired) *NullableCaptureRadiotapwired {
	return &NullableCaptureRadiotapwired{value: val, isSet: true}
}

func (v NullableCaptureRadiotapwired) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaptureRadiotapwired) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


