/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the WlanBonjourServiceProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WlanBonjourServiceProperties{}

// WlanBonjourServiceProperties struct for WlanBonjourServiceProperties
type WlanBonjourServiceProperties struct {
	// whether to prevent wireless clients to discover bonjour devices on the same WLAN
	DisableLocal *bool `json:"disable_local,omitempty"`
	// optional, if the service is further restricted for certain RADIUS groups
	RadiusGroups []string `json:"radius_groups,omitempty"`
	Scope *WlanBonjourServicePropertiesScope `json:"scope,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WlanBonjourServiceProperties WlanBonjourServiceProperties

// NewWlanBonjourServiceProperties instantiates a new WlanBonjourServiceProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWlanBonjourServiceProperties() *WlanBonjourServiceProperties {
	this := WlanBonjourServiceProperties{}
	var disableLocal bool = false
	this.DisableLocal = &disableLocal
	var scope WlanBonjourServicePropertiesScope = WLANBONJOURSERVICEPROPERTIESSCOPE_SAME_SITE
	this.Scope = &scope
	return &this
}

// NewWlanBonjourServicePropertiesWithDefaults instantiates a new WlanBonjourServiceProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWlanBonjourServicePropertiesWithDefaults() *WlanBonjourServiceProperties {
	this := WlanBonjourServiceProperties{}
	var disableLocal bool = false
	this.DisableLocal = &disableLocal
	var scope WlanBonjourServicePropertiesScope = WLANBONJOURSERVICEPROPERTIESSCOPE_SAME_SITE
	this.Scope = &scope
	return &this
}

// GetDisableLocal returns the DisableLocal field value if set, zero value otherwise.
func (o *WlanBonjourServiceProperties) GetDisableLocal() bool {
	if o == nil || IsNil(o.DisableLocal) {
		var ret bool
		return ret
	}
	return *o.DisableLocal
}

// GetDisableLocalOk returns a tuple with the DisableLocal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanBonjourServiceProperties) GetDisableLocalOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableLocal) {
		return nil, false
	}
	return o.DisableLocal, true
}

// HasDisableLocal returns a boolean if a field has been set.
func (o *WlanBonjourServiceProperties) HasDisableLocal() bool {
	if o != nil && !IsNil(o.DisableLocal) {
		return true
	}

	return false
}

// SetDisableLocal gets a reference to the given bool and assigns it to the DisableLocal field.
func (o *WlanBonjourServiceProperties) SetDisableLocal(v bool) {
	o.DisableLocal = &v
}

// GetRadiusGroups returns the RadiusGroups field value if set, zero value otherwise.
func (o *WlanBonjourServiceProperties) GetRadiusGroups() []string {
	if o == nil || IsNil(o.RadiusGroups) {
		var ret []string
		return ret
	}
	return o.RadiusGroups
}

// GetRadiusGroupsOk returns a tuple with the RadiusGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanBonjourServiceProperties) GetRadiusGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.RadiusGroups) {
		return nil, false
	}
	return o.RadiusGroups, true
}

// HasRadiusGroups returns a boolean if a field has been set.
func (o *WlanBonjourServiceProperties) HasRadiusGroups() bool {
	if o != nil && !IsNil(o.RadiusGroups) {
		return true
	}

	return false
}

// SetRadiusGroups gets a reference to the given []string and assigns it to the RadiusGroups field.
func (o *WlanBonjourServiceProperties) SetRadiusGroups(v []string) {
	o.RadiusGroups = v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *WlanBonjourServiceProperties) GetScope() WlanBonjourServicePropertiesScope {
	if o == nil || IsNil(o.Scope) {
		var ret WlanBonjourServicePropertiesScope
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanBonjourServiceProperties) GetScopeOk() (*WlanBonjourServicePropertiesScope, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *WlanBonjourServiceProperties) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given WlanBonjourServicePropertiesScope and assigns it to the Scope field.
func (o *WlanBonjourServiceProperties) SetScope(v WlanBonjourServicePropertiesScope) {
	o.Scope = &v
}

func (o WlanBonjourServiceProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WlanBonjourServiceProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisableLocal) {
		toSerialize["disable_local"] = o.DisableLocal
	}
	if !IsNil(o.RadiusGroups) {
		toSerialize["radius_groups"] = o.RadiusGroups
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WlanBonjourServiceProperties) UnmarshalJSON(data []byte) (err error) {
	varWlanBonjourServiceProperties := _WlanBonjourServiceProperties{}

	err = json.Unmarshal(data, &varWlanBonjourServiceProperties)

	if err != nil {
		return err
	}

	*o = WlanBonjourServiceProperties(varWlanBonjourServiceProperties)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "disable_local")
		delete(additionalProperties, "radius_groups")
		delete(additionalProperties, "scope")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWlanBonjourServiceProperties struct {
	value *WlanBonjourServiceProperties
	isSet bool
}

func (v NullableWlanBonjourServiceProperties) Get() *WlanBonjourServiceProperties {
	return v.value
}

func (v *NullableWlanBonjourServiceProperties) Set(val *WlanBonjourServiceProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableWlanBonjourServiceProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableWlanBonjourServiceProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWlanBonjourServiceProperties(val *WlanBonjourServiceProperties) *NullableWlanBonjourServiceProperties {
	return &NullableWlanBonjourServiceProperties{value: val, isSet: true}
}

func (v NullableWlanBonjourServiceProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWlanBonjourServiceProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


