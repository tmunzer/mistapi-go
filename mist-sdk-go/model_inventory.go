/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the Inventory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Inventory{}

// Inventory struct for Inventory
type Inventory struct {
	// only if `type`==`switch` or `type`==`gateway` whether the switch/gateway is adopted
	Adopted *bool `json:"adopted,omitempty"`
	// whether the device is connected
	Connected *bool `json:"connected,omitempty"`
	// inventory created time, in epoch
	CreatedTime *int32 `json:"created_time,omitempty"`
	// deviceprofile id if assigned, null if not assigned
	DeviceprofileId NullableString `json:"deviceprofile_id,omitempty"`
	// hostname reported by the device
	Hostname *string `json:"hostname,omitempty"`
	// device hardware revision number
	HwRev *string `json:"hw_rev,omitempty"`
	// device id
	Id *string `json:"id,omitempty"`
	Jsi *bool `json:"jsi,omitempty"`
	// device MAC address
	Mac *string `json:"mac,omitempty"`
	// device claim code
	Magic *string `json:"magic,omitempty"`
	// device model
	Model *string `json:"model,omitempty"`
	// inventory last modified time, in epoch
	ModifiedTime *int32 `json:"modified_time,omitempty"`
	// device name if configured
	Name *string `json:"name,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	// device serial
	Serial *string `json:"serial,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	// device stock keeping unit
	Sku *string `json:"sku,omitempty"`
	Type *DeviceType `json:"type,omitempty"`
	// only if `type`==`switch`, MAC Address of the Virtual Chassis
	VcMac *string `json:"vc_mac,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Inventory Inventory

// NewInventory instantiates a new Inventory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventory() *Inventory {
	this := Inventory{}
	var type_ DeviceType = DEVICETYPE_AP
	this.Type = &type_
	return &this
}

// NewInventoryWithDefaults instantiates a new Inventory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryWithDefaults() *Inventory {
	this := Inventory{}
	var type_ DeviceType = DEVICETYPE_AP
	this.Type = &type_
	return &this
}

// GetAdopted returns the Adopted field value if set, zero value otherwise.
func (o *Inventory) GetAdopted() bool {
	if o == nil || IsNil(o.Adopted) {
		var ret bool
		return ret
	}
	return *o.Adopted
}

// GetAdoptedOk returns a tuple with the Adopted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetAdoptedOk() (*bool, bool) {
	if o == nil || IsNil(o.Adopted) {
		return nil, false
	}
	return o.Adopted, true
}

// HasAdopted returns a boolean if a field has been set.
func (o *Inventory) HasAdopted() bool {
	if o != nil && !IsNil(o.Adopted) {
		return true
	}

	return false
}

// SetAdopted gets a reference to the given bool and assigns it to the Adopted field.
func (o *Inventory) SetAdopted(v bool) {
	o.Adopted = &v
}

// GetConnected returns the Connected field value if set, zero value otherwise.
func (o *Inventory) GetConnected() bool {
	if o == nil || IsNil(o.Connected) {
		var ret bool
		return ret
	}
	return *o.Connected
}

// GetConnectedOk returns a tuple with the Connected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetConnectedOk() (*bool, bool) {
	if o == nil || IsNil(o.Connected) {
		return nil, false
	}
	return o.Connected, true
}

// HasConnected returns a boolean if a field has been set.
func (o *Inventory) HasConnected() bool {
	if o != nil && !IsNil(o.Connected) {
		return true
	}

	return false
}

// SetConnected gets a reference to the given bool and assigns it to the Connected field.
func (o *Inventory) SetConnected(v bool) {
	o.Connected = &v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *Inventory) GetCreatedTime() int32 {
	if o == nil || IsNil(o.CreatedTime) {
		var ret int32
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetCreatedTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *Inventory) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given int32 and assigns it to the CreatedTime field.
func (o *Inventory) SetCreatedTime(v int32) {
	o.CreatedTime = &v
}

// GetDeviceprofileId returns the DeviceprofileId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Inventory) GetDeviceprofileId() string {
	if o == nil || IsNil(o.DeviceprofileId.Get()) {
		var ret string
		return ret
	}
	return *o.DeviceprofileId.Get()
}

// GetDeviceprofileIdOk returns a tuple with the DeviceprofileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Inventory) GetDeviceprofileIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceprofileId.Get(), o.DeviceprofileId.IsSet()
}

// HasDeviceprofileId returns a boolean if a field has been set.
func (o *Inventory) HasDeviceprofileId() bool {
	if o != nil && o.DeviceprofileId.IsSet() {
		return true
	}

	return false
}

// SetDeviceprofileId gets a reference to the given NullableString and assigns it to the DeviceprofileId field.
func (o *Inventory) SetDeviceprofileId(v string) {
	o.DeviceprofileId.Set(&v)
}
// SetDeviceprofileIdNil sets the value for DeviceprofileId to be an explicit nil
func (o *Inventory) SetDeviceprofileIdNil() {
	o.DeviceprofileId.Set(nil)
}

// UnsetDeviceprofileId ensures that no value is present for DeviceprofileId, not even an explicit nil
func (o *Inventory) UnsetDeviceprofileId() {
	o.DeviceprofileId.Unset()
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *Inventory) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *Inventory) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *Inventory) SetHostname(v string) {
	o.Hostname = &v
}

// GetHwRev returns the HwRev field value if set, zero value otherwise.
func (o *Inventory) GetHwRev() string {
	if o == nil || IsNil(o.HwRev) {
		var ret string
		return ret
	}
	return *o.HwRev
}

// GetHwRevOk returns a tuple with the HwRev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetHwRevOk() (*string, bool) {
	if o == nil || IsNil(o.HwRev) {
		return nil, false
	}
	return o.HwRev, true
}

// HasHwRev returns a boolean if a field has been set.
func (o *Inventory) HasHwRev() bool {
	if o != nil && !IsNil(o.HwRev) {
		return true
	}

	return false
}

// SetHwRev gets a reference to the given string and assigns it to the HwRev field.
func (o *Inventory) SetHwRev(v string) {
	o.HwRev = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Inventory) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Inventory) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Inventory) SetId(v string) {
	o.Id = &v
}

// GetJsi returns the Jsi field value if set, zero value otherwise.
func (o *Inventory) GetJsi() bool {
	if o == nil || IsNil(o.Jsi) {
		var ret bool
		return ret
	}
	return *o.Jsi
}

// GetJsiOk returns a tuple with the Jsi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetJsiOk() (*bool, bool) {
	if o == nil || IsNil(o.Jsi) {
		return nil, false
	}
	return o.Jsi, true
}

// HasJsi returns a boolean if a field has been set.
func (o *Inventory) HasJsi() bool {
	if o != nil && !IsNil(o.Jsi) {
		return true
	}

	return false
}

// SetJsi gets a reference to the given bool and assigns it to the Jsi field.
func (o *Inventory) SetJsi(v bool) {
	o.Jsi = &v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *Inventory) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *Inventory) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *Inventory) SetMac(v string) {
	o.Mac = &v
}

// GetMagic returns the Magic field value if set, zero value otherwise.
func (o *Inventory) GetMagic() string {
	if o == nil || IsNil(o.Magic) {
		var ret string
		return ret
	}
	return *o.Magic
}

// GetMagicOk returns a tuple with the Magic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetMagicOk() (*string, bool) {
	if o == nil || IsNil(o.Magic) {
		return nil, false
	}
	return o.Magic, true
}

// HasMagic returns a boolean if a field has been set.
func (o *Inventory) HasMagic() bool {
	if o != nil && !IsNil(o.Magic) {
		return true
	}

	return false
}

// SetMagic gets a reference to the given string and assigns it to the Magic field.
func (o *Inventory) SetMagic(v string) {
	o.Magic = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *Inventory) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *Inventory) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *Inventory) SetModel(v string) {
	o.Model = &v
}

// GetModifiedTime returns the ModifiedTime field value if set, zero value otherwise.
func (o *Inventory) GetModifiedTime() int32 {
	if o == nil || IsNil(o.ModifiedTime) {
		var ret int32
		return ret
	}
	return *o.ModifiedTime
}

// GetModifiedTimeOk returns a tuple with the ModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetModifiedTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.ModifiedTime) {
		return nil, false
	}
	return o.ModifiedTime, true
}

// HasModifiedTime returns a boolean if a field has been set.
func (o *Inventory) HasModifiedTime() bool {
	if o != nil && !IsNil(o.ModifiedTime) {
		return true
	}

	return false
}

// SetModifiedTime gets a reference to the given int32 and assigns it to the ModifiedTime field.
func (o *Inventory) SetModifiedTime(v int32) {
	o.ModifiedTime = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Inventory) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Inventory) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Inventory) SetName(v string) {
	o.Name = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *Inventory) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *Inventory) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *Inventory) SetOrgId(v string) {
	o.OrgId = &v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *Inventory) GetSerial() string {
	if o == nil || IsNil(o.Serial) {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetSerialOk() (*string, bool) {
	if o == nil || IsNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *Inventory) HasSerial() bool {
	if o != nil && !IsNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *Inventory) SetSerial(v string) {
	o.Serial = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *Inventory) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *Inventory) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *Inventory) SetSiteId(v string) {
	o.SiteId = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *Inventory) GetSku() string {
	if o == nil || IsNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetSkuOk() (*string, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *Inventory) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *Inventory) SetSku(v string) {
	o.Sku = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Inventory) GetType() DeviceType {
	if o == nil || IsNil(o.Type) {
		var ret DeviceType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetTypeOk() (*DeviceType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Inventory) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given DeviceType and assigns it to the Type field.
func (o *Inventory) SetType(v DeviceType) {
	o.Type = &v
}

// GetVcMac returns the VcMac field value if set, zero value otherwise.
func (o *Inventory) GetVcMac() string {
	if o == nil || IsNil(o.VcMac) {
		var ret string
		return ret
	}
	return *o.VcMac
}

// GetVcMacOk returns a tuple with the VcMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetVcMacOk() (*string, bool) {
	if o == nil || IsNil(o.VcMac) {
		return nil, false
	}
	return o.VcMac, true
}

// HasVcMac returns a boolean if a field has been set.
func (o *Inventory) HasVcMac() bool {
	if o != nil && !IsNil(o.VcMac) {
		return true
	}

	return false
}

// SetVcMac gets a reference to the given string and assigns it to the VcMac field.
func (o *Inventory) SetVcMac(v string) {
	o.VcMac = &v
}

func (o Inventory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Inventory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Adopted) {
		toSerialize["adopted"] = o.Adopted
	}
	if !IsNil(o.Connected) {
		toSerialize["connected"] = o.Connected
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if o.DeviceprofileId.IsSet() {
		toSerialize["deviceprofile_id"] = o.DeviceprofileId.Get()
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.HwRev) {
		toSerialize["hw_rev"] = o.HwRev
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Jsi) {
		toSerialize["jsi"] = o.Jsi
	}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if !IsNil(o.Magic) {
		toSerialize["magic"] = o.Magic
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.ModifiedTime) {
		toSerialize["modified_time"] = o.ModifiedTime
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.Serial) {
		toSerialize["serial"] = o.Serial
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.VcMac) {
		toSerialize["vc_mac"] = o.VcMac
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Inventory) UnmarshalJSON(data []byte) (err error) {
	varInventory := _Inventory{}

	err = json.Unmarshal(data, &varInventory)

	if err != nil {
		return err
	}

	*o = Inventory(varInventory)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "adopted")
		delete(additionalProperties, "connected")
		delete(additionalProperties, "created_time")
		delete(additionalProperties, "deviceprofile_id")
		delete(additionalProperties, "hostname")
		delete(additionalProperties, "hw_rev")
		delete(additionalProperties, "id")
		delete(additionalProperties, "jsi")
		delete(additionalProperties, "mac")
		delete(additionalProperties, "magic")
		delete(additionalProperties, "model")
		delete(additionalProperties, "modified_time")
		delete(additionalProperties, "name")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "serial")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "sku")
		delete(additionalProperties, "type")
		delete(additionalProperties, "vc_mac")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInventory struct {
	value *Inventory
	isSet bool
}

func (v NullableInventory) Get() *Inventory {
	return v.value
}

func (v *NullableInventory) Set(val *Inventory) {
	v.value = val
	v.isSet = true
}

func (v NullableInventory) IsSet() bool {
	return v.isSet
}

func (v *NullableInventory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventory(val *Inventory) *NullableInventory {
	return &NullableInventory{value: val, isSet: true}
}

func (v NullableInventory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


