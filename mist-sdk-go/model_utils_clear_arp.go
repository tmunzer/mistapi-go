/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the UtilsClearArp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UtilsClearArp{}

// UtilsClearArp struct for UtilsClearArp
type UtilsClearArp struct {
	// The IP address for which to clear an ARP entry. port_id must be specified. Both vlan and ip cannot be specified.
	Ip *string `json:"ip,omitempty"`
	Node *HaClusterNodeEnum `json:"node,omitempty"`
	// The device interface on which to clear the ARP cache.
	PortId *string `json:"port_id,omitempty"`
	// The VLAN on which to clear the ARP cache. port_id must be specified. Both vlan and ip cannot be specified.
	Vlan *int32 `json:"vlan,omitempty"`
	// The vrf for which to clear an ARP entry. applicable for switch.
	Vrf *string `json:"vrf,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UtilsClearArp UtilsClearArp

// NewUtilsClearArp instantiates a new UtilsClearArp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUtilsClearArp() *UtilsClearArp {
	this := UtilsClearArp{}
	return &this
}

// NewUtilsClearArpWithDefaults instantiates a new UtilsClearArp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUtilsClearArpWithDefaults() *UtilsClearArp {
	this := UtilsClearArp{}
	return &this
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *UtilsClearArp) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsClearArp) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *UtilsClearArp) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *UtilsClearArp) SetIp(v string) {
	o.Ip = &v
}

// GetNode returns the Node field value if set, zero value otherwise.
func (o *UtilsClearArp) GetNode() HaClusterNodeEnum {
	if o == nil || IsNil(o.Node) {
		var ret HaClusterNodeEnum
		return ret
	}
	return *o.Node
}

// GetNodeOk returns a tuple with the Node field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsClearArp) GetNodeOk() (*HaClusterNodeEnum, bool) {
	if o == nil || IsNil(o.Node) {
		return nil, false
	}
	return o.Node, true
}

// HasNode returns a boolean if a field has been set.
func (o *UtilsClearArp) HasNode() bool {
	if o != nil && !IsNil(o.Node) {
		return true
	}

	return false
}

// SetNode gets a reference to the given HaClusterNodeEnum and assigns it to the Node field.
func (o *UtilsClearArp) SetNode(v HaClusterNodeEnum) {
	o.Node = &v
}

// GetPortId returns the PortId field value if set, zero value otherwise.
func (o *UtilsClearArp) GetPortId() string {
	if o == nil || IsNil(o.PortId) {
		var ret string
		return ret
	}
	return *o.PortId
}

// GetPortIdOk returns a tuple with the PortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsClearArp) GetPortIdOk() (*string, bool) {
	if o == nil || IsNil(o.PortId) {
		return nil, false
	}
	return o.PortId, true
}

// HasPortId returns a boolean if a field has been set.
func (o *UtilsClearArp) HasPortId() bool {
	if o != nil && !IsNil(o.PortId) {
		return true
	}

	return false
}

// SetPortId gets a reference to the given string and assigns it to the PortId field.
func (o *UtilsClearArp) SetPortId(v string) {
	o.PortId = &v
}

// GetVlan returns the Vlan field value if set, zero value otherwise.
func (o *UtilsClearArp) GetVlan() int32 {
	if o == nil || IsNil(o.Vlan) {
		var ret int32
		return ret
	}
	return *o.Vlan
}

// GetVlanOk returns a tuple with the Vlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsClearArp) GetVlanOk() (*int32, bool) {
	if o == nil || IsNil(o.Vlan) {
		return nil, false
	}
	return o.Vlan, true
}

// HasVlan returns a boolean if a field has been set.
func (o *UtilsClearArp) HasVlan() bool {
	if o != nil && !IsNil(o.Vlan) {
		return true
	}

	return false
}

// SetVlan gets a reference to the given int32 and assigns it to the Vlan field.
func (o *UtilsClearArp) SetVlan(v int32) {
	o.Vlan = &v
}

// GetVrf returns the Vrf field value if set, zero value otherwise.
func (o *UtilsClearArp) GetVrf() string {
	if o == nil || IsNil(o.Vrf) {
		var ret string
		return ret
	}
	return *o.Vrf
}

// GetVrfOk returns a tuple with the Vrf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilsClearArp) GetVrfOk() (*string, bool) {
	if o == nil || IsNil(o.Vrf) {
		return nil, false
	}
	return o.Vrf, true
}

// HasVrf returns a boolean if a field has been set.
func (o *UtilsClearArp) HasVrf() bool {
	if o != nil && !IsNil(o.Vrf) {
		return true
	}

	return false
}

// SetVrf gets a reference to the given string and assigns it to the Vrf field.
func (o *UtilsClearArp) SetVrf(v string) {
	o.Vrf = &v
}

func (o UtilsClearArp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UtilsClearArp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Node) {
		toSerialize["node"] = o.Node
	}
	if !IsNil(o.PortId) {
		toSerialize["port_id"] = o.PortId
	}
	if !IsNil(o.Vlan) {
		toSerialize["vlan"] = o.Vlan
	}
	if !IsNil(o.Vrf) {
		toSerialize["vrf"] = o.Vrf
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UtilsClearArp) UnmarshalJSON(data []byte) (err error) {
	varUtilsClearArp := _UtilsClearArp{}

	err = json.Unmarshal(data, &varUtilsClearArp)

	if err != nil {
		return err
	}

	*o = UtilsClearArp(varUtilsClearArp)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ip")
		delete(additionalProperties, "node")
		delete(additionalProperties, "port_id")
		delete(additionalProperties, "vlan")
		delete(additionalProperties, "vrf")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUtilsClearArp struct {
	value *UtilsClearArp
	isSet bool
}

func (v NullableUtilsClearArp) Get() *UtilsClearArp {
	return v.value
}

func (v *NullableUtilsClearArp) Set(val *UtilsClearArp) {
	v.value = val
	v.isSet = true
}

func (v NullableUtilsClearArp) IsSet() bool {
	return v.isSet
}

func (v *NullableUtilsClearArp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUtilsClearArp(val *UtilsClearArp) *NullableUtilsClearArp {
	return &NullableUtilsClearArp{value: val, isSet: true}
}

func (v NullableUtilsClearArp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUtilsClearArp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


