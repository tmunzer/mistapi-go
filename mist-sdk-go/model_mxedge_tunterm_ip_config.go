/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the MxedgeTuntermIpConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MxedgeTuntermIpConfig{}

// MxedgeTuntermIpConfig ip configuration of the Mist Tunnel interface
type MxedgeTuntermIpConfig struct {
	Gateway string `json:"gateway"`
	Gateway6 *string `json:"gateway6,omitempty"`
	// untagged VLAN
	Ip string `json:"ip"`
	Ip6 *string `json:"ip6,omitempty"`
	Netmask string `json:"netmask"`
	Netmask6 *string `json:"netmask6,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MxedgeTuntermIpConfig MxedgeTuntermIpConfig

// NewMxedgeTuntermIpConfig instantiates a new MxedgeTuntermIpConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMxedgeTuntermIpConfig(gateway string, ip string, netmask string) *MxedgeTuntermIpConfig {
	this := MxedgeTuntermIpConfig{}
	this.Gateway = gateway
	this.Ip = ip
	this.Netmask = netmask
	return &this
}

// NewMxedgeTuntermIpConfigWithDefaults instantiates a new MxedgeTuntermIpConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMxedgeTuntermIpConfigWithDefaults() *MxedgeTuntermIpConfig {
	this := MxedgeTuntermIpConfig{}
	return &this
}

// GetGateway returns the Gateway field value
func (o *MxedgeTuntermIpConfig) GetGateway() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value
// and a boolean to check if the value has been set.
func (o *MxedgeTuntermIpConfig) GetGatewayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gateway, true
}

// SetGateway sets field value
func (o *MxedgeTuntermIpConfig) SetGateway(v string) {
	o.Gateway = v
}

// GetGateway6 returns the Gateway6 field value if set, zero value otherwise.
func (o *MxedgeTuntermIpConfig) GetGateway6() string {
	if o == nil || IsNil(o.Gateway6) {
		var ret string
		return ret
	}
	return *o.Gateway6
}

// GetGateway6Ok returns a tuple with the Gateway6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxedgeTuntermIpConfig) GetGateway6Ok() (*string, bool) {
	if o == nil || IsNil(o.Gateway6) {
		return nil, false
	}
	return o.Gateway6, true
}

// HasGateway6 returns a boolean if a field has been set.
func (o *MxedgeTuntermIpConfig) HasGateway6() bool {
	if o != nil && !IsNil(o.Gateway6) {
		return true
	}

	return false
}

// SetGateway6 gets a reference to the given string and assigns it to the Gateway6 field.
func (o *MxedgeTuntermIpConfig) SetGateway6(v string) {
	o.Gateway6 = &v
}

// GetIp returns the Ip field value
func (o *MxedgeTuntermIpConfig) GetIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value
// and a boolean to check if the value has been set.
func (o *MxedgeTuntermIpConfig) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ip, true
}

// SetIp sets field value
func (o *MxedgeTuntermIpConfig) SetIp(v string) {
	o.Ip = v
}

// GetIp6 returns the Ip6 field value if set, zero value otherwise.
func (o *MxedgeTuntermIpConfig) GetIp6() string {
	if o == nil || IsNil(o.Ip6) {
		var ret string
		return ret
	}
	return *o.Ip6
}

// GetIp6Ok returns a tuple with the Ip6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxedgeTuntermIpConfig) GetIp6Ok() (*string, bool) {
	if o == nil || IsNil(o.Ip6) {
		return nil, false
	}
	return o.Ip6, true
}

// HasIp6 returns a boolean if a field has been set.
func (o *MxedgeTuntermIpConfig) HasIp6() bool {
	if o != nil && !IsNil(o.Ip6) {
		return true
	}

	return false
}

// SetIp6 gets a reference to the given string and assigns it to the Ip6 field.
func (o *MxedgeTuntermIpConfig) SetIp6(v string) {
	o.Ip6 = &v
}

// GetNetmask returns the Netmask field value
func (o *MxedgeTuntermIpConfig) GetNetmask() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Netmask
}

// GetNetmaskOk returns a tuple with the Netmask field value
// and a boolean to check if the value has been set.
func (o *MxedgeTuntermIpConfig) GetNetmaskOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Netmask, true
}

// SetNetmask sets field value
func (o *MxedgeTuntermIpConfig) SetNetmask(v string) {
	o.Netmask = v
}

// GetNetmask6 returns the Netmask6 field value if set, zero value otherwise.
func (o *MxedgeTuntermIpConfig) GetNetmask6() string {
	if o == nil || IsNil(o.Netmask6) {
		var ret string
		return ret
	}
	return *o.Netmask6
}

// GetNetmask6Ok returns a tuple with the Netmask6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxedgeTuntermIpConfig) GetNetmask6Ok() (*string, bool) {
	if o == nil || IsNil(o.Netmask6) {
		return nil, false
	}
	return o.Netmask6, true
}

// HasNetmask6 returns a boolean if a field has been set.
func (o *MxedgeTuntermIpConfig) HasNetmask6() bool {
	if o != nil && !IsNil(o.Netmask6) {
		return true
	}

	return false
}

// SetNetmask6 gets a reference to the given string and assigns it to the Netmask6 field.
func (o *MxedgeTuntermIpConfig) SetNetmask6(v string) {
	o.Netmask6 = &v
}

func (o MxedgeTuntermIpConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MxedgeTuntermIpConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["gateway"] = o.Gateway
	if !IsNil(o.Gateway6) {
		toSerialize["gateway6"] = o.Gateway6
	}
	toSerialize["ip"] = o.Ip
	if !IsNil(o.Ip6) {
		toSerialize["ip6"] = o.Ip6
	}
	toSerialize["netmask"] = o.Netmask
	if !IsNil(o.Netmask6) {
		toSerialize["netmask6"] = o.Netmask6
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MxedgeTuntermIpConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"gateway",
		"ip",
		"netmask",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMxedgeTuntermIpConfig := _MxedgeTuntermIpConfig{}

	err = json.Unmarshal(data, &varMxedgeTuntermIpConfig)

	if err != nil {
		return err
	}

	*o = MxedgeTuntermIpConfig(varMxedgeTuntermIpConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "gateway")
		delete(additionalProperties, "gateway6")
		delete(additionalProperties, "ip")
		delete(additionalProperties, "ip6")
		delete(additionalProperties, "netmask")
		delete(additionalProperties, "netmask6")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMxedgeTuntermIpConfig struct {
	value *MxedgeTuntermIpConfig
	isSet bool
}

func (v NullableMxedgeTuntermIpConfig) Get() *MxedgeTuntermIpConfig {
	return v.value
}

func (v *NullableMxedgeTuntermIpConfig) Set(val *MxedgeTuntermIpConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableMxedgeTuntermIpConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableMxedgeTuntermIpConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMxedgeTuntermIpConfig(val *MxedgeTuntermIpConfig) *NullableMxedgeTuntermIpConfig {
	return &NullableMxedgeTuntermIpConfig{value: val, isSet: true}
}

func (v NullableMxedgeTuntermIpConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMxedgeTuntermIpConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


