/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the UiSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UiSettings{}

// UiSettings UI Settings
type UiSettings struct {
	CreatedTime *float32 `json:"created_time,omitempty"`
	DefaultScopeId *string `json:"defaultScopeId,omitempty"`
	DefaultScopeType *string `json:"defaultScopeType,omitempty"`
	DefaultTimeRange *UiSettingsDefaultTimeRange `json:"defaultTimeRange,omitempty"`
	Description string `json:"description"`
	ForSite *bool `json:"for_site,omitempty"`
	Id *string `json:"id,omitempty"`
	IsCustomDataboard *bool `json:"isCustomDataboard,omitempty"`
	IsScopeLinked *bool `json:"isScopeLinked,omitempty"`
	IsTimeRangeLinked *bool `json:"isTimeRangeLinked,omitempty"`
	ModifiedTime *float32 `json:"modified_time,omitempty"`
	Name *string `json:"name,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	Purpose string `json:"purpose"`
	SiteId *string `json:"site_id,omitempty"`
	Tiles []UiSettingsTile `json:"tiles,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UiSettings UiSettings

// NewUiSettings instantiates a new UiSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUiSettings(description string, purpose string) *UiSettings {
	this := UiSettings{}
	this.Description = description
	this.Purpose = purpose
	return &this
}

// NewUiSettingsWithDefaults instantiates a new UiSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUiSettingsWithDefaults() *UiSettings {
	this := UiSettings{}
	return &this
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *UiSettings) GetCreatedTime() float32 {
	if o == nil || IsNil(o.CreatedTime) {
		var ret float32
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiSettings) GetCreatedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *UiSettings) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given float32 and assigns it to the CreatedTime field.
func (o *UiSettings) SetCreatedTime(v float32) {
	o.CreatedTime = &v
}

// GetDefaultScopeId returns the DefaultScopeId field value if set, zero value otherwise.
func (o *UiSettings) GetDefaultScopeId() string {
	if o == nil || IsNil(o.DefaultScopeId) {
		var ret string
		return ret
	}
	return *o.DefaultScopeId
}

// GetDefaultScopeIdOk returns a tuple with the DefaultScopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiSettings) GetDefaultScopeIdOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultScopeId) {
		return nil, false
	}
	return o.DefaultScopeId, true
}

// HasDefaultScopeId returns a boolean if a field has been set.
func (o *UiSettings) HasDefaultScopeId() bool {
	if o != nil && !IsNil(o.DefaultScopeId) {
		return true
	}

	return false
}

// SetDefaultScopeId gets a reference to the given string and assigns it to the DefaultScopeId field.
func (o *UiSettings) SetDefaultScopeId(v string) {
	o.DefaultScopeId = &v
}

// GetDefaultScopeType returns the DefaultScopeType field value if set, zero value otherwise.
func (o *UiSettings) GetDefaultScopeType() string {
	if o == nil || IsNil(o.DefaultScopeType) {
		var ret string
		return ret
	}
	return *o.DefaultScopeType
}

// GetDefaultScopeTypeOk returns a tuple with the DefaultScopeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiSettings) GetDefaultScopeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultScopeType) {
		return nil, false
	}
	return o.DefaultScopeType, true
}

// HasDefaultScopeType returns a boolean if a field has been set.
func (o *UiSettings) HasDefaultScopeType() bool {
	if o != nil && !IsNil(o.DefaultScopeType) {
		return true
	}

	return false
}

// SetDefaultScopeType gets a reference to the given string and assigns it to the DefaultScopeType field.
func (o *UiSettings) SetDefaultScopeType(v string) {
	o.DefaultScopeType = &v
}

// GetDefaultTimeRange returns the DefaultTimeRange field value if set, zero value otherwise.
func (o *UiSettings) GetDefaultTimeRange() UiSettingsDefaultTimeRange {
	if o == nil || IsNil(o.DefaultTimeRange) {
		var ret UiSettingsDefaultTimeRange
		return ret
	}
	return *o.DefaultTimeRange
}

// GetDefaultTimeRangeOk returns a tuple with the DefaultTimeRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiSettings) GetDefaultTimeRangeOk() (*UiSettingsDefaultTimeRange, bool) {
	if o == nil || IsNil(o.DefaultTimeRange) {
		return nil, false
	}
	return o.DefaultTimeRange, true
}

// HasDefaultTimeRange returns a boolean if a field has been set.
func (o *UiSettings) HasDefaultTimeRange() bool {
	if o != nil && !IsNil(o.DefaultTimeRange) {
		return true
	}

	return false
}

// SetDefaultTimeRange gets a reference to the given UiSettingsDefaultTimeRange and assigns it to the DefaultTimeRange field.
func (o *UiSettings) SetDefaultTimeRange(v UiSettingsDefaultTimeRange) {
	o.DefaultTimeRange = &v
}

// GetDescription returns the Description field value
func (o *UiSettings) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *UiSettings) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *UiSettings) SetDescription(v string) {
	o.Description = v
}

// GetForSite returns the ForSite field value if set, zero value otherwise.
func (o *UiSettings) GetForSite() bool {
	if o == nil || IsNil(o.ForSite) {
		var ret bool
		return ret
	}
	return *o.ForSite
}

// GetForSiteOk returns a tuple with the ForSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiSettings) GetForSiteOk() (*bool, bool) {
	if o == nil || IsNil(o.ForSite) {
		return nil, false
	}
	return o.ForSite, true
}

// HasForSite returns a boolean if a field has been set.
func (o *UiSettings) HasForSite() bool {
	if o != nil && !IsNil(o.ForSite) {
		return true
	}

	return false
}

// SetForSite gets a reference to the given bool and assigns it to the ForSite field.
func (o *UiSettings) SetForSite(v bool) {
	o.ForSite = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UiSettings) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiSettings) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UiSettings) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UiSettings) SetId(v string) {
	o.Id = &v
}

// GetIsCustomDataboard returns the IsCustomDataboard field value if set, zero value otherwise.
func (o *UiSettings) GetIsCustomDataboard() bool {
	if o == nil || IsNil(o.IsCustomDataboard) {
		var ret bool
		return ret
	}
	return *o.IsCustomDataboard
}

// GetIsCustomDataboardOk returns a tuple with the IsCustomDataboard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiSettings) GetIsCustomDataboardOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCustomDataboard) {
		return nil, false
	}
	return o.IsCustomDataboard, true
}

// HasIsCustomDataboard returns a boolean if a field has been set.
func (o *UiSettings) HasIsCustomDataboard() bool {
	if o != nil && !IsNil(o.IsCustomDataboard) {
		return true
	}

	return false
}

// SetIsCustomDataboard gets a reference to the given bool and assigns it to the IsCustomDataboard field.
func (o *UiSettings) SetIsCustomDataboard(v bool) {
	o.IsCustomDataboard = &v
}

// GetIsScopeLinked returns the IsScopeLinked field value if set, zero value otherwise.
func (o *UiSettings) GetIsScopeLinked() bool {
	if o == nil || IsNil(o.IsScopeLinked) {
		var ret bool
		return ret
	}
	return *o.IsScopeLinked
}

// GetIsScopeLinkedOk returns a tuple with the IsScopeLinked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiSettings) GetIsScopeLinkedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsScopeLinked) {
		return nil, false
	}
	return o.IsScopeLinked, true
}

// HasIsScopeLinked returns a boolean if a field has been set.
func (o *UiSettings) HasIsScopeLinked() bool {
	if o != nil && !IsNil(o.IsScopeLinked) {
		return true
	}

	return false
}

// SetIsScopeLinked gets a reference to the given bool and assigns it to the IsScopeLinked field.
func (o *UiSettings) SetIsScopeLinked(v bool) {
	o.IsScopeLinked = &v
}

// GetIsTimeRangeLinked returns the IsTimeRangeLinked field value if set, zero value otherwise.
func (o *UiSettings) GetIsTimeRangeLinked() bool {
	if o == nil || IsNil(o.IsTimeRangeLinked) {
		var ret bool
		return ret
	}
	return *o.IsTimeRangeLinked
}

// GetIsTimeRangeLinkedOk returns a tuple with the IsTimeRangeLinked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiSettings) GetIsTimeRangeLinkedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTimeRangeLinked) {
		return nil, false
	}
	return o.IsTimeRangeLinked, true
}

// HasIsTimeRangeLinked returns a boolean if a field has been set.
func (o *UiSettings) HasIsTimeRangeLinked() bool {
	if o != nil && !IsNil(o.IsTimeRangeLinked) {
		return true
	}

	return false
}

// SetIsTimeRangeLinked gets a reference to the given bool and assigns it to the IsTimeRangeLinked field.
func (o *UiSettings) SetIsTimeRangeLinked(v bool) {
	o.IsTimeRangeLinked = &v
}

// GetModifiedTime returns the ModifiedTime field value if set, zero value otherwise.
func (o *UiSettings) GetModifiedTime() float32 {
	if o == nil || IsNil(o.ModifiedTime) {
		var ret float32
		return ret
	}
	return *o.ModifiedTime
}

// GetModifiedTimeOk returns a tuple with the ModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiSettings) GetModifiedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.ModifiedTime) {
		return nil, false
	}
	return o.ModifiedTime, true
}

// HasModifiedTime returns a boolean if a field has been set.
func (o *UiSettings) HasModifiedTime() bool {
	if o != nil && !IsNil(o.ModifiedTime) {
		return true
	}

	return false
}

// SetModifiedTime gets a reference to the given float32 and assigns it to the ModifiedTime field.
func (o *UiSettings) SetModifiedTime(v float32) {
	o.ModifiedTime = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UiSettings) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiSettings) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UiSettings) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UiSettings) SetName(v string) {
	o.Name = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *UiSettings) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiSettings) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *UiSettings) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *UiSettings) SetOrgId(v string) {
	o.OrgId = &v
}

// GetPurpose returns the Purpose field value
func (o *UiSettings) GetPurpose() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value
// and a boolean to check if the value has been set.
func (o *UiSettings) GetPurposeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Purpose, true
}

// SetPurpose sets field value
func (o *UiSettings) SetPurpose(v string) {
	o.Purpose = v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *UiSettings) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiSettings) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *UiSettings) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *UiSettings) SetSiteId(v string) {
	o.SiteId = &v
}

// GetTiles returns the Tiles field value if set, zero value otherwise.
func (o *UiSettings) GetTiles() []UiSettingsTile {
	if o == nil || IsNil(o.Tiles) {
		var ret []UiSettingsTile
		return ret
	}
	return o.Tiles
}

// GetTilesOk returns a tuple with the Tiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiSettings) GetTilesOk() ([]UiSettingsTile, bool) {
	if o == nil || IsNil(o.Tiles) {
		return nil, false
	}
	return o.Tiles, true
}

// HasTiles returns a boolean if a field has been set.
func (o *UiSettings) HasTiles() bool {
	if o != nil && !IsNil(o.Tiles) {
		return true
	}

	return false
}

// SetTiles gets a reference to the given []UiSettingsTile and assigns it to the Tiles field.
func (o *UiSettings) SetTiles(v []UiSettingsTile) {
	o.Tiles = v
}

func (o UiSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UiSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.DefaultScopeId) {
		toSerialize["defaultScopeId"] = o.DefaultScopeId
	}
	if !IsNil(o.DefaultScopeType) {
		toSerialize["defaultScopeType"] = o.DefaultScopeType
	}
	if !IsNil(o.DefaultTimeRange) {
		toSerialize["defaultTimeRange"] = o.DefaultTimeRange
	}
	toSerialize["description"] = o.Description
	if !IsNil(o.ForSite) {
		toSerialize["for_site"] = o.ForSite
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsCustomDataboard) {
		toSerialize["isCustomDataboard"] = o.IsCustomDataboard
	}
	if !IsNil(o.IsScopeLinked) {
		toSerialize["isScopeLinked"] = o.IsScopeLinked
	}
	if !IsNil(o.IsTimeRangeLinked) {
		toSerialize["isTimeRangeLinked"] = o.IsTimeRangeLinked
	}
	if !IsNil(o.ModifiedTime) {
		toSerialize["modified_time"] = o.ModifiedTime
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	toSerialize["purpose"] = o.Purpose
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.Tiles) {
		toSerialize["tiles"] = o.Tiles
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UiSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"purpose",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUiSettings := _UiSettings{}

	err = json.Unmarshal(data, &varUiSettings)

	if err != nil {
		return err
	}

	*o = UiSettings(varUiSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "created_time")
		delete(additionalProperties, "defaultScopeId")
		delete(additionalProperties, "defaultScopeType")
		delete(additionalProperties, "defaultTimeRange")
		delete(additionalProperties, "description")
		delete(additionalProperties, "for_site")
		delete(additionalProperties, "id")
		delete(additionalProperties, "isCustomDataboard")
		delete(additionalProperties, "isScopeLinked")
		delete(additionalProperties, "isTimeRangeLinked")
		delete(additionalProperties, "modified_time")
		delete(additionalProperties, "name")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "purpose")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "tiles")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUiSettings struct {
	value *UiSettings
	isSet bool
}

func (v NullableUiSettings) Get() *UiSettings {
	return v.value
}

func (v *NullableUiSettings) Set(val *UiSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableUiSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableUiSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUiSettings(val *UiSettings) *NullableUiSettings {
	return &NullableUiSettings{value: val, isSet: true}
}

func (v NullableUiSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUiSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


