/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the ModelMap type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelMap{}

// ModelMap Map
type ModelMap struct {
	CreatedTime *float32 `json:"created_time,omitempty"`
	// name/val pair objects for location engine to use
	Flags *map[string]int32 `json:"flags,omitempty"`
	ForSite *bool `json:"for_site,omitempty"`
	// when type=image, height of the image map
	Height *int32 `json:"height,omitempty"`
	HeightM *float32 `json:"height_m,omitempty"`
	Id *string `json:"id,omitempty"`
	LatlngBr *LatlngBr `json:"latlng_br,omitempty"`
	LatlngTl *LatlngTl `json:"latlng_tl,omitempty"`
	// whether this map is considered locked down
	Locked *bool `json:"locked,omitempty"`
	ModifiedTime *float32 `json:"modified_time,omitempty"`
	// The name of the map
	Name *string `json:"name,omitempty"`
	OccupancyLimit *int32 `json:"occupancy_limit,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	// orientation of the map, 0 means up is north, 90 means up is west
	Orientation *int32 `json:"orientation,omitempty"`
	// the user-annotated x origin, pixels
	OriginX *int32 `json:"origin_x,omitempty"`
	// the user-annotated y origin, pixels
	OriginY *int32 `json:"origin_y,omitempty"`
	// when type=image, pixels per meter
	Ppm *float32 `json:"ppm,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	// sitesurvey_path
	SitesurveyPath []MapSitesurveyPathItems `json:"sitesurvey_path,omitempty"`
	// when type=image, the url for the thumbnail image / preview
	ThumbnailUrl *string `json:"thumbnail_url,omitempty"`
	Type *MapType `json:"type,omitempty"`
	// when type=image, the url
	Url *string `json:"url,omitempty"`
	// whether this map uses autooreintation values or ignores them
	UseAutoOrientation *bool `json:"use_auto_orientation,omitempty"`
	// whether this map uses autoplacement values or ignores them
	UseAutoPlacement *bool `json:"use_auto_placement,omitempty"`
	View NullableMapView `json:"view,omitempty"`
	WallPath *MapWallPath `json:"wall_path,omitempty"`
	Wayfinding *MapWayfinding `json:"wayfinding,omitempty"`
	WayfindingPath *MapWayfindingPath `json:"wayfinding_path,omitempty"`
	// when type=image, width of the image map
	Width *int32 `json:"width,omitempty"`
	WidthM *float32 `json:"width_m,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelMap ModelMap

// NewModelMap instantiates a new ModelMap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelMap() *ModelMap {
	this := ModelMap{}
	var locked bool = false
	this.Locked = &locked
	var orientation int32 = 0
	this.Orientation = &orientation
	var type_ MapType = MAPTYPE_IMAGE
	this.Type = &type_
	var useAutoOrientation bool = false
	this.UseAutoOrientation = &useAutoOrientation
	var useAutoPlacement bool = false
	this.UseAutoPlacement = &useAutoPlacement
	return &this
}

// NewModelMapWithDefaults instantiates a new ModelMap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelMapWithDefaults() *ModelMap {
	this := ModelMap{}
	var locked bool = false
	this.Locked = &locked
	var orientation int32 = 0
	this.Orientation = &orientation
	var type_ MapType = MAPTYPE_IMAGE
	this.Type = &type_
	var useAutoOrientation bool = false
	this.UseAutoOrientation = &useAutoOrientation
	var useAutoPlacement bool = false
	this.UseAutoPlacement = &useAutoPlacement
	return &this
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *ModelMap) GetCreatedTime() float32 {
	if o == nil || IsNil(o.CreatedTime) {
		var ret float32
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetCreatedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *ModelMap) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given float32 and assigns it to the CreatedTime field.
func (o *ModelMap) SetCreatedTime(v float32) {
	o.CreatedTime = &v
}

// GetFlags returns the Flags field value if set, zero value otherwise.
func (o *ModelMap) GetFlags() map[string]int32 {
	if o == nil || IsNil(o.Flags) {
		var ret map[string]int32
		return ret
	}
	return *o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetFlagsOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.Flags) {
		return nil, false
	}
	return o.Flags, true
}

// HasFlags returns a boolean if a field has been set.
func (o *ModelMap) HasFlags() bool {
	if o != nil && !IsNil(o.Flags) {
		return true
	}

	return false
}

// SetFlags gets a reference to the given map[string]int32 and assigns it to the Flags field.
func (o *ModelMap) SetFlags(v map[string]int32) {
	o.Flags = &v
}

// GetForSite returns the ForSite field value if set, zero value otherwise.
func (o *ModelMap) GetForSite() bool {
	if o == nil || IsNil(o.ForSite) {
		var ret bool
		return ret
	}
	return *o.ForSite
}

// GetForSiteOk returns a tuple with the ForSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetForSiteOk() (*bool, bool) {
	if o == nil || IsNil(o.ForSite) {
		return nil, false
	}
	return o.ForSite, true
}

// HasForSite returns a boolean if a field has been set.
func (o *ModelMap) HasForSite() bool {
	if o != nil && !IsNil(o.ForSite) {
		return true
	}

	return false
}

// SetForSite gets a reference to the given bool and assigns it to the ForSite field.
func (o *ModelMap) SetForSite(v bool) {
	o.ForSite = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *ModelMap) GetHeight() int32 {
	if o == nil || IsNil(o.Height) {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *ModelMap) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *ModelMap) SetHeight(v int32) {
	o.Height = &v
}

// GetHeightM returns the HeightM field value if set, zero value otherwise.
func (o *ModelMap) GetHeightM() float32 {
	if o == nil || IsNil(o.HeightM) {
		var ret float32
		return ret
	}
	return *o.HeightM
}

// GetHeightMOk returns a tuple with the HeightM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetHeightMOk() (*float32, bool) {
	if o == nil || IsNil(o.HeightM) {
		return nil, false
	}
	return o.HeightM, true
}

// HasHeightM returns a boolean if a field has been set.
func (o *ModelMap) HasHeightM() bool {
	if o != nil && !IsNil(o.HeightM) {
		return true
	}

	return false
}

// SetHeightM gets a reference to the given float32 and assigns it to the HeightM field.
func (o *ModelMap) SetHeightM(v float32) {
	o.HeightM = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelMap) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelMap) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ModelMap) SetId(v string) {
	o.Id = &v
}

// GetLatlngBr returns the LatlngBr field value if set, zero value otherwise.
func (o *ModelMap) GetLatlngBr() LatlngBr {
	if o == nil || IsNil(o.LatlngBr) {
		var ret LatlngBr
		return ret
	}
	return *o.LatlngBr
}

// GetLatlngBrOk returns a tuple with the LatlngBr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetLatlngBrOk() (*LatlngBr, bool) {
	if o == nil || IsNil(o.LatlngBr) {
		return nil, false
	}
	return o.LatlngBr, true
}

// HasLatlngBr returns a boolean if a field has been set.
func (o *ModelMap) HasLatlngBr() bool {
	if o != nil && !IsNil(o.LatlngBr) {
		return true
	}

	return false
}

// SetLatlngBr gets a reference to the given LatlngBr and assigns it to the LatlngBr field.
func (o *ModelMap) SetLatlngBr(v LatlngBr) {
	o.LatlngBr = &v
}

// GetLatlngTl returns the LatlngTl field value if set, zero value otherwise.
func (o *ModelMap) GetLatlngTl() LatlngTl {
	if o == nil || IsNil(o.LatlngTl) {
		var ret LatlngTl
		return ret
	}
	return *o.LatlngTl
}

// GetLatlngTlOk returns a tuple with the LatlngTl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetLatlngTlOk() (*LatlngTl, bool) {
	if o == nil || IsNil(o.LatlngTl) {
		return nil, false
	}
	return o.LatlngTl, true
}

// HasLatlngTl returns a boolean if a field has been set.
func (o *ModelMap) HasLatlngTl() bool {
	if o != nil && !IsNil(o.LatlngTl) {
		return true
	}

	return false
}

// SetLatlngTl gets a reference to the given LatlngTl and assigns it to the LatlngTl field.
func (o *ModelMap) SetLatlngTl(v LatlngTl) {
	o.LatlngTl = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *ModelMap) GetLocked() bool {
	if o == nil || IsNil(o.Locked) {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.Locked) {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *ModelMap) HasLocked() bool {
	if o != nil && !IsNil(o.Locked) {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *ModelMap) SetLocked(v bool) {
	o.Locked = &v
}

// GetModifiedTime returns the ModifiedTime field value if set, zero value otherwise.
func (o *ModelMap) GetModifiedTime() float32 {
	if o == nil || IsNil(o.ModifiedTime) {
		var ret float32
		return ret
	}
	return *o.ModifiedTime
}

// GetModifiedTimeOk returns a tuple with the ModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetModifiedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.ModifiedTime) {
		return nil, false
	}
	return o.ModifiedTime, true
}

// HasModifiedTime returns a boolean if a field has been set.
func (o *ModelMap) HasModifiedTime() bool {
	if o != nil && !IsNil(o.ModifiedTime) {
		return true
	}

	return false
}

// SetModifiedTime gets a reference to the given float32 and assigns it to the ModifiedTime field.
func (o *ModelMap) SetModifiedTime(v float32) {
	o.ModifiedTime = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelMap) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelMap) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelMap) SetName(v string) {
	o.Name = &v
}

// GetOccupancyLimit returns the OccupancyLimit field value if set, zero value otherwise.
func (o *ModelMap) GetOccupancyLimit() int32 {
	if o == nil || IsNil(o.OccupancyLimit) {
		var ret int32
		return ret
	}
	return *o.OccupancyLimit
}

// GetOccupancyLimitOk returns a tuple with the OccupancyLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetOccupancyLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.OccupancyLimit) {
		return nil, false
	}
	return o.OccupancyLimit, true
}

// HasOccupancyLimit returns a boolean if a field has been set.
func (o *ModelMap) HasOccupancyLimit() bool {
	if o != nil && !IsNil(o.OccupancyLimit) {
		return true
	}

	return false
}

// SetOccupancyLimit gets a reference to the given int32 and assigns it to the OccupancyLimit field.
func (o *ModelMap) SetOccupancyLimit(v int32) {
	o.OccupancyLimit = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *ModelMap) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *ModelMap) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *ModelMap) SetOrgId(v string) {
	o.OrgId = &v
}

// GetOrientation returns the Orientation field value if set, zero value otherwise.
func (o *ModelMap) GetOrientation() int32 {
	if o == nil || IsNil(o.Orientation) {
		var ret int32
		return ret
	}
	return *o.Orientation
}

// GetOrientationOk returns a tuple with the Orientation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetOrientationOk() (*int32, bool) {
	if o == nil || IsNil(o.Orientation) {
		return nil, false
	}
	return o.Orientation, true
}

// HasOrientation returns a boolean if a field has been set.
func (o *ModelMap) HasOrientation() bool {
	if o != nil && !IsNil(o.Orientation) {
		return true
	}

	return false
}

// SetOrientation gets a reference to the given int32 and assigns it to the Orientation field.
func (o *ModelMap) SetOrientation(v int32) {
	o.Orientation = &v
}

// GetOriginX returns the OriginX field value if set, zero value otherwise.
func (o *ModelMap) GetOriginX() int32 {
	if o == nil || IsNil(o.OriginX) {
		var ret int32
		return ret
	}
	return *o.OriginX
}

// GetOriginXOk returns a tuple with the OriginX field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetOriginXOk() (*int32, bool) {
	if o == nil || IsNil(o.OriginX) {
		return nil, false
	}
	return o.OriginX, true
}

// HasOriginX returns a boolean if a field has been set.
func (o *ModelMap) HasOriginX() bool {
	if o != nil && !IsNil(o.OriginX) {
		return true
	}

	return false
}

// SetOriginX gets a reference to the given int32 and assigns it to the OriginX field.
func (o *ModelMap) SetOriginX(v int32) {
	o.OriginX = &v
}

// GetOriginY returns the OriginY field value if set, zero value otherwise.
func (o *ModelMap) GetOriginY() int32 {
	if o == nil || IsNil(o.OriginY) {
		var ret int32
		return ret
	}
	return *o.OriginY
}

// GetOriginYOk returns a tuple with the OriginY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetOriginYOk() (*int32, bool) {
	if o == nil || IsNil(o.OriginY) {
		return nil, false
	}
	return o.OriginY, true
}

// HasOriginY returns a boolean if a field has been set.
func (o *ModelMap) HasOriginY() bool {
	if o != nil && !IsNil(o.OriginY) {
		return true
	}

	return false
}

// SetOriginY gets a reference to the given int32 and assigns it to the OriginY field.
func (o *ModelMap) SetOriginY(v int32) {
	o.OriginY = &v
}

// GetPpm returns the Ppm field value if set, zero value otherwise.
func (o *ModelMap) GetPpm() float32 {
	if o == nil || IsNil(o.Ppm) {
		var ret float32
		return ret
	}
	return *o.Ppm
}

// GetPpmOk returns a tuple with the Ppm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetPpmOk() (*float32, bool) {
	if o == nil || IsNil(o.Ppm) {
		return nil, false
	}
	return o.Ppm, true
}

// HasPpm returns a boolean if a field has been set.
func (o *ModelMap) HasPpm() bool {
	if o != nil && !IsNil(o.Ppm) {
		return true
	}

	return false
}

// SetPpm gets a reference to the given float32 and assigns it to the Ppm field.
func (o *ModelMap) SetPpm(v float32) {
	o.Ppm = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *ModelMap) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *ModelMap) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *ModelMap) SetSiteId(v string) {
	o.SiteId = &v
}

// GetSitesurveyPath returns the SitesurveyPath field value if set, zero value otherwise.
func (o *ModelMap) GetSitesurveyPath() []MapSitesurveyPathItems {
	if o == nil || IsNil(o.SitesurveyPath) {
		var ret []MapSitesurveyPathItems
		return ret
	}
	return o.SitesurveyPath
}

// GetSitesurveyPathOk returns a tuple with the SitesurveyPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetSitesurveyPathOk() ([]MapSitesurveyPathItems, bool) {
	if o == nil || IsNil(o.SitesurveyPath) {
		return nil, false
	}
	return o.SitesurveyPath, true
}

// HasSitesurveyPath returns a boolean if a field has been set.
func (o *ModelMap) HasSitesurveyPath() bool {
	if o != nil && !IsNil(o.SitesurveyPath) {
		return true
	}

	return false
}

// SetSitesurveyPath gets a reference to the given []MapSitesurveyPathItems and assigns it to the SitesurveyPath field.
func (o *ModelMap) SetSitesurveyPath(v []MapSitesurveyPathItems) {
	o.SitesurveyPath = v
}

// GetThumbnailUrl returns the ThumbnailUrl field value if set, zero value otherwise.
func (o *ModelMap) GetThumbnailUrl() string {
	if o == nil || IsNil(o.ThumbnailUrl) {
		var ret string
		return ret
	}
	return *o.ThumbnailUrl
}

// GetThumbnailUrlOk returns a tuple with the ThumbnailUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetThumbnailUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ThumbnailUrl) {
		return nil, false
	}
	return o.ThumbnailUrl, true
}

// HasThumbnailUrl returns a boolean if a field has been set.
func (o *ModelMap) HasThumbnailUrl() bool {
	if o != nil && !IsNil(o.ThumbnailUrl) {
		return true
	}

	return false
}

// SetThumbnailUrl gets a reference to the given string and assigns it to the ThumbnailUrl field.
func (o *ModelMap) SetThumbnailUrl(v string) {
	o.ThumbnailUrl = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ModelMap) GetType() MapType {
	if o == nil || IsNil(o.Type) {
		var ret MapType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetTypeOk() (*MapType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ModelMap) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given MapType and assigns it to the Type field.
func (o *ModelMap) SetType(v MapType) {
	o.Type = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ModelMap) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ModelMap) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ModelMap) SetUrl(v string) {
	o.Url = &v
}

// GetUseAutoOrientation returns the UseAutoOrientation field value if set, zero value otherwise.
func (o *ModelMap) GetUseAutoOrientation() bool {
	if o == nil || IsNil(o.UseAutoOrientation) {
		var ret bool
		return ret
	}
	return *o.UseAutoOrientation
}

// GetUseAutoOrientationOk returns a tuple with the UseAutoOrientation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetUseAutoOrientationOk() (*bool, bool) {
	if o == nil || IsNil(o.UseAutoOrientation) {
		return nil, false
	}
	return o.UseAutoOrientation, true
}

// HasUseAutoOrientation returns a boolean if a field has been set.
func (o *ModelMap) HasUseAutoOrientation() bool {
	if o != nil && !IsNil(o.UseAutoOrientation) {
		return true
	}

	return false
}

// SetUseAutoOrientation gets a reference to the given bool and assigns it to the UseAutoOrientation field.
func (o *ModelMap) SetUseAutoOrientation(v bool) {
	o.UseAutoOrientation = &v
}

// GetUseAutoPlacement returns the UseAutoPlacement field value if set, zero value otherwise.
func (o *ModelMap) GetUseAutoPlacement() bool {
	if o == nil || IsNil(o.UseAutoPlacement) {
		var ret bool
		return ret
	}
	return *o.UseAutoPlacement
}

// GetUseAutoPlacementOk returns a tuple with the UseAutoPlacement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetUseAutoPlacementOk() (*bool, bool) {
	if o == nil || IsNil(o.UseAutoPlacement) {
		return nil, false
	}
	return o.UseAutoPlacement, true
}

// HasUseAutoPlacement returns a boolean if a field has been set.
func (o *ModelMap) HasUseAutoPlacement() bool {
	if o != nil && !IsNil(o.UseAutoPlacement) {
		return true
	}

	return false
}

// SetUseAutoPlacement gets a reference to the given bool and assigns it to the UseAutoPlacement field.
func (o *ModelMap) SetUseAutoPlacement(v bool) {
	o.UseAutoPlacement = &v
}

// GetView returns the View field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelMap) GetView() MapView {
	if o == nil || IsNil(o.View.Get()) {
		var ret MapView
		return ret
	}
	return *o.View.Get()
}

// GetViewOk returns a tuple with the View field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelMap) GetViewOk() (*MapView, bool) {
	if o == nil {
		return nil, false
	}
	return o.View.Get(), o.View.IsSet()
}

// HasView returns a boolean if a field has been set.
func (o *ModelMap) HasView() bool {
	if o != nil && o.View.IsSet() {
		return true
	}

	return false
}

// SetView gets a reference to the given NullableMapView and assigns it to the View field.
func (o *ModelMap) SetView(v MapView) {
	o.View.Set(&v)
}
// SetViewNil sets the value for View to be an explicit nil
func (o *ModelMap) SetViewNil() {
	o.View.Set(nil)
}

// UnsetView ensures that no value is present for View, not even an explicit nil
func (o *ModelMap) UnsetView() {
	o.View.Unset()
}

// GetWallPath returns the WallPath field value if set, zero value otherwise.
func (o *ModelMap) GetWallPath() MapWallPath {
	if o == nil || IsNil(o.WallPath) {
		var ret MapWallPath
		return ret
	}
	return *o.WallPath
}

// GetWallPathOk returns a tuple with the WallPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetWallPathOk() (*MapWallPath, bool) {
	if o == nil || IsNil(o.WallPath) {
		return nil, false
	}
	return o.WallPath, true
}

// HasWallPath returns a boolean if a field has been set.
func (o *ModelMap) HasWallPath() bool {
	if o != nil && !IsNil(o.WallPath) {
		return true
	}

	return false
}

// SetWallPath gets a reference to the given MapWallPath and assigns it to the WallPath field.
func (o *ModelMap) SetWallPath(v MapWallPath) {
	o.WallPath = &v
}

// GetWayfinding returns the Wayfinding field value if set, zero value otherwise.
func (o *ModelMap) GetWayfinding() MapWayfinding {
	if o == nil || IsNil(o.Wayfinding) {
		var ret MapWayfinding
		return ret
	}
	return *o.Wayfinding
}

// GetWayfindingOk returns a tuple with the Wayfinding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetWayfindingOk() (*MapWayfinding, bool) {
	if o == nil || IsNil(o.Wayfinding) {
		return nil, false
	}
	return o.Wayfinding, true
}

// HasWayfinding returns a boolean if a field has been set.
func (o *ModelMap) HasWayfinding() bool {
	if o != nil && !IsNil(o.Wayfinding) {
		return true
	}

	return false
}

// SetWayfinding gets a reference to the given MapWayfinding and assigns it to the Wayfinding field.
func (o *ModelMap) SetWayfinding(v MapWayfinding) {
	o.Wayfinding = &v
}

// GetWayfindingPath returns the WayfindingPath field value if set, zero value otherwise.
func (o *ModelMap) GetWayfindingPath() MapWayfindingPath {
	if o == nil || IsNil(o.WayfindingPath) {
		var ret MapWayfindingPath
		return ret
	}
	return *o.WayfindingPath
}

// GetWayfindingPathOk returns a tuple with the WayfindingPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetWayfindingPathOk() (*MapWayfindingPath, bool) {
	if o == nil || IsNil(o.WayfindingPath) {
		return nil, false
	}
	return o.WayfindingPath, true
}

// HasWayfindingPath returns a boolean if a field has been set.
func (o *ModelMap) HasWayfindingPath() bool {
	if o != nil && !IsNil(o.WayfindingPath) {
		return true
	}

	return false
}

// SetWayfindingPath gets a reference to the given MapWayfindingPath and assigns it to the WayfindingPath field.
func (o *ModelMap) SetWayfindingPath(v MapWayfindingPath) {
	o.WayfindingPath = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *ModelMap) GetWidth() int32 {
	if o == nil || IsNil(o.Width) {
		var ret int32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *ModelMap) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int32 and assigns it to the Width field.
func (o *ModelMap) SetWidth(v int32) {
	o.Width = &v
}

// GetWidthM returns the WidthM field value if set, zero value otherwise.
func (o *ModelMap) GetWidthM() float32 {
	if o == nil || IsNil(o.WidthM) {
		var ret float32
		return ret
	}
	return *o.WidthM
}

// GetWidthMOk returns a tuple with the WidthM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMap) GetWidthMOk() (*float32, bool) {
	if o == nil || IsNil(o.WidthM) {
		return nil, false
	}
	return o.WidthM, true
}

// HasWidthM returns a boolean if a field has been set.
func (o *ModelMap) HasWidthM() bool {
	if o != nil && !IsNil(o.WidthM) {
		return true
	}

	return false
}

// SetWidthM gets a reference to the given float32 and assigns it to the WidthM field.
func (o *ModelMap) SetWidthM(v float32) {
	o.WidthM = &v
}

func (o ModelMap) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelMap) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.Flags) {
		toSerialize["flags"] = o.Flags
	}
	if !IsNil(o.ForSite) {
		toSerialize["for_site"] = o.ForSite
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.HeightM) {
		toSerialize["height_m"] = o.HeightM
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LatlngBr) {
		toSerialize["latlng_br"] = o.LatlngBr
	}
	if !IsNil(o.LatlngTl) {
		toSerialize["latlng_tl"] = o.LatlngTl
	}
	if !IsNil(o.Locked) {
		toSerialize["locked"] = o.Locked
	}
	if !IsNil(o.ModifiedTime) {
		toSerialize["modified_time"] = o.ModifiedTime
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OccupancyLimit) {
		toSerialize["occupancy_limit"] = o.OccupancyLimit
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.Orientation) {
		toSerialize["orientation"] = o.Orientation
	}
	if !IsNil(o.OriginX) {
		toSerialize["origin_x"] = o.OriginX
	}
	if !IsNil(o.OriginY) {
		toSerialize["origin_y"] = o.OriginY
	}
	if !IsNil(o.Ppm) {
		toSerialize["ppm"] = o.Ppm
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.SitesurveyPath) {
		toSerialize["sitesurvey_path"] = o.SitesurveyPath
	}
	if !IsNil(o.ThumbnailUrl) {
		toSerialize["thumbnail_url"] = o.ThumbnailUrl
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.UseAutoOrientation) {
		toSerialize["use_auto_orientation"] = o.UseAutoOrientation
	}
	if !IsNil(o.UseAutoPlacement) {
		toSerialize["use_auto_placement"] = o.UseAutoPlacement
	}
	if o.View.IsSet() {
		toSerialize["view"] = o.View.Get()
	}
	if !IsNil(o.WallPath) {
		toSerialize["wall_path"] = o.WallPath
	}
	if !IsNil(o.Wayfinding) {
		toSerialize["wayfinding"] = o.Wayfinding
	}
	if !IsNil(o.WayfindingPath) {
		toSerialize["wayfinding_path"] = o.WayfindingPath
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	if !IsNil(o.WidthM) {
		toSerialize["width_m"] = o.WidthM
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelMap) UnmarshalJSON(data []byte) (err error) {
	varModelMap := _ModelMap{}

	err = json.Unmarshal(data, &varModelMap)

	if err != nil {
		return err
	}

	*o = ModelMap(varModelMap)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "created_time")
		delete(additionalProperties, "flags")
		delete(additionalProperties, "for_site")
		delete(additionalProperties, "height")
		delete(additionalProperties, "height_m")
		delete(additionalProperties, "id")
		delete(additionalProperties, "latlng_br")
		delete(additionalProperties, "latlng_tl")
		delete(additionalProperties, "locked")
		delete(additionalProperties, "modified_time")
		delete(additionalProperties, "name")
		delete(additionalProperties, "occupancy_limit")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "orientation")
		delete(additionalProperties, "origin_x")
		delete(additionalProperties, "origin_y")
		delete(additionalProperties, "ppm")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "sitesurvey_path")
		delete(additionalProperties, "thumbnail_url")
		delete(additionalProperties, "type")
		delete(additionalProperties, "url")
		delete(additionalProperties, "use_auto_orientation")
		delete(additionalProperties, "use_auto_placement")
		delete(additionalProperties, "view")
		delete(additionalProperties, "wall_path")
		delete(additionalProperties, "wayfinding")
		delete(additionalProperties, "wayfinding_path")
		delete(additionalProperties, "width")
		delete(additionalProperties, "width_m")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelMap struct {
	value *ModelMap
	isSet bool
}

func (v NullableModelMap) Get() *ModelMap {
	return v.value
}

func (v *NullableModelMap) Set(val *ModelMap) {
	v.value = val
	v.isSet = true
}

func (v NullableModelMap) IsSet() bool {
	return v.isSet
}

func (v *NullableModelMap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelMap(val *ModelMap) *NullableModelMap {
	return &NullableModelMap{value: val, isSet: true}
}

func (v NullableModelMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelMap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


