/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the SleHistogram type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SleHistogram{}

// SleHistogram struct for SleHistogram
type SleHistogram struct {
	Data []SleHistogramDataItem `json:"data"`
	End float32 `json:"end"`
	Metric string `json:"metric"`
	Start float32 `json:"start"`
	XLabel string `json:"x_label"`
	YLabel string `json:"y_label"`
	AdditionalProperties map[string]interface{}
}

type _SleHistogram SleHistogram

// NewSleHistogram instantiates a new SleHistogram object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSleHistogram(data []SleHistogramDataItem, end float32, metric string, start float32, xLabel string, yLabel string) *SleHistogram {
	this := SleHistogram{}
	this.Data = data
	this.End = end
	this.Metric = metric
	this.Start = start
	this.XLabel = xLabel
	this.YLabel = yLabel
	return &this
}

// NewSleHistogramWithDefaults instantiates a new SleHistogram object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSleHistogramWithDefaults() *SleHistogram {
	this := SleHistogram{}
	return &this
}

// GetData returns the Data field value
func (o *SleHistogram) GetData() []SleHistogramDataItem {
	if o == nil {
		var ret []SleHistogramDataItem
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *SleHistogram) GetDataOk() ([]SleHistogramDataItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *SleHistogram) SetData(v []SleHistogramDataItem) {
	o.Data = v
}

// GetEnd returns the End field value
func (o *SleHistogram) GetEnd() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.End
}

// GetEndOk returns a tuple with the End field value
// and a boolean to check if the value has been set.
func (o *SleHistogram) GetEndOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.End, true
}

// SetEnd sets field value
func (o *SleHistogram) SetEnd(v float32) {
	o.End = v
}

// GetMetric returns the Metric field value
func (o *SleHistogram) GetMetric() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Metric
}

// GetMetricOk returns a tuple with the Metric field value
// and a boolean to check if the value has been set.
func (o *SleHistogram) GetMetricOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metric, true
}

// SetMetric sets field value
func (o *SleHistogram) SetMetric(v string) {
	o.Metric = v
}

// GetStart returns the Start field value
func (o *SleHistogram) GetStart() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *SleHistogram) GetStartOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *SleHistogram) SetStart(v float32) {
	o.Start = v
}

// GetXLabel returns the XLabel field value
func (o *SleHistogram) GetXLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.XLabel
}

// GetXLabelOk returns a tuple with the XLabel field value
// and a boolean to check if the value has been set.
func (o *SleHistogram) GetXLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.XLabel, true
}

// SetXLabel sets field value
func (o *SleHistogram) SetXLabel(v string) {
	o.XLabel = v
}

// GetYLabel returns the YLabel field value
func (o *SleHistogram) GetYLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.YLabel
}

// GetYLabelOk returns a tuple with the YLabel field value
// and a boolean to check if the value has been set.
func (o *SleHistogram) GetYLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.YLabel, true
}

// SetYLabel sets field value
func (o *SleHistogram) SetYLabel(v string) {
	o.YLabel = v
}

func (o SleHistogram) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SleHistogram) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["end"] = o.End
	toSerialize["metric"] = o.Metric
	toSerialize["start"] = o.Start
	toSerialize["x_label"] = o.XLabel
	toSerialize["y_label"] = o.YLabel

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SleHistogram) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"end",
		"metric",
		"start",
		"x_label",
		"y_label",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSleHistogram := _SleHistogram{}

	err = json.Unmarshal(data, &varSleHistogram)

	if err != nil {
		return err
	}

	*o = SleHistogram(varSleHistogram)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "end")
		delete(additionalProperties, "metric")
		delete(additionalProperties, "start")
		delete(additionalProperties, "x_label")
		delete(additionalProperties, "y_label")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSleHistogram struct {
	value *SleHistogram
	isSet bool
}

func (v NullableSleHistogram) Get() *SleHistogram {
	return v.value
}

func (v *NullableSleHistogram) Set(val *SleHistogram) {
	v.value = val
	v.isSet = true
}

func (v NullableSleHistogram) IsSet() bool {
	return v.isSet
}

func (v *NullableSleHistogram) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSleHistogram(val *SleHistogram) *NullableSleHistogram {
	return &NullableSleHistogram{value: val, isSet: true}
}

func (v NullableSleHistogram) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSleHistogram) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


