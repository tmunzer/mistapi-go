/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the ApStatsRadioStat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApStatsRadioStat{}

// ApStatsRadioStat struct for ApStatsRadioStat
type ApStatsRadioStat struct {
	Band24 *ApRadioStats `json:"band_24,omitempty"`
	Band5 *ApRadioStats `json:"band_5,omitempty"`
	Band6 *ApRadioStats `json:"band_6,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApStatsRadioStat ApStatsRadioStat

// NewApStatsRadioStat instantiates a new ApStatsRadioStat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApStatsRadioStat() *ApStatsRadioStat {
	this := ApStatsRadioStat{}
	return &this
}

// NewApStatsRadioStatWithDefaults instantiates a new ApStatsRadioStat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApStatsRadioStatWithDefaults() *ApStatsRadioStat {
	this := ApStatsRadioStat{}
	return &this
}

// GetBand24 returns the Band24 field value if set, zero value otherwise.
func (o *ApStatsRadioStat) GetBand24() ApRadioStats {
	if o == nil || IsNil(o.Band24) {
		var ret ApRadioStats
		return ret
	}
	return *o.Band24
}

// GetBand24Ok returns a tuple with the Band24 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsRadioStat) GetBand24Ok() (*ApRadioStats, bool) {
	if o == nil || IsNil(o.Band24) {
		return nil, false
	}
	return o.Band24, true
}

// HasBand24 returns a boolean if a field has been set.
func (o *ApStatsRadioStat) HasBand24() bool {
	if o != nil && !IsNil(o.Band24) {
		return true
	}

	return false
}

// SetBand24 gets a reference to the given ApRadioStats and assigns it to the Band24 field.
func (o *ApStatsRadioStat) SetBand24(v ApRadioStats) {
	o.Band24 = &v
}

// GetBand5 returns the Band5 field value if set, zero value otherwise.
func (o *ApStatsRadioStat) GetBand5() ApRadioStats {
	if o == nil || IsNil(o.Band5) {
		var ret ApRadioStats
		return ret
	}
	return *o.Band5
}

// GetBand5Ok returns a tuple with the Band5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsRadioStat) GetBand5Ok() (*ApRadioStats, bool) {
	if o == nil || IsNil(o.Band5) {
		return nil, false
	}
	return o.Band5, true
}

// HasBand5 returns a boolean if a field has been set.
func (o *ApStatsRadioStat) HasBand5() bool {
	if o != nil && !IsNil(o.Band5) {
		return true
	}

	return false
}

// SetBand5 gets a reference to the given ApRadioStats and assigns it to the Band5 field.
func (o *ApStatsRadioStat) SetBand5(v ApRadioStats) {
	o.Band5 = &v
}

// GetBand6 returns the Band6 field value if set, zero value otherwise.
func (o *ApStatsRadioStat) GetBand6() ApRadioStats {
	if o == nil || IsNil(o.Band6) {
		var ret ApRadioStats
		return ret
	}
	return *o.Band6
}

// GetBand6Ok returns a tuple with the Band6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApStatsRadioStat) GetBand6Ok() (*ApRadioStats, bool) {
	if o == nil || IsNil(o.Band6) {
		return nil, false
	}
	return o.Band6, true
}

// HasBand6 returns a boolean if a field has been set.
func (o *ApStatsRadioStat) HasBand6() bool {
	if o != nil && !IsNil(o.Band6) {
		return true
	}

	return false
}

// SetBand6 gets a reference to the given ApRadioStats and assigns it to the Band6 field.
func (o *ApStatsRadioStat) SetBand6(v ApRadioStats) {
	o.Band6 = &v
}

func (o ApStatsRadioStat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApStatsRadioStat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Band24) {
		toSerialize["band_24"] = o.Band24
	}
	if !IsNil(o.Band5) {
		toSerialize["band_5"] = o.Band5
	}
	if !IsNil(o.Band6) {
		toSerialize["band_6"] = o.Band6
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApStatsRadioStat) UnmarshalJSON(data []byte) (err error) {
	varApStatsRadioStat := _ApStatsRadioStat{}

	err = json.Unmarshal(data, &varApStatsRadioStat)

	if err != nil {
		return err
	}

	*o = ApStatsRadioStat(varApStatsRadioStat)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "band_24")
		delete(additionalProperties, "band_5")
		delete(additionalProperties, "band_6")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApStatsRadioStat struct {
	value *ApStatsRadioStat
	isSet bool
}

func (v NullableApStatsRadioStat) Get() *ApStatsRadioStat {
	return v.value
}

func (v *NullableApStatsRadioStat) Set(val *ApStatsRadioStat) {
	v.value = val
	v.isSet = true
}

func (v NullableApStatsRadioStat) IsSet() bool {
	return v.isSet
}

func (v *NullableApStatsRadioStat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApStatsRadioStat(val *ApStatsRadioStat) *NullableApStatsRadioStat {
	return &NullableApStatsRadioStat{value: val, isSet: true}
}

func (v NullableApStatsRadioStat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApStatsRadioStat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


