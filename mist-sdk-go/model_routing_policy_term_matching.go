/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the RoutingPolicyTermMatching type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutingPolicyTermMatching{}

// RoutingPolicyTermMatching zero or more criteria/filter can be specified to match the term, all criteria have to be met
type RoutingPolicyTermMatching struct {
	// takes regular expression
	AsPath []string `json:"as_path,omitempty"`
	Community []string `json:"community,omitempty"`
	Network []string `json:"network,omitempty"`
	// zero or more criteria/filter can be specified to match the term, all criteria have to be met
	Prefix []string `json:"prefix,omitempty"`
	// `direct`, `bgp`, `osp`, ...
	Protocol []string `json:"protocol,omitempty"`
	RouteExists *RoutingPolicyTermMatchingRouteExists `json:"route_exists,omitempty"`
	// overlay-facing criteria (used for bgp_config where via=vpn)
	VpnNeighborMac []string `json:"vpn_neighbor_mac,omitempty"`
	// overlay-facing criteria (used for bgp_config where via=vpn) ordered-
	VpnPath []string `json:"vpn_path,omitempty"`
	VpnPathSla *RoutingPolicyTermMatchingVpnPathSla `json:"vpn_path_sla,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RoutingPolicyTermMatching RoutingPolicyTermMatching

// NewRoutingPolicyTermMatching instantiates a new RoutingPolicyTermMatching object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingPolicyTermMatching() *RoutingPolicyTermMatching {
	this := RoutingPolicyTermMatching{}
	return &this
}

// NewRoutingPolicyTermMatchingWithDefaults instantiates a new RoutingPolicyTermMatching object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingPolicyTermMatchingWithDefaults() *RoutingPolicyTermMatching {
	this := RoutingPolicyTermMatching{}
	return &this
}

// GetAsPath returns the AsPath field value if set, zero value otherwise.
func (o *RoutingPolicyTermMatching) GetAsPath() []string {
	if o == nil || IsNil(o.AsPath) {
		var ret []string
		return ret
	}
	return o.AsPath
}

// GetAsPathOk returns a tuple with the AsPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingPolicyTermMatching) GetAsPathOk() ([]string, bool) {
	if o == nil || IsNil(o.AsPath) {
		return nil, false
	}
	return o.AsPath, true
}

// HasAsPath returns a boolean if a field has been set.
func (o *RoutingPolicyTermMatching) HasAsPath() bool {
	if o != nil && !IsNil(o.AsPath) {
		return true
	}

	return false
}

// SetAsPath gets a reference to the given []string and assigns it to the AsPath field.
func (o *RoutingPolicyTermMatching) SetAsPath(v []string) {
	o.AsPath = v
}

// GetCommunity returns the Community field value if set, zero value otherwise.
func (o *RoutingPolicyTermMatching) GetCommunity() []string {
	if o == nil || IsNil(o.Community) {
		var ret []string
		return ret
	}
	return o.Community
}

// GetCommunityOk returns a tuple with the Community field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingPolicyTermMatching) GetCommunityOk() ([]string, bool) {
	if o == nil || IsNil(o.Community) {
		return nil, false
	}
	return o.Community, true
}

// HasCommunity returns a boolean if a field has been set.
func (o *RoutingPolicyTermMatching) HasCommunity() bool {
	if o != nil && !IsNil(o.Community) {
		return true
	}

	return false
}

// SetCommunity gets a reference to the given []string and assigns it to the Community field.
func (o *RoutingPolicyTermMatching) SetCommunity(v []string) {
	o.Community = v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *RoutingPolicyTermMatching) GetNetwork() []string {
	if o == nil || IsNil(o.Network) {
		var ret []string
		return ret
	}
	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingPolicyTermMatching) GetNetworkOk() ([]string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *RoutingPolicyTermMatching) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given []string and assigns it to the Network field.
func (o *RoutingPolicyTermMatching) SetNetwork(v []string) {
	o.Network = v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *RoutingPolicyTermMatching) GetPrefix() []string {
	if o == nil || IsNil(o.Prefix) {
		var ret []string
		return ret
	}
	return o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingPolicyTermMatching) GetPrefixOk() ([]string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *RoutingPolicyTermMatching) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given []string and assigns it to the Prefix field.
func (o *RoutingPolicyTermMatching) SetPrefix(v []string) {
	o.Prefix = v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *RoutingPolicyTermMatching) GetProtocol() []string {
	if o == nil || IsNil(o.Protocol) {
		var ret []string
		return ret
	}
	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingPolicyTermMatching) GetProtocolOk() ([]string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *RoutingPolicyTermMatching) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given []string and assigns it to the Protocol field.
func (o *RoutingPolicyTermMatching) SetProtocol(v []string) {
	o.Protocol = v
}

// GetRouteExists returns the RouteExists field value if set, zero value otherwise.
func (o *RoutingPolicyTermMatching) GetRouteExists() RoutingPolicyTermMatchingRouteExists {
	if o == nil || IsNil(o.RouteExists) {
		var ret RoutingPolicyTermMatchingRouteExists
		return ret
	}
	return *o.RouteExists
}

// GetRouteExistsOk returns a tuple with the RouteExists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingPolicyTermMatching) GetRouteExistsOk() (*RoutingPolicyTermMatchingRouteExists, bool) {
	if o == nil || IsNil(o.RouteExists) {
		return nil, false
	}
	return o.RouteExists, true
}

// HasRouteExists returns a boolean if a field has been set.
func (o *RoutingPolicyTermMatching) HasRouteExists() bool {
	if o != nil && !IsNil(o.RouteExists) {
		return true
	}

	return false
}

// SetRouteExists gets a reference to the given RoutingPolicyTermMatchingRouteExists and assigns it to the RouteExists field.
func (o *RoutingPolicyTermMatching) SetRouteExists(v RoutingPolicyTermMatchingRouteExists) {
	o.RouteExists = &v
}

// GetVpnNeighborMac returns the VpnNeighborMac field value if set, zero value otherwise.
func (o *RoutingPolicyTermMatching) GetVpnNeighborMac() []string {
	if o == nil || IsNil(o.VpnNeighborMac) {
		var ret []string
		return ret
	}
	return o.VpnNeighborMac
}

// GetVpnNeighborMacOk returns a tuple with the VpnNeighborMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingPolicyTermMatching) GetVpnNeighborMacOk() ([]string, bool) {
	if o == nil || IsNil(o.VpnNeighborMac) {
		return nil, false
	}
	return o.VpnNeighborMac, true
}

// HasVpnNeighborMac returns a boolean if a field has been set.
func (o *RoutingPolicyTermMatching) HasVpnNeighborMac() bool {
	if o != nil && !IsNil(o.VpnNeighborMac) {
		return true
	}

	return false
}

// SetVpnNeighborMac gets a reference to the given []string and assigns it to the VpnNeighborMac field.
func (o *RoutingPolicyTermMatching) SetVpnNeighborMac(v []string) {
	o.VpnNeighborMac = v
}

// GetVpnPath returns the VpnPath field value if set, zero value otherwise.
func (o *RoutingPolicyTermMatching) GetVpnPath() []string {
	if o == nil || IsNil(o.VpnPath) {
		var ret []string
		return ret
	}
	return o.VpnPath
}

// GetVpnPathOk returns a tuple with the VpnPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingPolicyTermMatching) GetVpnPathOk() ([]string, bool) {
	if o == nil || IsNil(o.VpnPath) {
		return nil, false
	}
	return o.VpnPath, true
}

// HasVpnPath returns a boolean if a field has been set.
func (o *RoutingPolicyTermMatching) HasVpnPath() bool {
	if o != nil && !IsNil(o.VpnPath) {
		return true
	}

	return false
}

// SetVpnPath gets a reference to the given []string and assigns it to the VpnPath field.
func (o *RoutingPolicyTermMatching) SetVpnPath(v []string) {
	o.VpnPath = v
}

// GetVpnPathSla returns the VpnPathSla field value if set, zero value otherwise.
func (o *RoutingPolicyTermMatching) GetVpnPathSla() RoutingPolicyTermMatchingVpnPathSla {
	if o == nil || IsNil(o.VpnPathSla) {
		var ret RoutingPolicyTermMatchingVpnPathSla
		return ret
	}
	return *o.VpnPathSla
}

// GetVpnPathSlaOk returns a tuple with the VpnPathSla field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingPolicyTermMatching) GetVpnPathSlaOk() (*RoutingPolicyTermMatchingVpnPathSla, bool) {
	if o == nil || IsNil(o.VpnPathSla) {
		return nil, false
	}
	return o.VpnPathSla, true
}

// HasVpnPathSla returns a boolean if a field has been set.
func (o *RoutingPolicyTermMatching) HasVpnPathSla() bool {
	if o != nil && !IsNil(o.VpnPathSla) {
		return true
	}

	return false
}

// SetVpnPathSla gets a reference to the given RoutingPolicyTermMatchingVpnPathSla and assigns it to the VpnPathSla field.
func (o *RoutingPolicyTermMatching) SetVpnPathSla(v RoutingPolicyTermMatchingVpnPathSla) {
	o.VpnPathSla = &v
}

func (o RoutingPolicyTermMatching) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutingPolicyTermMatching) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AsPath) {
		toSerialize["as_path"] = o.AsPath
	}
	if !IsNil(o.Community) {
		toSerialize["community"] = o.Community
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.RouteExists) {
		toSerialize["route_exists"] = o.RouteExists
	}
	if !IsNil(o.VpnNeighborMac) {
		toSerialize["vpn_neighbor_mac"] = o.VpnNeighborMac
	}
	if !IsNil(o.VpnPath) {
		toSerialize["vpn_path"] = o.VpnPath
	}
	if !IsNil(o.VpnPathSla) {
		toSerialize["vpn_path_sla"] = o.VpnPathSla
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RoutingPolicyTermMatching) UnmarshalJSON(data []byte) (err error) {
	varRoutingPolicyTermMatching := _RoutingPolicyTermMatching{}

	err = json.Unmarshal(data, &varRoutingPolicyTermMatching)

	if err != nil {
		return err
	}

	*o = RoutingPolicyTermMatching(varRoutingPolicyTermMatching)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "as_path")
		delete(additionalProperties, "community")
		delete(additionalProperties, "network")
		delete(additionalProperties, "prefix")
		delete(additionalProperties, "protocol")
		delete(additionalProperties, "route_exists")
		delete(additionalProperties, "vpn_neighbor_mac")
		delete(additionalProperties, "vpn_path")
		delete(additionalProperties, "vpn_path_sla")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoutingPolicyTermMatching struct {
	value *RoutingPolicyTermMatching
	isSet bool
}

func (v NullableRoutingPolicyTermMatching) Get() *RoutingPolicyTermMatching {
	return v.value
}

func (v *NullableRoutingPolicyTermMatching) Set(val *RoutingPolicyTermMatching) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingPolicyTermMatching) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingPolicyTermMatching) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingPolicyTermMatching(val *RoutingPolicyTermMatching) *NullableRoutingPolicyTermMatching {
	return &NullableRoutingPolicyTermMatching{value: val, isSet: true}
}

func (v NullableRoutingPolicyTermMatching) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingPolicyTermMatching) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


