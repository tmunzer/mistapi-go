/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// ConstDeviceModel struct for ConstDeviceModel
type ConstDeviceModel struct {
	ConstDeviceAp *ConstDeviceAp
	ConstDeviceGateway *ConstDeviceGateway
	ConstDeviceSwitch *ConstDeviceSwitch
	ConstDeviceUnknown *ConstDeviceUnknown
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ConstDeviceModel) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ConstDeviceAp
	err = json.Unmarshal(data, &dst.ConstDeviceAp);
	if err == nil {
		jsonConstDeviceAp, _ := json.Marshal(dst.ConstDeviceAp)
		if string(jsonConstDeviceAp) == "{}" { // empty struct
			dst.ConstDeviceAp = nil
		} else {
			return nil // data stored in dst.ConstDeviceAp, return on the first match
		}
	} else {
		dst.ConstDeviceAp = nil
	}

	// try to unmarshal JSON data into ConstDeviceGateway
	err = json.Unmarshal(data, &dst.ConstDeviceGateway);
	if err == nil {
		jsonConstDeviceGateway, _ := json.Marshal(dst.ConstDeviceGateway)
		if string(jsonConstDeviceGateway) == "{}" { // empty struct
			dst.ConstDeviceGateway = nil
		} else {
			return nil // data stored in dst.ConstDeviceGateway, return on the first match
		}
	} else {
		dst.ConstDeviceGateway = nil
	}

	// try to unmarshal JSON data into ConstDeviceSwitch
	err = json.Unmarshal(data, &dst.ConstDeviceSwitch);
	if err == nil {
		jsonConstDeviceSwitch, _ := json.Marshal(dst.ConstDeviceSwitch)
		if string(jsonConstDeviceSwitch) == "{}" { // empty struct
			dst.ConstDeviceSwitch = nil
		} else {
			return nil // data stored in dst.ConstDeviceSwitch, return on the first match
		}
	} else {
		dst.ConstDeviceSwitch = nil
	}

	// try to unmarshal JSON data into ConstDeviceUnknown
	err = json.Unmarshal(data, &dst.ConstDeviceUnknown);
	if err == nil {
		jsonConstDeviceUnknown, _ := json.Marshal(dst.ConstDeviceUnknown)
		if string(jsonConstDeviceUnknown) == "{}" { // empty struct
			dst.ConstDeviceUnknown = nil
		} else {
			return nil // data stored in dst.ConstDeviceUnknown, return on the first match
		}
	} else {
		dst.ConstDeviceUnknown = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ConstDeviceModel)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ConstDeviceModel) MarshalJSON() ([]byte, error) {
	if src.ConstDeviceAp != nil {
		return json.Marshal(&src.ConstDeviceAp)
	}

	if src.ConstDeviceGateway != nil {
		return json.Marshal(&src.ConstDeviceGateway)
	}

	if src.ConstDeviceSwitch != nil {
		return json.Marshal(&src.ConstDeviceSwitch)
	}

	if src.ConstDeviceUnknown != nil {
		return json.Marshal(&src.ConstDeviceUnknown)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableConstDeviceModel struct {
	value *ConstDeviceModel
	isSet bool
}

func (v NullableConstDeviceModel) Get() *ConstDeviceModel {
	return v.value
}

func (v *NullableConstDeviceModel) Set(val *ConstDeviceModel) {
	v.value = val
	v.isSet = true
}

func (v NullableConstDeviceModel) IsSet() bool {
	return v.isSet
}

func (v *NullableConstDeviceModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConstDeviceModel(val *ConstDeviceModel) *NullableConstDeviceModel {
	return &NullableConstDeviceModel{value: val, isSet: true}
}

func (v NullableConstDeviceModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConstDeviceModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


