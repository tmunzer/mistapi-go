/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the ClientWirelessStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientWirelessStats{}

// ClientWirelessStats struct for ClientWirelessStats
type ClientWirelessStats struct {
	// TTL of the validity of the stat
	Ttl float32 `json:"_ttl"`
	// estimated client location accuracy, in meter
	Accuracy *int32 `json:"accuracy,omitempty"`
	AirespaceIfname *string `json:"airespace_ifname,omitempty"`
	Airwatch *ClientWirelessStatsAirwatch `json:"airwatch,omitempty"`
	// AP ID the client is connected to
	ApId string `json:"ap_id"`
	// AP the client is connected to
	ApMac string `json:"ap_mac"`
	Band Dot11Band `json:"band"`
	// current channel
	Channel int32 `json:"channel"`
	// whether the client is dual_band capable (determined by whether we’ve seen probe requests from both bands)
	DualBand bool `json:"dual_band"`
	// device family, through fingerprinting. iPod / Nexus Galaxy / Windows Mobile or CE …
	Family string `json:"family"`
	Guest *ClientWirelessStatsGuest `json:"guest,omitempty"`
	// hostname that we learned from sniffing DHCP
	Hostname string `json:"hostname"`
	// how long, in seconds, has the client been idle (since the last RX packet)
	IdleTime float32 `json:"idle_time"`
	Ip string `json:"ip"`
	// whether this is a guest
	IsGuest bool `json:"is_guest"`
	// e.g. WPA2-PSK/CCMP
	KeyMgmt string `json:"key_mgmt"`
	// last seen timestamp
	LastSeen float32 `json:"last_seen"`
	// client mac
	Mac string `json:"mac"`
	// device manufacture, through fingerprinting or OUI
	Manufacture string `json:"manufacture"`
	// estimated client location - map_id
	MapId *string `json:"map_id,omitempty"`
	// device model, may be available if we can identify them
	Model string `json:"model"`
	// number of APs used to locate this client
	NumLocatingAps *int32 `json:"num_locating_aps,omitempty"`
	// device os, through fingerprinting
	Os string `json:"os"`
	// if it’s currently in power-save mode
	PowerSaving bool `json:"power_saving"`
	Proto Dot11Proto `json:"proto"`
	// PSK id (if multi-psk is used)
	PskId *string `json:"psk_id,omitempty"`
	// signal strength
	Rssi float32 `json:"rssi"`
	// list of rssizone_id’s where client is in and since when (if known)
	Rssizones []ClientWirelessStatsRssiZone `json:"rssizones,omitempty"`
	// rate of receiving traffic from the clients, bits/seconds, last known
	RxBps float32 `json:"rx_bps"`
	// amount of traffic received from client since client connects
	RxBytes float32 `json:"rx_bytes"`
	// amount of traffic received from client since client connects
	RxPackets float32 `json:"rx_packets"`
	// RX Rate, Mbps
	RxRate float32 `json:"rx_rate"`
	// amount of rx retries
	RxRetries float32 `json:"rx_retries"`
	// signal over noise
	Snr float32 `json:"snr"`
	// SSID the client is connected to
	Ssid string `json:"ssid"`
	// rate of transmitting traffic to the clients, bits/seconds, last known
	TxBps float32 `json:"tx_bps"`
	// amount of traffic sent to client since client connects
	TxBytes float32 `json:"tx_bytes"`
	// amount of traffic sent to client since client connects
	TxPackets float32 `json:"tx_packets"`
	// TX Rate, Mbps
	TxRate float32 `json:"tx_rate"`
	// amount of tx retries
	TxRetries float32 `json:"tx_retries"`
	// client’s type, regular / vip / resource / blocked (if client object is created)
	Type *string `json:"type,omitempty"`
	// how long, in seconds, has the client been connected
	Uptime float32 `json:"uptime"`
	// username that we learned from 802.1X exchange or Per_user PSK or User Portal
	Username string `json:"username"`
	// list of beacon_id’s where the client is in and since when (if known)
	Vbeacons []ClientWirelessStatsVbeacon `json:"vbeacons,omitempty"`
	// vlan id, could be empty (from older AP)
	VlanId *int32 `json:"vlan_id,omitempty"`
	// WLAN ID the client is connected to
	WlanId string `json:"wlan_id"`
	// current WxlanRule using for a Client or an authorized Guest (portal user). null if default rule is matched.
	WxruleId *string `json:"wxrule_id,omitempty"`
	// current WxlanRule usage per tag_id
	WxruleUsage []ClientWirelessStatsWxruleUsage `json:"wxrule_usage,omitempty"`
	// estimated clinet location in pixels
	X *float32 `json:"x,omitempty"`
	// estimated client location in meter
	XM *float32 `json:"x_m,omitempty"`
	// estimated clinet location in pixels
	Y *float32 `json:"y,omitempty"`
	// estimated client location in meter
	YM *float32 `json:"y_m,omitempty"`
	// list of zone_id’s where client is in and since when (if known)
	Zones []ClientWirelessStatsZone `json:"zones,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ClientWirelessStats ClientWirelessStats

// NewClientWirelessStats instantiates a new ClientWirelessStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientWirelessStats(ttl float32, apId string, apMac string, band Dot11Band, channel int32, dualBand bool, family string, hostname string, idleTime float32, ip string, isGuest bool, keyMgmt string, lastSeen float32, mac string, manufacture string, model string, os string, powerSaving bool, proto Dot11Proto, rssi float32, rxBps float32, rxBytes float32, rxPackets float32, rxRate float32, rxRetries float32, snr float32, ssid string, txBps float32, txBytes float32, txPackets float32, txRate float32, txRetries float32, uptime float32, username string, wlanId string) *ClientWirelessStats {
	this := ClientWirelessStats{}
	this.Ttl = ttl
	this.ApId = apId
	this.ApMac = apMac
	this.Band = band
	this.Channel = channel
	this.DualBand = dualBand
	this.Family = family
	this.Hostname = hostname
	this.IdleTime = idleTime
	this.Ip = ip
	this.IsGuest = isGuest
	this.KeyMgmt = keyMgmt
	this.LastSeen = lastSeen
	this.Mac = mac
	this.Manufacture = manufacture
	this.Model = model
	this.Os = os
	this.PowerSaving = powerSaving
	this.Proto = proto
	this.Rssi = rssi
	this.RxBps = rxBps
	this.RxBytes = rxBytes
	this.RxPackets = rxPackets
	this.RxRate = rxRate
	this.RxRetries = rxRetries
	this.Snr = snr
	this.Ssid = ssid
	this.TxBps = txBps
	this.TxBytes = txBytes
	this.TxPackets = txPackets
	this.TxRate = txRate
	this.TxRetries = txRetries
	this.Uptime = uptime
	this.Username = username
	this.WlanId = wlanId
	return &this
}

// NewClientWirelessStatsWithDefaults instantiates a new ClientWirelessStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientWirelessStatsWithDefaults() *ClientWirelessStats {
	this := ClientWirelessStats{}
	var isGuest bool = false
	this.IsGuest = isGuest
	return &this
}

// GetTtl returns the Ttl field value
func (o *ClientWirelessStats) GetTtl() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetTtlOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ttl, true
}

// SetTtl sets field value
func (o *ClientWirelessStats) SetTtl(v float32) {
	o.Ttl = v
}

// GetAccuracy returns the Accuracy field value if set, zero value otherwise.
func (o *ClientWirelessStats) GetAccuracy() int32 {
	if o == nil || IsNil(o.Accuracy) {
		var ret int32
		return ret
	}
	return *o.Accuracy
}

// GetAccuracyOk returns a tuple with the Accuracy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetAccuracyOk() (*int32, bool) {
	if o == nil || IsNil(o.Accuracy) {
		return nil, false
	}
	return o.Accuracy, true
}

// HasAccuracy returns a boolean if a field has been set.
func (o *ClientWirelessStats) HasAccuracy() bool {
	if o != nil && !IsNil(o.Accuracy) {
		return true
	}

	return false
}

// SetAccuracy gets a reference to the given int32 and assigns it to the Accuracy field.
func (o *ClientWirelessStats) SetAccuracy(v int32) {
	o.Accuracy = &v
}

// GetAirespaceIfname returns the AirespaceIfname field value if set, zero value otherwise.
func (o *ClientWirelessStats) GetAirespaceIfname() string {
	if o == nil || IsNil(o.AirespaceIfname) {
		var ret string
		return ret
	}
	return *o.AirespaceIfname
}

// GetAirespaceIfnameOk returns a tuple with the AirespaceIfname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetAirespaceIfnameOk() (*string, bool) {
	if o == nil || IsNil(o.AirespaceIfname) {
		return nil, false
	}
	return o.AirespaceIfname, true
}

// HasAirespaceIfname returns a boolean if a field has been set.
func (o *ClientWirelessStats) HasAirespaceIfname() bool {
	if o != nil && !IsNil(o.AirespaceIfname) {
		return true
	}

	return false
}

// SetAirespaceIfname gets a reference to the given string and assigns it to the AirespaceIfname field.
func (o *ClientWirelessStats) SetAirespaceIfname(v string) {
	o.AirespaceIfname = &v
}

// GetAirwatch returns the Airwatch field value if set, zero value otherwise.
func (o *ClientWirelessStats) GetAirwatch() ClientWirelessStatsAirwatch {
	if o == nil || IsNil(o.Airwatch) {
		var ret ClientWirelessStatsAirwatch
		return ret
	}
	return *o.Airwatch
}

// GetAirwatchOk returns a tuple with the Airwatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetAirwatchOk() (*ClientWirelessStatsAirwatch, bool) {
	if o == nil || IsNil(o.Airwatch) {
		return nil, false
	}
	return o.Airwatch, true
}

// HasAirwatch returns a boolean if a field has been set.
func (o *ClientWirelessStats) HasAirwatch() bool {
	if o != nil && !IsNil(o.Airwatch) {
		return true
	}

	return false
}

// SetAirwatch gets a reference to the given ClientWirelessStatsAirwatch and assigns it to the Airwatch field.
func (o *ClientWirelessStats) SetAirwatch(v ClientWirelessStatsAirwatch) {
	o.Airwatch = &v
}

// GetApId returns the ApId field value
func (o *ClientWirelessStats) GetApId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApId
}

// GetApIdOk returns a tuple with the ApId field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetApIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApId, true
}

// SetApId sets field value
func (o *ClientWirelessStats) SetApId(v string) {
	o.ApId = v
}

// GetApMac returns the ApMac field value
func (o *ClientWirelessStats) GetApMac() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApMac
}

// GetApMacOk returns a tuple with the ApMac field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetApMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApMac, true
}

// SetApMac sets field value
func (o *ClientWirelessStats) SetApMac(v string) {
	o.ApMac = v
}

// GetBand returns the Band field value
func (o *ClientWirelessStats) GetBand() Dot11Band {
	if o == nil {
		var ret Dot11Band
		return ret
	}

	return o.Band
}

// GetBandOk returns a tuple with the Band field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetBandOk() (*Dot11Band, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Band, true
}

// SetBand sets field value
func (o *ClientWirelessStats) SetBand(v Dot11Band) {
	o.Band = v
}

// GetChannel returns the Channel field value
func (o *ClientWirelessStats) GetChannel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Channel
}

// GetChannelOk returns a tuple with the Channel field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetChannelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Channel, true
}

// SetChannel sets field value
func (o *ClientWirelessStats) SetChannel(v int32) {
	o.Channel = v
}

// GetDualBand returns the DualBand field value
func (o *ClientWirelessStats) GetDualBand() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DualBand
}

// GetDualBandOk returns a tuple with the DualBand field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetDualBandOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DualBand, true
}

// SetDualBand sets field value
func (o *ClientWirelessStats) SetDualBand(v bool) {
	o.DualBand = v
}

// GetFamily returns the Family field value
func (o *ClientWirelessStats) GetFamily() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Family
}

// GetFamilyOk returns a tuple with the Family field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetFamilyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Family, true
}

// SetFamily sets field value
func (o *ClientWirelessStats) SetFamily(v string) {
	o.Family = v
}

// GetGuest returns the Guest field value if set, zero value otherwise.
func (o *ClientWirelessStats) GetGuest() ClientWirelessStatsGuest {
	if o == nil || IsNil(o.Guest) {
		var ret ClientWirelessStatsGuest
		return ret
	}
	return *o.Guest
}

// GetGuestOk returns a tuple with the Guest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetGuestOk() (*ClientWirelessStatsGuest, bool) {
	if o == nil || IsNil(o.Guest) {
		return nil, false
	}
	return o.Guest, true
}

// HasGuest returns a boolean if a field has been set.
func (o *ClientWirelessStats) HasGuest() bool {
	if o != nil && !IsNil(o.Guest) {
		return true
	}

	return false
}

// SetGuest gets a reference to the given ClientWirelessStatsGuest and assigns it to the Guest field.
func (o *ClientWirelessStats) SetGuest(v ClientWirelessStatsGuest) {
	o.Guest = &v
}

// GetHostname returns the Hostname field value
func (o *ClientWirelessStats) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *ClientWirelessStats) SetHostname(v string) {
	o.Hostname = v
}

// GetIdleTime returns the IdleTime field value
func (o *ClientWirelessStats) GetIdleTime() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.IdleTime
}

// GetIdleTimeOk returns a tuple with the IdleTime field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetIdleTimeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdleTime, true
}

// SetIdleTime sets field value
func (o *ClientWirelessStats) SetIdleTime(v float32) {
	o.IdleTime = v
}

// GetIp returns the Ip field value
func (o *ClientWirelessStats) GetIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ip, true
}

// SetIp sets field value
func (o *ClientWirelessStats) SetIp(v string) {
	o.Ip = v
}

// GetIsGuest returns the IsGuest field value
func (o *ClientWirelessStats) GetIsGuest() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsGuest
}

// GetIsGuestOk returns a tuple with the IsGuest field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetIsGuestOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsGuest, true
}

// SetIsGuest sets field value
func (o *ClientWirelessStats) SetIsGuest(v bool) {
	o.IsGuest = v
}

// GetKeyMgmt returns the KeyMgmt field value
func (o *ClientWirelessStats) GetKeyMgmt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyMgmt
}

// GetKeyMgmtOk returns a tuple with the KeyMgmt field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetKeyMgmtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyMgmt, true
}

// SetKeyMgmt sets field value
func (o *ClientWirelessStats) SetKeyMgmt(v string) {
	o.KeyMgmt = v
}

// GetLastSeen returns the LastSeen field value
func (o *ClientWirelessStats) GetLastSeen() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.LastSeen
}

// GetLastSeenOk returns a tuple with the LastSeen field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetLastSeenOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastSeen, true
}

// SetLastSeen sets field value
func (o *ClientWirelessStats) SetLastSeen(v float32) {
	o.LastSeen = v
}

// GetMac returns the Mac field value
func (o *ClientWirelessStats) GetMac() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mac
}

// GetMacOk returns a tuple with the Mac field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mac, true
}

// SetMac sets field value
func (o *ClientWirelessStats) SetMac(v string) {
	o.Mac = v
}

// GetManufacture returns the Manufacture field value
func (o *ClientWirelessStats) GetManufacture() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Manufacture
}

// GetManufactureOk returns a tuple with the Manufacture field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetManufactureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Manufacture, true
}

// SetManufacture sets field value
func (o *ClientWirelessStats) SetManufacture(v string) {
	o.Manufacture = v
}

// GetMapId returns the MapId field value if set, zero value otherwise.
func (o *ClientWirelessStats) GetMapId() string {
	if o == nil || IsNil(o.MapId) {
		var ret string
		return ret
	}
	return *o.MapId
}

// GetMapIdOk returns a tuple with the MapId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetMapIdOk() (*string, bool) {
	if o == nil || IsNil(o.MapId) {
		return nil, false
	}
	return o.MapId, true
}

// HasMapId returns a boolean if a field has been set.
func (o *ClientWirelessStats) HasMapId() bool {
	if o != nil && !IsNil(o.MapId) {
		return true
	}

	return false
}

// SetMapId gets a reference to the given string and assigns it to the MapId field.
func (o *ClientWirelessStats) SetMapId(v string) {
	o.MapId = &v
}

// GetModel returns the Model field value
func (o *ClientWirelessStats) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *ClientWirelessStats) SetModel(v string) {
	o.Model = v
}

// GetNumLocatingAps returns the NumLocatingAps field value if set, zero value otherwise.
func (o *ClientWirelessStats) GetNumLocatingAps() int32 {
	if o == nil || IsNil(o.NumLocatingAps) {
		var ret int32
		return ret
	}
	return *o.NumLocatingAps
}

// GetNumLocatingApsOk returns a tuple with the NumLocatingAps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetNumLocatingApsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumLocatingAps) {
		return nil, false
	}
	return o.NumLocatingAps, true
}

// HasNumLocatingAps returns a boolean if a field has been set.
func (o *ClientWirelessStats) HasNumLocatingAps() bool {
	if o != nil && !IsNil(o.NumLocatingAps) {
		return true
	}

	return false
}

// SetNumLocatingAps gets a reference to the given int32 and assigns it to the NumLocatingAps field.
func (o *ClientWirelessStats) SetNumLocatingAps(v int32) {
	o.NumLocatingAps = &v
}

// GetOs returns the Os field value
func (o *ClientWirelessStats) GetOs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Os
}

// GetOsOk returns a tuple with the Os field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetOsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Os, true
}

// SetOs sets field value
func (o *ClientWirelessStats) SetOs(v string) {
	o.Os = v
}

// GetPowerSaving returns the PowerSaving field value
func (o *ClientWirelessStats) GetPowerSaving() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PowerSaving
}

// GetPowerSavingOk returns a tuple with the PowerSaving field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetPowerSavingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PowerSaving, true
}

// SetPowerSaving sets field value
func (o *ClientWirelessStats) SetPowerSaving(v bool) {
	o.PowerSaving = v
}

// GetProto returns the Proto field value
func (o *ClientWirelessStats) GetProto() Dot11Proto {
	if o == nil {
		var ret Dot11Proto
		return ret
	}

	return o.Proto
}

// GetProtoOk returns a tuple with the Proto field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetProtoOk() (*Dot11Proto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Proto, true
}

// SetProto sets field value
func (o *ClientWirelessStats) SetProto(v Dot11Proto) {
	o.Proto = v
}

// GetPskId returns the PskId field value if set, zero value otherwise.
func (o *ClientWirelessStats) GetPskId() string {
	if o == nil || IsNil(o.PskId) {
		var ret string
		return ret
	}
	return *o.PskId
}

// GetPskIdOk returns a tuple with the PskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetPskIdOk() (*string, bool) {
	if o == nil || IsNil(o.PskId) {
		return nil, false
	}
	return o.PskId, true
}

// HasPskId returns a boolean if a field has been set.
func (o *ClientWirelessStats) HasPskId() bool {
	if o != nil && !IsNil(o.PskId) {
		return true
	}

	return false
}

// SetPskId gets a reference to the given string and assigns it to the PskId field.
func (o *ClientWirelessStats) SetPskId(v string) {
	o.PskId = &v
}

// GetRssi returns the Rssi field value
func (o *ClientWirelessStats) GetRssi() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Rssi
}

// GetRssiOk returns a tuple with the Rssi field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetRssiOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rssi, true
}

// SetRssi sets field value
func (o *ClientWirelessStats) SetRssi(v float32) {
	o.Rssi = v
}

// GetRssizones returns the Rssizones field value if set, zero value otherwise.
func (o *ClientWirelessStats) GetRssizones() []ClientWirelessStatsRssiZone {
	if o == nil || IsNil(o.Rssizones) {
		var ret []ClientWirelessStatsRssiZone
		return ret
	}
	return o.Rssizones
}

// GetRssizonesOk returns a tuple with the Rssizones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetRssizonesOk() ([]ClientWirelessStatsRssiZone, bool) {
	if o == nil || IsNil(o.Rssizones) {
		return nil, false
	}
	return o.Rssizones, true
}

// HasRssizones returns a boolean if a field has been set.
func (o *ClientWirelessStats) HasRssizones() bool {
	if o != nil && !IsNil(o.Rssizones) {
		return true
	}

	return false
}

// SetRssizones gets a reference to the given []ClientWirelessStatsRssiZone and assigns it to the Rssizones field.
func (o *ClientWirelessStats) SetRssizones(v []ClientWirelessStatsRssiZone) {
	o.Rssizones = v
}

// GetRxBps returns the RxBps field value
func (o *ClientWirelessStats) GetRxBps() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RxBps
}

// GetRxBpsOk returns a tuple with the RxBps field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetRxBpsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RxBps, true
}

// SetRxBps sets field value
func (o *ClientWirelessStats) SetRxBps(v float32) {
	o.RxBps = v
}

// GetRxBytes returns the RxBytes field value
func (o *ClientWirelessStats) GetRxBytes() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RxBytes
}

// GetRxBytesOk returns a tuple with the RxBytes field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetRxBytesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RxBytes, true
}

// SetRxBytes sets field value
func (o *ClientWirelessStats) SetRxBytes(v float32) {
	o.RxBytes = v
}

// GetRxPackets returns the RxPackets field value
func (o *ClientWirelessStats) GetRxPackets() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RxPackets
}

// GetRxPacketsOk returns a tuple with the RxPackets field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetRxPacketsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RxPackets, true
}

// SetRxPackets sets field value
func (o *ClientWirelessStats) SetRxPackets(v float32) {
	o.RxPackets = v
}

// GetRxRate returns the RxRate field value
func (o *ClientWirelessStats) GetRxRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RxRate
}

// GetRxRateOk returns a tuple with the RxRate field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetRxRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RxRate, true
}

// SetRxRate sets field value
func (o *ClientWirelessStats) SetRxRate(v float32) {
	o.RxRate = v
}

// GetRxRetries returns the RxRetries field value
func (o *ClientWirelessStats) GetRxRetries() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RxRetries
}

// GetRxRetriesOk returns a tuple with the RxRetries field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetRxRetriesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RxRetries, true
}

// SetRxRetries sets field value
func (o *ClientWirelessStats) SetRxRetries(v float32) {
	o.RxRetries = v
}

// GetSnr returns the Snr field value
func (o *ClientWirelessStats) GetSnr() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Snr
}

// GetSnrOk returns a tuple with the Snr field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetSnrOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Snr, true
}

// SetSnr sets field value
func (o *ClientWirelessStats) SetSnr(v float32) {
	o.Snr = v
}

// GetSsid returns the Ssid field value
func (o *ClientWirelessStats) GetSsid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ssid
}

// GetSsidOk returns a tuple with the Ssid field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetSsidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ssid, true
}

// SetSsid sets field value
func (o *ClientWirelessStats) SetSsid(v string) {
	o.Ssid = v
}

// GetTxBps returns the TxBps field value
func (o *ClientWirelessStats) GetTxBps() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TxBps
}

// GetTxBpsOk returns a tuple with the TxBps field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetTxBpsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxBps, true
}

// SetTxBps sets field value
func (o *ClientWirelessStats) SetTxBps(v float32) {
	o.TxBps = v
}

// GetTxBytes returns the TxBytes field value
func (o *ClientWirelessStats) GetTxBytes() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TxBytes
}

// GetTxBytesOk returns a tuple with the TxBytes field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetTxBytesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxBytes, true
}

// SetTxBytes sets field value
func (o *ClientWirelessStats) SetTxBytes(v float32) {
	o.TxBytes = v
}

// GetTxPackets returns the TxPackets field value
func (o *ClientWirelessStats) GetTxPackets() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TxPackets
}

// GetTxPacketsOk returns a tuple with the TxPackets field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetTxPacketsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxPackets, true
}

// SetTxPackets sets field value
func (o *ClientWirelessStats) SetTxPackets(v float32) {
	o.TxPackets = v
}

// GetTxRate returns the TxRate field value
func (o *ClientWirelessStats) GetTxRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TxRate
}

// GetTxRateOk returns a tuple with the TxRate field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetTxRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxRate, true
}

// SetTxRate sets field value
func (o *ClientWirelessStats) SetTxRate(v float32) {
	o.TxRate = v
}

// GetTxRetries returns the TxRetries field value
func (o *ClientWirelessStats) GetTxRetries() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TxRetries
}

// GetTxRetriesOk returns a tuple with the TxRetries field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetTxRetriesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxRetries, true
}

// SetTxRetries sets field value
func (o *ClientWirelessStats) SetTxRetries(v float32) {
	o.TxRetries = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ClientWirelessStats) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ClientWirelessStats) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ClientWirelessStats) SetType(v string) {
	o.Type = &v
}

// GetUptime returns the Uptime field value
func (o *ClientWirelessStats) GetUptime() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Uptime
}

// GetUptimeOk returns a tuple with the Uptime field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetUptimeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uptime, true
}

// SetUptime sets field value
func (o *ClientWirelessStats) SetUptime(v float32) {
	o.Uptime = v
}

// GetUsername returns the Username field value
func (o *ClientWirelessStats) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *ClientWirelessStats) SetUsername(v string) {
	o.Username = v
}

// GetVbeacons returns the Vbeacons field value if set, zero value otherwise.
func (o *ClientWirelessStats) GetVbeacons() []ClientWirelessStatsVbeacon {
	if o == nil || IsNil(o.Vbeacons) {
		var ret []ClientWirelessStatsVbeacon
		return ret
	}
	return o.Vbeacons
}

// GetVbeaconsOk returns a tuple with the Vbeacons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetVbeaconsOk() ([]ClientWirelessStatsVbeacon, bool) {
	if o == nil || IsNil(o.Vbeacons) {
		return nil, false
	}
	return o.Vbeacons, true
}

// HasVbeacons returns a boolean if a field has been set.
func (o *ClientWirelessStats) HasVbeacons() bool {
	if o != nil && !IsNil(o.Vbeacons) {
		return true
	}

	return false
}

// SetVbeacons gets a reference to the given []ClientWirelessStatsVbeacon and assigns it to the Vbeacons field.
func (o *ClientWirelessStats) SetVbeacons(v []ClientWirelessStatsVbeacon) {
	o.Vbeacons = v
}

// GetVlanId returns the VlanId field value if set, zero value otherwise.
func (o *ClientWirelessStats) GetVlanId() int32 {
	if o == nil || IsNil(o.VlanId) {
		var ret int32
		return ret
	}
	return *o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetVlanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VlanId) {
		return nil, false
	}
	return o.VlanId, true
}

// HasVlanId returns a boolean if a field has been set.
func (o *ClientWirelessStats) HasVlanId() bool {
	if o != nil && !IsNil(o.VlanId) {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given int32 and assigns it to the VlanId field.
func (o *ClientWirelessStats) SetVlanId(v int32) {
	o.VlanId = &v
}

// GetWlanId returns the WlanId field value
func (o *ClientWirelessStats) GetWlanId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WlanId
}

// GetWlanIdOk returns a tuple with the WlanId field value
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetWlanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WlanId, true
}

// SetWlanId sets field value
func (o *ClientWirelessStats) SetWlanId(v string) {
	o.WlanId = v
}

// GetWxruleId returns the WxruleId field value if set, zero value otherwise.
func (o *ClientWirelessStats) GetWxruleId() string {
	if o == nil || IsNil(o.WxruleId) {
		var ret string
		return ret
	}
	return *o.WxruleId
}

// GetWxruleIdOk returns a tuple with the WxruleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetWxruleIdOk() (*string, bool) {
	if o == nil || IsNil(o.WxruleId) {
		return nil, false
	}
	return o.WxruleId, true
}

// HasWxruleId returns a boolean if a field has been set.
func (o *ClientWirelessStats) HasWxruleId() bool {
	if o != nil && !IsNil(o.WxruleId) {
		return true
	}

	return false
}

// SetWxruleId gets a reference to the given string and assigns it to the WxruleId field.
func (o *ClientWirelessStats) SetWxruleId(v string) {
	o.WxruleId = &v
}

// GetWxruleUsage returns the WxruleUsage field value if set, zero value otherwise.
func (o *ClientWirelessStats) GetWxruleUsage() []ClientWirelessStatsWxruleUsage {
	if o == nil || IsNil(o.WxruleUsage) {
		var ret []ClientWirelessStatsWxruleUsage
		return ret
	}
	return o.WxruleUsage
}

// GetWxruleUsageOk returns a tuple with the WxruleUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetWxruleUsageOk() ([]ClientWirelessStatsWxruleUsage, bool) {
	if o == nil || IsNil(o.WxruleUsage) {
		return nil, false
	}
	return o.WxruleUsage, true
}

// HasWxruleUsage returns a boolean if a field has been set.
func (o *ClientWirelessStats) HasWxruleUsage() bool {
	if o != nil && !IsNil(o.WxruleUsage) {
		return true
	}

	return false
}

// SetWxruleUsage gets a reference to the given []ClientWirelessStatsWxruleUsage and assigns it to the WxruleUsage field.
func (o *ClientWirelessStats) SetWxruleUsage(v []ClientWirelessStatsWxruleUsage) {
	o.WxruleUsage = v
}

// GetX returns the X field value if set, zero value otherwise.
func (o *ClientWirelessStats) GetX() float32 {
	if o == nil || IsNil(o.X) {
		var ret float32
		return ret
	}
	return *o.X
}

// GetXOk returns a tuple with the X field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetXOk() (*float32, bool) {
	if o == nil || IsNil(o.X) {
		return nil, false
	}
	return o.X, true
}

// HasX returns a boolean if a field has been set.
func (o *ClientWirelessStats) HasX() bool {
	if o != nil && !IsNil(o.X) {
		return true
	}

	return false
}

// SetX gets a reference to the given float32 and assigns it to the X field.
func (o *ClientWirelessStats) SetX(v float32) {
	o.X = &v
}

// GetXM returns the XM field value if set, zero value otherwise.
func (o *ClientWirelessStats) GetXM() float32 {
	if o == nil || IsNil(o.XM) {
		var ret float32
		return ret
	}
	return *o.XM
}

// GetXMOk returns a tuple with the XM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetXMOk() (*float32, bool) {
	if o == nil || IsNil(o.XM) {
		return nil, false
	}
	return o.XM, true
}

// HasXM returns a boolean if a field has been set.
func (o *ClientWirelessStats) HasXM() bool {
	if o != nil && !IsNil(o.XM) {
		return true
	}

	return false
}

// SetXM gets a reference to the given float32 and assigns it to the XM field.
func (o *ClientWirelessStats) SetXM(v float32) {
	o.XM = &v
}

// GetY returns the Y field value if set, zero value otherwise.
func (o *ClientWirelessStats) GetY() float32 {
	if o == nil || IsNil(o.Y) {
		var ret float32
		return ret
	}
	return *o.Y
}

// GetYOk returns a tuple with the Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetYOk() (*float32, bool) {
	if o == nil || IsNil(o.Y) {
		return nil, false
	}
	return o.Y, true
}

// HasY returns a boolean if a field has been set.
func (o *ClientWirelessStats) HasY() bool {
	if o != nil && !IsNil(o.Y) {
		return true
	}

	return false
}

// SetY gets a reference to the given float32 and assigns it to the Y field.
func (o *ClientWirelessStats) SetY(v float32) {
	o.Y = &v
}

// GetYM returns the YM field value if set, zero value otherwise.
func (o *ClientWirelessStats) GetYM() float32 {
	if o == nil || IsNil(o.YM) {
		var ret float32
		return ret
	}
	return *o.YM
}

// GetYMOk returns a tuple with the YM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetYMOk() (*float32, bool) {
	if o == nil || IsNil(o.YM) {
		return nil, false
	}
	return o.YM, true
}

// HasYM returns a boolean if a field has been set.
func (o *ClientWirelessStats) HasYM() bool {
	if o != nil && !IsNil(o.YM) {
		return true
	}

	return false
}

// SetYM gets a reference to the given float32 and assigns it to the YM field.
func (o *ClientWirelessStats) SetYM(v float32) {
	o.YM = &v
}

// GetZones returns the Zones field value if set, zero value otherwise.
func (o *ClientWirelessStats) GetZones() []ClientWirelessStatsZone {
	if o == nil || IsNil(o.Zones) {
		var ret []ClientWirelessStatsZone
		return ret
	}
	return o.Zones
}

// GetZonesOk returns a tuple with the Zones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientWirelessStats) GetZonesOk() ([]ClientWirelessStatsZone, bool) {
	if o == nil || IsNil(o.Zones) {
		return nil, false
	}
	return o.Zones, true
}

// HasZones returns a boolean if a field has been set.
func (o *ClientWirelessStats) HasZones() bool {
	if o != nil && !IsNil(o.Zones) {
		return true
	}

	return false
}

// SetZones gets a reference to the given []ClientWirelessStatsZone and assigns it to the Zones field.
func (o *ClientWirelessStats) SetZones(v []ClientWirelessStatsZone) {
	o.Zones = v
}

func (o ClientWirelessStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientWirelessStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_ttl"] = o.Ttl
	if !IsNil(o.Accuracy) {
		toSerialize["accuracy"] = o.Accuracy
	}
	if !IsNil(o.AirespaceIfname) {
		toSerialize["airespace_ifname"] = o.AirespaceIfname
	}
	if !IsNil(o.Airwatch) {
		toSerialize["airwatch"] = o.Airwatch
	}
	toSerialize["ap_id"] = o.ApId
	toSerialize["ap_mac"] = o.ApMac
	toSerialize["band"] = o.Band
	toSerialize["channel"] = o.Channel
	toSerialize["dual_band"] = o.DualBand
	toSerialize["family"] = o.Family
	if !IsNil(o.Guest) {
		toSerialize["guest"] = o.Guest
	}
	toSerialize["hostname"] = o.Hostname
	toSerialize["idle_time"] = o.IdleTime
	toSerialize["ip"] = o.Ip
	toSerialize["is_guest"] = o.IsGuest
	toSerialize["key_mgmt"] = o.KeyMgmt
	toSerialize["last_seen"] = o.LastSeen
	toSerialize["mac"] = o.Mac
	toSerialize["manufacture"] = o.Manufacture
	if !IsNil(o.MapId) {
		toSerialize["map_id"] = o.MapId
	}
	toSerialize["model"] = o.Model
	if !IsNil(o.NumLocatingAps) {
		toSerialize["num_locating_aps"] = o.NumLocatingAps
	}
	toSerialize["os"] = o.Os
	toSerialize["power_saving"] = o.PowerSaving
	toSerialize["proto"] = o.Proto
	if !IsNil(o.PskId) {
		toSerialize["psk_id"] = o.PskId
	}
	toSerialize["rssi"] = o.Rssi
	if !IsNil(o.Rssizones) {
		toSerialize["rssizones"] = o.Rssizones
	}
	toSerialize["rx_bps"] = o.RxBps
	toSerialize["rx_bytes"] = o.RxBytes
	toSerialize["rx_packets"] = o.RxPackets
	toSerialize["rx_rate"] = o.RxRate
	toSerialize["rx_retries"] = o.RxRetries
	toSerialize["snr"] = o.Snr
	toSerialize["ssid"] = o.Ssid
	toSerialize["tx_bps"] = o.TxBps
	toSerialize["tx_bytes"] = o.TxBytes
	toSerialize["tx_packets"] = o.TxPackets
	toSerialize["tx_rate"] = o.TxRate
	toSerialize["tx_retries"] = o.TxRetries
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["uptime"] = o.Uptime
	toSerialize["username"] = o.Username
	if !IsNil(o.Vbeacons) {
		toSerialize["vbeacons"] = o.Vbeacons
	}
	if !IsNil(o.VlanId) {
		toSerialize["vlan_id"] = o.VlanId
	}
	toSerialize["wlan_id"] = o.WlanId
	if !IsNil(o.WxruleId) {
		toSerialize["wxrule_id"] = o.WxruleId
	}
	if !IsNil(o.WxruleUsage) {
		toSerialize["wxrule_usage"] = o.WxruleUsage
	}
	if !IsNil(o.X) {
		toSerialize["x"] = o.X
	}
	if !IsNil(o.XM) {
		toSerialize["x_m"] = o.XM
	}
	if !IsNil(o.Y) {
		toSerialize["y"] = o.Y
	}
	if !IsNil(o.YM) {
		toSerialize["y_m"] = o.YM
	}
	if !IsNil(o.Zones) {
		toSerialize["zones"] = o.Zones
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClientWirelessStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_ttl",
		"ap_id",
		"ap_mac",
		"band",
		"channel",
		"dual_band",
		"family",
		"hostname",
		"idle_time",
		"ip",
		"is_guest",
		"key_mgmt",
		"last_seen",
		"mac",
		"manufacture",
		"model",
		"os",
		"power_saving",
		"proto",
		"rssi",
		"rx_bps",
		"rx_bytes",
		"rx_packets",
		"rx_rate",
		"rx_retries",
		"snr",
		"ssid",
		"tx_bps",
		"tx_bytes",
		"tx_packets",
		"tx_rate",
		"tx_retries",
		"uptime",
		"username",
		"wlan_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClientWirelessStats := _ClientWirelessStats{}

	err = json.Unmarshal(data, &varClientWirelessStats)

	if err != nil {
		return err
	}

	*o = ClientWirelessStats(varClientWirelessStats)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_ttl")
		delete(additionalProperties, "accuracy")
		delete(additionalProperties, "airespace_ifname")
		delete(additionalProperties, "airwatch")
		delete(additionalProperties, "ap_id")
		delete(additionalProperties, "ap_mac")
		delete(additionalProperties, "band")
		delete(additionalProperties, "channel")
		delete(additionalProperties, "dual_band")
		delete(additionalProperties, "family")
		delete(additionalProperties, "guest")
		delete(additionalProperties, "hostname")
		delete(additionalProperties, "idle_time")
		delete(additionalProperties, "ip")
		delete(additionalProperties, "is_guest")
		delete(additionalProperties, "key_mgmt")
		delete(additionalProperties, "last_seen")
		delete(additionalProperties, "mac")
		delete(additionalProperties, "manufacture")
		delete(additionalProperties, "map_id")
		delete(additionalProperties, "model")
		delete(additionalProperties, "num_locating_aps")
		delete(additionalProperties, "os")
		delete(additionalProperties, "power_saving")
		delete(additionalProperties, "proto")
		delete(additionalProperties, "psk_id")
		delete(additionalProperties, "rssi")
		delete(additionalProperties, "rssizones")
		delete(additionalProperties, "rx_bps")
		delete(additionalProperties, "rx_bytes")
		delete(additionalProperties, "rx_packets")
		delete(additionalProperties, "rx_rate")
		delete(additionalProperties, "rx_retries")
		delete(additionalProperties, "snr")
		delete(additionalProperties, "ssid")
		delete(additionalProperties, "tx_bps")
		delete(additionalProperties, "tx_bytes")
		delete(additionalProperties, "tx_packets")
		delete(additionalProperties, "tx_rate")
		delete(additionalProperties, "tx_retries")
		delete(additionalProperties, "type")
		delete(additionalProperties, "uptime")
		delete(additionalProperties, "username")
		delete(additionalProperties, "vbeacons")
		delete(additionalProperties, "vlan_id")
		delete(additionalProperties, "wlan_id")
		delete(additionalProperties, "wxrule_id")
		delete(additionalProperties, "wxrule_usage")
		delete(additionalProperties, "x")
		delete(additionalProperties, "x_m")
		delete(additionalProperties, "y")
		delete(additionalProperties, "y_m")
		delete(additionalProperties, "zones")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClientWirelessStats struct {
	value *ClientWirelessStats
	isSet bool
}

func (v NullableClientWirelessStats) Get() *ClientWirelessStats {
	return v.value
}

func (v *NullableClientWirelessStats) Set(val *ClientWirelessStats) {
	v.value = val
	v.isSet = true
}

func (v NullableClientWirelessStats) IsSet() bool {
	return v.isSet
}

func (v *NullableClientWirelessStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientWirelessStats(val *ClientWirelessStats) *NullableClientWirelessStats {
	return &NullableClientWirelessStats{value: val, isSet: true}
}

func (v NullableClientWirelessStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientWirelessStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


