/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the ResponseClaimLicenseLicenseItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseClaimLicenseLicenseItem{}

// ResponseClaimLicenseLicenseItem struct for ResponseClaimLicenseLicenseItem
type ResponseClaimLicenseLicenseItem struct {
	End int32 `json:"end"`
	Quantity int32 `json:"quantity"`
	Start int32 `json:"start"`
	Type string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _ResponseClaimLicenseLicenseItem ResponseClaimLicenseLicenseItem

// NewResponseClaimLicenseLicenseItem instantiates a new ResponseClaimLicenseLicenseItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseClaimLicenseLicenseItem(end int32, quantity int32, start int32, type_ string) *ResponseClaimLicenseLicenseItem {
	this := ResponseClaimLicenseLicenseItem{}
	this.End = end
	this.Quantity = quantity
	this.Start = start
	this.Type = type_
	return &this
}

// NewResponseClaimLicenseLicenseItemWithDefaults instantiates a new ResponseClaimLicenseLicenseItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseClaimLicenseLicenseItemWithDefaults() *ResponseClaimLicenseLicenseItem {
	this := ResponseClaimLicenseLicenseItem{}
	return &this
}

// GetEnd returns the End field value
func (o *ResponseClaimLicenseLicenseItem) GetEnd() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.End
}

// GetEndOk returns a tuple with the End field value
// and a boolean to check if the value has been set.
func (o *ResponseClaimLicenseLicenseItem) GetEndOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.End, true
}

// SetEnd sets field value
func (o *ResponseClaimLicenseLicenseItem) SetEnd(v int32) {
	o.End = v
}

// GetQuantity returns the Quantity field value
func (o *ResponseClaimLicenseLicenseItem) GetQuantity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *ResponseClaimLicenseLicenseItem) GetQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *ResponseClaimLicenseLicenseItem) SetQuantity(v int32) {
	o.Quantity = v
}

// GetStart returns the Start field value
func (o *ResponseClaimLicenseLicenseItem) GetStart() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *ResponseClaimLicenseLicenseItem) GetStartOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *ResponseClaimLicenseLicenseItem) SetStart(v int32) {
	o.Start = v
}

// GetType returns the Type field value
func (o *ResponseClaimLicenseLicenseItem) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ResponseClaimLicenseLicenseItem) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ResponseClaimLicenseLicenseItem) SetType(v string) {
	o.Type = v
}

func (o ResponseClaimLicenseLicenseItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseClaimLicenseLicenseItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["end"] = o.End
	toSerialize["quantity"] = o.Quantity
	toSerialize["start"] = o.Start
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResponseClaimLicenseLicenseItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"end",
		"quantity",
		"start",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResponseClaimLicenseLicenseItem := _ResponseClaimLicenseLicenseItem{}

	err = json.Unmarshal(data, &varResponseClaimLicenseLicenseItem)

	if err != nil {
		return err
	}

	*o = ResponseClaimLicenseLicenseItem(varResponseClaimLicenseLicenseItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "end")
		delete(additionalProperties, "quantity")
		delete(additionalProperties, "start")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResponseClaimLicenseLicenseItem struct {
	value *ResponseClaimLicenseLicenseItem
	isSet bool
}

func (v NullableResponseClaimLicenseLicenseItem) Get() *ResponseClaimLicenseLicenseItem {
	return v.value
}

func (v *NullableResponseClaimLicenseLicenseItem) Set(val *ResponseClaimLicenseLicenseItem) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseClaimLicenseLicenseItem) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseClaimLicenseLicenseItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseClaimLicenseLicenseItem(val *ResponseClaimLicenseLicenseItem) *NullableResponseClaimLicenseLicenseItem {
	return &NullableResponseClaimLicenseLicenseItem{value: val, isSet: true}
}

func (v NullableResponseClaimLicenseLicenseItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseClaimLicenseLicenseItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


