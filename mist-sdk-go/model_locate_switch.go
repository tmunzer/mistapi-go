/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the LocateSwitch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocateSwitch{}

// LocateSwitch struct for LocateSwitch
type LocateSwitch struct {
	// minutes the leds should keep flashing
	Duration *int32 `json:"duration,omitempty"`
	// for virtual chassis, the MAC of the member
	Mac *string `json:"mac,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LocateSwitch LocateSwitch

// NewLocateSwitch instantiates a new LocateSwitch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocateSwitch() *LocateSwitch {
	this := LocateSwitch{}
	var duration int32 = 5
	this.Duration = &duration
	return &this
}

// NewLocateSwitchWithDefaults instantiates a new LocateSwitch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocateSwitchWithDefaults() *LocateSwitch {
	this := LocateSwitch{}
	var duration int32 = 5
	this.Duration = &duration
	return &this
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *LocateSwitch) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocateSwitch) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *LocateSwitch) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *LocateSwitch) SetDuration(v int32) {
	o.Duration = &v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *LocateSwitch) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocateSwitch) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *LocateSwitch) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *LocateSwitch) SetMac(v string) {
	o.Mac = &v
}

func (o LocateSwitch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocateSwitch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LocateSwitch) UnmarshalJSON(data []byte) (err error) {
	varLocateSwitch := _LocateSwitch{}

	err = json.Unmarshal(data, &varLocateSwitch)

	if err != nil {
		return err
	}

	*o = LocateSwitch(varLocateSwitch)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "duration")
		delete(additionalProperties, "mac")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLocateSwitch struct {
	value *LocateSwitch
	isSet bool
}

func (v NullableLocateSwitch) Get() *LocateSwitch {
	return v.value
}

func (v *NullableLocateSwitch) Set(val *LocateSwitch) {
	v.value = val
	v.isSet = true
}

func (v NullableLocateSwitch) IsSet() bool {
	return v.isSet
}

func (v *NullableLocateSwitch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocateSwitch(val *LocateSwitch) *NullableLocateSwitch {
	return &NullableLocateSwitch{value: val, isSet: true}
}

func (v NullableLocateSwitch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocateSwitch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


