/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the WlanDynamicPsk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WlanDynamicPsk{}

// WlanDynamicPsk for dynamic PSK where we get per_user PSK from Radius dynamic_psk allows PSK to be selected at runtime depending on context (wlan/site/user/...) thus following configurations are assumed (currently) - PSK will come from RADIUS server - AP sends client MAC as username ans password (i.e. `enable_mac_auth` is assumed) - AP sends BSSID:SSID as Caller-Station-ID - `auth_servers` is required - PSK will come from cloud WLC if source is cloud_psks - default_psk will be used if cloud WLC is not available - `multi_psk_only` and `psk` is ignored - `pairwise` can only be wpa2-ccmp (for now, wpa3 support on the roadmap)
type WlanDynamicPsk struct {
	// default PSK to use if cloud WLC is not available, 8-63 characters
	DefaultPsk *string `json:"default_psk,omitempty"`
	DefaultVlanId NullableInt32 `json:"default_vlan_id,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	// when 11r is enabled, we'll try to use the cached PMK, this can be disabled `false` means auto
	ForceLookup *bool `json:"force_lookup,omitempty"`
	Source *DynamicPskSource `json:"source,omitempty"`
	VlanIds []*int32 `json:"vlan_ids,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WlanDynamicPsk WlanDynamicPsk

// NewWlanDynamicPsk instantiates a new WlanDynamicPsk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWlanDynamicPsk() *WlanDynamicPsk {
	this := WlanDynamicPsk{}
	var enabled bool = false
	this.Enabled = &enabled
	var forceLookup bool = false
	this.ForceLookup = &forceLookup
	var source DynamicPskSource = DYNAMICPSKSOURCE_RADIUS
	this.Source = &source
	return &this
}

// NewWlanDynamicPskWithDefaults instantiates a new WlanDynamicPsk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWlanDynamicPskWithDefaults() *WlanDynamicPsk {
	this := WlanDynamicPsk{}
	var enabled bool = false
	this.Enabled = &enabled
	var forceLookup bool = false
	this.ForceLookup = &forceLookup
	var source DynamicPskSource = DYNAMICPSKSOURCE_RADIUS
	this.Source = &source
	return &this
}

// GetDefaultPsk returns the DefaultPsk field value if set, zero value otherwise.
func (o *WlanDynamicPsk) GetDefaultPsk() string {
	if o == nil || IsNil(o.DefaultPsk) {
		var ret string
		return ret
	}
	return *o.DefaultPsk
}

// GetDefaultPskOk returns a tuple with the DefaultPsk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanDynamicPsk) GetDefaultPskOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultPsk) {
		return nil, false
	}
	return o.DefaultPsk, true
}

// HasDefaultPsk returns a boolean if a field has been set.
func (o *WlanDynamicPsk) HasDefaultPsk() bool {
	if o != nil && !IsNil(o.DefaultPsk) {
		return true
	}

	return false
}

// SetDefaultPsk gets a reference to the given string and assigns it to the DefaultPsk field.
func (o *WlanDynamicPsk) SetDefaultPsk(v string) {
	o.DefaultPsk = &v
}

// GetDefaultVlanId returns the DefaultVlanId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WlanDynamicPsk) GetDefaultVlanId() int32 {
	if o == nil || IsNil(o.DefaultVlanId.Get()) {
		var ret int32
		return ret
	}
	return *o.DefaultVlanId.Get()
}

// GetDefaultVlanIdOk returns a tuple with the DefaultVlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WlanDynamicPsk) GetDefaultVlanIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultVlanId.Get(), o.DefaultVlanId.IsSet()
}

// HasDefaultVlanId returns a boolean if a field has been set.
func (o *WlanDynamicPsk) HasDefaultVlanId() bool {
	if o != nil && o.DefaultVlanId.IsSet() {
		return true
	}

	return false
}

// SetDefaultVlanId gets a reference to the given NullableInt32 and assigns it to the DefaultVlanId field.
func (o *WlanDynamicPsk) SetDefaultVlanId(v int32) {
	o.DefaultVlanId.Set(&v)
}
// SetDefaultVlanIdNil sets the value for DefaultVlanId to be an explicit nil
func (o *WlanDynamicPsk) SetDefaultVlanIdNil() {
	o.DefaultVlanId.Set(nil)
}

// UnsetDefaultVlanId ensures that no value is present for DefaultVlanId, not even an explicit nil
func (o *WlanDynamicPsk) UnsetDefaultVlanId() {
	o.DefaultVlanId.Unset()
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *WlanDynamicPsk) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanDynamicPsk) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *WlanDynamicPsk) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *WlanDynamicPsk) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetForceLookup returns the ForceLookup field value if set, zero value otherwise.
func (o *WlanDynamicPsk) GetForceLookup() bool {
	if o == nil || IsNil(o.ForceLookup) {
		var ret bool
		return ret
	}
	return *o.ForceLookup
}

// GetForceLookupOk returns a tuple with the ForceLookup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanDynamicPsk) GetForceLookupOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceLookup) {
		return nil, false
	}
	return o.ForceLookup, true
}

// HasForceLookup returns a boolean if a field has been set.
func (o *WlanDynamicPsk) HasForceLookup() bool {
	if o != nil && !IsNil(o.ForceLookup) {
		return true
	}

	return false
}

// SetForceLookup gets a reference to the given bool and assigns it to the ForceLookup field.
func (o *WlanDynamicPsk) SetForceLookup(v bool) {
	o.ForceLookup = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *WlanDynamicPsk) GetSource() DynamicPskSource {
	if o == nil || IsNil(o.Source) {
		var ret DynamicPskSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanDynamicPsk) GetSourceOk() (*DynamicPskSource, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *WlanDynamicPsk) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given DynamicPskSource and assigns it to the Source field.
func (o *WlanDynamicPsk) SetSource(v DynamicPskSource) {
	o.Source = &v
}

// GetVlanIds returns the VlanIds field value if set, zero value otherwise.
func (o *WlanDynamicPsk) GetVlanIds() []*int32 {
	if o == nil || IsNil(o.VlanIds) {
		var ret []*int32
		return ret
	}
	return o.VlanIds
}

// GetVlanIdsOk returns a tuple with the VlanIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WlanDynamicPsk) GetVlanIdsOk() ([]*int32, bool) {
	if o == nil || IsNil(o.VlanIds) {
		return nil, false
	}
	return o.VlanIds, true
}

// HasVlanIds returns a boolean if a field has been set.
func (o *WlanDynamicPsk) HasVlanIds() bool {
	if o != nil && !IsNil(o.VlanIds) {
		return true
	}

	return false
}

// SetVlanIds gets a reference to the given []*int32 and assigns it to the VlanIds field.
func (o *WlanDynamicPsk) SetVlanIds(v []*int32) {
	o.VlanIds = v
}

func (o WlanDynamicPsk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WlanDynamicPsk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultPsk) {
		toSerialize["default_psk"] = o.DefaultPsk
	}
	if o.DefaultVlanId.IsSet() {
		toSerialize["default_vlan_id"] = o.DefaultVlanId.Get()
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ForceLookup) {
		toSerialize["force_lookup"] = o.ForceLookup
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.VlanIds) {
		toSerialize["vlan_ids"] = o.VlanIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WlanDynamicPsk) UnmarshalJSON(data []byte) (err error) {
	varWlanDynamicPsk := _WlanDynamicPsk{}

	err = json.Unmarshal(data, &varWlanDynamicPsk)

	if err != nil {
		return err
	}

	*o = WlanDynamicPsk(varWlanDynamicPsk)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "default_psk")
		delete(additionalProperties, "default_vlan_id")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "force_lookup")
		delete(additionalProperties, "source")
		delete(additionalProperties, "vlan_ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWlanDynamicPsk struct {
	value *WlanDynamicPsk
	isSet bool
}

func (v NullableWlanDynamicPsk) Get() *WlanDynamicPsk {
	return v.value
}

func (v *NullableWlanDynamicPsk) Set(val *WlanDynamicPsk) {
	v.value = val
	v.isSet = true
}

func (v NullableWlanDynamicPsk) IsSet() bool {
	return v.isSet
}

func (v *NullableWlanDynamicPsk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWlanDynamicPsk(val *WlanDynamicPsk) *NullableWlanDynamicPsk {
	return &NullableWlanDynamicPsk{value: val, isSet: true}
}

func (v NullableWlanDynamicPsk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWlanDynamicPsk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


