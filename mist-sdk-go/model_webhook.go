/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the Webhook type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Webhook{}

// Webhook struct for Webhook
type Webhook struct {
	CreatedTime *float32 `json:"created_time,omitempty"`
	// whether webhook is enabled
	Enabled *bool `json:"enabled,omitempty"`
	ForSite *bool `json:"for_site,omitempty"`
	// if `type`=`http-post`, additional custom HTTP headers to add the headers name and value must be string, total bytes of headers name and value must be less than 1000
	Headers map[string]string `json:"headers,omitempty"`
	Id *string `json:"id,omitempty"`
	ModifiedTime *float32 `json:"modified_time,omitempty"`
	// name of the webhook
	Name NullableString `json:"name,omitempty"`
	// required when `oauth2_grant_type`==`client_credentials`
	Oauth2ClientId *string `json:"oauth2_client_id,omitempty"`
	// required when `oauth2_grant_type`==`client_credentials`
	Oauth2ClientSecret *string `json:"oauth2_client_secret,omitempty"`
	Oauth2GrantType *WebhookOauth2GrantType `json:"oauth2_grant_type,omitempty"`
	// required when `oauth2_grant_type`==`password`
	Oauth2Password *string `json:"oauth2_password,omitempty"`
	// required when `type`==`oauth2`, if provided, will be used in the token request
	Oauth2Scopes []string `json:"oauth2_scopes,omitempty"`
	// required when `type`==`oauth2`
	Oauth2TokenUrl *string `json:"oauth2_token_url,omitempty"`
	// required when `oauth2_grant_type`==`password`
	Oauth2Username *string `json:"oauth2_username,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	// only if `type`=`http-post` when `secret` is provided, two HTTP headers will be added:   * X-Mist-Signature-v2: HMAC_SHA256(secret, body)   * X-Mist-Signature: HMAC_SHA1(secret, body)
	Secret NullableString `json:"secret,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	// required if `type`=`splunk` If splunk_token is not defined for a type Splunk webhook, it will not send, regardless if the webhook receiver is configured to accept it.'
	SplunkToken NullableString `json:"splunk_token,omitempty"`
	// N.B. For org webhooks, only device_events/alarms/audits/client-join/client-sessions/nac-sessions/nac_events topics are supported.
	Topics []WebhookTopic `json:"topics,omitempty"`
	Type *WebhookType `json:"type,omitempty"`
	Url NullableString `json:"url,omitempty"`
	// when url uses HTTPS, whether to verify the certificate
	VerifyCert *bool `json:"verify_cert,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Webhook Webhook

// NewWebhook instantiates a new Webhook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhook() *Webhook {
	this := Webhook{}
	var enabled bool = true
	this.Enabled = &enabled
	var type_ WebhookType = WEBHOOKTYPE_HTTP_POST
	this.Type = &type_
	var verifyCert bool = true
	this.VerifyCert = &verifyCert
	return &this
}

// NewWebhookWithDefaults instantiates a new Webhook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookWithDefaults() *Webhook {
	this := Webhook{}
	var enabled bool = true
	this.Enabled = &enabled
	var type_ WebhookType = WEBHOOKTYPE_HTTP_POST
	this.Type = &type_
	var verifyCert bool = true
	this.VerifyCert = &verifyCert
	return &this
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *Webhook) GetCreatedTime() float32 {
	if o == nil || IsNil(o.CreatedTime) {
		var ret float32
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetCreatedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *Webhook) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given float32 and assigns it to the CreatedTime field.
func (o *Webhook) SetCreatedTime(v float32) {
	o.CreatedTime = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Webhook) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Webhook) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Webhook) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetForSite returns the ForSite field value if set, zero value otherwise.
func (o *Webhook) GetForSite() bool {
	if o == nil || IsNil(o.ForSite) {
		var ret bool
		return ret
	}
	return *o.ForSite
}

// GetForSiteOk returns a tuple with the ForSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetForSiteOk() (*bool, bool) {
	if o == nil || IsNil(o.ForSite) {
		return nil, false
	}
	return o.ForSite, true
}

// HasForSite returns a boolean if a field has been set.
func (o *Webhook) HasForSite() bool {
	if o != nil && !IsNil(o.ForSite) {
		return true
	}

	return false
}

// SetForSite gets a reference to the given bool and assigns it to the ForSite field.
func (o *Webhook) SetForSite(v bool) {
	o.ForSite = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Webhook) GetHeaders() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Webhook) GetHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return &o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *Webhook) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]string and assigns it to the Headers field.
func (o *Webhook) SetHeaders(v map[string]string) {
	o.Headers = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Webhook) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Webhook) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Webhook) SetId(v string) {
	o.Id = &v
}

// GetModifiedTime returns the ModifiedTime field value if set, zero value otherwise.
func (o *Webhook) GetModifiedTime() float32 {
	if o == nil || IsNil(o.ModifiedTime) {
		var ret float32
		return ret
	}
	return *o.ModifiedTime
}

// GetModifiedTimeOk returns a tuple with the ModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetModifiedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.ModifiedTime) {
		return nil, false
	}
	return o.ModifiedTime, true
}

// HasModifiedTime returns a boolean if a field has been set.
func (o *Webhook) HasModifiedTime() bool {
	if o != nil && !IsNil(o.ModifiedTime) {
		return true
	}

	return false
}

// SetModifiedTime gets a reference to the given float32 and assigns it to the ModifiedTime field.
func (o *Webhook) SetModifiedTime(v float32) {
	o.ModifiedTime = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Webhook) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Webhook) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Webhook) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Webhook) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Webhook) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Webhook) UnsetName() {
	o.Name.Unset()
}

// GetOauth2ClientId returns the Oauth2ClientId field value if set, zero value otherwise.
func (o *Webhook) GetOauth2ClientId() string {
	if o == nil || IsNil(o.Oauth2ClientId) {
		var ret string
		return ret
	}
	return *o.Oauth2ClientId
}

// GetOauth2ClientIdOk returns a tuple with the Oauth2ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetOauth2ClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.Oauth2ClientId) {
		return nil, false
	}
	return o.Oauth2ClientId, true
}

// HasOauth2ClientId returns a boolean if a field has been set.
func (o *Webhook) HasOauth2ClientId() bool {
	if o != nil && !IsNil(o.Oauth2ClientId) {
		return true
	}

	return false
}

// SetOauth2ClientId gets a reference to the given string and assigns it to the Oauth2ClientId field.
func (o *Webhook) SetOauth2ClientId(v string) {
	o.Oauth2ClientId = &v
}

// GetOauth2ClientSecret returns the Oauth2ClientSecret field value if set, zero value otherwise.
func (o *Webhook) GetOauth2ClientSecret() string {
	if o == nil || IsNil(o.Oauth2ClientSecret) {
		var ret string
		return ret
	}
	return *o.Oauth2ClientSecret
}

// GetOauth2ClientSecretOk returns a tuple with the Oauth2ClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetOauth2ClientSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Oauth2ClientSecret) {
		return nil, false
	}
	return o.Oauth2ClientSecret, true
}

// HasOauth2ClientSecret returns a boolean if a field has been set.
func (o *Webhook) HasOauth2ClientSecret() bool {
	if o != nil && !IsNil(o.Oauth2ClientSecret) {
		return true
	}

	return false
}

// SetOauth2ClientSecret gets a reference to the given string and assigns it to the Oauth2ClientSecret field.
func (o *Webhook) SetOauth2ClientSecret(v string) {
	o.Oauth2ClientSecret = &v
}

// GetOauth2GrantType returns the Oauth2GrantType field value if set, zero value otherwise.
func (o *Webhook) GetOauth2GrantType() WebhookOauth2GrantType {
	if o == nil || IsNil(o.Oauth2GrantType) {
		var ret WebhookOauth2GrantType
		return ret
	}
	return *o.Oauth2GrantType
}

// GetOauth2GrantTypeOk returns a tuple with the Oauth2GrantType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetOauth2GrantTypeOk() (*WebhookOauth2GrantType, bool) {
	if o == nil || IsNil(o.Oauth2GrantType) {
		return nil, false
	}
	return o.Oauth2GrantType, true
}

// HasOauth2GrantType returns a boolean if a field has been set.
func (o *Webhook) HasOauth2GrantType() bool {
	if o != nil && !IsNil(o.Oauth2GrantType) {
		return true
	}

	return false
}

// SetOauth2GrantType gets a reference to the given WebhookOauth2GrantType and assigns it to the Oauth2GrantType field.
func (o *Webhook) SetOauth2GrantType(v WebhookOauth2GrantType) {
	o.Oauth2GrantType = &v
}

// GetOauth2Password returns the Oauth2Password field value if set, zero value otherwise.
func (o *Webhook) GetOauth2Password() string {
	if o == nil || IsNil(o.Oauth2Password) {
		var ret string
		return ret
	}
	return *o.Oauth2Password
}

// GetOauth2PasswordOk returns a tuple with the Oauth2Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetOauth2PasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Oauth2Password) {
		return nil, false
	}
	return o.Oauth2Password, true
}

// HasOauth2Password returns a boolean if a field has been set.
func (o *Webhook) HasOauth2Password() bool {
	if o != nil && !IsNil(o.Oauth2Password) {
		return true
	}

	return false
}

// SetOauth2Password gets a reference to the given string and assigns it to the Oauth2Password field.
func (o *Webhook) SetOauth2Password(v string) {
	o.Oauth2Password = &v
}

// GetOauth2Scopes returns the Oauth2Scopes field value if set, zero value otherwise.
func (o *Webhook) GetOauth2Scopes() []string {
	if o == nil || IsNil(o.Oauth2Scopes) {
		var ret []string
		return ret
	}
	return o.Oauth2Scopes
}

// GetOauth2ScopesOk returns a tuple with the Oauth2Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetOauth2ScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.Oauth2Scopes) {
		return nil, false
	}
	return o.Oauth2Scopes, true
}

// HasOauth2Scopes returns a boolean if a field has been set.
func (o *Webhook) HasOauth2Scopes() bool {
	if o != nil && !IsNil(o.Oauth2Scopes) {
		return true
	}

	return false
}

// SetOauth2Scopes gets a reference to the given []string and assigns it to the Oauth2Scopes field.
func (o *Webhook) SetOauth2Scopes(v []string) {
	o.Oauth2Scopes = v
}

// GetOauth2TokenUrl returns the Oauth2TokenUrl field value if set, zero value otherwise.
func (o *Webhook) GetOauth2TokenUrl() string {
	if o == nil || IsNil(o.Oauth2TokenUrl) {
		var ret string
		return ret
	}
	return *o.Oauth2TokenUrl
}

// GetOauth2TokenUrlOk returns a tuple with the Oauth2TokenUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetOauth2TokenUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Oauth2TokenUrl) {
		return nil, false
	}
	return o.Oauth2TokenUrl, true
}

// HasOauth2TokenUrl returns a boolean if a field has been set.
func (o *Webhook) HasOauth2TokenUrl() bool {
	if o != nil && !IsNil(o.Oauth2TokenUrl) {
		return true
	}

	return false
}

// SetOauth2TokenUrl gets a reference to the given string and assigns it to the Oauth2TokenUrl field.
func (o *Webhook) SetOauth2TokenUrl(v string) {
	o.Oauth2TokenUrl = &v
}

// GetOauth2Username returns the Oauth2Username field value if set, zero value otherwise.
func (o *Webhook) GetOauth2Username() string {
	if o == nil || IsNil(o.Oauth2Username) {
		var ret string
		return ret
	}
	return *o.Oauth2Username
}

// GetOauth2UsernameOk returns a tuple with the Oauth2Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetOauth2UsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Oauth2Username) {
		return nil, false
	}
	return o.Oauth2Username, true
}

// HasOauth2Username returns a boolean if a field has been set.
func (o *Webhook) HasOauth2Username() bool {
	if o != nil && !IsNil(o.Oauth2Username) {
		return true
	}

	return false
}

// SetOauth2Username gets a reference to the given string and assigns it to the Oauth2Username field.
func (o *Webhook) SetOauth2Username(v string) {
	o.Oauth2Username = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *Webhook) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *Webhook) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *Webhook) SetOrgId(v string) {
	o.OrgId = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Webhook) GetSecret() string {
	if o == nil || IsNil(o.Secret.Get()) {
		var ret string
		return ret
	}
	return *o.Secret.Get()
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Webhook) GetSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Secret.Get(), o.Secret.IsSet()
}

// HasSecret returns a boolean if a field has been set.
func (o *Webhook) HasSecret() bool {
	if o != nil && o.Secret.IsSet() {
		return true
	}

	return false
}

// SetSecret gets a reference to the given NullableString and assigns it to the Secret field.
func (o *Webhook) SetSecret(v string) {
	o.Secret.Set(&v)
}
// SetSecretNil sets the value for Secret to be an explicit nil
func (o *Webhook) SetSecretNil() {
	o.Secret.Set(nil)
}

// UnsetSecret ensures that no value is present for Secret, not even an explicit nil
func (o *Webhook) UnsetSecret() {
	o.Secret.Unset()
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *Webhook) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *Webhook) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *Webhook) SetSiteId(v string) {
	o.SiteId = &v
}

// GetSplunkToken returns the SplunkToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Webhook) GetSplunkToken() string {
	if o == nil || IsNil(o.SplunkToken.Get()) {
		var ret string
		return ret
	}
	return *o.SplunkToken.Get()
}

// GetSplunkTokenOk returns a tuple with the SplunkToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Webhook) GetSplunkTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SplunkToken.Get(), o.SplunkToken.IsSet()
}

// HasSplunkToken returns a boolean if a field has been set.
func (o *Webhook) HasSplunkToken() bool {
	if o != nil && o.SplunkToken.IsSet() {
		return true
	}

	return false
}

// SetSplunkToken gets a reference to the given NullableString and assigns it to the SplunkToken field.
func (o *Webhook) SetSplunkToken(v string) {
	o.SplunkToken.Set(&v)
}
// SetSplunkTokenNil sets the value for SplunkToken to be an explicit nil
func (o *Webhook) SetSplunkTokenNil() {
	o.SplunkToken.Set(nil)
}

// UnsetSplunkToken ensures that no value is present for SplunkToken, not even an explicit nil
func (o *Webhook) UnsetSplunkToken() {
	o.SplunkToken.Unset()
}

// GetTopics returns the Topics field value if set, zero value otherwise.
func (o *Webhook) GetTopics() []WebhookTopic {
	if o == nil || IsNil(o.Topics) {
		var ret []WebhookTopic
		return ret
	}
	return o.Topics
}

// GetTopicsOk returns a tuple with the Topics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetTopicsOk() ([]WebhookTopic, bool) {
	if o == nil || IsNil(o.Topics) {
		return nil, false
	}
	return o.Topics, true
}

// HasTopics returns a boolean if a field has been set.
func (o *Webhook) HasTopics() bool {
	if o != nil && !IsNil(o.Topics) {
		return true
	}

	return false
}

// SetTopics gets a reference to the given []WebhookTopic and assigns it to the Topics field.
func (o *Webhook) SetTopics(v []WebhookTopic) {
	o.Topics = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Webhook) GetType() WebhookType {
	if o == nil || IsNil(o.Type) {
		var ret WebhookType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetTypeOk() (*WebhookType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Webhook) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given WebhookType and assigns it to the Type field.
func (o *Webhook) SetType(v WebhookType) {
	o.Type = &v
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Webhook) GetUrl() string {
	if o == nil || IsNil(o.Url.Get()) {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Webhook) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *Webhook) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *Webhook) SetUrl(v string) {
	o.Url.Set(&v)
}
// SetUrlNil sets the value for Url to be an explicit nil
func (o *Webhook) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *Webhook) UnsetUrl() {
	o.Url.Unset()
}

// GetVerifyCert returns the VerifyCert field value if set, zero value otherwise.
func (o *Webhook) GetVerifyCert() bool {
	if o == nil || IsNil(o.VerifyCert) {
		var ret bool
		return ret
	}
	return *o.VerifyCert
}

// GetVerifyCertOk returns a tuple with the VerifyCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Webhook) GetVerifyCertOk() (*bool, bool) {
	if o == nil || IsNil(o.VerifyCert) {
		return nil, false
	}
	return o.VerifyCert, true
}

// HasVerifyCert returns a boolean if a field has been set.
func (o *Webhook) HasVerifyCert() bool {
	if o != nil && !IsNil(o.VerifyCert) {
		return true
	}

	return false
}

// SetVerifyCert gets a reference to the given bool and assigns it to the VerifyCert field.
func (o *Webhook) SetVerifyCert(v bool) {
	o.VerifyCert = &v
}

func (o Webhook) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Webhook) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ForSite) {
		toSerialize["for_site"] = o.ForSite
	}
	if o.Headers != nil {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ModifiedTime) {
		toSerialize["modified_time"] = o.ModifiedTime
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.Oauth2ClientId) {
		toSerialize["oauth2_client_id"] = o.Oauth2ClientId
	}
	if !IsNil(o.Oauth2ClientSecret) {
		toSerialize["oauth2_client_secret"] = o.Oauth2ClientSecret
	}
	if !IsNil(o.Oauth2GrantType) {
		toSerialize["oauth2_grant_type"] = o.Oauth2GrantType
	}
	if !IsNil(o.Oauth2Password) {
		toSerialize["oauth2_password"] = o.Oauth2Password
	}
	if !IsNil(o.Oauth2Scopes) {
		toSerialize["oauth2_scopes"] = o.Oauth2Scopes
	}
	if !IsNil(o.Oauth2TokenUrl) {
		toSerialize["oauth2_token_url"] = o.Oauth2TokenUrl
	}
	if !IsNil(o.Oauth2Username) {
		toSerialize["oauth2_username"] = o.Oauth2Username
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if o.Secret.IsSet() {
		toSerialize["secret"] = o.Secret.Get()
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if o.SplunkToken.IsSet() {
		toSerialize["splunk_token"] = o.SplunkToken.Get()
	}
	if !IsNil(o.Topics) {
		toSerialize["topics"] = o.Topics
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.Url.IsSet() {
		toSerialize["url"] = o.Url.Get()
	}
	if !IsNil(o.VerifyCert) {
		toSerialize["verify_cert"] = o.VerifyCert
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Webhook) UnmarshalJSON(data []byte) (err error) {
	varWebhook := _Webhook{}

	err = json.Unmarshal(data, &varWebhook)

	if err != nil {
		return err
	}

	*o = Webhook(varWebhook)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "created_time")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "for_site")
		delete(additionalProperties, "headers")
		delete(additionalProperties, "id")
		delete(additionalProperties, "modified_time")
		delete(additionalProperties, "name")
		delete(additionalProperties, "oauth2_client_id")
		delete(additionalProperties, "oauth2_client_secret")
		delete(additionalProperties, "oauth2_grant_type")
		delete(additionalProperties, "oauth2_password")
		delete(additionalProperties, "oauth2_scopes")
		delete(additionalProperties, "oauth2_token_url")
		delete(additionalProperties, "oauth2_username")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "secret")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "splunk_token")
		delete(additionalProperties, "topics")
		delete(additionalProperties, "type")
		delete(additionalProperties, "url")
		delete(additionalProperties, "verify_cert")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWebhook struct {
	value *Webhook
	isSet bool
}

func (v NullableWebhook) Get() *Webhook {
	return v.value
}

func (v *NullableWebhook) Set(val *Webhook) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhook) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhook(val *Webhook) *NullableWebhook {
	return &NullableWebhook{value: val, isSet: true}
}

func (v NullableWebhook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


