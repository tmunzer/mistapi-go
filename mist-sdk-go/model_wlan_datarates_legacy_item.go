/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// WlanDataratesLegacyItem the model 'WlanDataratesLegacyItem'
type WlanDataratesLegacyItem string

// List of wlan_datarates_legacy_item
const (
	WLANDATARATESLEGACYITEM_EMPTY WlanDataratesLegacyItem = ""
	WLANDATARATESLEGACYITEM__1 WlanDataratesLegacyItem = "1"
	WLANDATARATESLEGACYITEM__1B WlanDataratesLegacyItem = "1b"
	WLANDATARATESLEGACYITEM__2 WlanDataratesLegacyItem = "2"
	WLANDATARATESLEGACYITEM__2B WlanDataratesLegacyItem = "2b"
	WLANDATARATESLEGACYITEM__5_5 WlanDataratesLegacyItem = "5.5"
	WLANDATARATESLEGACYITEM__5_5B WlanDataratesLegacyItem = "5.5b"
	WLANDATARATESLEGACYITEM__11 WlanDataratesLegacyItem = "11"
	WLANDATARATESLEGACYITEM__11B WlanDataratesLegacyItem = "11b"
	WLANDATARATESLEGACYITEM__6 WlanDataratesLegacyItem = "6"
	WLANDATARATESLEGACYITEM__6B WlanDataratesLegacyItem = "6b"
	WLANDATARATESLEGACYITEM__9 WlanDataratesLegacyItem = "9"
	WLANDATARATESLEGACYITEM__9B WlanDataratesLegacyItem = "9b"
	WLANDATARATESLEGACYITEM__12 WlanDataratesLegacyItem = "12"
	WLANDATARATESLEGACYITEM__12B WlanDataratesLegacyItem = "12b"
	WLANDATARATESLEGACYITEM__18 WlanDataratesLegacyItem = "18"
	WLANDATARATESLEGACYITEM__18B WlanDataratesLegacyItem = "18b"
	WLANDATARATESLEGACYITEM__24 WlanDataratesLegacyItem = "24"
	WLANDATARATESLEGACYITEM__24B WlanDataratesLegacyItem = "24b"
	WLANDATARATESLEGACYITEM__36 WlanDataratesLegacyItem = "36"
	WLANDATARATESLEGACYITEM__36B WlanDataratesLegacyItem = "36b"
	WLANDATARATESLEGACYITEM__48 WlanDataratesLegacyItem = "48"
	WLANDATARATESLEGACYITEM__48B WlanDataratesLegacyItem = "48b"
	WLANDATARATESLEGACYITEM__54 WlanDataratesLegacyItem = "54"
	WLANDATARATESLEGACYITEM__54B WlanDataratesLegacyItem = "54b"
)

// All allowed values of WlanDataratesLegacyItem enum
var AllowedWlanDataratesLegacyItemEnumValues = []WlanDataratesLegacyItem{
	"",
	"1",
	"1b",
	"2",
	"2b",
	"5.5",
	"5.5b",
	"11",
	"11b",
	"6",
	"6b",
	"9",
	"9b",
	"12",
	"12b",
	"18",
	"18b",
	"24",
	"24b",
	"36",
	"36b",
	"48",
	"48b",
	"54",
	"54b",
}

func (v *WlanDataratesLegacyItem) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WlanDataratesLegacyItem(value)
	for _, existing := range AllowedWlanDataratesLegacyItemEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WlanDataratesLegacyItem", value)
}

// NewWlanDataratesLegacyItemFromValue returns a pointer to a valid WlanDataratesLegacyItem
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWlanDataratesLegacyItemFromValue(v string) (*WlanDataratesLegacyItem, error) {
	ev := WlanDataratesLegacyItem(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WlanDataratesLegacyItem: valid values are %v", v, AllowedWlanDataratesLegacyItemEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WlanDataratesLegacyItem) IsValid() bool {
	for _, existing := range AllowedWlanDataratesLegacyItemEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to wlan_datarates_legacy_item value
func (v WlanDataratesLegacyItem) Ptr() *WlanDataratesLegacyItem {
	return &v
}

type NullableWlanDataratesLegacyItem struct {
	value *WlanDataratesLegacyItem
	isSet bool
}

func (v NullableWlanDataratesLegacyItem) Get() *WlanDataratesLegacyItem {
	return v.value
}

func (v *NullableWlanDataratesLegacyItem) Set(val *WlanDataratesLegacyItem) {
	v.value = val
	v.isSet = true
}

func (v NullableWlanDataratesLegacyItem) IsSet() bool {
	return v.isSet
}

func (v *NullableWlanDataratesLegacyItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWlanDataratesLegacyItem(val *WlanDataratesLegacyItem) *NullableWlanDataratesLegacyItem {
	return &NullableWlanDataratesLegacyItem{value: val, isSet: true}
}

func (v NullableWlanDataratesLegacyItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWlanDataratesLegacyItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

