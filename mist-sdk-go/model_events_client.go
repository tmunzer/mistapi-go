/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the EventsClient type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventsClient{}

// EventsClient client events
type EventsClient struct {
	Ap *string `json:"ap,omitempty"`
	Band Dot11Band `json:"band"`
	Bssid *string `json:"bssid,omitempty"`
	Channel *int32 `json:"channel,omitempty"`
	Proto Dot11Proto `json:"proto"`
	Ssid *string `json:"ssid,omitempty"`
	Text *string `json:"text,omitempty"`
	Timestamp float32 `json:"timestamp"`
	// event type, e.g. MARVIS_EVENT_CLIENT_FBT_FAILURE
	Type *string `json:"type,omitempty"`
	// for assoc/disassoc events
	TypeCode *int32 `json:"type_code,omitempty"`
	WlanId *string `json:"wlan_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EventsClient EventsClient

// NewEventsClient instantiates a new EventsClient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsClient(band Dot11Band, proto Dot11Proto, timestamp float32) *EventsClient {
	this := EventsClient{}
	this.Band = band
	this.Proto = proto
	this.Timestamp = timestamp
	return &this
}

// NewEventsClientWithDefaults instantiates a new EventsClient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsClientWithDefaults() *EventsClient {
	this := EventsClient{}
	return &this
}

// GetAp returns the Ap field value if set, zero value otherwise.
func (o *EventsClient) GetAp() string {
	if o == nil || IsNil(o.Ap) {
		var ret string
		return ret
	}
	return *o.Ap
}

// GetApOk returns a tuple with the Ap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsClient) GetApOk() (*string, bool) {
	if o == nil || IsNil(o.Ap) {
		return nil, false
	}
	return o.Ap, true
}

// HasAp returns a boolean if a field has been set.
func (o *EventsClient) HasAp() bool {
	if o != nil && !IsNil(o.Ap) {
		return true
	}

	return false
}

// SetAp gets a reference to the given string and assigns it to the Ap field.
func (o *EventsClient) SetAp(v string) {
	o.Ap = &v
}

// GetBand returns the Band field value
func (o *EventsClient) GetBand() Dot11Band {
	if o == nil {
		var ret Dot11Band
		return ret
	}

	return o.Band
}

// GetBandOk returns a tuple with the Band field value
// and a boolean to check if the value has been set.
func (o *EventsClient) GetBandOk() (*Dot11Band, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Band, true
}

// SetBand sets field value
func (o *EventsClient) SetBand(v Dot11Band) {
	o.Band = v
}

// GetBssid returns the Bssid field value if set, zero value otherwise.
func (o *EventsClient) GetBssid() string {
	if o == nil || IsNil(o.Bssid) {
		var ret string
		return ret
	}
	return *o.Bssid
}

// GetBssidOk returns a tuple with the Bssid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsClient) GetBssidOk() (*string, bool) {
	if o == nil || IsNil(o.Bssid) {
		return nil, false
	}
	return o.Bssid, true
}

// HasBssid returns a boolean if a field has been set.
func (o *EventsClient) HasBssid() bool {
	if o != nil && !IsNil(o.Bssid) {
		return true
	}

	return false
}

// SetBssid gets a reference to the given string and assigns it to the Bssid field.
func (o *EventsClient) SetBssid(v string) {
	o.Bssid = &v
}

// GetChannel returns the Channel field value if set, zero value otherwise.
func (o *EventsClient) GetChannel() int32 {
	if o == nil || IsNil(o.Channel) {
		var ret int32
		return ret
	}
	return *o.Channel
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsClient) GetChannelOk() (*int32, bool) {
	if o == nil || IsNil(o.Channel) {
		return nil, false
	}
	return o.Channel, true
}

// HasChannel returns a boolean if a field has been set.
func (o *EventsClient) HasChannel() bool {
	if o != nil && !IsNil(o.Channel) {
		return true
	}

	return false
}

// SetChannel gets a reference to the given int32 and assigns it to the Channel field.
func (o *EventsClient) SetChannel(v int32) {
	o.Channel = &v
}

// GetProto returns the Proto field value
func (o *EventsClient) GetProto() Dot11Proto {
	if o == nil {
		var ret Dot11Proto
		return ret
	}

	return o.Proto
}

// GetProtoOk returns a tuple with the Proto field value
// and a boolean to check if the value has been set.
func (o *EventsClient) GetProtoOk() (*Dot11Proto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Proto, true
}

// SetProto sets field value
func (o *EventsClient) SetProto(v Dot11Proto) {
	o.Proto = v
}

// GetSsid returns the Ssid field value if set, zero value otherwise.
func (o *EventsClient) GetSsid() string {
	if o == nil || IsNil(o.Ssid) {
		var ret string
		return ret
	}
	return *o.Ssid
}

// GetSsidOk returns a tuple with the Ssid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsClient) GetSsidOk() (*string, bool) {
	if o == nil || IsNil(o.Ssid) {
		return nil, false
	}
	return o.Ssid, true
}

// HasSsid returns a boolean if a field has been set.
func (o *EventsClient) HasSsid() bool {
	if o != nil && !IsNil(o.Ssid) {
		return true
	}

	return false
}

// SetSsid gets a reference to the given string and assigns it to the Ssid field.
func (o *EventsClient) SetSsid(v string) {
	o.Ssid = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *EventsClient) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsClient) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *EventsClient) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *EventsClient) SetText(v string) {
	o.Text = &v
}

// GetTimestamp returns the Timestamp field value
func (o *EventsClient) GetTimestamp() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *EventsClient) GetTimestampOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *EventsClient) SetTimestamp(v float32) {
	o.Timestamp = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EventsClient) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsClient) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EventsClient) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EventsClient) SetType(v string) {
	o.Type = &v
}

// GetTypeCode returns the TypeCode field value if set, zero value otherwise.
func (o *EventsClient) GetTypeCode() int32 {
	if o == nil || IsNil(o.TypeCode) {
		var ret int32
		return ret
	}
	return *o.TypeCode
}

// GetTypeCodeOk returns a tuple with the TypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsClient) GetTypeCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.TypeCode) {
		return nil, false
	}
	return o.TypeCode, true
}

// HasTypeCode returns a boolean if a field has been set.
func (o *EventsClient) HasTypeCode() bool {
	if o != nil && !IsNil(o.TypeCode) {
		return true
	}

	return false
}

// SetTypeCode gets a reference to the given int32 and assigns it to the TypeCode field.
func (o *EventsClient) SetTypeCode(v int32) {
	o.TypeCode = &v
}

// GetWlanId returns the WlanId field value if set, zero value otherwise.
func (o *EventsClient) GetWlanId() string {
	if o == nil || IsNil(o.WlanId) {
		var ret string
		return ret
	}
	return *o.WlanId
}

// GetWlanIdOk returns a tuple with the WlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsClient) GetWlanIdOk() (*string, bool) {
	if o == nil || IsNil(o.WlanId) {
		return nil, false
	}
	return o.WlanId, true
}

// HasWlanId returns a boolean if a field has been set.
func (o *EventsClient) HasWlanId() bool {
	if o != nil && !IsNil(o.WlanId) {
		return true
	}

	return false
}

// SetWlanId gets a reference to the given string and assigns it to the WlanId field.
func (o *EventsClient) SetWlanId(v string) {
	o.WlanId = &v
}

func (o EventsClient) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventsClient) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ap) {
		toSerialize["ap"] = o.Ap
	}
	toSerialize["band"] = o.Band
	if !IsNil(o.Bssid) {
		toSerialize["bssid"] = o.Bssid
	}
	if !IsNil(o.Channel) {
		toSerialize["channel"] = o.Channel
	}
	toSerialize["proto"] = o.Proto
	if !IsNil(o.Ssid) {
		toSerialize["ssid"] = o.Ssid
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	toSerialize["timestamp"] = o.Timestamp
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.TypeCode) {
		toSerialize["type_code"] = o.TypeCode
	}
	if !IsNil(o.WlanId) {
		toSerialize["wlan_id"] = o.WlanId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EventsClient) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"band",
		"proto",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventsClient := _EventsClient{}

	err = json.Unmarshal(data, &varEventsClient)

	if err != nil {
		return err
	}

	*o = EventsClient(varEventsClient)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ap")
		delete(additionalProperties, "band")
		delete(additionalProperties, "bssid")
		delete(additionalProperties, "channel")
		delete(additionalProperties, "proto")
		delete(additionalProperties, "ssid")
		delete(additionalProperties, "text")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "type")
		delete(additionalProperties, "type_code")
		delete(additionalProperties, "wlan_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEventsClient struct {
	value *EventsClient
	isSet bool
}

func (v NullableEventsClient) Get() *EventsClient {
	return v.value
}

func (v *NullableEventsClient) Set(val *EventsClient) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsClient) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsClient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsClient(val *EventsClient) *NullableEventsClient {
	return &NullableEventsClient{value: val, isSet: true}
}

func (v NullableEventsClient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsClient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


