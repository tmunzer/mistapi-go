/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the ResponsePcapSearchItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponsePcapSearchItem{}

// ResponsePcapSearchItem struct for ResponsePcapSearchItem
type ResponsePcapSearchItem struct {
	ApMacs []string `json:"ap_macs,omitempty"`
	Aps []string `json:"aps,omitempty"`
	Duration *float32 `json:"duration,omitempty"`
	Format *string `json:"format,omitempty"`
	Id *string `json:"id,omitempty"`
	MaxNumPackets *float32 `json:"max_num_packets,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	PcapAps *map[string]ResponsePcapSearchItemPcapApsItem `json:"pcap_aps,omitempty"`
	PcapUrl *string `json:"pcap_url,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	TerminationReason *string `json:"termination_reason,omitempty"`
	Timestamp float32 `json:"timestamp"`
	Type string `json:"type"`
	Url string `json:"url"`
	AdditionalProperties map[string]interface{}
}

type _ResponsePcapSearchItem ResponsePcapSearchItem

// NewResponsePcapSearchItem instantiates a new ResponsePcapSearchItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponsePcapSearchItem(timestamp float32, type_ string, url string) *ResponsePcapSearchItem {
	this := ResponsePcapSearchItem{}
	this.Timestamp = timestamp
	this.Type = type_
	this.Url = url
	return &this
}

// NewResponsePcapSearchItemWithDefaults instantiates a new ResponsePcapSearchItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponsePcapSearchItemWithDefaults() *ResponsePcapSearchItem {
	this := ResponsePcapSearchItem{}
	return &this
}

// GetApMacs returns the ApMacs field value if set, zero value otherwise.
func (o *ResponsePcapSearchItem) GetApMacs() []string {
	if o == nil || IsNil(o.ApMacs) {
		var ret []string
		return ret
	}
	return o.ApMacs
}

// GetApMacsOk returns a tuple with the ApMacs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsePcapSearchItem) GetApMacsOk() ([]string, bool) {
	if o == nil || IsNil(o.ApMacs) {
		return nil, false
	}
	return o.ApMacs, true
}

// HasApMacs returns a boolean if a field has been set.
func (o *ResponsePcapSearchItem) HasApMacs() bool {
	if o != nil && !IsNil(o.ApMacs) {
		return true
	}

	return false
}

// SetApMacs gets a reference to the given []string and assigns it to the ApMacs field.
func (o *ResponsePcapSearchItem) SetApMacs(v []string) {
	o.ApMacs = v
}

// GetAps returns the Aps field value if set, zero value otherwise.
func (o *ResponsePcapSearchItem) GetAps() []string {
	if o == nil || IsNil(o.Aps) {
		var ret []string
		return ret
	}
	return o.Aps
}

// GetApsOk returns a tuple with the Aps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsePcapSearchItem) GetApsOk() ([]string, bool) {
	if o == nil || IsNil(o.Aps) {
		return nil, false
	}
	return o.Aps, true
}

// HasAps returns a boolean if a field has been set.
func (o *ResponsePcapSearchItem) HasAps() bool {
	if o != nil && !IsNil(o.Aps) {
		return true
	}

	return false
}

// SetAps gets a reference to the given []string and assigns it to the Aps field.
func (o *ResponsePcapSearchItem) SetAps(v []string) {
	o.Aps = v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *ResponsePcapSearchItem) GetDuration() float32 {
	if o == nil || IsNil(o.Duration) {
		var ret float32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsePcapSearchItem) GetDurationOk() (*float32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *ResponsePcapSearchItem) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given float32 and assigns it to the Duration field.
func (o *ResponsePcapSearchItem) SetDuration(v float32) {
	o.Duration = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *ResponsePcapSearchItem) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsePcapSearchItem) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *ResponsePcapSearchItem) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *ResponsePcapSearchItem) SetFormat(v string) {
	o.Format = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResponsePcapSearchItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsePcapSearchItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResponsePcapSearchItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ResponsePcapSearchItem) SetId(v string) {
	o.Id = &v
}

// GetMaxNumPackets returns the MaxNumPackets field value if set, zero value otherwise.
func (o *ResponsePcapSearchItem) GetMaxNumPackets() float32 {
	if o == nil || IsNil(o.MaxNumPackets) {
		var ret float32
		return ret
	}
	return *o.MaxNumPackets
}

// GetMaxNumPacketsOk returns a tuple with the MaxNumPackets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsePcapSearchItem) GetMaxNumPacketsOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxNumPackets) {
		return nil, false
	}
	return o.MaxNumPackets, true
}

// HasMaxNumPackets returns a boolean if a field has been set.
func (o *ResponsePcapSearchItem) HasMaxNumPackets() bool {
	if o != nil && !IsNil(o.MaxNumPackets) {
		return true
	}

	return false
}

// SetMaxNumPackets gets a reference to the given float32 and assigns it to the MaxNumPackets field.
func (o *ResponsePcapSearchItem) SetMaxNumPackets(v float32) {
	o.MaxNumPackets = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *ResponsePcapSearchItem) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsePcapSearchItem) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *ResponsePcapSearchItem) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *ResponsePcapSearchItem) SetOrgId(v string) {
	o.OrgId = &v
}

// GetPcapAps returns the PcapAps field value if set, zero value otherwise.
func (o *ResponsePcapSearchItem) GetPcapAps() map[string]ResponsePcapSearchItemPcapApsItem {
	if o == nil || IsNil(o.PcapAps) {
		var ret map[string]ResponsePcapSearchItemPcapApsItem
		return ret
	}
	return *o.PcapAps
}

// GetPcapApsOk returns a tuple with the PcapAps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsePcapSearchItem) GetPcapApsOk() (*map[string]ResponsePcapSearchItemPcapApsItem, bool) {
	if o == nil || IsNil(o.PcapAps) {
		return nil, false
	}
	return o.PcapAps, true
}

// HasPcapAps returns a boolean if a field has been set.
func (o *ResponsePcapSearchItem) HasPcapAps() bool {
	if o != nil && !IsNil(o.PcapAps) {
		return true
	}

	return false
}

// SetPcapAps gets a reference to the given map[string]ResponsePcapSearchItemPcapApsItem and assigns it to the PcapAps field.
func (o *ResponsePcapSearchItem) SetPcapAps(v map[string]ResponsePcapSearchItemPcapApsItem) {
	o.PcapAps = &v
}

// GetPcapUrl returns the PcapUrl field value if set, zero value otherwise.
func (o *ResponsePcapSearchItem) GetPcapUrl() string {
	if o == nil || IsNil(o.PcapUrl) {
		var ret string
		return ret
	}
	return *o.PcapUrl
}

// GetPcapUrlOk returns a tuple with the PcapUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsePcapSearchItem) GetPcapUrlOk() (*string, bool) {
	if o == nil || IsNil(o.PcapUrl) {
		return nil, false
	}
	return o.PcapUrl, true
}

// HasPcapUrl returns a boolean if a field has been set.
func (o *ResponsePcapSearchItem) HasPcapUrl() bool {
	if o != nil && !IsNil(o.PcapUrl) {
		return true
	}

	return false
}

// SetPcapUrl gets a reference to the given string and assigns it to the PcapUrl field.
func (o *ResponsePcapSearchItem) SetPcapUrl(v string) {
	o.PcapUrl = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *ResponsePcapSearchItem) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsePcapSearchItem) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *ResponsePcapSearchItem) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *ResponsePcapSearchItem) SetSiteId(v string) {
	o.SiteId = &v
}

// GetTerminationReason returns the TerminationReason field value if set, zero value otherwise.
func (o *ResponsePcapSearchItem) GetTerminationReason() string {
	if o == nil || IsNil(o.TerminationReason) {
		var ret string
		return ret
	}
	return *o.TerminationReason
}

// GetTerminationReasonOk returns a tuple with the TerminationReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsePcapSearchItem) GetTerminationReasonOk() (*string, bool) {
	if o == nil || IsNil(o.TerminationReason) {
		return nil, false
	}
	return o.TerminationReason, true
}

// HasTerminationReason returns a boolean if a field has been set.
func (o *ResponsePcapSearchItem) HasTerminationReason() bool {
	if o != nil && !IsNil(o.TerminationReason) {
		return true
	}

	return false
}

// SetTerminationReason gets a reference to the given string and assigns it to the TerminationReason field.
func (o *ResponsePcapSearchItem) SetTerminationReason(v string) {
	o.TerminationReason = &v
}

// GetTimestamp returns the Timestamp field value
func (o *ResponsePcapSearchItem) GetTimestamp() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *ResponsePcapSearchItem) GetTimestampOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *ResponsePcapSearchItem) SetTimestamp(v float32) {
	o.Timestamp = v
}

// GetType returns the Type field value
func (o *ResponsePcapSearchItem) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ResponsePcapSearchItem) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ResponsePcapSearchItem) SetType(v string) {
	o.Type = v
}

// GetUrl returns the Url field value
func (o *ResponsePcapSearchItem) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ResponsePcapSearchItem) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ResponsePcapSearchItem) SetUrl(v string) {
	o.Url = v
}

func (o ResponsePcapSearchItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponsePcapSearchItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApMacs) {
		toSerialize["ap_macs"] = o.ApMacs
	}
	if !IsNil(o.Aps) {
		toSerialize["aps"] = o.Aps
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MaxNumPackets) {
		toSerialize["max_num_packets"] = o.MaxNumPackets
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.PcapAps) {
		toSerialize["pcap_aps"] = o.PcapAps
	}
	if !IsNil(o.PcapUrl) {
		toSerialize["pcap_url"] = o.PcapUrl
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.TerminationReason) {
		toSerialize["termination_reason"] = o.TerminationReason
	}
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["type"] = o.Type
	toSerialize["url"] = o.Url

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResponsePcapSearchItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timestamp",
		"type",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResponsePcapSearchItem := _ResponsePcapSearchItem{}

	err = json.Unmarshal(data, &varResponsePcapSearchItem)

	if err != nil {
		return err
	}

	*o = ResponsePcapSearchItem(varResponsePcapSearchItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ap_macs")
		delete(additionalProperties, "aps")
		delete(additionalProperties, "duration")
		delete(additionalProperties, "format")
		delete(additionalProperties, "id")
		delete(additionalProperties, "max_num_packets")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "pcap_aps")
		delete(additionalProperties, "pcap_url")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "termination_reason")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "type")
		delete(additionalProperties, "url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResponsePcapSearchItem struct {
	value *ResponsePcapSearchItem
	isSet bool
}

func (v NullableResponsePcapSearchItem) Get() *ResponsePcapSearchItem {
	return v.value
}

func (v *NullableResponsePcapSearchItem) Set(val *ResponsePcapSearchItem) {
	v.value = val
	v.isSet = true
}

func (v NullableResponsePcapSearchItem) IsSet() bool {
	return v.isSet
}

func (v *NullableResponsePcapSearchItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponsePcapSearchItem(val *ResponsePcapSearchItem) *NullableResponsePcapSearchItem {
	return &NullableResponsePcapSearchItem{value: val, isSet: true}
}

func (v NullableResponsePcapSearchItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponsePcapSearchItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


