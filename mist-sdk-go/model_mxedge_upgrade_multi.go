/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the MxedgeUpgradeMulti type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MxedgeUpgradeMulti{}

// MxedgeUpgradeMulti struct for MxedgeUpgradeMulti
type MxedgeUpgradeMulti struct {
	AllowDowngrades *MxedgeUpgradeMultiAllowDowngrades `json:"allow_downgrades,omitempty"`
	Channel *MxedgeUpgradeChannel `json:"channel,omitempty"`
	// distro upgrade, optional, to specific codename (e.g. bullseye) with highest qualified versions
	Distro *string `json:"distro,omitempty"`
	// list of mxedge IDs to upgrade. If not specified, it means all the org mxedges.
	MxedgeIds []string `json:"mxedge_ids"`
	Strategy *MxedgeUpgradeStrategy `json:"strategy,omitempty"`
	Versions *MxedgeUpgradeVersion `json:"versions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MxedgeUpgradeMulti MxedgeUpgradeMulti

// NewMxedgeUpgradeMulti instantiates a new MxedgeUpgradeMulti object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMxedgeUpgradeMulti(mxedgeIds []string) *MxedgeUpgradeMulti {
	this := MxedgeUpgradeMulti{}
	var channel MxedgeUpgradeChannel = MXEDGEUPGRADECHANNEL_STABLE
	this.Channel = &channel
	this.MxedgeIds = mxedgeIds
	var strategy MxedgeUpgradeStrategy = MXEDGEUPGRADESTRATEGY_BIG_BANG
	this.Strategy = &strategy
	return &this
}

// NewMxedgeUpgradeMultiWithDefaults instantiates a new MxedgeUpgradeMulti object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMxedgeUpgradeMultiWithDefaults() *MxedgeUpgradeMulti {
	this := MxedgeUpgradeMulti{}
	var channel MxedgeUpgradeChannel = MXEDGEUPGRADECHANNEL_STABLE
	this.Channel = &channel
	var strategy MxedgeUpgradeStrategy = MXEDGEUPGRADESTRATEGY_BIG_BANG
	this.Strategy = &strategy
	return &this
}

// GetAllowDowngrades returns the AllowDowngrades field value if set, zero value otherwise.
func (o *MxedgeUpgradeMulti) GetAllowDowngrades() MxedgeUpgradeMultiAllowDowngrades {
	if o == nil || IsNil(o.AllowDowngrades) {
		var ret MxedgeUpgradeMultiAllowDowngrades
		return ret
	}
	return *o.AllowDowngrades
}

// GetAllowDowngradesOk returns a tuple with the AllowDowngrades field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxedgeUpgradeMulti) GetAllowDowngradesOk() (*MxedgeUpgradeMultiAllowDowngrades, bool) {
	if o == nil || IsNil(o.AllowDowngrades) {
		return nil, false
	}
	return o.AllowDowngrades, true
}

// HasAllowDowngrades returns a boolean if a field has been set.
func (o *MxedgeUpgradeMulti) HasAllowDowngrades() bool {
	if o != nil && !IsNil(o.AllowDowngrades) {
		return true
	}

	return false
}

// SetAllowDowngrades gets a reference to the given MxedgeUpgradeMultiAllowDowngrades and assigns it to the AllowDowngrades field.
func (o *MxedgeUpgradeMulti) SetAllowDowngrades(v MxedgeUpgradeMultiAllowDowngrades) {
	o.AllowDowngrades = &v
}

// GetChannel returns the Channel field value if set, zero value otherwise.
func (o *MxedgeUpgradeMulti) GetChannel() MxedgeUpgradeChannel {
	if o == nil || IsNil(o.Channel) {
		var ret MxedgeUpgradeChannel
		return ret
	}
	return *o.Channel
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxedgeUpgradeMulti) GetChannelOk() (*MxedgeUpgradeChannel, bool) {
	if o == nil || IsNil(o.Channel) {
		return nil, false
	}
	return o.Channel, true
}

// HasChannel returns a boolean if a field has been set.
func (o *MxedgeUpgradeMulti) HasChannel() bool {
	if o != nil && !IsNil(o.Channel) {
		return true
	}

	return false
}

// SetChannel gets a reference to the given MxedgeUpgradeChannel and assigns it to the Channel field.
func (o *MxedgeUpgradeMulti) SetChannel(v MxedgeUpgradeChannel) {
	o.Channel = &v
}

// GetDistro returns the Distro field value if set, zero value otherwise.
func (o *MxedgeUpgradeMulti) GetDistro() string {
	if o == nil || IsNil(o.Distro) {
		var ret string
		return ret
	}
	return *o.Distro
}

// GetDistroOk returns a tuple with the Distro field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxedgeUpgradeMulti) GetDistroOk() (*string, bool) {
	if o == nil || IsNil(o.Distro) {
		return nil, false
	}
	return o.Distro, true
}

// HasDistro returns a boolean if a field has been set.
func (o *MxedgeUpgradeMulti) HasDistro() bool {
	if o != nil && !IsNil(o.Distro) {
		return true
	}

	return false
}

// SetDistro gets a reference to the given string and assigns it to the Distro field.
func (o *MxedgeUpgradeMulti) SetDistro(v string) {
	o.Distro = &v
}

// GetMxedgeIds returns the MxedgeIds field value
func (o *MxedgeUpgradeMulti) GetMxedgeIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MxedgeIds
}

// GetMxedgeIdsOk returns a tuple with the MxedgeIds field value
// and a boolean to check if the value has been set.
func (o *MxedgeUpgradeMulti) GetMxedgeIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MxedgeIds, true
}

// SetMxedgeIds sets field value
func (o *MxedgeUpgradeMulti) SetMxedgeIds(v []string) {
	o.MxedgeIds = v
}

// GetStrategy returns the Strategy field value if set, zero value otherwise.
func (o *MxedgeUpgradeMulti) GetStrategy() MxedgeUpgradeStrategy {
	if o == nil || IsNil(o.Strategy) {
		var ret MxedgeUpgradeStrategy
		return ret
	}
	return *o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxedgeUpgradeMulti) GetStrategyOk() (*MxedgeUpgradeStrategy, bool) {
	if o == nil || IsNil(o.Strategy) {
		return nil, false
	}
	return o.Strategy, true
}

// HasStrategy returns a boolean if a field has been set.
func (o *MxedgeUpgradeMulti) HasStrategy() bool {
	if o != nil && !IsNil(o.Strategy) {
		return true
	}

	return false
}

// SetStrategy gets a reference to the given MxedgeUpgradeStrategy and assigns it to the Strategy field.
func (o *MxedgeUpgradeMulti) SetStrategy(v MxedgeUpgradeStrategy) {
	o.Strategy = &v
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *MxedgeUpgradeMulti) GetVersions() MxedgeUpgradeVersion {
	if o == nil || IsNil(o.Versions) {
		var ret MxedgeUpgradeVersion
		return ret
	}
	return *o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MxedgeUpgradeMulti) GetVersionsOk() (*MxedgeUpgradeVersion, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *MxedgeUpgradeMulti) HasVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given MxedgeUpgradeVersion and assigns it to the Versions field.
func (o *MxedgeUpgradeMulti) SetVersions(v MxedgeUpgradeVersion) {
	o.Versions = &v
}

func (o MxedgeUpgradeMulti) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MxedgeUpgradeMulti) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowDowngrades) {
		toSerialize["allow_downgrades"] = o.AllowDowngrades
	}
	if !IsNil(o.Channel) {
		toSerialize["channel"] = o.Channel
	}
	if !IsNil(o.Distro) {
		toSerialize["distro"] = o.Distro
	}
	toSerialize["mxedge_ids"] = o.MxedgeIds
	if !IsNil(o.Strategy) {
		toSerialize["strategy"] = o.Strategy
	}
	if !IsNil(o.Versions) {
		toSerialize["versions"] = o.Versions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MxedgeUpgradeMulti) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mxedge_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMxedgeUpgradeMulti := _MxedgeUpgradeMulti{}

	err = json.Unmarshal(data, &varMxedgeUpgradeMulti)

	if err != nil {
		return err
	}

	*o = MxedgeUpgradeMulti(varMxedgeUpgradeMulti)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "allow_downgrades")
		delete(additionalProperties, "channel")
		delete(additionalProperties, "distro")
		delete(additionalProperties, "mxedge_ids")
		delete(additionalProperties, "strategy")
		delete(additionalProperties, "versions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMxedgeUpgradeMulti struct {
	value *MxedgeUpgradeMulti
	isSet bool
}

func (v NullableMxedgeUpgradeMulti) Get() *MxedgeUpgradeMulti {
	return v.value
}

func (v *NullableMxedgeUpgradeMulti) Set(val *MxedgeUpgradeMulti) {
	v.value = val
	v.isSet = true
}

func (v NullableMxedgeUpgradeMulti) IsSet() bool {
	return v.isSet
}

func (v *NullableMxedgeUpgradeMulti) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMxedgeUpgradeMulti(val *MxedgeUpgradeMulti) *NullableMxedgeUpgradeMulti {
	return &NullableMxedgeUpgradeMulti{value: val, isSet: true}
}

func (v NullableMxedgeUpgradeMulti) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMxedgeUpgradeMulti) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


