/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the Wlan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Wlan{}

// Wlan WLAN  **Note**: portal_template will be forked out of wlan objects soon. To fetch portal_template, please query portal_template_url. To update portal_template, use Wlan Portal Template.
type Wlan struct {
	// enable coa-immediate-update and address-change-immediate-update on the access profile.
	AcctImmediateUpdate *bool `json:"acct_immediate_update,omitempty"`
	// how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
	AcctInterimInterval *int32 `json:"acct_interim_interval,omitempty"`
	// list of RADIUS accounting servers, optional, order matters where the first one is treated as primary
	AcctServers []RadiusAcctServer `json:"acct_servers,omitempty"`
	Airwatch *WlanAirwatch `json:"airwatch,omitempty"`
	// only applicable when limit_bcast==true, which allows or disallows ipv6 Neighbor Discovery packets to go through
	AllowIpv6Ndp *bool `json:"allow_ipv6_ndp,omitempty"`
	// only applicable when limit_bcast==true, which allows mDNS / Bonjour packets to go through
	AllowMdns *bool `json:"allow_mdns,omitempty"`
	// only applicable when `limit_bcast`==`tru`e, which allows SSDP
	AllowSsdp *bool `json:"allow_ssdp,omitempty"`
	// list of device ids
	ApIds []string `json:"ap_ids,omitempty"`
	AppLimit *WlanAppLimit `json:"app_limit,omitempty"`
	AppQos *WlanAppQos `json:"app_qos,omitempty"`
	ApplyTo *WlanApplyTo `json:"apply_to,omitempty"`
	// whether to enable smart arp filter
	ArpFilter *bool `json:"arp_filter,omitempty"`
	Auth *WlanAuth `json:"auth,omitempty"`
	AuthServerSelection *WlanAuthServerSelection `json:"auth_server_selection,omitempty"`
	// list of RADIUS authentication servers, at least one is needed if `auth type`==`eap`, order matters where the first one is treated as primary
	AuthServers []RadiusAuthServer `json:"auth_servers,omitempty"`
	// optional, up to 48 bytes, will be dynamically generated if not provided. used only for authentication servers
	AuthServersNasId NullableString `json:"auth_servers_nas_id,omitempty"`
	// optional, NAS-IP-ADDRESS to use
	AuthServersNasIp NullableString `json:"auth_servers_nas_ip,omitempty"`
	// radius auth session retries. Following fast timers are set if “fast_dot1x_timers” knob is enabled. ‘retries’ are set to value of auth_servers_retries. ‘max-requests’ is also set when setting auth_servers_retries and is set to default value to 3.
	AuthServersRetries *int32 `json:"auth_servers_retries,omitempty"`
	// radius auth session timeout. Following fast timers are set if “fast_dot1x_timers” knob is enabled. ‘quite-period’ and ‘transmit-period’ are set to half the value of auth_servers_timeout. ‘supplicant-timeout’ is also set when setting auth_servers_timeout and is set to default value of 10.
	AuthServersTimeout *int32 `json:"auth_servers_timeout,omitempty"`
	// `band` is deprecated and kept for backward compability. Use bands instead
	// Deprecated
	Band *string `json:"band,omitempty"`
	// whether to enable band_steering, this works only when band==both
	BandSteer *bool `json:"band_steer,omitempty"`
	// force dual_band capable client to connect to 5G
	BandSteerForceBand5 *bool `json:"band_steer_force_band5,omitempty"`
	// list of radios that the wlan should apply to
	Bands []Dot11Band `json:"bands,omitempty"`
	// whether to block the clients in the blacklist (up to first 256 macs)
	BlockBlacklistClients *bool `json:"block_blacklist_clients,omitempty"`
	Bonjour *WlanBonjour `json:"bonjour,omitempty"`
	CiscoCwa *WlanCiscoCwa `json:"cisco_cwa,omitempty"`
	// kbps
	ClientLimitDown *int32 `json:"client_limit_down,omitempty"`
	// if downlink limiting per-client is enabled
	ClientLimitDownEnabled *bool `json:"client_limit_down_enabled,omitempty"`
	// kbps
	ClientLimitUp *int32 `json:"client_limit_up,omitempty"`
	// if uplink limiting per-client is enabled
	ClientLimitUpEnabled *bool `json:"client_limit_up_enabled,omitempty"`
	// list of COA (change of authorization) servers, optional
	CoaServers []CoaServer `json:"coa_servers,omitempty"`
	CreatedTime *float32 `json:"created_time,omitempty"`
	// some old WLAN drivers may not be compatible
	Disable11ax *bool `json:"disable_11ax,omitempty"`
	// to disable ht or vht rates
	DisableHtVhtRates *bool `json:"disable_ht_vht_rates,omitempty"`
	// whether to disable U-APSD
	DisableUapsd *bool `json:"disable_uapsd,omitempty"`
	// disable sending v2 roam notification messages
	DisableV1RoamNotify *bool `json:"disable_v1_roam_notify,omitempty"`
	// disable sending v2 roam notification messages
	DisableV2RoamNotify *bool `json:"disable_v2_roam_notify,omitempty"`
	// whether to disable WMM
	DisableWmm *bool `json:"disable_wmm,omitempty"`
	DnsServerRewrite NullableWlanDnsServerRewrite `json:"dns_server_rewrite,omitempty"`
	Dtim *int32 `json:"dtim,omitempty"`
	DynamicPsk NullableWlanDynamicPsk `json:"dynamic_psk,omitempty"`
	DynamicVlan NullableWlanDynamicVlan `json:"dynamic_vlan,omitempty"`
	// enable AP-AP keycaching via multicast
	EnableLocalKeycaching *bool `json:"enable_local_keycaching,omitempty"`
	// by default, we'd inspect all DHCP packets and drop those unrelated to the wireless client itself in the case where client is a wireless bridge (DHCP packets for other MACs will need to be orwarded), wireless_bridging can be enabled
	EnableWirelessBridging *bool `json:"enable_wireless_bridging,omitempty"`
	// if the client bridge is doing DHCP on behalf of other devices (L2-NAT), enable dhcp_tracking will cut down DHCP response packets to be forwarded to wireless
	EnableWirelessBridgingDhcpTracking *bool `json:"enable_wireless_bridging_dhcp_tracking,omitempty"`
	// if this wlan is enabled
	Enabled *bool `json:"enabled,omitempty"`
	// if set to true, sets default fast-timers with values calculated from ‘auth_servers_timeout’ and ‘auth_server_retries’.
	FastDot1xTimers *bool `json:"fast_dot1x_timers,omitempty"`
	ForSite *bool `json:"for_site,omitempty"`
	// whether to hide SSID in beacon
	HideSsid *bool `json:"hide_ssid,omitempty"`
	// include hostname inside IE in AP beacons / probe responses
	HostnameIe *bool `json:"hostname_ie,omitempty"`
	Hotspot20 *WlanHotspot20 `json:"hotspot20,omitempty"`
	Id *string `json:"id,omitempty"`
	InjectDhcpOption82 *WlanInjectDhcpOption82 `json:"inject_dhcp_option_82,omitempty"`
	Interface *WlanInterface `json:"interface,omitempty"`
	// whether to stop clients to talk to each other
	Isolation *bool `json:"isolation,omitempty"`
	// if isolation is enabled, whether to deny clients to talk to L2 on the LAN
	L2Isolation *bool `json:"l2_isolation,omitempty"`
	// legacy devices requires the Over-DS (for Fast BSS Transition) bit set (while our chip doesn’t support it). Warning! Enabling this will cause problem for iOS devices.
	LegacyOverds *bool `json:"legacy_overds,omitempty"`
	// whether to limit broadcast packets going to wireless (i.e. only allow certain bcast packets to go through)
	LimitBcast *bool `json:"limit_bcast,omitempty"`
	// limit probe response base on some heuristic rules
	LimitProbeResponse *bool `json:"limit_probe_response,omitempty"`
	// max idle time in seconds
	MaxIdletime *int32 `json:"max_idletime,omitempty"`
	MistNac *WlanMistNac `json:"mist_nac,omitempty"`
	ModifiedTime *float32 `json:"modified_time,omitempty"`
	MspId *string `json:"msp_id,omitempty"`
	// (deprecated, use mxtunnel_ids instead) when `interface`==`mxtunnel`, id of the Mist Tunnel
	// Deprecated
	MxtunnelId *string `json:"mxtunnel_id,omitempty"`
	// when `interface`=`mxtunnel`, id of the Mist Tunnel
	MxtunnelIds []string `json:"mxtunnel_ids,omitempty"`
	// when `interface`=`site_medge`, name of the mxtunnel that in mxtunnels under Site Setting
	MxtunnelName []string `json:"mxtunnel_name,omitempty"`
	// whether to only allow client to use DNS that we’ve learned from DHCP response
	NoStaticDns *bool `json:"no_static_dns,omitempty"`
	// whether to only allow client that we’ve learned from DHCP exchange to talk
	NoStaticIp *bool `json:"no_static_ip,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	Portal *WlanPortal `json:"portal,omitempty"`
	// list of hostnames without http(s):// (matched by substring)
	PortalAllowedHostnames []string `json:"portal_allowed_hostnames,omitempty"`
	// list of CIDRs
	PortalAllowedSubnets []string `json:"portal_allowed_subnets,omitempty"`
	// api secret (auto-generated) that can be used to sign guest authorization requests
	PortalApiSecret NullableString `json:"portal_api_secret,omitempty"`
	// list of hostnames without http(s):// (matched by substring), this takes precedence over portal_allowed_hostnames
	PortalDeniedHostnames []string `json:"portal_denied_hostnames,omitempty"`
	// Url of portal background image
	PortalImage NullableString `json:"portal_image,omitempty"`
	PortalSsoUrl NullableString `json:"portal_sso_url,omitempty"`
	// N.B portal_template will be forked out of wlan objects soon. To fetch portal_template, please query portal_template_url. To update portal_template, use Wlan Portal Template.
	PortalTemplateUrl NullableString `json:"portal_template_url,omitempty"`
	Qos *WlanQos `json:"qos,omitempty"`
	Radsec *Radsec `json:"radsec,omitempty"`
	Rateset *WlanRateset `json:"rateset,omitempty"`
	RoamMode *WlanRoamMode `json:"roam_mode,omitempty"`
	Schedule *WlanSchedule `json:"schedule,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	// whether to exclude this WLAN from SLE metrics
	SleExcluded *bool `json:"sle_excluded,omitempty"`
	// the name of the SSID
	Ssid string `json:"ssid"`
	TemplateId NullableString `json:"template_id,omitempty"`
	// Url of portal background image thumbnail
	Thumbnail NullableString `json:"thumbnail,omitempty"`
	// if `auth.type`==’eap’ or ‘psk’, should only be set for legacy client, such as pre-2004, 802.11b devices
	UseEapolV1 *bool `json:"use_eapol_v1,omitempty"`
	// if vlan tagging is enabled
	VlanEnabled *bool `json:"vlan_enabled,omitempty"`
	VlanId NullableInt32 `json:"vlan_id,omitempty"`
	// vlan_ids to use when there’s no match from RA
	VlanIds []*int32 `json:"vlan_ids,omitempty"`
	// vlan pooling allows AP to place client on different VLAN using a deterministic algorithm
	VlanPooling *bool `json:"vlan_pooling,omitempty"`
	// kbps
	WlanLimitDown NullableInt32 `json:"wlan_limit_down,omitempty"`
	// if downlink limiting for whole wlan is enabled
	WlanLimitDownEnabled *bool `json:"wlan_limit_down_enabled,omitempty"`
	// kbps
	WlanLimitUp NullableInt32 `json:"wlan_limit_up,omitempty"`
	// if uplink limiting for whole wlan is enabled
	WlanLimitUpEnabled *bool `json:"wlan_limit_up_enabled,omitempty"`
	// list of wxtag_ids
	WxtagIds []string `json:"wxtag_ids,omitempty"`
	// when `interface`=`wxtunnel`, id of the WXLAN Tunnel
	WxtunnelId NullableString `json:"wxtunnel_id,omitempty"`
	// when `interface`=`wxtunnel`, remote tunnel identifier
	WxtunnelRemoteId NullableString `json:"wxtunnel_remote_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Wlan Wlan

// NewWlan instantiates a new Wlan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWlan(ssid string) *Wlan {
	this := Wlan{}
	var acctImmediateUpdate bool = false
	this.AcctImmediateUpdate = &acctImmediateUpdate
	var acctInterimInterval int32 = 0
	this.AcctInterimInterval = &acctInterimInterval
	var allowIpv6Ndp bool = true
	this.AllowIpv6Ndp = &allowIpv6Ndp
	var allowMdns bool = false
	this.AllowMdns = &allowMdns
	var allowSsdp bool = false
	this.AllowSsdp = &allowSsdp
	var arpFilter bool = false
	this.ArpFilter = &arpFilter
	var authServerSelection WlanAuthServerSelection = WLANAUTHSERVERSELECTION_ORDERED
	this.AuthServerSelection = &authServerSelection
	var authServersRetries int32 = 2
	this.AuthServersRetries = &authServersRetries
	var authServersTimeout int32 = 5
	this.AuthServersTimeout = &authServersTimeout
	var bandSteer bool = false
	this.BandSteer = &bandSteer
	var bandSteerForceBand5 bool = false
	this.BandSteerForceBand5 = &bandSteerForceBand5
	var blockBlacklistClients bool = false
	this.BlockBlacklistClients = &blockBlacklistClients
	var clientLimitDownEnabled bool = false
	this.ClientLimitDownEnabled = &clientLimitDownEnabled
	var clientLimitUpEnabled bool = false
	this.ClientLimitUpEnabled = &clientLimitUpEnabled
	var disable11ax bool = false
	this.Disable11ax = &disable11ax
	var disableHtVhtRates bool = false
	this.DisableHtVhtRates = &disableHtVhtRates
	var disableUapsd bool = false
	this.DisableUapsd = &disableUapsd
	var disableV1RoamNotify bool = false
	this.DisableV1RoamNotify = &disableV1RoamNotify
	var disableV2RoamNotify bool = false
	this.DisableV2RoamNotify = &disableV2RoamNotify
	var disableWmm bool = false
	this.DisableWmm = &disableWmm
	var dtim int32 = 2
	this.Dtim = &dtim
	var enableLocalKeycaching bool = false
	this.EnableLocalKeycaching = &enableLocalKeycaching
	var enableWirelessBridging bool = false
	this.EnableWirelessBridging = &enableWirelessBridging
	var enableWirelessBridgingDhcpTracking bool = false
	this.EnableWirelessBridgingDhcpTracking = &enableWirelessBridgingDhcpTracking
	var enabled bool = true
	this.Enabled = &enabled
	var fastDot1xTimers bool = false
	this.FastDot1xTimers = &fastDot1xTimers
	var hideSsid bool = false
	this.HideSsid = &hideSsid
	var hostnameIe bool = false
	this.HostnameIe = &hostnameIe
	var interface_ WlanInterface = WLANINTERFACE_ALL
	this.Interface = &interface_
	var isolation bool = false
	this.Isolation = &isolation
	var l2Isolation bool = false
	this.L2Isolation = &l2Isolation
	var legacyOverds bool = false
	this.LegacyOverds = &legacyOverds
	var limitBcast bool = false
	this.LimitBcast = &limitBcast
	var limitProbeResponse bool = false
	this.LimitProbeResponse = &limitProbeResponse
	var maxIdletime int32 = 1800
	this.MaxIdletime = &maxIdletime
	var noStaticDns bool = false
	this.NoStaticDns = &noStaticDns
	var noStaticIp bool = false
	this.NoStaticIp = &noStaticIp
	var portalApiSecret string = ""
	this.PortalApiSecret = *NewNullableString(&portalApiSecret)
	var roamMode WlanRoamMode = WLANROAMMODE_NONE
	this.RoamMode = &roamMode
	var sleExcluded bool = false
	this.SleExcluded = &sleExcluded
	this.Ssid = ssid
	var useEapolV1 bool = false
	this.UseEapolV1 = &useEapolV1
	var vlanEnabled bool = false
	this.VlanEnabled = &vlanEnabled
	var vlanPooling bool = false
	this.VlanPooling = &vlanPooling
	var wlanLimitDownEnabled bool = false
	this.WlanLimitDownEnabled = &wlanLimitDownEnabled
	var wlanLimitUpEnabled bool = false
	this.WlanLimitUpEnabled = &wlanLimitUpEnabled
	var wxtunnelId string = ""
	this.WxtunnelId = *NewNullableString(&wxtunnelId)
	var wxtunnelRemoteId string = ""
	this.WxtunnelRemoteId = *NewNullableString(&wxtunnelRemoteId)
	return &this
}

// NewWlanWithDefaults instantiates a new Wlan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWlanWithDefaults() *Wlan {
	this := Wlan{}
	var acctImmediateUpdate bool = false
	this.AcctImmediateUpdate = &acctImmediateUpdate
	var acctInterimInterval int32 = 0
	this.AcctInterimInterval = &acctInterimInterval
	var allowIpv6Ndp bool = true
	this.AllowIpv6Ndp = &allowIpv6Ndp
	var allowMdns bool = false
	this.AllowMdns = &allowMdns
	var allowSsdp bool = false
	this.AllowSsdp = &allowSsdp
	var arpFilter bool = false
	this.ArpFilter = &arpFilter
	var authServerSelection WlanAuthServerSelection = WLANAUTHSERVERSELECTION_ORDERED
	this.AuthServerSelection = &authServerSelection
	var authServersRetries int32 = 2
	this.AuthServersRetries = &authServersRetries
	var authServersTimeout int32 = 5
	this.AuthServersTimeout = &authServersTimeout
	var bandSteer bool = false
	this.BandSteer = &bandSteer
	var bandSteerForceBand5 bool = false
	this.BandSteerForceBand5 = &bandSteerForceBand5
	var blockBlacklistClients bool = false
	this.BlockBlacklistClients = &blockBlacklistClients
	var clientLimitDownEnabled bool = false
	this.ClientLimitDownEnabled = &clientLimitDownEnabled
	var clientLimitUpEnabled bool = false
	this.ClientLimitUpEnabled = &clientLimitUpEnabled
	var disable11ax bool = false
	this.Disable11ax = &disable11ax
	var disableHtVhtRates bool = false
	this.DisableHtVhtRates = &disableHtVhtRates
	var disableUapsd bool = false
	this.DisableUapsd = &disableUapsd
	var disableV1RoamNotify bool = false
	this.DisableV1RoamNotify = &disableV1RoamNotify
	var disableV2RoamNotify bool = false
	this.DisableV2RoamNotify = &disableV2RoamNotify
	var disableWmm bool = false
	this.DisableWmm = &disableWmm
	var dtim int32 = 2
	this.Dtim = &dtim
	var enableLocalKeycaching bool = false
	this.EnableLocalKeycaching = &enableLocalKeycaching
	var enableWirelessBridging bool = false
	this.EnableWirelessBridging = &enableWirelessBridging
	var enableWirelessBridgingDhcpTracking bool = false
	this.EnableWirelessBridgingDhcpTracking = &enableWirelessBridgingDhcpTracking
	var enabled bool = true
	this.Enabled = &enabled
	var fastDot1xTimers bool = false
	this.FastDot1xTimers = &fastDot1xTimers
	var hideSsid bool = false
	this.HideSsid = &hideSsid
	var hostnameIe bool = false
	this.HostnameIe = &hostnameIe
	var interface_ WlanInterface = WLANINTERFACE_ALL
	this.Interface = &interface_
	var isolation bool = false
	this.Isolation = &isolation
	var l2Isolation bool = false
	this.L2Isolation = &l2Isolation
	var legacyOverds bool = false
	this.LegacyOverds = &legacyOverds
	var limitBcast bool = false
	this.LimitBcast = &limitBcast
	var limitProbeResponse bool = false
	this.LimitProbeResponse = &limitProbeResponse
	var maxIdletime int32 = 1800
	this.MaxIdletime = &maxIdletime
	var noStaticDns bool = false
	this.NoStaticDns = &noStaticDns
	var noStaticIp bool = false
	this.NoStaticIp = &noStaticIp
	var portalApiSecret string = ""
	this.PortalApiSecret = *NewNullableString(&portalApiSecret)
	var roamMode WlanRoamMode = WLANROAMMODE_NONE
	this.RoamMode = &roamMode
	var sleExcluded bool = false
	this.SleExcluded = &sleExcluded
	var useEapolV1 bool = false
	this.UseEapolV1 = &useEapolV1
	var vlanEnabled bool = false
	this.VlanEnabled = &vlanEnabled
	var vlanPooling bool = false
	this.VlanPooling = &vlanPooling
	var wlanLimitDownEnabled bool = false
	this.WlanLimitDownEnabled = &wlanLimitDownEnabled
	var wlanLimitUpEnabled bool = false
	this.WlanLimitUpEnabled = &wlanLimitUpEnabled
	var wxtunnelId string = ""
	this.WxtunnelId = *NewNullableString(&wxtunnelId)
	var wxtunnelRemoteId string = ""
	this.WxtunnelRemoteId = *NewNullableString(&wxtunnelRemoteId)
	return &this
}

// GetAcctImmediateUpdate returns the AcctImmediateUpdate field value if set, zero value otherwise.
func (o *Wlan) GetAcctImmediateUpdate() bool {
	if o == nil || IsNil(o.AcctImmediateUpdate) {
		var ret bool
		return ret
	}
	return *o.AcctImmediateUpdate
}

// GetAcctImmediateUpdateOk returns a tuple with the AcctImmediateUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetAcctImmediateUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.AcctImmediateUpdate) {
		return nil, false
	}
	return o.AcctImmediateUpdate, true
}

// HasAcctImmediateUpdate returns a boolean if a field has been set.
func (o *Wlan) HasAcctImmediateUpdate() bool {
	if o != nil && !IsNil(o.AcctImmediateUpdate) {
		return true
	}

	return false
}

// SetAcctImmediateUpdate gets a reference to the given bool and assigns it to the AcctImmediateUpdate field.
func (o *Wlan) SetAcctImmediateUpdate(v bool) {
	o.AcctImmediateUpdate = &v
}

// GetAcctInterimInterval returns the AcctInterimInterval field value if set, zero value otherwise.
func (o *Wlan) GetAcctInterimInterval() int32 {
	if o == nil || IsNil(o.AcctInterimInterval) {
		var ret int32
		return ret
	}
	return *o.AcctInterimInterval
}

// GetAcctInterimIntervalOk returns a tuple with the AcctInterimInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetAcctInterimIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.AcctInterimInterval) {
		return nil, false
	}
	return o.AcctInterimInterval, true
}

// HasAcctInterimInterval returns a boolean if a field has been set.
func (o *Wlan) HasAcctInterimInterval() bool {
	if o != nil && !IsNil(o.AcctInterimInterval) {
		return true
	}

	return false
}

// SetAcctInterimInterval gets a reference to the given int32 and assigns it to the AcctInterimInterval field.
func (o *Wlan) SetAcctInterimInterval(v int32) {
	o.AcctInterimInterval = &v
}

// GetAcctServers returns the AcctServers field value if set, zero value otherwise.
func (o *Wlan) GetAcctServers() []RadiusAcctServer {
	if o == nil || IsNil(o.AcctServers) {
		var ret []RadiusAcctServer
		return ret
	}
	return o.AcctServers
}

// GetAcctServersOk returns a tuple with the AcctServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetAcctServersOk() ([]RadiusAcctServer, bool) {
	if o == nil || IsNil(o.AcctServers) {
		return nil, false
	}
	return o.AcctServers, true
}

// HasAcctServers returns a boolean if a field has been set.
func (o *Wlan) HasAcctServers() bool {
	if o != nil && !IsNil(o.AcctServers) {
		return true
	}

	return false
}

// SetAcctServers gets a reference to the given []RadiusAcctServer and assigns it to the AcctServers field.
func (o *Wlan) SetAcctServers(v []RadiusAcctServer) {
	o.AcctServers = v
}

// GetAirwatch returns the Airwatch field value if set, zero value otherwise.
func (o *Wlan) GetAirwatch() WlanAirwatch {
	if o == nil || IsNil(o.Airwatch) {
		var ret WlanAirwatch
		return ret
	}
	return *o.Airwatch
}

// GetAirwatchOk returns a tuple with the Airwatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetAirwatchOk() (*WlanAirwatch, bool) {
	if o == nil || IsNil(o.Airwatch) {
		return nil, false
	}
	return o.Airwatch, true
}

// HasAirwatch returns a boolean if a field has been set.
func (o *Wlan) HasAirwatch() bool {
	if o != nil && !IsNil(o.Airwatch) {
		return true
	}

	return false
}

// SetAirwatch gets a reference to the given WlanAirwatch and assigns it to the Airwatch field.
func (o *Wlan) SetAirwatch(v WlanAirwatch) {
	o.Airwatch = &v
}

// GetAllowIpv6Ndp returns the AllowIpv6Ndp field value if set, zero value otherwise.
func (o *Wlan) GetAllowIpv6Ndp() bool {
	if o == nil || IsNil(o.AllowIpv6Ndp) {
		var ret bool
		return ret
	}
	return *o.AllowIpv6Ndp
}

// GetAllowIpv6NdpOk returns a tuple with the AllowIpv6Ndp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetAllowIpv6NdpOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowIpv6Ndp) {
		return nil, false
	}
	return o.AllowIpv6Ndp, true
}

// HasAllowIpv6Ndp returns a boolean if a field has been set.
func (o *Wlan) HasAllowIpv6Ndp() bool {
	if o != nil && !IsNil(o.AllowIpv6Ndp) {
		return true
	}

	return false
}

// SetAllowIpv6Ndp gets a reference to the given bool and assigns it to the AllowIpv6Ndp field.
func (o *Wlan) SetAllowIpv6Ndp(v bool) {
	o.AllowIpv6Ndp = &v
}

// GetAllowMdns returns the AllowMdns field value if set, zero value otherwise.
func (o *Wlan) GetAllowMdns() bool {
	if o == nil || IsNil(o.AllowMdns) {
		var ret bool
		return ret
	}
	return *o.AllowMdns
}

// GetAllowMdnsOk returns a tuple with the AllowMdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetAllowMdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowMdns) {
		return nil, false
	}
	return o.AllowMdns, true
}

// HasAllowMdns returns a boolean if a field has been set.
func (o *Wlan) HasAllowMdns() bool {
	if o != nil && !IsNil(o.AllowMdns) {
		return true
	}

	return false
}

// SetAllowMdns gets a reference to the given bool and assigns it to the AllowMdns field.
func (o *Wlan) SetAllowMdns(v bool) {
	o.AllowMdns = &v
}

// GetAllowSsdp returns the AllowSsdp field value if set, zero value otherwise.
func (o *Wlan) GetAllowSsdp() bool {
	if o == nil || IsNil(o.AllowSsdp) {
		var ret bool
		return ret
	}
	return *o.AllowSsdp
}

// GetAllowSsdpOk returns a tuple with the AllowSsdp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetAllowSsdpOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowSsdp) {
		return nil, false
	}
	return o.AllowSsdp, true
}

// HasAllowSsdp returns a boolean if a field has been set.
func (o *Wlan) HasAllowSsdp() bool {
	if o != nil && !IsNil(o.AllowSsdp) {
		return true
	}

	return false
}

// SetAllowSsdp gets a reference to the given bool and assigns it to the AllowSsdp field.
func (o *Wlan) SetAllowSsdp(v bool) {
	o.AllowSsdp = &v
}

// GetApIds returns the ApIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Wlan) GetApIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ApIds
}

// GetApIdsOk returns a tuple with the ApIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Wlan) GetApIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ApIds) {
		return nil, false
	}
	return o.ApIds, true
}

// HasApIds returns a boolean if a field has been set.
func (o *Wlan) HasApIds() bool {
	if o != nil && !IsNil(o.ApIds) {
		return true
	}

	return false
}

// SetApIds gets a reference to the given []string and assigns it to the ApIds field.
func (o *Wlan) SetApIds(v []string) {
	o.ApIds = v
}

// GetAppLimit returns the AppLimit field value if set, zero value otherwise.
func (o *Wlan) GetAppLimit() WlanAppLimit {
	if o == nil || IsNil(o.AppLimit) {
		var ret WlanAppLimit
		return ret
	}
	return *o.AppLimit
}

// GetAppLimitOk returns a tuple with the AppLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetAppLimitOk() (*WlanAppLimit, bool) {
	if o == nil || IsNil(o.AppLimit) {
		return nil, false
	}
	return o.AppLimit, true
}

// HasAppLimit returns a boolean if a field has been set.
func (o *Wlan) HasAppLimit() bool {
	if o != nil && !IsNil(o.AppLimit) {
		return true
	}

	return false
}

// SetAppLimit gets a reference to the given WlanAppLimit and assigns it to the AppLimit field.
func (o *Wlan) SetAppLimit(v WlanAppLimit) {
	o.AppLimit = &v
}

// GetAppQos returns the AppQos field value if set, zero value otherwise.
func (o *Wlan) GetAppQos() WlanAppQos {
	if o == nil || IsNil(o.AppQos) {
		var ret WlanAppQos
		return ret
	}
	return *o.AppQos
}

// GetAppQosOk returns a tuple with the AppQos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetAppQosOk() (*WlanAppQos, bool) {
	if o == nil || IsNil(o.AppQos) {
		return nil, false
	}
	return o.AppQos, true
}

// HasAppQos returns a boolean if a field has been set.
func (o *Wlan) HasAppQos() bool {
	if o != nil && !IsNil(o.AppQos) {
		return true
	}

	return false
}

// SetAppQos gets a reference to the given WlanAppQos and assigns it to the AppQos field.
func (o *Wlan) SetAppQos(v WlanAppQos) {
	o.AppQos = &v
}

// GetApplyTo returns the ApplyTo field value if set, zero value otherwise.
func (o *Wlan) GetApplyTo() WlanApplyTo {
	if o == nil || IsNil(o.ApplyTo) {
		var ret WlanApplyTo
		return ret
	}
	return *o.ApplyTo
}

// GetApplyToOk returns a tuple with the ApplyTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetApplyToOk() (*WlanApplyTo, bool) {
	if o == nil || IsNil(o.ApplyTo) {
		return nil, false
	}
	return o.ApplyTo, true
}

// HasApplyTo returns a boolean if a field has been set.
func (o *Wlan) HasApplyTo() bool {
	if o != nil && !IsNil(o.ApplyTo) {
		return true
	}

	return false
}

// SetApplyTo gets a reference to the given WlanApplyTo and assigns it to the ApplyTo field.
func (o *Wlan) SetApplyTo(v WlanApplyTo) {
	o.ApplyTo = &v
}

// GetArpFilter returns the ArpFilter field value if set, zero value otherwise.
func (o *Wlan) GetArpFilter() bool {
	if o == nil || IsNil(o.ArpFilter) {
		var ret bool
		return ret
	}
	return *o.ArpFilter
}

// GetArpFilterOk returns a tuple with the ArpFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetArpFilterOk() (*bool, bool) {
	if o == nil || IsNil(o.ArpFilter) {
		return nil, false
	}
	return o.ArpFilter, true
}

// HasArpFilter returns a boolean if a field has been set.
func (o *Wlan) HasArpFilter() bool {
	if o != nil && !IsNil(o.ArpFilter) {
		return true
	}

	return false
}

// SetArpFilter gets a reference to the given bool and assigns it to the ArpFilter field.
func (o *Wlan) SetArpFilter(v bool) {
	o.ArpFilter = &v
}

// GetAuth returns the Auth field value if set, zero value otherwise.
func (o *Wlan) GetAuth() WlanAuth {
	if o == nil || IsNil(o.Auth) {
		var ret WlanAuth
		return ret
	}
	return *o.Auth
}

// GetAuthOk returns a tuple with the Auth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetAuthOk() (*WlanAuth, bool) {
	if o == nil || IsNil(o.Auth) {
		return nil, false
	}
	return o.Auth, true
}

// HasAuth returns a boolean if a field has been set.
func (o *Wlan) HasAuth() bool {
	if o != nil && !IsNil(o.Auth) {
		return true
	}

	return false
}

// SetAuth gets a reference to the given WlanAuth and assigns it to the Auth field.
func (o *Wlan) SetAuth(v WlanAuth) {
	o.Auth = &v
}

// GetAuthServerSelection returns the AuthServerSelection field value if set, zero value otherwise.
func (o *Wlan) GetAuthServerSelection() WlanAuthServerSelection {
	if o == nil || IsNil(o.AuthServerSelection) {
		var ret WlanAuthServerSelection
		return ret
	}
	return *o.AuthServerSelection
}

// GetAuthServerSelectionOk returns a tuple with the AuthServerSelection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetAuthServerSelectionOk() (*WlanAuthServerSelection, bool) {
	if o == nil || IsNil(o.AuthServerSelection) {
		return nil, false
	}
	return o.AuthServerSelection, true
}

// HasAuthServerSelection returns a boolean if a field has been set.
func (o *Wlan) HasAuthServerSelection() bool {
	if o != nil && !IsNil(o.AuthServerSelection) {
		return true
	}

	return false
}

// SetAuthServerSelection gets a reference to the given WlanAuthServerSelection and assigns it to the AuthServerSelection field.
func (o *Wlan) SetAuthServerSelection(v WlanAuthServerSelection) {
	o.AuthServerSelection = &v
}

// GetAuthServers returns the AuthServers field value if set, zero value otherwise.
func (o *Wlan) GetAuthServers() []RadiusAuthServer {
	if o == nil || IsNil(o.AuthServers) {
		var ret []RadiusAuthServer
		return ret
	}
	return o.AuthServers
}

// GetAuthServersOk returns a tuple with the AuthServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetAuthServersOk() ([]RadiusAuthServer, bool) {
	if o == nil || IsNil(o.AuthServers) {
		return nil, false
	}
	return o.AuthServers, true
}

// HasAuthServers returns a boolean if a field has been set.
func (o *Wlan) HasAuthServers() bool {
	if o != nil && !IsNil(o.AuthServers) {
		return true
	}

	return false
}

// SetAuthServers gets a reference to the given []RadiusAuthServer and assigns it to the AuthServers field.
func (o *Wlan) SetAuthServers(v []RadiusAuthServer) {
	o.AuthServers = v
}

// GetAuthServersNasId returns the AuthServersNasId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Wlan) GetAuthServersNasId() string {
	if o == nil || IsNil(o.AuthServersNasId.Get()) {
		var ret string
		return ret
	}
	return *o.AuthServersNasId.Get()
}

// GetAuthServersNasIdOk returns a tuple with the AuthServersNasId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Wlan) GetAuthServersNasIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthServersNasId.Get(), o.AuthServersNasId.IsSet()
}

// HasAuthServersNasId returns a boolean if a field has been set.
func (o *Wlan) HasAuthServersNasId() bool {
	if o != nil && o.AuthServersNasId.IsSet() {
		return true
	}

	return false
}

// SetAuthServersNasId gets a reference to the given NullableString and assigns it to the AuthServersNasId field.
func (o *Wlan) SetAuthServersNasId(v string) {
	o.AuthServersNasId.Set(&v)
}
// SetAuthServersNasIdNil sets the value for AuthServersNasId to be an explicit nil
func (o *Wlan) SetAuthServersNasIdNil() {
	o.AuthServersNasId.Set(nil)
}

// UnsetAuthServersNasId ensures that no value is present for AuthServersNasId, not even an explicit nil
func (o *Wlan) UnsetAuthServersNasId() {
	o.AuthServersNasId.Unset()
}

// GetAuthServersNasIp returns the AuthServersNasIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Wlan) GetAuthServersNasIp() string {
	if o == nil || IsNil(o.AuthServersNasIp.Get()) {
		var ret string
		return ret
	}
	return *o.AuthServersNasIp.Get()
}

// GetAuthServersNasIpOk returns a tuple with the AuthServersNasIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Wlan) GetAuthServersNasIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthServersNasIp.Get(), o.AuthServersNasIp.IsSet()
}

// HasAuthServersNasIp returns a boolean if a field has been set.
func (o *Wlan) HasAuthServersNasIp() bool {
	if o != nil && o.AuthServersNasIp.IsSet() {
		return true
	}

	return false
}

// SetAuthServersNasIp gets a reference to the given NullableString and assigns it to the AuthServersNasIp field.
func (o *Wlan) SetAuthServersNasIp(v string) {
	o.AuthServersNasIp.Set(&v)
}
// SetAuthServersNasIpNil sets the value for AuthServersNasIp to be an explicit nil
func (o *Wlan) SetAuthServersNasIpNil() {
	o.AuthServersNasIp.Set(nil)
}

// UnsetAuthServersNasIp ensures that no value is present for AuthServersNasIp, not even an explicit nil
func (o *Wlan) UnsetAuthServersNasIp() {
	o.AuthServersNasIp.Unset()
}

// GetAuthServersRetries returns the AuthServersRetries field value if set, zero value otherwise.
func (o *Wlan) GetAuthServersRetries() int32 {
	if o == nil || IsNil(o.AuthServersRetries) {
		var ret int32
		return ret
	}
	return *o.AuthServersRetries
}

// GetAuthServersRetriesOk returns a tuple with the AuthServersRetries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetAuthServersRetriesOk() (*int32, bool) {
	if o == nil || IsNil(o.AuthServersRetries) {
		return nil, false
	}
	return o.AuthServersRetries, true
}

// HasAuthServersRetries returns a boolean if a field has been set.
func (o *Wlan) HasAuthServersRetries() bool {
	if o != nil && !IsNil(o.AuthServersRetries) {
		return true
	}

	return false
}

// SetAuthServersRetries gets a reference to the given int32 and assigns it to the AuthServersRetries field.
func (o *Wlan) SetAuthServersRetries(v int32) {
	o.AuthServersRetries = &v
}

// GetAuthServersTimeout returns the AuthServersTimeout field value if set, zero value otherwise.
func (o *Wlan) GetAuthServersTimeout() int32 {
	if o == nil || IsNil(o.AuthServersTimeout) {
		var ret int32
		return ret
	}
	return *o.AuthServersTimeout
}

// GetAuthServersTimeoutOk returns a tuple with the AuthServersTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetAuthServersTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.AuthServersTimeout) {
		return nil, false
	}
	return o.AuthServersTimeout, true
}

// HasAuthServersTimeout returns a boolean if a field has been set.
func (o *Wlan) HasAuthServersTimeout() bool {
	if o != nil && !IsNil(o.AuthServersTimeout) {
		return true
	}

	return false
}

// SetAuthServersTimeout gets a reference to the given int32 and assigns it to the AuthServersTimeout field.
func (o *Wlan) SetAuthServersTimeout(v int32) {
	o.AuthServersTimeout = &v
}

// GetBand returns the Band field value if set, zero value otherwise.
// Deprecated
func (o *Wlan) GetBand() string {
	if o == nil || IsNil(o.Band) {
		var ret string
		return ret
	}
	return *o.Band
}

// GetBandOk returns a tuple with the Band field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Wlan) GetBandOk() (*string, bool) {
	if o == nil || IsNil(o.Band) {
		return nil, false
	}
	return o.Band, true
}

// HasBand returns a boolean if a field has been set.
func (o *Wlan) HasBand() bool {
	if o != nil && !IsNil(o.Band) {
		return true
	}

	return false
}

// SetBand gets a reference to the given string and assigns it to the Band field.
// Deprecated
func (o *Wlan) SetBand(v string) {
	o.Band = &v
}

// GetBandSteer returns the BandSteer field value if set, zero value otherwise.
func (o *Wlan) GetBandSteer() bool {
	if o == nil || IsNil(o.BandSteer) {
		var ret bool
		return ret
	}
	return *o.BandSteer
}

// GetBandSteerOk returns a tuple with the BandSteer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetBandSteerOk() (*bool, bool) {
	if o == nil || IsNil(o.BandSteer) {
		return nil, false
	}
	return o.BandSteer, true
}

// HasBandSteer returns a boolean if a field has been set.
func (o *Wlan) HasBandSteer() bool {
	if o != nil && !IsNil(o.BandSteer) {
		return true
	}

	return false
}

// SetBandSteer gets a reference to the given bool and assigns it to the BandSteer field.
func (o *Wlan) SetBandSteer(v bool) {
	o.BandSteer = &v
}

// GetBandSteerForceBand5 returns the BandSteerForceBand5 field value if set, zero value otherwise.
func (o *Wlan) GetBandSteerForceBand5() bool {
	if o == nil || IsNil(o.BandSteerForceBand5) {
		var ret bool
		return ret
	}
	return *o.BandSteerForceBand5
}

// GetBandSteerForceBand5Ok returns a tuple with the BandSteerForceBand5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetBandSteerForceBand5Ok() (*bool, bool) {
	if o == nil || IsNil(o.BandSteerForceBand5) {
		return nil, false
	}
	return o.BandSteerForceBand5, true
}

// HasBandSteerForceBand5 returns a boolean if a field has been set.
func (o *Wlan) HasBandSteerForceBand5() bool {
	if o != nil && !IsNil(o.BandSteerForceBand5) {
		return true
	}

	return false
}

// SetBandSteerForceBand5 gets a reference to the given bool and assigns it to the BandSteerForceBand5 field.
func (o *Wlan) SetBandSteerForceBand5(v bool) {
	o.BandSteerForceBand5 = &v
}

// GetBands returns the Bands field value if set, zero value otherwise.
func (o *Wlan) GetBands() []Dot11Band {
	if o == nil || IsNil(o.Bands) {
		var ret []Dot11Band
		return ret
	}
	return o.Bands
}

// GetBandsOk returns a tuple with the Bands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetBandsOk() ([]Dot11Band, bool) {
	if o == nil || IsNil(o.Bands) {
		return nil, false
	}
	return o.Bands, true
}

// HasBands returns a boolean if a field has been set.
func (o *Wlan) HasBands() bool {
	if o != nil && !IsNil(o.Bands) {
		return true
	}

	return false
}

// SetBands gets a reference to the given []Dot11Band and assigns it to the Bands field.
func (o *Wlan) SetBands(v []Dot11Band) {
	o.Bands = v
}

// GetBlockBlacklistClients returns the BlockBlacklistClients field value if set, zero value otherwise.
func (o *Wlan) GetBlockBlacklistClients() bool {
	if o == nil || IsNil(o.BlockBlacklistClients) {
		var ret bool
		return ret
	}
	return *o.BlockBlacklistClients
}

// GetBlockBlacklistClientsOk returns a tuple with the BlockBlacklistClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetBlockBlacklistClientsOk() (*bool, bool) {
	if o == nil || IsNil(o.BlockBlacklistClients) {
		return nil, false
	}
	return o.BlockBlacklistClients, true
}

// HasBlockBlacklistClients returns a boolean if a field has been set.
func (o *Wlan) HasBlockBlacklistClients() bool {
	if o != nil && !IsNil(o.BlockBlacklistClients) {
		return true
	}

	return false
}

// SetBlockBlacklistClients gets a reference to the given bool and assigns it to the BlockBlacklistClients field.
func (o *Wlan) SetBlockBlacklistClients(v bool) {
	o.BlockBlacklistClients = &v
}

// GetBonjour returns the Bonjour field value if set, zero value otherwise.
func (o *Wlan) GetBonjour() WlanBonjour {
	if o == nil || IsNil(o.Bonjour) {
		var ret WlanBonjour
		return ret
	}
	return *o.Bonjour
}

// GetBonjourOk returns a tuple with the Bonjour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetBonjourOk() (*WlanBonjour, bool) {
	if o == nil || IsNil(o.Bonjour) {
		return nil, false
	}
	return o.Bonjour, true
}

// HasBonjour returns a boolean if a field has been set.
func (o *Wlan) HasBonjour() bool {
	if o != nil && !IsNil(o.Bonjour) {
		return true
	}

	return false
}

// SetBonjour gets a reference to the given WlanBonjour and assigns it to the Bonjour field.
func (o *Wlan) SetBonjour(v WlanBonjour) {
	o.Bonjour = &v
}

// GetCiscoCwa returns the CiscoCwa field value if set, zero value otherwise.
func (o *Wlan) GetCiscoCwa() WlanCiscoCwa {
	if o == nil || IsNil(o.CiscoCwa) {
		var ret WlanCiscoCwa
		return ret
	}
	return *o.CiscoCwa
}

// GetCiscoCwaOk returns a tuple with the CiscoCwa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetCiscoCwaOk() (*WlanCiscoCwa, bool) {
	if o == nil || IsNil(o.CiscoCwa) {
		return nil, false
	}
	return o.CiscoCwa, true
}

// HasCiscoCwa returns a boolean if a field has been set.
func (o *Wlan) HasCiscoCwa() bool {
	if o != nil && !IsNil(o.CiscoCwa) {
		return true
	}

	return false
}

// SetCiscoCwa gets a reference to the given WlanCiscoCwa and assigns it to the CiscoCwa field.
func (o *Wlan) SetCiscoCwa(v WlanCiscoCwa) {
	o.CiscoCwa = &v
}

// GetClientLimitDown returns the ClientLimitDown field value if set, zero value otherwise.
func (o *Wlan) GetClientLimitDown() int32 {
	if o == nil || IsNil(o.ClientLimitDown) {
		var ret int32
		return ret
	}
	return *o.ClientLimitDown
}

// GetClientLimitDownOk returns a tuple with the ClientLimitDown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetClientLimitDownOk() (*int32, bool) {
	if o == nil || IsNil(o.ClientLimitDown) {
		return nil, false
	}
	return o.ClientLimitDown, true
}

// HasClientLimitDown returns a boolean if a field has been set.
func (o *Wlan) HasClientLimitDown() bool {
	if o != nil && !IsNil(o.ClientLimitDown) {
		return true
	}

	return false
}

// SetClientLimitDown gets a reference to the given int32 and assigns it to the ClientLimitDown field.
func (o *Wlan) SetClientLimitDown(v int32) {
	o.ClientLimitDown = &v
}

// GetClientLimitDownEnabled returns the ClientLimitDownEnabled field value if set, zero value otherwise.
func (o *Wlan) GetClientLimitDownEnabled() bool {
	if o == nil || IsNil(o.ClientLimitDownEnabled) {
		var ret bool
		return ret
	}
	return *o.ClientLimitDownEnabled
}

// GetClientLimitDownEnabledOk returns a tuple with the ClientLimitDownEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetClientLimitDownEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ClientLimitDownEnabled) {
		return nil, false
	}
	return o.ClientLimitDownEnabled, true
}

// HasClientLimitDownEnabled returns a boolean if a field has been set.
func (o *Wlan) HasClientLimitDownEnabled() bool {
	if o != nil && !IsNil(o.ClientLimitDownEnabled) {
		return true
	}

	return false
}

// SetClientLimitDownEnabled gets a reference to the given bool and assigns it to the ClientLimitDownEnabled field.
func (o *Wlan) SetClientLimitDownEnabled(v bool) {
	o.ClientLimitDownEnabled = &v
}

// GetClientLimitUp returns the ClientLimitUp field value if set, zero value otherwise.
func (o *Wlan) GetClientLimitUp() int32 {
	if o == nil || IsNil(o.ClientLimitUp) {
		var ret int32
		return ret
	}
	return *o.ClientLimitUp
}

// GetClientLimitUpOk returns a tuple with the ClientLimitUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetClientLimitUpOk() (*int32, bool) {
	if o == nil || IsNil(o.ClientLimitUp) {
		return nil, false
	}
	return o.ClientLimitUp, true
}

// HasClientLimitUp returns a boolean if a field has been set.
func (o *Wlan) HasClientLimitUp() bool {
	if o != nil && !IsNil(o.ClientLimitUp) {
		return true
	}

	return false
}

// SetClientLimitUp gets a reference to the given int32 and assigns it to the ClientLimitUp field.
func (o *Wlan) SetClientLimitUp(v int32) {
	o.ClientLimitUp = &v
}

// GetClientLimitUpEnabled returns the ClientLimitUpEnabled field value if set, zero value otherwise.
func (o *Wlan) GetClientLimitUpEnabled() bool {
	if o == nil || IsNil(o.ClientLimitUpEnabled) {
		var ret bool
		return ret
	}
	return *o.ClientLimitUpEnabled
}

// GetClientLimitUpEnabledOk returns a tuple with the ClientLimitUpEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetClientLimitUpEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ClientLimitUpEnabled) {
		return nil, false
	}
	return o.ClientLimitUpEnabled, true
}

// HasClientLimitUpEnabled returns a boolean if a field has been set.
func (o *Wlan) HasClientLimitUpEnabled() bool {
	if o != nil && !IsNil(o.ClientLimitUpEnabled) {
		return true
	}

	return false
}

// SetClientLimitUpEnabled gets a reference to the given bool and assigns it to the ClientLimitUpEnabled field.
func (o *Wlan) SetClientLimitUpEnabled(v bool) {
	o.ClientLimitUpEnabled = &v
}

// GetCoaServers returns the CoaServers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Wlan) GetCoaServers() []CoaServer {
	if o == nil {
		var ret []CoaServer
		return ret
	}
	return o.CoaServers
}

// GetCoaServersOk returns a tuple with the CoaServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Wlan) GetCoaServersOk() ([]CoaServer, bool) {
	if o == nil || IsNil(o.CoaServers) {
		return nil, false
	}
	return o.CoaServers, true
}

// HasCoaServers returns a boolean if a field has been set.
func (o *Wlan) HasCoaServers() bool {
	if o != nil && !IsNil(o.CoaServers) {
		return true
	}

	return false
}

// SetCoaServers gets a reference to the given []CoaServer and assigns it to the CoaServers field.
func (o *Wlan) SetCoaServers(v []CoaServer) {
	o.CoaServers = v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *Wlan) GetCreatedTime() float32 {
	if o == nil || IsNil(o.CreatedTime) {
		var ret float32
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetCreatedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *Wlan) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given float32 and assigns it to the CreatedTime field.
func (o *Wlan) SetCreatedTime(v float32) {
	o.CreatedTime = &v
}

// GetDisable11ax returns the Disable11ax field value if set, zero value otherwise.
func (o *Wlan) GetDisable11ax() bool {
	if o == nil || IsNil(o.Disable11ax) {
		var ret bool
		return ret
	}
	return *o.Disable11ax
}

// GetDisable11axOk returns a tuple with the Disable11ax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetDisable11axOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable11ax) {
		return nil, false
	}
	return o.Disable11ax, true
}

// HasDisable11ax returns a boolean if a field has been set.
func (o *Wlan) HasDisable11ax() bool {
	if o != nil && !IsNil(o.Disable11ax) {
		return true
	}

	return false
}

// SetDisable11ax gets a reference to the given bool and assigns it to the Disable11ax field.
func (o *Wlan) SetDisable11ax(v bool) {
	o.Disable11ax = &v
}

// GetDisableHtVhtRates returns the DisableHtVhtRates field value if set, zero value otherwise.
func (o *Wlan) GetDisableHtVhtRates() bool {
	if o == nil || IsNil(o.DisableHtVhtRates) {
		var ret bool
		return ret
	}
	return *o.DisableHtVhtRates
}

// GetDisableHtVhtRatesOk returns a tuple with the DisableHtVhtRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetDisableHtVhtRatesOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableHtVhtRates) {
		return nil, false
	}
	return o.DisableHtVhtRates, true
}

// HasDisableHtVhtRates returns a boolean if a field has been set.
func (o *Wlan) HasDisableHtVhtRates() bool {
	if o != nil && !IsNil(o.DisableHtVhtRates) {
		return true
	}

	return false
}

// SetDisableHtVhtRates gets a reference to the given bool and assigns it to the DisableHtVhtRates field.
func (o *Wlan) SetDisableHtVhtRates(v bool) {
	o.DisableHtVhtRates = &v
}

// GetDisableUapsd returns the DisableUapsd field value if set, zero value otherwise.
func (o *Wlan) GetDisableUapsd() bool {
	if o == nil || IsNil(o.DisableUapsd) {
		var ret bool
		return ret
	}
	return *o.DisableUapsd
}

// GetDisableUapsdOk returns a tuple with the DisableUapsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetDisableUapsdOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableUapsd) {
		return nil, false
	}
	return o.DisableUapsd, true
}

// HasDisableUapsd returns a boolean if a field has been set.
func (o *Wlan) HasDisableUapsd() bool {
	if o != nil && !IsNil(o.DisableUapsd) {
		return true
	}

	return false
}

// SetDisableUapsd gets a reference to the given bool and assigns it to the DisableUapsd field.
func (o *Wlan) SetDisableUapsd(v bool) {
	o.DisableUapsd = &v
}

// GetDisableV1RoamNotify returns the DisableV1RoamNotify field value if set, zero value otherwise.
func (o *Wlan) GetDisableV1RoamNotify() bool {
	if o == nil || IsNil(o.DisableV1RoamNotify) {
		var ret bool
		return ret
	}
	return *o.DisableV1RoamNotify
}

// GetDisableV1RoamNotifyOk returns a tuple with the DisableV1RoamNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetDisableV1RoamNotifyOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableV1RoamNotify) {
		return nil, false
	}
	return o.DisableV1RoamNotify, true
}

// HasDisableV1RoamNotify returns a boolean if a field has been set.
func (o *Wlan) HasDisableV1RoamNotify() bool {
	if o != nil && !IsNil(o.DisableV1RoamNotify) {
		return true
	}

	return false
}

// SetDisableV1RoamNotify gets a reference to the given bool and assigns it to the DisableV1RoamNotify field.
func (o *Wlan) SetDisableV1RoamNotify(v bool) {
	o.DisableV1RoamNotify = &v
}

// GetDisableV2RoamNotify returns the DisableV2RoamNotify field value if set, zero value otherwise.
func (o *Wlan) GetDisableV2RoamNotify() bool {
	if o == nil || IsNil(o.DisableV2RoamNotify) {
		var ret bool
		return ret
	}
	return *o.DisableV2RoamNotify
}

// GetDisableV2RoamNotifyOk returns a tuple with the DisableV2RoamNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetDisableV2RoamNotifyOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableV2RoamNotify) {
		return nil, false
	}
	return o.DisableV2RoamNotify, true
}

// HasDisableV2RoamNotify returns a boolean if a field has been set.
func (o *Wlan) HasDisableV2RoamNotify() bool {
	if o != nil && !IsNil(o.DisableV2RoamNotify) {
		return true
	}

	return false
}

// SetDisableV2RoamNotify gets a reference to the given bool and assigns it to the DisableV2RoamNotify field.
func (o *Wlan) SetDisableV2RoamNotify(v bool) {
	o.DisableV2RoamNotify = &v
}

// GetDisableWmm returns the DisableWmm field value if set, zero value otherwise.
func (o *Wlan) GetDisableWmm() bool {
	if o == nil || IsNil(o.DisableWmm) {
		var ret bool
		return ret
	}
	return *o.DisableWmm
}

// GetDisableWmmOk returns a tuple with the DisableWmm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetDisableWmmOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableWmm) {
		return nil, false
	}
	return o.DisableWmm, true
}

// HasDisableWmm returns a boolean if a field has been set.
func (o *Wlan) HasDisableWmm() bool {
	if o != nil && !IsNil(o.DisableWmm) {
		return true
	}

	return false
}

// SetDisableWmm gets a reference to the given bool and assigns it to the DisableWmm field.
func (o *Wlan) SetDisableWmm(v bool) {
	o.DisableWmm = &v
}

// GetDnsServerRewrite returns the DnsServerRewrite field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Wlan) GetDnsServerRewrite() WlanDnsServerRewrite {
	if o == nil || IsNil(o.DnsServerRewrite.Get()) {
		var ret WlanDnsServerRewrite
		return ret
	}
	return *o.DnsServerRewrite.Get()
}

// GetDnsServerRewriteOk returns a tuple with the DnsServerRewrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Wlan) GetDnsServerRewriteOk() (*WlanDnsServerRewrite, bool) {
	if o == nil {
		return nil, false
	}
	return o.DnsServerRewrite.Get(), o.DnsServerRewrite.IsSet()
}

// HasDnsServerRewrite returns a boolean if a field has been set.
func (o *Wlan) HasDnsServerRewrite() bool {
	if o != nil && o.DnsServerRewrite.IsSet() {
		return true
	}

	return false
}

// SetDnsServerRewrite gets a reference to the given NullableWlanDnsServerRewrite and assigns it to the DnsServerRewrite field.
func (o *Wlan) SetDnsServerRewrite(v WlanDnsServerRewrite) {
	o.DnsServerRewrite.Set(&v)
}
// SetDnsServerRewriteNil sets the value for DnsServerRewrite to be an explicit nil
func (o *Wlan) SetDnsServerRewriteNil() {
	o.DnsServerRewrite.Set(nil)
}

// UnsetDnsServerRewrite ensures that no value is present for DnsServerRewrite, not even an explicit nil
func (o *Wlan) UnsetDnsServerRewrite() {
	o.DnsServerRewrite.Unset()
}

// GetDtim returns the Dtim field value if set, zero value otherwise.
func (o *Wlan) GetDtim() int32 {
	if o == nil || IsNil(o.Dtim) {
		var ret int32
		return ret
	}
	return *o.Dtim
}

// GetDtimOk returns a tuple with the Dtim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetDtimOk() (*int32, bool) {
	if o == nil || IsNil(o.Dtim) {
		return nil, false
	}
	return o.Dtim, true
}

// HasDtim returns a boolean if a field has been set.
func (o *Wlan) HasDtim() bool {
	if o != nil && !IsNil(o.Dtim) {
		return true
	}

	return false
}

// SetDtim gets a reference to the given int32 and assigns it to the Dtim field.
func (o *Wlan) SetDtim(v int32) {
	o.Dtim = &v
}

// GetDynamicPsk returns the DynamicPsk field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Wlan) GetDynamicPsk() WlanDynamicPsk {
	if o == nil || IsNil(o.DynamicPsk.Get()) {
		var ret WlanDynamicPsk
		return ret
	}
	return *o.DynamicPsk.Get()
}

// GetDynamicPskOk returns a tuple with the DynamicPsk field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Wlan) GetDynamicPskOk() (*WlanDynamicPsk, bool) {
	if o == nil {
		return nil, false
	}
	return o.DynamicPsk.Get(), o.DynamicPsk.IsSet()
}

// HasDynamicPsk returns a boolean if a field has been set.
func (o *Wlan) HasDynamicPsk() bool {
	if o != nil && o.DynamicPsk.IsSet() {
		return true
	}

	return false
}

// SetDynamicPsk gets a reference to the given NullableWlanDynamicPsk and assigns it to the DynamicPsk field.
func (o *Wlan) SetDynamicPsk(v WlanDynamicPsk) {
	o.DynamicPsk.Set(&v)
}
// SetDynamicPskNil sets the value for DynamicPsk to be an explicit nil
func (o *Wlan) SetDynamicPskNil() {
	o.DynamicPsk.Set(nil)
}

// UnsetDynamicPsk ensures that no value is present for DynamicPsk, not even an explicit nil
func (o *Wlan) UnsetDynamicPsk() {
	o.DynamicPsk.Unset()
}

// GetDynamicVlan returns the DynamicVlan field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Wlan) GetDynamicVlan() WlanDynamicVlan {
	if o == nil || IsNil(o.DynamicVlan.Get()) {
		var ret WlanDynamicVlan
		return ret
	}
	return *o.DynamicVlan.Get()
}

// GetDynamicVlanOk returns a tuple with the DynamicVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Wlan) GetDynamicVlanOk() (*WlanDynamicVlan, bool) {
	if o == nil {
		return nil, false
	}
	return o.DynamicVlan.Get(), o.DynamicVlan.IsSet()
}

// HasDynamicVlan returns a boolean if a field has been set.
func (o *Wlan) HasDynamicVlan() bool {
	if o != nil && o.DynamicVlan.IsSet() {
		return true
	}

	return false
}

// SetDynamicVlan gets a reference to the given NullableWlanDynamicVlan and assigns it to the DynamicVlan field.
func (o *Wlan) SetDynamicVlan(v WlanDynamicVlan) {
	o.DynamicVlan.Set(&v)
}
// SetDynamicVlanNil sets the value for DynamicVlan to be an explicit nil
func (o *Wlan) SetDynamicVlanNil() {
	o.DynamicVlan.Set(nil)
}

// UnsetDynamicVlan ensures that no value is present for DynamicVlan, not even an explicit nil
func (o *Wlan) UnsetDynamicVlan() {
	o.DynamicVlan.Unset()
}

// GetEnableLocalKeycaching returns the EnableLocalKeycaching field value if set, zero value otherwise.
func (o *Wlan) GetEnableLocalKeycaching() bool {
	if o == nil || IsNil(o.EnableLocalKeycaching) {
		var ret bool
		return ret
	}
	return *o.EnableLocalKeycaching
}

// GetEnableLocalKeycachingOk returns a tuple with the EnableLocalKeycaching field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetEnableLocalKeycachingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableLocalKeycaching) {
		return nil, false
	}
	return o.EnableLocalKeycaching, true
}

// HasEnableLocalKeycaching returns a boolean if a field has been set.
func (o *Wlan) HasEnableLocalKeycaching() bool {
	if o != nil && !IsNil(o.EnableLocalKeycaching) {
		return true
	}

	return false
}

// SetEnableLocalKeycaching gets a reference to the given bool and assigns it to the EnableLocalKeycaching field.
func (o *Wlan) SetEnableLocalKeycaching(v bool) {
	o.EnableLocalKeycaching = &v
}

// GetEnableWirelessBridging returns the EnableWirelessBridging field value if set, zero value otherwise.
func (o *Wlan) GetEnableWirelessBridging() bool {
	if o == nil || IsNil(o.EnableWirelessBridging) {
		var ret bool
		return ret
	}
	return *o.EnableWirelessBridging
}

// GetEnableWirelessBridgingOk returns a tuple with the EnableWirelessBridging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetEnableWirelessBridgingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableWirelessBridging) {
		return nil, false
	}
	return o.EnableWirelessBridging, true
}

// HasEnableWirelessBridging returns a boolean if a field has been set.
func (o *Wlan) HasEnableWirelessBridging() bool {
	if o != nil && !IsNil(o.EnableWirelessBridging) {
		return true
	}

	return false
}

// SetEnableWirelessBridging gets a reference to the given bool and assigns it to the EnableWirelessBridging field.
func (o *Wlan) SetEnableWirelessBridging(v bool) {
	o.EnableWirelessBridging = &v
}

// GetEnableWirelessBridgingDhcpTracking returns the EnableWirelessBridgingDhcpTracking field value if set, zero value otherwise.
func (o *Wlan) GetEnableWirelessBridgingDhcpTracking() bool {
	if o == nil || IsNil(o.EnableWirelessBridgingDhcpTracking) {
		var ret bool
		return ret
	}
	return *o.EnableWirelessBridgingDhcpTracking
}

// GetEnableWirelessBridgingDhcpTrackingOk returns a tuple with the EnableWirelessBridgingDhcpTracking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetEnableWirelessBridgingDhcpTrackingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableWirelessBridgingDhcpTracking) {
		return nil, false
	}
	return o.EnableWirelessBridgingDhcpTracking, true
}

// HasEnableWirelessBridgingDhcpTracking returns a boolean if a field has been set.
func (o *Wlan) HasEnableWirelessBridgingDhcpTracking() bool {
	if o != nil && !IsNil(o.EnableWirelessBridgingDhcpTracking) {
		return true
	}

	return false
}

// SetEnableWirelessBridgingDhcpTracking gets a reference to the given bool and assigns it to the EnableWirelessBridgingDhcpTracking field.
func (o *Wlan) SetEnableWirelessBridgingDhcpTracking(v bool) {
	o.EnableWirelessBridgingDhcpTracking = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Wlan) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Wlan) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Wlan) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFastDot1xTimers returns the FastDot1xTimers field value if set, zero value otherwise.
func (o *Wlan) GetFastDot1xTimers() bool {
	if o == nil || IsNil(o.FastDot1xTimers) {
		var ret bool
		return ret
	}
	return *o.FastDot1xTimers
}

// GetFastDot1xTimersOk returns a tuple with the FastDot1xTimers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetFastDot1xTimersOk() (*bool, bool) {
	if o == nil || IsNil(o.FastDot1xTimers) {
		return nil, false
	}
	return o.FastDot1xTimers, true
}

// HasFastDot1xTimers returns a boolean if a field has been set.
func (o *Wlan) HasFastDot1xTimers() bool {
	if o != nil && !IsNil(o.FastDot1xTimers) {
		return true
	}

	return false
}

// SetFastDot1xTimers gets a reference to the given bool and assigns it to the FastDot1xTimers field.
func (o *Wlan) SetFastDot1xTimers(v bool) {
	o.FastDot1xTimers = &v
}

// GetForSite returns the ForSite field value if set, zero value otherwise.
func (o *Wlan) GetForSite() bool {
	if o == nil || IsNil(o.ForSite) {
		var ret bool
		return ret
	}
	return *o.ForSite
}

// GetForSiteOk returns a tuple with the ForSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetForSiteOk() (*bool, bool) {
	if o == nil || IsNil(o.ForSite) {
		return nil, false
	}
	return o.ForSite, true
}

// HasForSite returns a boolean if a field has been set.
func (o *Wlan) HasForSite() bool {
	if o != nil && !IsNil(o.ForSite) {
		return true
	}

	return false
}

// SetForSite gets a reference to the given bool and assigns it to the ForSite field.
func (o *Wlan) SetForSite(v bool) {
	o.ForSite = &v
}

// GetHideSsid returns the HideSsid field value if set, zero value otherwise.
func (o *Wlan) GetHideSsid() bool {
	if o == nil || IsNil(o.HideSsid) {
		var ret bool
		return ret
	}
	return *o.HideSsid
}

// GetHideSsidOk returns a tuple with the HideSsid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetHideSsidOk() (*bool, bool) {
	if o == nil || IsNil(o.HideSsid) {
		return nil, false
	}
	return o.HideSsid, true
}

// HasHideSsid returns a boolean if a field has been set.
func (o *Wlan) HasHideSsid() bool {
	if o != nil && !IsNil(o.HideSsid) {
		return true
	}

	return false
}

// SetHideSsid gets a reference to the given bool and assigns it to the HideSsid field.
func (o *Wlan) SetHideSsid(v bool) {
	o.HideSsid = &v
}

// GetHostnameIe returns the HostnameIe field value if set, zero value otherwise.
func (o *Wlan) GetHostnameIe() bool {
	if o == nil || IsNil(o.HostnameIe) {
		var ret bool
		return ret
	}
	return *o.HostnameIe
}

// GetHostnameIeOk returns a tuple with the HostnameIe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetHostnameIeOk() (*bool, bool) {
	if o == nil || IsNil(o.HostnameIe) {
		return nil, false
	}
	return o.HostnameIe, true
}

// HasHostnameIe returns a boolean if a field has been set.
func (o *Wlan) HasHostnameIe() bool {
	if o != nil && !IsNil(o.HostnameIe) {
		return true
	}

	return false
}

// SetHostnameIe gets a reference to the given bool and assigns it to the HostnameIe field.
func (o *Wlan) SetHostnameIe(v bool) {
	o.HostnameIe = &v
}

// GetHotspot20 returns the Hotspot20 field value if set, zero value otherwise.
func (o *Wlan) GetHotspot20() WlanHotspot20 {
	if o == nil || IsNil(o.Hotspot20) {
		var ret WlanHotspot20
		return ret
	}
	return *o.Hotspot20
}

// GetHotspot20Ok returns a tuple with the Hotspot20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetHotspot20Ok() (*WlanHotspot20, bool) {
	if o == nil || IsNil(o.Hotspot20) {
		return nil, false
	}
	return o.Hotspot20, true
}

// HasHotspot20 returns a boolean if a field has been set.
func (o *Wlan) HasHotspot20() bool {
	if o != nil && !IsNil(o.Hotspot20) {
		return true
	}

	return false
}

// SetHotspot20 gets a reference to the given WlanHotspot20 and assigns it to the Hotspot20 field.
func (o *Wlan) SetHotspot20(v WlanHotspot20) {
	o.Hotspot20 = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Wlan) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Wlan) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Wlan) SetId(v string) {
	o.Id = &v
}

// GetInjectDhcpOption82 returns the InjectDhcpOption82 field value if set, zero value otherwise.
func (o *Wlan) GetInjectDhcpOption82() WlanInjectDhcpOption82 {
	if o == nil || IsNil(o.InjectDhcpOption82) {
		var ret WlanInjectDhcpOption82
		return ret
	}
	return *o.InjectDhcpOption82
}

// GetInjectDhcpOption82Ok returns a tuple with the InjectDhcpOption82 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetInjectDhcpOption82Ok() (*WlanInjectDhcpOption82, bool) {
	if o == nil || IsNil(o.InjectDhcpOption82) {
		return nil, false
	}
	return o.InjectDhcpOption82, true
}

// HasInjectDhcpOption82 returns a boolean if a field has been set.
func (o *Wlan) HasInjectDhcpOption82() bool {
	if o != nil && !IsNil(o.InjectDhcpOption82) {
		return true
	}

	return false
}

// SetInjectDhcpOption82 gets a reference to the given WlanInjectDhcpOption82 and assigns it to the InjectDhcpOption82 field.
func (o *Wlan) SetInjectDhcpOption82(v WlanInjectDhcpOption82) {
	o.InjectDhcpOption82 = &v
}

// GetInterface returns the Interface field value if set, zero value otherwise.
func (o *Wlan) GetInterface() WlanInterface {
	if o == nil || IsNil(o.Interface) {
		var ret WlanInterface
		return ret
	}
	return *o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetInterfaceOk() (*WlanInterface, bool) {
	if o == nil || IsNil(o.Interface) {
		return nil, false
	}
	return o.Interface, true
}

// HasInterface returns a boolean if a field has been set.
func (o *Wlan) HasInterface() bool {
	if o != nil && !IsNil(o.Interface) {
		return true
	}

	return false
}

// SetInterface gets a reference to the given WlanInterface and assigns it to the Interface field.
func (o *Wlan) SetInterface(v WlanInterface) {
	o.Interface = &v
}

// GetIsolation returns the Isolation field value if set, zero value otherwise.
func (o *Wlan) GetIsolation() bool {
	if o == nil || IsNil(o.Isolation) {
		var ret bool
		return ret
	}
	return *o.Isolation
}

// GetIsolationOk returns a tuple with the Isolation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetIsolationOk() (*bool, bool) {
	if o == nil || IsNil(o.Isolation) {
		return nil, false
	}
	return o.Isolation, true
}

// HasIsolation returns a boolean if a field has been set.
func (o *Wlan) HasIsolation() bool {
	if o != nil && !IsNil(o.Isolation) {
		return true
	}

	return false
}

// SetIsolation gets a reference to the given bool and assigns it to the Isolation field.
func (o *Wlan) SetIsolation(v bool) {
	o.Isolation = &v
}

// GetL2Isolation returns the L2Isolation field value if set, zero value otherwise.
func (o *Wlan) GetL2Isolation() bool {
	if o == nil || IsNil(o.L2Isolation) {
		var ret bool
		return ret
	}
	return *o.L2Isolation
}

// GetL2IsolationOk returns a tuple with the L2Isolation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetL2IsolationOk() (*bool, bool) {
	if o == nil || IsNil(o.L2Isolation) {
		return nil, false
	}
	return o.L2Isolation, true
}

// HasL2Isolation returns a boolean if a field has been set.
func (o *Wlan) HasL2Isolation() bool {
	if o != nil && !IsNil(o.L2Isolation) {
		return true
	}

	return false
}

// SetL2Isolation gets a reference to the given bool and assigns it to the L2Isolation field.
func (o *Wlan) SetL2Isolation(v bool) {
	o.L2Isolation = &v
}

// GetLegacyOverds returns the LegacyOverds field value if set, zero value otherwise.
func (o *Wlan) GetLegacyOverds() bool {
	if o == nil || IsNil(o.LegacyOverds) {
		var ret bool
		return ret
	}
	return *o.LegacyOverds
}

// GetLegacyOverdsOk returns a tuple with the LegacyOverds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetLegacyOverdsOk() (*bool, bool) {
	if o == nil || IsNil(o.LegacyOverds) {
		return nil, false
	}
	return o.LegacyOverds, true
}

// HasLegacyOverds returns a boolean if a field has been set.
func (o *Wlan) HasLegacyOverds() bool {
	if o != nil && !IsNil(o.LegacyOverds) {
		return true
	}

	return false
}

// SetLegacyOverds gets a reference to the given bool and assigns it to the LegacyOverds field.
func (o *Wlan) SetLegacyOverds(v bool) {
	o.LegacyOverds = &v
}

// GetLimitBcast returns the LimitBcast field value if set, zero value otherwise.
func (o *Wlan) GetLimitBcast() bool {
	if o == nil || IsNil(o.LimitBcast) {
		var ret bool
		return ret
	}
	return *o.LimitBcast
}

// GetLimitBcastOk returns a tuple with the LimitBcast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetLimitBcastOk() (*bool, bool) {
	if o == nil || IsNil(o.LimitBcast) {
		return nil, false
	}
	return o.LimitBcast, true
}

// HasLimitBcast returns a boolean if a field has been set.
func (o *Wlan) HasLimitBcast() bool {
	if o != nil && !IsNil(o.LimitBcast) {
		return true
	}

	return false
}

// SetLimitBcast gets a reference to the given bool and assigns it to the LimitBcast field.
func (o *Wlan) SetLimitBcast(v bool) {
	o.LimitBcast = &v
}

// GetLimitProbeResponse returns the LimitProbeResponse field value if set, zero value otherwise.
func (o *Wlan) GetLimitProbeResponse() bool {
	if o == nil || IsNil(o.LimitProbeResponse) {
		var ret bool
		return ret
	}
	return *o.LimitProbeResponse
}

// GetLimitProbeResponseOk returns a tuple with the LimitProbeResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetLimitProbeResponseOk() (*bool, bool) {
	if o == nil || IsNil(o.LimitProbeResponse) {
		return nil, false
	}
	return o.LimitProbeResponse, true
}

// HasLimitProbeResponse returns a boolean if a field has been set.
func (o *Wlan) HasLimitProbeResponse() bool {
	if o != nil && !IsNil(o.LimitProbeResponse) {
		return true
	}

	return false
}

// SetLimitProbeResponse gets a reference to the given bool and assigns it to the LimitProbeResponse field.
func (o *Wlan) SetLimitProbeResponse(v bool) {
	o.LimitProbeResponse = &v
}

// GetMaxIdletime returns the MaxIdletime field value if set, zero value otherwise.
func (o *Wlan) GetMaxIdletime() int32 {
	if o == nil || IsNil(o.MaxIdletime) {
		var ret int32
		return ret
	}
	return *o.MaxIdletime
}

// GetMaxIdletimeOk returns a tuple with the MaxIdletime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetMaxIdletimeOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxIdletime) {
		return nil, false
	}
	return o.MaxIdletime, true
}

// HasMaxIdletime returns a boolean if a field has been set.
func (o *Wlan) HasMaxIdletime() bool {
	if o != nil && !IsNil(o.MaxIdletime) {
		return true
	}

	return false
}

// SetMaxIdletime gets a reference to the given int32 and assigns it to the MaxIdletime field.
func (o *Wlan) SetMaxIdletime(v int32) {
	o.MaxIdletime = &v
}

// GetMistNac returns the MistNac field value if set, zero value otherwise.
func (o *Wlan) GetMistNac() WlanMistNac {
	if o == nil || IsNil(o.MistNac) {
		var ret WlanMistNac
		return ret
	}
	return *o.MistNac
}

// GetMistNacOk returns a tuple with the MistNac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetMistNacOk() (*WlanMistNac, bool) {
	if o == nil || IsNil(o.MistNac) {
		return nil, false
	}
	return o.MistNac, true
}

// HasMistNac returns a boolean if a field has been set.
func (o *Wlan) HasMistNac() bool {
	if o != nil && !IsNil(o.MistNac) {
		return true
	}

	return false
}

// SetMistNac gets a reference to the given WlanMistNac and assigns it to the MistNac field.
func (o *Wlan) SetMistNac(v WlanMistNac) {
	o.MistNac = &v
}

// GetModifiedTime returns the ModifiedTime field value if set, zero value otherwise.
func (o *Wlan) GetModifiedTime() float32 {
	if o == nil || IsNil(o.ModifiedTime) {
		var ret float32
		return ret
	}
	return *o.ModifiedTime
}

// GetModifiedTimeOk returns a tuple with the ModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetModifiedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.ModifiedTime) {
		return nil, false
	}
	return o.ModifiedTime, true
}

// HasModifiedTime returns a boolean if a field has been set.
func (o *Wlan) HasModifiedTime() bool {
	if o != nil && !IsNil(o.ModifiedTime) {
		return true
	}

	return false
}

// SetModifiedTime gets a reference to the given float32 and assigns it to the ModifiedTime field.
func (o *Wlan) SetModifiedTime(v float32) {
	o.ModifiedTime = &v
}

// GetMspId returns the MspId field value if set, zero value otherwise.
func (o *Wlan) GetMspId() string {
	if o == nil || IsNil(o.MspId) {
		var ret string
		return ret
	}
	return *o.MspId
}

// GetMspIdOk returns a tuple with the MspId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetMspIdOk() (*string, bool) {
	if o == nil || IsNil(o.MspId) {
		return nil, false
	}
	return o.MspId, true
}

// HasMspId returns a boolean if a field has been set.
func (o *Wlan) HasMspId() bool {
	if o != nil && !IsNil(o.MspId) {
		return true
	}

	return false
}

// SetMspId gets a reference to the given string and assigns it to the MspId field.
func (o *Wlan) SetMspId(v string) {
	o.MspId = &v
}

// GetMxtunnelId returns the MxtunnelId field value if set, zero value otherwise.
// Deprecated
func (o *Wlan) GetMxtunnelId() string {
	if o == nil || IsNil(o.MxtunnelId) {
		var ret string
		return ret
	}
	return *o.MxtunnelId
}

// GetMxtunnelIdOk returns a tuple with the MxtunnelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Wlan) GetMxtunnelIdOk() (*string, bool) {
	if o == nil || IsNil(o.MxtunnelId) {
		return nil, false
	}
	return o.MxtunnelId, true
}

// HasMxtunnelId returns a boolean if a field has been set.
func (o *Wlan) HasMxtunnelId() bool {
	if o != nil && !IsNil(o.MxtunnelId) {
		return true
	}

	return false
}

// SetMxtunnelId gets a reference to the given string and assigns it to the MxtunnelId field.
// Deprecated
func (o *Wlan) SetMxtunnelId(v string) {
	o.MxtunnelId = &v
}

// GetMxtunnelIds returns the MxtunnelIds field value if set, zero value otherwise.
func (o *Wlan) GetMxtunnelIds() []string {
	if o == nil || IsNil(o.MxtunnelIds) {
		var ret []string
		return ret
	}
	return o.MxtunnelIds
}

// GetMxtunnelIdsOk returns a tuple with the MxtunnelIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetMxtunnelIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.MxtunnelIds) {
		return nil, false
	}
	return o.MxtunnelIds, true
}

// HasMxtunnelIds returns a boolean if a field has been set.
func (o *Wlan) HasMxtunnelIds() bool {
	if o != nil && !IsNil(o.MxtunnelIds) {
		return true
	}

	return false
}

// SetMxtunnelIds gets a reference to the given []string and assigns it to the MxtunnelIds field.
func (o *Wlan) SetMxtunnelIds(v []string) {
	o.MxtunnelIds = v
}

// GetMxtunnelName returns the MxtunnelName field value if set, zero value otherwise.
func (o *Wlan) GetMxtunnelName() []string {
	if o == nil || IsNil(o.MxtunnelName) {
		var ret []string
		return ret
	}
	return o.MxtunnelName
}

// GetMxtunnelNameOk returns a tuple with the MxtunnelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetMxtunnelNameOk() ([]string, bool) {
	if o == nil || IsNil(o.MxtunnelName) {
		return nil, false
	}
	return o.MxtunnelName, true
}

// HasMxtunnelName returns a boolean if a field has been set.
func (o *Wlan) HasMxtunnelName() bool {
	if o != nil && !IsNil(o.MxtunnelName) {
		return true
	}

	return false
}

// SetMxtunnelName gets a reference to the given []string and assigns it to the MxtunnelName field.
func (o *Wlan) SetMxtunnelName(v []string) {
	o.MxtunnelName = v
}

// GetNoStaticDns returns the NoStaticDns field value if set, zero value otherwise.
func (o *Wlan) GetNoStaticDns() bool {
	if o == nil || IsNil(o.NoStaticDns) {
		var ret bool
		return ret
	}
	return *o.NoStaticDns
}

// GetNoStaticDnsOk returns a tuple with the NoStaticDns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetNoStaticDnsOk() (*bool, bool) {
	if o == nil || IsNil(o.NoStaticDns) {
		return nil, false
	}
	return o.NoStaticDns, true
}

// HasNoStaticDns returns a boolean if a field has been set.
func (o *Wlan) HasNoStaticDns() bool {
	if o != nil && !IsNil(o.NoStaticDns) {
		return true
	}

	return false
}

// SetNoStaticDns gets a reference to the given bool and assigns it to the NoStaticDns field.
func (o *Wlan) SetNoStaticDns(v bool) {
	o.NoStaticDns = &v
}

// GetNoStaticIp returns the NoStaticIp field value if set, zero value otherwise.
func (o *Wlan) GetNoStaticIp() bool {
	if o == nil || IsNil(o.NoStaticIp) {
		var ret bool
		return ret
	}
	return *o.NoStaticIp
}

// GetNoStaticIpOk returns a tuple with the NoStaticIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetNoStaticIpOk() (*bool, bool) {
	if o == nil || IsNil(o.NoStaticIp) {
		return nil, false
	}
	return o.NoStaticIp, true
}

// HasNoStaticIp returns a boolean if a field has been set.
func (o *Wlan) HasNoStaticIp() bool {
	if o != nil && !IsNil(o.NoStaticIp) {
		return true
	}

	return false
}

// SetNoStaticIp gets a reference to the given bool and assigns it to the NoStaticIp field.
func (o *Wlan) SetNoStaticIp(v bool) {
	o.NoStaticIp = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *Wlan) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *Wlan) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *Wlan) SetOrgId(v string) {
	o.OrgId = &v
}

// GetPortal returns the Portal field value if set, zero value otherwise.
func (o *Wlan) GetPortal() WlanPortal {
	if o == nil || IsNil(o.Portal) {
		var ret WlanPortal
		return ret
	}
	return *o.Portal
}

// GetPortalOk returns a tuple with the Portal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetPortalOk() (*WlanPortal, bool) {
	if o == nil || IsNil(o.Portal) {
		return nil, false
	}
	return o.Portal, true
}

// HasPortal returns a boolean if a field has been set.
func (o *Wlan) HasPortal() bool {
	if o != nil && !IsNil(o.Portal) {
		return true
	}

	return false
}

// SetPortal gets a reference to the given WlanPortal and assigns it to the Portal field.
func (o *Wlan) SetPortal(v WlanPortal) {
	o.Portal = &v
}

// GetPortalAllowedHostnames returns the PortalAllowedHostnames field value if set, zero value otherwise.
func (o *Wlan) GetPortalAllowedHostnames() []string {
	if o == nil || IsNil(o.PortalAllowedHostnames) {
		var ret []string
		return ret
	}
	return o.PortalAllowedHostnames
}

// GetPortalAllowedHostnamesOk returns a tuple with the PortalAllowedHostnames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetPortalAllowedHostnamesOk() ([]string, bool) {
	if o == nil || IsNil(o.PortalAllowedHostnames) {
		return nil, false
	}
	return o.PortalAllowedHostnames, true
}

// HasPortalAllowedHostnames returns a boolean if a field has been set.
func (o *Wlan) HasPortalAllowedHostnames() bool {
	if o != nil && !IsNil(o.PortalAllowedHostnames) {
		return true
	}

	return false
}

// SetPortalAllowedHostnames gets a reference to the given []string and assigns it to the PortalAllowedHostnames field.
func (o *Wlan) SetPortalAllowedHostnames(v []string) {
	o.PortalAllowedHostnames = v
}

// GetPortalAllowedSubnets returns the PortalAllowedSubnets field value if set, zero value otherwise.
func (o *Wlan) GetPortalAllowedSubnets() []string {
	if o == nil || IsNil(o.PortalAllowedSubnets) {
		var ret []string
		return ret
	}
	return o.PortalAllowedSubnets
}

// GetPortalAllowedSubnetsOk returns a tuple with the PortalAllowedSubnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetPortalAllowedSubnetsOk() ([]string, bool) {
	if o == nil || IsNil(o.PortalAllowedSubnets) {
		return nil, false
	}
	return o.PortalAllowedSubnets, true
}

// HasPortalAllowedSubnets returns a boolean if a field has been set.
func (o *Wlan) HasPortalAllowedSubnets() bool {
	if o != nil && !IsNil(o.PortalAllowedSubnets) {
		return true
	}

	return false
}

// SetPortalAllowedSubnets gets a reference to the given []string and assigns it to the PortalAllowedSubnets field.
func (o *Wlan) SetPortalAllowedSubnets(v []string) {
	o.PortalAllowedSubnets = v
}

// GetPortalApiSecret returns the PortalApiSecret field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Wlan) GetPortalApiSecret() string {
	if o == nil || IsNil(o.PortalApiSecret.Get()) {
		var ret string
		return ret
	}
	return *o.PortalApiSecret.Get()
}

// GetPortalApiSecretOk returns a tuple with the PortalApiSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Wlan) GetPortalApiSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PortalApiSecret.Get(), o.PortalApiSecret.IsSet()
}

// HasPortalApiSecret returns a boolean if a field has been set.
func (o *Wlan) HasPortalApiSecret() bool {
	if o != nil && o.PortalApiSecret.IsSet() {
		return true
	}

	return false
}

// SetPortalApiSecret gets a reference to the given NullableString and assigns it to the PortalApiSecret field.
func (o *Wlan) SetPortalApiSecret(v string) {
	o.PortalApiSecret.Set(&v)
}
// SetPortalApiSecretNil sets the value for PortalApiSecret to be an explicit nil
func (o *Wlan) SetPortalApiSecretNil() {
	o.PortalApiSecret.Set(nil)
}

// UnsetPortalApiSecret ensures that no value is present for PortalApiSecret, not even an explicit nil
func (o *Wlan) UnsetPortalApiSecret() {
	o.PortalApiSecret.Unset()
}

// GetPortalDeniedHostnames returns the PortalDeniedHostnames field value if set, zero value otherwise.
func (o *Wlan) GetPortalDeniedHostnames() []string {
	if o == nil || IsNil(o.PortalDeniedHostnames) {
		var ret []string
		return ret
	}
	return o.PortalDeniedHostnames
}

// GetPortalDeniedHostnamesOk returns a tuple with the PortalDeniedHostnames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetPortalDeniedHostnamesOk() ([]string, bool) {
	if o == nil || IsNil(o.PortalDeniedHostnames) {
		return nil, false
	}
	return o.PortalDeniedHostnames, true
}

// HasPortalDeniedHostnames returns a boolean if a field has been set.
func (o *Wlan) HasPortalDeniedHostnames() bool {
	if o != nil && !IsNil(o.PortalDeniedHostnames) {
		return true
	}

	return false
}

// SetPortalDeniedHostnames gets a reference to the given []string and assigns it to the PortalDeniedHostnames field.
func (o *Wlan) SetPortalDeniedHostnames(v []string) {
	o.PortalDeniedHostnames = v
}

// GetPortalImage returns the PortalImage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Wlan) GetPortalImage() string {
	if o == nil || IsNil(o.PortalImage.Get()) {
		var ret string
		return ret
	}
	return *o.PortalImage.Get()
}

// GetPortalImageOk returns a tuple with the PortalImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Wlan) GetPortalImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PortalImage.Get(), o.PortalImage.IsSet()
}

// HasPortalImage returns a boolean if a field has been set.
func (o *Wlan) HasPortalImage() bool {
	if o != nil && o.PortalImage.IsSet() {
		return true
	}

	return false
}

// SetPortalImage gets a reference to the given NullableString and assigns it to the PortalImage field.
func (o *Wlan) SetPortalImage(v string) {
	o.PortalImage.Set(&v)
}
// SetPortalImageNil sets the value for PortalImage to be an explicit nil
func (o *Wlan) SetPortalImageNil() {
	o.PortalImage.Set(nil)
}

// UnsetPortalImage ensures that no value is present for PortalImage, not even an explicit nil
func (o *Wlan) UnsetPortalImage() {
	o.PortalImage.Unset()
}

// GetPortalSsoUrl returns the PortalSsoUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Wlan) GetPortalSsoUrl() string {
	if o == nil || IsNil(o.PortalSsoUrl.Get()) {
		var ret string
		return ret
	}
	return *o.PortalSsoUrl.Get()
}

// GetPortalSsoUrlOk returns a tuple with the PortalSsoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Wlan) GetPortalSsoUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PortalSsoUrl.Get(), o.PortalSsoUrl.IsSet()
}

// HasPortalSsoUrl returns a boolean if a field has been set.
func (o *Wlan) HasPortalSsoUrl() bool {
	if o != nil && o.PortalSsoUrl.IsSet() {
		return true
	}

	return false
}

// SetPortalSsoUrl gets a reference to the given NullableString and assigns it to the PortalSsoUrl field.
func (o *Wlan) SetPortalSsoUrl(v string) {
	o.PortalSsoUrl.Set(&v)
}
// SetPortalSsoUrlNil sets the value for PortalSsoUrl to be an explicit nil
func (o *Wlan) SetPortalSsoUrlNil() {
	o.PortalSsoUrl.Set(nil)
}

// UnsetPortalSsoUrl ensures that no value is present for PortalSsoUrl, not even an explicit nil
func (o *Wlan) UnsetPortalSsoUrl() {
	o.PortalSsoUrl.Unset()
}

// GetPortalTemplateUrl returns the PortalTemplateUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Wlan) GetPortalTemplateUrl() string {
	if o == nil || IsNil(o.PortalTemplateUrl.Get()) {
		var ret string
		return ret
	}
	return *o.PortalTemplateUrl.Get()
}

// GetPortalTemplateUrlOk returns a tuple with the PortalTemplateUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Wlan) GetPortalTemplateUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PortalTemplateUrl.Get(), o.PortalTemplateUrl.IsSet()
}

// HasPortalTemplateUrl returns a boolean if a field has been set.
func (o *Wlan) HasPortalTemplateUrl() bool {
	if o != nil && o.PortalTemplateUrl.IsSet() {
		return true
	}

	return false
}

// SetPortalTemplateUrl gets a reference to the given NullableString and assigns it to the PortalTemplateUrl field.
func (o *Wlan) SetPortalTemplateUrl(v string) {
	o.PortalTemplateUrl.Set(&v)
}
// SetPortalTemplateUrlNil sets the value for PortalTemplateUrl to be an explicit nil
func (o *Wlan) SetPortalTemplateUrlNil() {
	o.PortalTemplateUrl.Set(nil)
}

// UnsetPortalTemplateUrl ensures that no value is present for PortalTemplateUrl, not even an explicit nil
func (o *Wlan) UnsetPortalTemplateUrl() {
	o.PortalTemplateUrl.Unset()
}

// GetQos returns the Qos field value if set, zero value otherwise.
func (o *Wlan) GetQos() WlanQos {
	if o == nil || IsNil(o.Qos) {
		var ret WlanQos
		return ret
	}
	return *o.Qos
}

// GetQosOk returns a tuple with the Qos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetQosOk() (*WlanQos, bool) {
	if o == nil || IsNil(o.Qos) {
		return nil, false
	}
	return o.Qos, true
}

// HasQos returns a boolean if a field has been set.
func (o *Wlan) HasQos() bool {
	if o != nil && !IsNil(o.Qos) {
		return true
	}

	return false
}

// SetQos gets a reference to the given WlanQos and assigns it to the Qos field.
func (o *Wlan) SetQos(v WlanQos) {
	o.Qos = &v
}

// GetRadsec returns the Radsec field value if set, zero value otherwise.
func (o *Wlan) GetRadsec() Radsec {
	if o == nil || IsNil(o.Radsec) {
		var ret Radsec
		return ret
	}
	return *o.Radsec
}

// GetRadsecOk returns a tuple with the Radsec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetRadsecOk() (*Radsec, bool) {
	if o == nil || IsNil(o.Radsec) {
		return nil, false
	}
	return o.Radsec, true
}

// HasRadsec returns a boolean if a field has been set.
func (o *Wlan) HasRadsec() bool {
	if o != nil && !IsNil(o.Radsec) {
		return true
	}

	return false
}

// SetRadsec gets a reference to the given Radsec and assigns it to the Radsec field.
func (o *Wlan) SetRadsec(v Radsec) {
	o.Radsec = &v
}

// GetRateset returns the Rateset field value if set, zero value otherwise.
func (o *Wlan) GetRateset() WlanRateset {
	if o == nil || IsNil(o.Rateset) {
		var ret WlanRateset
		return ret
	}
	return *o.Rateset
}

// GetRatesetOk returns a tuple with the Rateset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetRatesetOk() (*WlanRateset, bool) {
	if o == nil || IsNil(o.Rateset) {
		return nil, false
	}
	return o.Rateset, true
}

// HasRateset returns a boolean if a field has been set.
func (o *Wlan) HasRateset() bool {
	if o != nil && !IsNil(o.Rateset) {
		return true
	}

	return false
}

// SetRateset gets a reference to the given WlanRateset and assigns it to the Rateset field.
func (o *Wlan) SetRateset(v WlanRateset) {
	o.Rateset = &v
}

// GetRoamMode returns the RoamMode field value if set, zero value otherwise.
func (o *Wlan) GetRoamMode() WlanRoamMode {
	if o == nil || IsNil(o.RoamMode) {
		var ret WlanRoamMode
		return ret
	}
	return *o.RoamMode
}

// GetRoamModeOk returns a tuple with the RoamMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetRoamModeOk() (*WlanRoamMode, bool) {
	if o == nil || IsNil(o.RoamMode) {
		return nil, false
	}
	return o.RoamMode, true
}

// HasRoamMode returns a boolean if a field has been set.
func (o *Wlan) HasRoamMode() bool {
	if o != nil && !IsNil(o.RoamMode) {
		return true
	}

	return false
}

// SetRoamMode gets a reference to the given WlanRoamMode and assigns it to the RoamMode field.
func (o *Wlan) SetRoamMode(v WlanRoamMode) {
	o.RoamMode = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *Wlan) GetSchedule() WlanSchedule {
	if o == nil || IsNil(o.Schedule) {
		var ret WlanSchedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetScheduleOk() (*WlanSchedule, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *Wlan) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given WlanSchedule and assigns it to the Schedule field.
func (o *Wlan) SetSchedule(v WlanSchedule) {
	o.Schedule = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *Wlan) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *Wlan) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *Wlan) SetSiteId(v string) {
	o.SiteId = &v
}

// GetSleExcluded returns the SleExcluded field value if set, zero value otherwise.
func (o *Wlan) GetSleExcluded() bool {
	if o == nil || IsNil(o.SleExcluded) {
		var ret bool
		return ret
	}
	return *o.SleExcluded
}

// GetSleExcludedOk returns a tuple with the SleExcluded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetSleExcludedOk() (*bool, bool) {
	if o == nil || IsNil(o.SleExcluded) {
		return nil, false
	}
	return o.SleExcluded, true
}

// HasSleExcluded returns a boolean if a field has been set.
func (o *Wlan) HasSleExcluded() bool {
	if o != nil && !IsNil(o.SleExcluded) {
		return true
	}

	return false
}

// SetSleExcluded gets a reference to the given bool and assigns it to the SleExcluded field.
func (o *Wlan) SetSleExcluded(v bool) {
	o.SleExcluded = &v
}

// GetSsid returns the Ssid field value
func (o *Wlan) GetSsid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ssid
}

// GetSsidOk returns a tuple with the Ssid field value
// and a boolean to check if the value has been set.
func (o *Wlan) GetSsidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ssid, true
}

// SetSsid sets field value
func (o *Wlan) SetSsid(v string) {
	o.Ssid = v
}

// GetTemplateId returns the TemplateId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Wlan) GetTemplateId() string {
	if o == nil || IsNil(o.TemplateId.Get()) {
		var ret string
		return ret
	}
	return *o.TemplateId.Get()
}

// GetTemplateIdOk returns a tuple with the TemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Wlan) GetTemplateIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TemplateId.Get(), o.TemplateId.IsSet()
}

// HasTemplateId returns a boolean if a field has been set.
func (o *Wlan) HasTemplateId() bool {
	if o != nil && o.TemplateId.IsSet() {
		return true
	}

	return false
}

// SetTemplateId gets a reference to the given NullableString and assigns it to the TemplateId field.
func (o *Wlan) SetTemplateId(v string) {
	o.TemplateId.Set(&v)
}
// SetTemplateIdNil sets the value for TemplateId to be an explicit nil
func (o *Wlan) SetTemplateIdNil() {
	o.TemplateId.Set(nil)
}

// UnsetTemplateId ensures that no value is present for TemplateId, not even an explicit nil
func (o *Wlan) UnsetTemplateId() {
	o.TemplateId.Unset()
}

// GetThumbnail returns the Thumbnail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Wlan) GetThumbnail() string {
	if o == nil || IsNil(o.Thumbnail.Get()) {
		var ret string
		return ret
	}
	return *o.Thumbnail.Get()
}

// GetThumbnailOk returns a tuple with the Thumbnail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Wlan) GetThumbnailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Thumbnail.Get(), o.Thumbnail.IsSet()
}

// HasThumbnail returns a boolean if a field has been set.
func (o *Wlan) HasThumbnail() bool {
	if o != nil && o.Thumbnail.IsSet() {
		return true
	}

	return false
}

// SetThumbnail gets a reference to the given NullableString and assigns it to the Thumbnail field.
func (o *Wlan) SetThumbnail(v string) {
	o.Thumbnail.Set(&v)
}
// SetThumbnailNil sets the value for Thumbnail to be an explicit nil
func (o *Wlan) SetThumbnailNil() {
	o.Thumbnail.Set(nil)
}

// UnsetThumbnail ensures that no value is present for Thumbnail, not even an explicit nil
func (o *Wlan) UnsetThumbnail() {
	o.Thumbnail.Unset()
}

// GetUseEapolV1 returns the UseEapolV1 field value if set, zero value otherwise.
func (o *Wlan) GetUseEapolV1() bool {
	if o == nil || IsNil(o.UseEapolV1) {
		var ret bool
		return ret
	}
	return *o.UseEapolV1
}

// GetUseEapolV1Ok returns a tuple with the UseEapolV1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetUseEapolV1Ok() (*bool, bool) {
	if o == nil || IsNil(o.UseEapolV1) {
		return nil, false
	}
	return o.UseEapolV1, true
}

// HasUseEapolV1 returns a boolean if a field has been set.
func (o *Wlan) HasUseEapolV1() bool {
	if o != nil && !IsNil(o.UseEapolV1) {
		return true
	}

	return false
}

// SetUseEapolV1 gets a reference to the given bool and assigns it to the UseEapolV1 field.
func (o *Wlan) SetUseEapolV1(v bool) {
	o.UseEapolV1 = &v
}

// GetVlanEnabled returns the VlanEnabled field value if set, zero value otherwise.
func (o *Wlan) GetVlanEnabled() bool {
	if o == nil || IsNil(o.VlanEnabled) {
		var ret bool
		return ret
	}
	return *o.VlanEnabled
}

// GetVlanEnabledOk returns a tuple with the VlanEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetVlanEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.VlanEnabled) {
		return nil, false
	}
	return o.VlanEnabled, true
}

// HasVlanEnabled returns a boolean if a field has been set.
func (o *Wlan) HasVlanEnabled() bool {
	if o != nil && !IsNil(o.VlanEnabled) {
		return true
	}

	return false
}

// SetVlanEnabled gets a reference to the given bool and assigns it to the VlanEnabled field.
func (o *Wlan) SetVlanEnabled(v bool) {
	o.VlanEnabled = &v
}

// GetVlanId returns the VlanId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Wlan) GetVlanId() int32 {
	if o == nil || IsNil(o.VlanId.Get()) {
		var ret int32
		return ret
	}
	return *o.VlanId.Get()
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Wlan) GetVlanIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.VlanId.Get(), o.VlanId.IsSet()
}

// HasVlanId returns a boolean if a field has been set.
func (o *Wlan) HasVlanId() bool {
	if o != nil && o.VlanId.IsSet() {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given NullableInt32 and assigns it to the VlanId field.
func (o *Wlan) SetVlanId(v int32) {
	o.VlanId.Set(&v)
}
// SetVlanIdNil sets the value for VlanId to be an explicit nil
func (o *Wlan) SetVlanIdNil() {
	o.VlanId.Set(nil)
}

// UnsetVlanId ensures that no value is present for VlanId, not even an explicit nil
func (o *Wlan) UnsetVlanId() {
	o.VlanId.Unset()
}

// GetVlanIds returns the VlanIds field value if set, zero value otherwise.
func (o *Wlan) GetVlanIds() []*int32 {
	if o == nil || IsNil(o.VlanIds) {
		var ret []*int32
		return ret
	}
	return o.VlanIds
}

// GetVlanIdsOk returns a tuple with the VlanIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetVlanIdsOk() ([]*int32, bool) {
	if o == nil || IsNil(o.VlanIds) {
		return nil, false
	}
	return o.VlanIds, true
}

// HasVlanIds returns a boolean if a field has been set.
func (o *Wlan) HasVlanIds() bool {
	if o != nil && !IsNil(o.VlanIds) {
		return true
	}

	return false
}

// SetVlanIds gets a reference to the given []*int32 and assigns it to the VlanIds field.
func (o *Wlan) SetVlanIds(v []*int32) {
	o.VlanIds = v
}

// GetVlanPooling returns the VlanPooling field value if set, zero value otherwise.
func (o *Wlan) GetVlanPooling() bool {
	if o == nil || IsNil(o.VlanPooling) {
		var ret bool
		return ret
	}
	return *o.VlanPooling
}

// GetVlanPoolingOk returns a tuple with the VlanPooling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetVlanPoolingOk() (*bool, bool) {
	if o == nil || IsNil(o.VlanPooling) {
		return nil, false
	}
	return o.VlanPooling, true
}

// HasVlanPooling returns a boolean if a field has been set.
func (o *Wlan) HasVlanPooling() bool {
	if o != nil && !IsNil(o.VlanPooling) {
		return true
	}

	return false
}

// SetVlanPooling gets a reference to the given bool and assigns it to the VlanPooling field.
func (o *Wlan) SetVlanPooling(v bool) {
	o.VlanPooling = &v
}

// GetWlanLimitDown returns the WlanLimitDown field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Wlan) GetWlanLimitDown() int32 {
	if o == nil || IsNil(o.WlanLimitDown.Get()) {
		var ret int32
		return ret
	}
	return *o.WlanLimitDown.Get()
}

// GetWlanLimitDownOk returns a tuple with the WlanLimitDown field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Wlan) GetWlanLimitDownOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WlanLimitDown.Get(), o.WlanLimitDown.IsSet()
}

// HasWlanLimitDown returns a boolean if a field has been set.
func (o *Wlan) HasWlanLimitDown() bool {
	if o != nil && o.WlanLimitDown.IsSet() {
		return true
	}

	return false
}

// SetWlanLimitDown gets a reference to the given NullableInt32 and assigns it to the WlanLimitDown field.
func (o *Wlan) SetWlanLimitDown(v int32) {
	o.WlanLimitDown.Set(&v)
}
// SetWlanLimitDownNil sets the value for WlanLimitDown to be an explicit nil
func (o *Wlan) SetWlanLimitDownNil() {
	o.WlanLimitDown.Set(nil)
}

// UnsetWlanLimitDown ensures that no value is present for WlanLimitDown, not even an explicit nil
func (o *Wlan) UnsetWlanLimitDown() {
	o.WlanLimitDown.Unset()
}

// GetWlanLimitDownEnabled returns the WlanLimitDownEnabled field value if set, zero value otherwise.
func (o *Wlan) GetWlanLimitDownEnabled() bool {
	if o == nil || IsNil(o.WlanLimitDownEnabled) {
		var ret bool
		return ret
	}
	return *o.WlanLimitDownEnabled
}

// GetWlanLimitDownEnabledOk returns a tuple with the WlanLimitDownEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetWlanLimitDownEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.WlanLimitDownEnabled) {
		return nil, false
	}
	return o.WlanLimitDownEnabled, true
}

// HasWlanLimitDownEnabled returns a boolean if a field has been set.
func (o *Wlan) HasWlanLimitDownEnabled() bool {
	if o != nil && !IsNil(o.WlanLimitDownEnabled) {
		return true
	}

	return false
}

// SetWlanLimitDownEnabled gets a reference to the given bool and assigns it to the WlanLimitDownEnabled field.
func (o *Wlan) SetWlanLimitDownEnabled(v bool) {
	o.WlanLimitDownEnabled = &v
}

// GetWlanLimitUp returns the WlanLimitUp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Wlan) GetWlanLimitUp() int32 {
	if o == nil || IsNil(o.WlanLimitUp.Get()) {
		var ret int32
		return ret
	}
	return *o.WlanLimitUp.Get()
}

// GetWlanLimitUpOk returns a tuple with the WlanLimitUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Wlan) GetWlanLimitUpOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WlanLimitUp.Get(), o.WlanLimitUp.IsSet()
}

// HasWlanLimitUp returns a boolean if a field has been set.
func (o *Wlan) HasWlanLimitUp() bool {
	if o != nil && o.WlanLimitUp.IsSet() {
		return true
	}

	return false
}

// SetWlanLimitUp gets a reference to the given NullableInt32 and assigns it to the WlanLimitUp field.
func (o *Wlan) SetWlanLimitUp(v int32) {
	o.WlanLimitUp.Set(&v)
}
// SetWlanLimitUpNil sets the value for WlanLimitUp to be an explicit nil
func (o *Wlan) SetWlanLimitUpNil() {
	o.WlanLimitUp.Set(nil)
}

// UnsetWlanLimitUp ensures that no value is present for WlanLimitUp, not even an explicit nil
func (o *Wlan) UnsetWlanLimitUp() {
	o.WlanLimitUp.Unset()
}

// GetWlanLimitUpEnabled returns the WlanLimitUpEnabled field value if set, zero value otherwise.
func (o *Wlan) GetWlanLimitUpEnabled() bool {
	if o == nil || IsNil(o.WlanLimitUpEnabled) {
		var ret bool
		return ret
	}
	return *o.WlanLimitUpEnabled
}

// GetWlanLimitUpEnabledOk returns a tuple with the WlanLimitUpEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wlan) GetWlanLimitUpEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.WlanLimitUpEnabled) {
		return nil, false
	}
	return o.WlanLimitUpEnabled, true
}

// HasWlanLimitUpEnabled returns a boolean if a field has been set.
func (o *Wlan) HasWlanLimitUpEnabled() bool {
	if o != nil && !IsNil(o.WlanLimitUpEnabled) {
		return true
	}

	return false
}

// SetWlanLimitUpEnabled gets a reference to the given bool and assigns it to the WlanLimitUpEnabled field.
func (o *Wlan) SetWlanLimitUpEnabled(v bool) {
	o.WlanLimitUpEnabled = &v
}

// GetWxtagIds returns the WxtagIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Wlan) GetWxtagIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.WxtagIds
}

// GetWxtagIdsOk returns a tuple with the WxtagIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Wlan) GetWxtagIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.WxtagIds) {
		return nil, false
	}
	return o.WxtagIds, true
}

// HasWxtagIds returns a boolean if a field has been set.
func (o *Wlan) HasWxtagIds() bool {
	if o != nil && !IsNil(o.WxtagIds) {
		return true
	}

	return false
}

// SetWxtagIds gets a reference to the given []string and assigns it to the WxtagIds field.
func (o *Wlan) SetWxtagIds(v []string) {
	o.WxtagIds = v
}

// GetWxtunnelId returns the WxtunnelId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Wlan) GetWxtunnelId() string {
	if o == nil || IsNil(o.WxtunnelId.Get()) {
		var ret string
		return ret
	}
	return *o.WxtunnelId.Get()
}

// GetWxtunnelIdOk returns a tuple with the WxtunnelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Wlan) GetWxtunnelIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WxtunnelId.Get(), o.WxtunnelId.IsSet()
}

// HasWxtunnelId returns a boolean if a field has been set.
func (o *Wlan) HasWxtunnelId() bool {
	if o != nil && o.WxtunnelId.IsSet() {
		return true
	}

	return false
}

// SetWxtunnelId gets a reference to the given NullableString and assigns it to the WxtunnelId field.
func (o *Wlan) SetWxtunnelId(v string) {
	o.WxtunnelId.Set(&v)
}
// SetWxtunnelIdNil sets the value for WxtunnelId to be an explicit nil
func (o *Wlan) SetWxtunnelIdNil() {
	o.WxtunnelId.Set(nil)
}

// UnsetWxtunnelId ensures that no value is present for WxtunnelId, not even an explicit nil
func (o *Wlan) UnsetWxtunnelId() {
	o.WxtunnelId.Unset()
}

// GetWxtunnelRemoteId returns the WxtunnelRemoteId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Wlan) GetWxtunnelRemoteId() string {
	if o == nil || IsNil(o.WxtunnelRemoteId.Get()) {
		var ret string
		return ret
	}
	return *o.WxtunnelRemoteId.Get()
}

// GetWxtunnelRemoteIdOk returns a tuple with the WxtunnelRemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Wlan) GetWxtunnelRemoteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WxtunnelRemoteId.Get(), o.WxtunnelRemoteId.IsSet()
}

// HasWxtunnelRemoteId returns a boolean if a field has been set.
func (o *Wlan) HasWxtunnelRemoteId() bool {
	if o != nil && o.WxtunnelRemoteId.IsSet() {
		return true
	}

	return false
}

// SetWxtunnelRemoteId gets a reference to the given NullableString and assigns it to the WxtunnelRemoteId field.
func (o *Wlan) SetWxtunnelRemoteId(v string) {
	o.WxtunnelRemoteId.Set(&v)
}
// SetWxtunnelRemoteIdNil sets the value for WxtunnelRemoteId to be an explicit nil
func (o *Wlan) SetWxtunnelRemoteIdNil() {
	o.WxtunnelRemoteId.Set(nil)
}

// UnsetWxtunnelRemoteId ensures that no value is present for WxtunnelRemoteId, not even an explicit nil
func (o *Wlan) UnsetWxtunnelRemoteId() {
	o.WxtunnelRemoteId.Unset()
}

func (o Wlan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Wlan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AcctImmediateUpdate) {
		toSerialize["acct_immediate_update"] = o.AcctImmediateUpdate
	}
	if !IsNil(o.AcctInterimInterval) {
		toSerialize["acct_interim_interval"] = o.AcctInterimInterval
	}
	if !IsNil(o.AcctServers) {
		toSerialize["acct_servers"] = o.AcctServers
	}
	if !IsNil(o.Airwatch) {
		toSerialize["airwatch"] = o.Airwatch
	}
	if !IsNil(o.AllowIpv6Ndp) {
		toSerialize["allow_ipv6_ndp"] = o.AllowIpv6Ndp
	}
	if !IsNil(o.AllowMdns) {
		toSerialize["allow_mdns"] = o.AllowMdns
	}
	if !IsNil(o.AllowSsdp) {
		toSerialize["allow_ssdp"] = o.AllowSsdp
	}
	if o.ApIds != nil {
		toSerialize["ap_ids"] = o.ApIds
	}
	if !IsNil(o.AppLimit) {
		toSerialize["app_limit"] = o.AppLimit
	}
	if !IsNil(o.AppQos) {
		toSerialize["app_qos"] = o.AppQos
	}
	if !IsNil(o.ApplyTo) {
		toSerialize["apply_to"] = o.ApplyTo
	}
	if !IsNil(o.ArpFilter) {
		toSerialize["arp_filter"] = o.ArpFilter
	}
	if !IsNil(o.Auth) {
		toSerialize["auth"] = o.Auth
	}
	if !IsNil(o.AuthServerSelection) {
		toSerialize["auth_server_selection"] = o.AuthServerSelection
	}
	if !IsNil(o.AuthServers) {
		toSerialize["auth_servers"] = o.AuthServers
	}
	if o.AuthServersNasId.IsSet() {
		toSerialize["auth_servers_nas_id"] = o.AuthServersNasId.Get()
	}
	if o.AuthServersNasIp.IsSet() {
		toSerialize["auth_servers_nas_ip"] = o.AuthServersNasIp.Get()
	}
	if !IsNil(o.AuthServersRetries) {
		toSerialize["auth_servers_retries"] = o.AuthServersRetries
	}
	if !IsNil(o.AuthServersTimeout) {
		toSerialize["auth_servers_timeout"] = o.AuthServersTimeout
	}
	if !IsNil(o.Band) {
		toSerialize["band"] = o.Band
	}
	if !IsNil(o.BandSteer) {
		toSerialize["band_steer"] = o.BandSteer
	}
	if !IsNil(o.BandSteerForceBand5) {
		toSerialize["band_steer_force_band5"] = o.BandSteerForceBand5
	}
	if !IsNil(o.Bands) {
		toSerialize["bands"] = o.Bands
	}
	if !IsNil(o.BlockBlacklistClients) {
		toSerialize["block_blacklist_clients"] = o.BlockBlacklistClients
	}
	if !IsNil(o.Bonjour) {
		toSerialize["bonjour"] = o.Bonjour
	}
	if !IsNil(o.CiscoCwa) {
		toSerialize["cisco_cwa"] = o.CiscoCwa
	}
	if !IsNil(o.ClientLimitDown) {
		toSerialize["client_limit_down"] = o.ClientLimitDown
	}
	if !IsNil(o.ClientLimitDownEnabled) {
		toSerialize["client_limit_down_enabled"] = o.ClientLimitDownEnabled
	}
	if !IsNil(o.ClientLimitUp) {
		toSerialize["client_limit_up"] = o.ClientLimitUp
	}
	if !IsNil(o.ClientLimitUpEnabled) {
		toSerialize["client_limit_up_enabled"] = o.ClientLimitUpEnabled
	}
	if o.CoaServers != nil {
		toSerialize["coa_servers"] = o.CoaServers
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.Disable11ax) {
		toSerialize["disable_11ax"] = o.Disable11ax
	}
	if !IsNil(o.DisableHtVhtRates) {
		toSerialize["disable_ht_vht_rates"] = o.DisableHtVhtRates
	}
	if !IsNil(o.DisableUapsd) {
		toSerialize["disable_uapsd"] = o.DisableUapsd
	}
	if !IsNil(o.DisableV1RoamNotify) {
		toSerialize["disable_v1_roam_notify"] = o.DisableV1RoamNotify
	}
	if !IsNil(o.DisableV2RoamNotify) {
		toSerialize["disable_v2_roam_notify"] = o.DisableV2RoamNotify
	}
	if !IsNil(o.DisableWmm) {
		toSerialize["disable_wmm"] = o.DisableWmm
	}
	if o.DnsServerRewrite.IsSet() {
		toSerialize["dns_server_rewrite"] = o.DnsServerRewrite.Get()
	}
	if !IsNil(o.Dtim) {
		toSerialize["dtim"] = o.Dtim
	}
	if o.DynamicPsk.IsSet() {
		toSerialize["dynamic_psk"] = o.DynamicPsk.Get()
	}
	if o.DynamicVlan.IsSet() {
		toSerialize["dynamic_vlan"] = o.DynamicVlan.Get()
	}
	if !IsNil(o.EnableLocalKeycaching) {
		toSerialize["enable_local_keycaching"] = o.EnableLocalKeycaching
	}
	if !IsNil(o.EnableWirelessBridging) {
		toSerialize["enable_wireless_bridging"] = o.EnableWirelessBridging
	}
	if !IsNil(o.EnableWirelessBridgingDhcpTracking) {
		toSerialize["enable_wireless_bridging_dhcp_tracking"] = o.EnableWirelessBridgingDhcpTracking
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.FastDot1xTimers) {
		toSerialize["fast_dot1x_timers"] = o.FastDot1xTimers
	}
	if !IsNil(o.ForSite) {
		toSerialize["for_site"] = o.ForSite
	}
	if !IsNil(o.HideSsid) {
		toSerialize["hide_ssid"] = o.HideSsid
	}
	if !IsNil(o.HostnameIe) {
		toSerialize["hostname_ie"] = o.HostnameIe
	}
	if !IsNil(o.Hotspot20) {
		toSerialize["hotspot20"] = o.Hotspot20
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InjectDhcpOption82) {
		toSerialize["inject_dhcp_option_82"] = o.InjectDhcpOption82
	}
	if !IsNil(o.Interface) {
		toSerialize["interface"] = o.Interface
	}
	if !IsNil(o.Isolation) {
		toSerialize["isolation"] = o.Isolation
	}
	if !IsNil(o.L2Isolation) {
		toSerialize["l2_isolation"] = o.L2Isolation
	}
	if !IsNil(o.LegacyOverds) {
		toSerialize["legacy_overds"] = o.LegacyOverds
	}
	if !IsNil(o.LimitBcast) {
		toSerialize["limit_bcast"] = o.LimitBcast
	}
	if !IsNil(o.LimitProbeResponse) {
		toSerialize["limit_probe_response"] = o.LimitProbeResponse
	}
	if !IsNil(o.MaxIdletime) {
		toSerialize["max_idletime"] = o.MaxIdletime
	}
	if !IsNil(o.MistNac) {
		toSerialize["mist_nac"] = o.MistNac
	}
	if !IsNil(o.ModifiedTime) {
		toSerialize["modified_time"] = o.ModifiedTime
	}
	if !IsNil(o.MspId) {
		toSerialize["msp_id"] = o.MspId
	}
	if !IsNil(o.MxtunnelId) {
		toSerialize["mxtunnel_id"] = o.MxtunnelId
	}
	if !IsNil(o.MxtunnelIds) {
		toSerialize["mxtunnel_ids"] = o.MxtunnelIds
	}
	if !IsNil(o.MxtunnelName) {
		toSerialize["mxtunnel_name"] = o.MxtunnelName
	}
	if !IsNil(o.NoStaticDns) {
		toSerialize["no_static_dns"] = o.NoStaticDns
	}
	if !IsNil(o.NoStaticIp) {
		toSerialize["no_static_ip"] = o.NoStaticIp
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.Portal) {
		toSerialize["portal"] = o.Portal
	}
	if !IsNil(o.PortalAllowedHostnames) {
		toSerialize["portal_allowed_hostnames"] = o.PortalAllowedHostnames
	}
	if !IsNil(o.PortalAllowedSubnets) {
		toSerialize["portal_allowed_subnets"] = o.PortalAllowedSubnets
	}
	if o.PortalApiSecret.IsSet() {
		toSerialize["portal_api_secret"] = o.PortalApiSecret.Get()
	}
	if !IsNil(o.PortalDeniedHostnames) {
		toSerialize["portal_denied_hostnames"] = o.PortalDeniedHostnames
	}
	if o.PortalImage.IsSet() {
		toSerialize["portal_image"] = o.PortalImage.Get()
	}
	if o.PortalSsoUrl.IsSet() {
		toSerialize["portal_sso_url"] = o.PortalSsoUrl.Get()
	}
	if o.PortalTemplateUrl.IsSet() {
		toSerialize["portal_template_url"] = o.PortalTemplateUrl.Get()
	}
	if !IsNil(o.Qos) {
		toSerialize["qos"] = o.Qos
	}
	if !IsNil(o.Radsec) {
		toSerialize["radsec"] = o.Radsec
	}
	if !IsNil(o.Rateset) {
		toSerialize["rateset"] = o.Rateset
	}
	if !IsNil(o.RoamMode) {
		toSerialize["roam_mode"] = o.RoamMode
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	if !IsNil(o.SleExcluded) {
		toSerialize["sle_excluded"] = o.SleExcluded
	}
	toSerialize["ssid"] = o.Ssid
	if o.TemplateId.IsSet() {
		toSerialize["template_id"] = o.TemplateId.Get()
	}
	if o.Thumbnail.IsSet() {
		toSerialize["thumbnail"] = o.Thumbnail.Get()
	}
	if !IsNil(o.UseEapolV1) {
		toSerialize["use_eapol_v1"] = o.UseEapolV1
	}
	if !IsNil(o.VlanEnabled) {
		toSerialize["vlan_enabled"] = o.VlanEnabled
	}
	if o.VlanId.IsSet() {
		toSerialize["vlan_id"] = o.VlanId.Get()
	}
	if !IsNil(o.VlanIds) {
		toSerialize["vlan_ids"] = o.VlanIds
	}
	if !IsNil(o.VlanPooling) {
		toSerialize["vlan_pooling"] = o.VlanPooling
	}
	if o.WlanLimitDown.IsSet() {
		toSerialize["wlan_limit_down"] = o.WlanLimitDown.Get()
	}
	if !IsNil(o.WlanLimitDownEnabled) {
		toSerialize["wlan_limit_down_enabled"] = o.WlanLimitDownEnabled
	}
	if o.WlanLimitUp.IsSet() {
		toSerialize["wlan_limit_up"] = o.WlanLimitUp.Get()
	}
	if !IsNil(o.WlanLimitUpEnabled) {
		toSerialize["wlan_limit_up_enabled"] = o.WlanLimitUpEnabled
	}
	if o.WxtagIds != nil {
		toSerialize["wxtag_ids"] = o.WxtagIds
	}
	if o.WxtunnelId.IsSet() {
		toSerialize["wxtunnel_id"] = o.WxtunnelId.Get()
	}
	if o.WxtunnelRemoteId.IsSet() {
		toSerialize["wxtunnel_remote_id"] = o.WxtunnelRemoteId.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Wlan) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ssid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWlan := _Wlan{}

	err = json.Unmarshal(data, &varWlan)

	if err != nil {
		return err
	}

	*o = Wlan(varWlan)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "acct_immediate_update")
		delete(additionalProperties, "acct_interim_interval")
		delete(additionalProperties, "acct_servers")
		delete(additionalProperties, "airwatch")
		delete(additionalProperties, "allow_ipv6_ndp")
		delete(additionalProperties, "allow_mdns")
		delete(additionalProperties, "allow_ssdp")
		delete(additionalProperties, "ap_ids")
		delete(additionalProperties, "app_limit")
		delete(additionalProperties, "app_qos")
		delete(additionalProperties, "apply_to")
		delete(additionalProperties, "arp_filter")
		delete(additionalProperties, "auth")
		delete(additionalProperties, "auth_server_selection")
		delete(additionalProperties, "auth_servers")
		delete(additionalProperties, "auth_servers_nas_id")
		delete(additionalProperties, "auth_servers_nas_ip")
		delete(additionalProperties, "auth_servers_retries")
		delete(additionalProperties, "auth_servers_timeout")
		delete(additionalProperties, "band")
		delete(additionalProperties, "band_steer")
		delete(additionalProperties, "band_steer_force_band5")
		delete(additionalProperties, "bands")
		delete(additionalProperties, "block_blacklist_clients")
		delete(additionalProperties, "bonjour")
		delete(additionalProperties, "cisco_cwa")
		delete(additionalProperties, "client_limit_down")
		delete(additionalProperties, "client_limit_down_enabled")
		delete(additionalProperties, "client_limit_up")
		delete(additionalProperties, "client_limit_up_enabled")
		delete(additionalProperties, "coa_servers")
		delete(additionalProperties, "created_time")
		delete(additionalProperties, "disable_11ax")
		delete(additionalProperties, "disable_ht_vht_rates")
		delete(additionalProperties, "disable_uapsd")
		delete(additionalProperties, "disable_v1_roam_notify")
		delete(additionalProperties, "disable_v2_roam_notify")
		delete(additionalProperties, "disable_wmm")
		delete(additionalProperties, "dns_server_rewrite")
		delete(additionalProperties, "dtim")
		delete(additionalProperties, "dynamic_psk")
		delete(additionalProperties, "dynamic_vlan")
		delete(additionalProperties, "enable_local_keycaching")
		delete(additionalProperties, "enable_wireless_bridging")
		delete(additionalProperties, "enable_wireless_bridging_dhcp_tracking")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "fast_dot1x_timers")
		delete(additionalProperties, "for_site")
		delete(additionalProperties, "hide_ssid")
		delete(additionalProperties, "hostname_ie")
		delete(additionalProperties, "hotspot20")
		delete(additionalProperties, "id")
		delete(additionalProperties, "inject_dhcp_option_82")
		delete(additionalProperties, "interface")
		delete(additionalProperties, "isolation")
		delete(additionalProperties, "l2_isolation")
		delete(additionalProperties, "legacy_overds")
		delete(additionalProperties, "limit_bcast")
		delete(additionalProperties, "limit_probe_response")
		delete(additionalProperties, "max_idletime")
		delete(additionalProperties, "mist_nac")
		delete(additionalProperties, "modified_time")
		delete(additionalProperties, "msp_id")
		delete(additionalProperties, "mxtunnel_id")
		delete(additionalProperties, "mxtunnel_ids")
		delete(additionalProperties, "mxtunnel_name")
		delete(additionalProperties, "no_static_dns")
		delete(additionalProperties, "no_static_ip")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "portal")
		delete(additionalProperties, "portal_allowed_hostnames")
		delete(additionalProperties, "portal_allowed_subnets")
		delete(additionalProperties, "portal_api_secret")
		delete(additionalProperties, "portal_denied_hostnames")
		delete(additionalProperties, "portal_image")
		delete(additionalProperties, "portal_sso_url")
		delete(additionalProperties, "portal_template_url")
		delete(additionalProperties, "qos")
		delete(additionalProperties, "radsec")
		delete(additionalProperties, "rateset")
		delete(additionalProperties, "roam_mode")
		delete(additionalProperties, "schedule")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "sle_excluded")
		delete(additionalProperties, "ssid")
		delete(additionalProperties, "template_id")
		delete(additionalProperties, "thumbnail")
		delete(additionalProperties, "use_eapol_v1")
		delete(additionalProperties, "vlan_enabled")
		delete(additionalProperties, "vlan_id")
		delete(additionalProperties, "vlan_ids")
		delete(additionalProperties, "vlan_pooling")
		delete(additionalProperties, "wlan_limit_down")
		delete(additionalProperties, "wlan_limit_down_enabled")
		delete(additionalProperties, "wlan_limit_up")
		delete(additionalProperties, "wlan_limit_up_enabled")
		delete(additionalProperties, "wxtag_ids")
		delete(additionalProperties, "wxtunnel_id")
		delete(additionalProperties, "wxtunnel_remote_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWlan struct {
	value *Wlan
	isSet bool
}

func (v NullableWlan) Get() *Wlan {
	return v.value
}

func (v *NullableWlan) Set(val *Wlan) {
	v.value = val
	v.isSet = true
}

func (v NullableWlan) IsSet() bool {
	return v.isSet
}

func (v *NullableWlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWlan(val *Wlan) *NullableWlan {
	return &NullableWlan{value: val, isSet: true}
}

func (v NullableWlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


