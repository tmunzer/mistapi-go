/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the DeviceVersionItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceVersionItem{}

// DeviceVersionItem struct for DeviceVersionItem
type DeviceVersionItem struct {
	// Device model (as seen in the device stats)
	Model string `json:"model"`
	// annotation, stable / beta / alpha. Or it can be empty or nothing which is likely a dev build
	Tag *string `json:"tag,omitempty"`
	// firmware version
	Version string `json:"version"`
	AdditionalProperties map[string]interface{}
}

type _DeviceVersionItem DeviceVersionItem

// NewDeviceVersionItem instantiates a new DeviceVersionItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceVersionItem(model string, version string) *DeviceVersionItem {
	this := DeviceVersionItem{}
	this.Model = model
	this.Version = version
	return &this
}

// NewDeviceVersionItemWithDefaults instantiates a new DeviceVersionItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceVersionItemWithDefaults() *DeviceVersionItem {
	this := DeviceVersionItem{}
	return &this
}

// GetModel returns the Model field value
func (o *DeviceVersionItem) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *DeviceVersionItem) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *DeviceVersionItem) SetModel(v string) {
	o.Model = v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *DeviceVersionItem) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceVersionItem) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *DeviceVersionItem) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *DeviceVersionItem) SetTag(v string) {
	o.Tag = &v
}

// GetVersion returns the Version field value
func (o *DeviceVersionItem) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *DeviceVersionItem) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *DeviceVersionItem) SetVersion(v string) {
	o.Version = v
}

func (o DeviceVersionItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceVersionItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["model"] = o.Model
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	toSerialize["version"] = o.Version

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceVersionItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"model",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceVersionItem := _DeviceVersionItem{}

	err = json.Unmarshal(data, &varDeviceVersionItem)

	if err != nil {
		return err
	}

	*o = DeviceVersionItem(varDeviceVersionItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "model")
		delete(additionalProperties, "tag")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceVersionItem struct {
	value *DeviceVersionItem
	isSet bool
}

func (v NullableDeviceVersionItem) Get() *DeviceVersionItem {
	return v.value
}

func (v *NullableDeviceVersionItem) Set(val *DeviceVersionItem) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceVersionItem) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceVersionItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceVersionItem(val *DeviceVersionItem) *NullableDeviceVersionItem {
	return &NullableDeviceVersionItem{value: val, isSet: true}
}

func (v NullableDeviceVersionItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceVersionItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


