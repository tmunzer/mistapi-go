/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// SiteNacClientsCountDistinct the model 'SiteNacClientsCountDistinct'
type SiteNacClientsCountDistinct string

// List of site_nac_clients_count_distinct
const (
	SITENACCLIENTSCOUNTDISTINCT_EMPTY SiteNacClientsCountDistinct = ""
	SITENACCLIENTSCOUNTDISTINCT_TYPE SiteNacClientsCountDistinct = "type"
	SITENACCLIENTSCOUNTDISTINCT_LAST_NACRULE_ID SiteNacClientsCountDistinct = "last_nacrule_id"
	SITENACCLIENTSCOUNTDISTINCT_AUTH_TYPE SiteNacClientsCountDistinct = "auth_type"
	SITENACCLIENTSCOUNTDISTINCT_LAST_VLAN SiteNacClientsCountDistinct = "last_vlan"
	SITENACCLIENTSCOUNTDISTINCT_LAST_NAS_VENDOR SiteNacClientsCountDistinct = "last_nas_vendor"
	SITENACCLIENTSCOUNTDISTINCT_LAST_USERNAME SiteNacClientsCountDistinct = "last_username"
	SITENACCLIENTSCOUNTDISTINCT_LAST_AP SiteNacClientsCountDistinct = "last_ap"
	SITENACCLIENTSCOUNTDISTINCT_MAC SiteNacClientsCountDistinct = "mac"
	SITENACCLIENTSCOUNTDISTINCT_LAST_SSID SiteNacClientsCountDistinct = "last_ssid"
	SITENACCLIENTSCOUNTDISTINCT_LAST_STATUS SiteNacClientsCountDistinct = "last_status"
	SITENACCLIENTSCOUNTDISTINCT_MDM_COMPLIANCE SiteNacClientsCountDistinct = "mdm_compliance"
	SITENACCLIENTSCOUNTDISTINCT_MDM_PROVIDER SiteNacClientsCountDistinct = "mdm_provider"
)

// All allowed values of SiteNacClientsCountDistinct enum
var AllowedSiteNacClientsCountDistinctEnumValues = []SiteNacClientsCountDistinct{
	"",
	"type",
	"last_nacrule_id",
	"auth_type",
	"last_vlan",
	"last_nas_vendor",
	"last_username",
	"last_ap",
	"mac",
	"last_ssid",
	"last_status",
	"mdm_compliance",
	"mdm_provider",
}

func (v *SiteNacClientsCountDistinct) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SiteNacClientsCountDistinct(value)
	for _, existing := range AllowedSiteNacClientsCountDistinctEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SiteNacClientsCountDistinct", value)
}

// NewSiteNacClientsCountDistinctFromValue returns a pointer to a valid SiteNacClientsCountDistinct
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSiteNacClientsCountDistinctFromValue(v string) (*SiteNacClientsCountDistinct, error) {
	ev := SiteNacClientsCountDistinct(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SiteNacClientsCountDistinct: valid values are %v", v, AllowedSiteNacClientsCountDistinctEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SiteNacClientsCountDistinct) IsValid() bool {
	for _, existing := range AllowedSiteNacClientsCountDistinctEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to site_nac_clients_count_distinct value
func (v SiteNacClientsCountDistinct) Ptr() *SiteNacClientsCountDistinct {
	return &v
}

type NullableSiteNacClientsCountDistinct struct {
	value *SiteNacClientsCountDistinct
	isSet bool
}

func (v NullableSiteNacClientsCountDistinct) Get() *SiteNacClientsCountDistinct {
	return v.value
}

func (v *NullableSiteNacClientsCountDistinct) Set(val *SiteNacClientsCountDistinct) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteNacClientsCountDistinct) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteNacClientsCountDistinct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteNacClientsCountDistinct(val *SiteNacClientsCountDistinct) *NullableSiteNacClientsCountDistinct {
	return &NullableSiteNacClientsCountDistinct{value: val, isSet: true}
}

func (v NullableSiteNacClientsCountDistinct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteNacClientsCountDistinct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

