/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type SitesClientsWirelessAPI interface {

	/*
	CountSiteWirelessClientEvents countSiteWirelessClientEvents

	Count by Distinct Attributes of Client-Events

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@return ApiCountSiteWirelessClientEventsRequest
	*/
	CountSiteWirelessClientEvents(ctx context.Context, siteId string) ApiCountSiteWirelessClientEventsRequest

	// CountSiteWirelessClientEventsExecute executes the request
	//  @return RepsonseCount
	CountSiteWirelessClientEventsExecute(r ApiCountSiteWirelessClientEventsRequest) (*RepsonseCount, *http.Response, error)

	/*
	CountSiteWirelessClientSessions countSiteWirelessClientSessions

	Count by Distinct Attributes of Client Sessions

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@return ApiCountSiteWirelessClientSessionsRequest
	*/
	CountSiteWirelessClientSessions(ctx context.Context, siteId string) ApiCountSiteWirelessClientSessionsRequest

	// CountSiteWirelessClientSessionsExecute executes the request
	//  @return RepsonseCount
	CountSiteWirelessClientSessionsExecute(r ApiCountSiteWirelessClientSessionsRequest) (*RepsonseCount, *http.Response, error)

	/*
	CountSiteWirelessClients countSiteWirelessClients

	Count by Distinct Attributes of Clients

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@return ApiCountSiteWirelessClientsRequest
	*/
	CountSiteWirelessClients(ctx context.Context, siteId string) ApiCountSiteWirelessClientsRequest

	// CountSiteWirelessClientsExecute executes the request
	//  @return RepsonseCount
	CountSiteWirelessClientsExecute(r ApiCountSiteWirelessClientsRequest) (*RepsonseCount, *http.Response, error)

	/*
	GetSiteEventsForClient getSiteEventsForClient

	Get the list of events for a specific client

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@param clientMac
	@return ApiGetSiteEventsForClientRequest
	*/
	GetSiteEventsForClient(ctx context.Context, siteId string, clientMac string) ApiGetSiteEventsForClientRequest

	// GetSiteEventsForClientExecute executes the request
	//  @return ResponseClientEventsSearch
	GetSiteEventsForClientExecute(r ApiGetSiteEventsForClientRequest) (*ResponseClientEventsSearch, *http.Response, error)

	/*
	GetSiteWirelessClientStats getSiteWirelessClientStats

	Get Site Client Stats Details

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@param clientMac
	@return ApiGetSiteWirelessClientStatsRequest
	*/
	GetSiteWirelessClientStats(ctx context.Context, siteId string, clientMac string) ApiGetSiteWirelessClientStatsRequest

	// GetSiteWirelessClientStatsExecute executes the request
	//  @return []ClientStats
	GetSiteWirelessClientStatsExecute(r ApiGetSiteWirelessClientStatsRequest) ([]ClientStats, *http.Response, error)

	/*
	GetSiteWirelessClientsStatsByMap getSiteWirelessClientsStatsByMap

	Get Site Clients Stats By Map

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@param mapId
	@return ApiGetSiteWirelessClientsStatsByMapRequest
	*/
	GetSiteWirelessClientsStatsByMap(ctx context.Context, siteId string, mapId string) ApiGetSiteWirelessClientsStatsByMapRequest

	// GetSiteWirelessClientsStatsByMapExecute executes the request
	//  @return [][]ClientWirelessStats
	GetSiteWirelessClientsStatsByMapExecute(r ApiGetSiteWirelessClientsStatsByMapRequest) ([][]ClientWirelessStats, *http.Response, error)

	/*
	ListSiteUnconnectedClientStats listSiteUnconnectedClientStats

	Get List of Site Unconnected Client Location

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@param mapId
	@return ApiListSiteUnconnectedClientStatsRequest
	*/
	ListSiteUnconnectedClientStats(ctx context.Context, siteId string, mapId string) ApiListSiteUnconnectedClientStatsRequest

	// ListSiteUnconnectedClientStatsExecute executes the request
	//  @return []UnconnectedClientStat
	ListSiteUnconnectedClientStatsExecute(r ApiListSiteUnconnectedClientStatsRequest) ([]UnconnectedClientStat, *http.Response, error)

	/*
	ListSiteWirelessClientsStats listSiteWirelessClientsStats

	Get List of Site All Clients Stats Details

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@return ApiListSiteWirelessClientsStatsRequest
	*/
	ListSiteWirelessClientsStats(ctx context.Context, siteId string) ApiListSiteWirelessClientsStatsRequest

	// ListSiteWirelessClientsStatsExecute executes the request
	//  @return []ClientStats
	ListSiteWirelessClientsStatsExecute(r ApiListSiteWirelessClientsStatsRequest) ([]ClientStats, *http.Response, error)

	/*
	SearchSiteWirelessClientEvents searchSiteWirelessClientEvents

	Get Site Clients Events

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@return ApiSearchSiteWirelessClientEventsRequest
	*/
	SearchSiteWirelessClientEvents(ctx context.Context, siteId string) ApiSearchSiteWirelessClientEventsRequest

	// SearchSiteWirelessClientEventsExecute executes the request
	//  @return ResponseEventsSearch
	SearchSiteWirelessClientEventsExecute(r ApiSearchSiteWirelessClientEventsRequest) (*ResponseEventsSearch, *http.Response, error)

	/*
	SearchSiteWirelessClientSessions searchSiteWirelessClientSessions

	Search Client Sessions

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@return ApiSearchSiteWirelessClientSessionsRequest
	*/
	SearchSiteWirelessClientSessions(ctx context.Context, siteId string) ApiSearchSiteWirelessClientSessionsRequest

	// SearchSiteWirelessClientSessionsExecute executes the request
	//  @return ResponseClientSessionsSearch
	SearchSiteWirelessClientSessionsExecute(r ApiSearchSiteWirelessClientSessionsRequest) (*ResponseClientSessionsSearch, *http.Response, error)

	/*
	SearchSiteWirelessClients searchSiteWirelessClients

	Search Wireless Clients

**NOTE**: fuzzy logic can be used with ‘*’, supported filters: mac, hostname, device, os, model. E.g. /clients/search?device=Mac*&hostname=jerry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param siteId
	@return ApiSearchSiteWirelessClientsRequest
	*/
	SearchSiteWirelessClients(ctx context.Context, siteId string) ApiSearchSiteWirelessClientsRequest

	// SearchSiteWirelessClientsExecute executes the request
	//  @return ResponseClientSearch
	SearchSiteWirelessClientsExecute(r ApiSearchSiteWirelessClientsRequest) (*ResponseClientSearch, *http.Response, error)
}

// SitesClientsWirelessAPIService SitesClientsWirelessAPI service
type SitesClientsWirelessAPIService service

type ApiCountSiteWirelessClientEventsRequest struct {
	ctx context.Context
	ApiService SitesClientsWirelessAPI
	siteId string
	distinct *SiteClientEventsCountDistinct
	type_ *string
	reasonCode *int32
	ssid *string
	ap *string
	proto *Dot11Proto
	band *Dot11Band
	wlanId *string
	limit *int32
	start *int32
	end *int32
	duration *string
}

func (r ApiCountSiteWirelessClientEventsRequest) Distinct(distinct SiteClientEventsCountDistinct) ApiCountSiteWirelessClientEventsRequest {
	r.distinct = &distinct
	return r
}

// see [listDeviceEventsDefinitions]($e/Constants%20Events/listDeviceEventsDefinitions)
func (r ApiCountSiteWirelessClientEventsRequest) Type_(type_ string) ApiCountSiteWirelessClientEventsRequest {
	r.type_ = &type_
	return r
}

// for assoc/disassoc events
func (r ApiCountSiteWirelessClientEventsRequest) ReasonCode(reasonCode int32) ApiCountSiteWirelessClientEventsRequest {
	r.reasonCode = &reasonCode
	return r
}

// SSID Name
func (r ApiCountSiteWirelessClientEventsRequest) Ssid(ssid string) ApiCountSiteWirelessClientEventsRequest {
	r.ssid = &ssid
	return r
}

// AP MAC
func (r ApiCountSiteWirelessClientEventsRequest) Ap(ap string) ApiCountSiteWirelessClientEventsRequest {
	r.ap = &ap
	return r
}

// a / b / g / n / ac / ax
func (r ApiCountSiteWirelessClientEventsRequest) Proto(proto Dot11Proto) ApiCountSiteWirelessClientEventsRequest {
	r.proto = &proto
	return r
}

// 802.11 Band
func (r ApiCountSiteWirelessClientEventsRequest) Band(band Dot11Band) ApiCountSiteWirelessClientEventsRequest {
	r.band = &band
	return r
}

// wlan_id
func (r ApiCountSiteWirelessClientEventsRequest) WlanId(wlanId string) ApiCountSiteWirelessClientEventsRequest {
	r.wlanId = &wlanId
	return r
}

func (r ApiCountSiteWirelessClientEventsRequest) Limit(limit int32) ApiCountSiteWirelessClientEventsRequest {
	r.limit = &limit
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiCountSiteWirelessClientEventsRequest) Start(start int32) ApiCountSiteWirelessClientEventsRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiCountSiteWirelessClientEventsRequest) End(end int32) ApiCountSiteWirelessClientEventsRequest {
	r.end = &end
	return r
}

// duration like 7d, 2w
func (r ApiCountSiteWirelessClientEventsRequest) Duration(duration string) ApiCountSiteWirelessClientEventsRequest {
	r.duration = &duration
	return r
}

func (r ApiCountSiteWirelessClientEventsRequest) Execute() (*RepsonseCount, *http.Response, error) {
	return r.ApiService.CountSiteWirelessClientEventsExecute(r)
}

/*
CountSiteWirelessClientEvents countSiteWirelessClientEvents

Count by Distinct Attributes of Client-Events

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @return ApiCountSiteWirelessClientEventsRequest
*/
func (a *SitesClientsWirelessAPIService) CountSiteWirelessClientEvents(ctx context.Context, siteId string) ApiCountSiteWirelessClientEventsRequest {
	return ApiCountSiteWirelessClientEventsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return RepsonseCount
func (a *SitesClientsWirelessAPIService) CountSiteWirelessClientEventsExecute(r ApiCountSiteWirelessClientEventsRequest) (*RepsonseCount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RepsonseCount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesClientsWirelessAPIService.CountSiteWirelessClientEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/clients/events/count"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.distinct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinct", r.distinct, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.reasonCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reason_code", r.reasonCode, "")
	}
	if r.ssid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssid", r.ssid, "")
	}
	if r.ap != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ap", r.ap, "")
	}
	if r.proto != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "proto", r.proto, "")
	}
	if r.band != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "band", r.band, "")
	}
	if r.wlanId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wlan_id", r.wlanId, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCountSiteWirelessClientSessionsRequest struct {
	ctx context.Context
	ApiService SitesClientsWirelessAPI
	siteId string
	distinct *SiteClientSessionsCountDistinct
	ap *string
	band *Dot11Band
	clientFamily *string
	clientManufacture *string
	clientModel *string
	clientOs *string
	ssid *string
	wlanId *string
	page *int32
	limit *int32
	start *int32
	end *int32
	duration *string
}

func (r ApiCountSiteWirelessClientSessionsRequest) Distinct(distinct SiteClientSessionsCountDistinct) ApiCountSiteWirelessClientSessionsRequest {
	r.distinct = &distinct
	return r
}

// AP MAC
func (r ApiCountSiteWirelessClientSessionsRequest) Ap(ap string) ApiCountSiteWirelessClientSessionsRequest {
	r.ap = &ap
	return r
}

// 802.11 Band
func (r ApiCountSiteWirelessClientSessionsRequest) Band(band Dot11Band) ApiCountSiteWirelessClientSessionsRequest {
	r.band = &band
	return r
}

// E.g. “Mac”, “iPhone”, “Apple watch”
func (r ApiCountSiteWirelessClientSessionsRequest) ClientFamily(clientFamily string) ApiCountSiteWirelessClientSessionsRequest {
	r.clientFamily = &clientFamily
	return r
}

// E.g. “Apple”
func (r ApiCountSiteWirelessClientSessionsRequest) ClientManufacture(clientManufacture string) ApiCountSiteWirelessClientSessionsRequest {
	r.clientManufacture = &clientManufacture
	return r
}

// E.g. “8+”, “XS”
func (r ApiCountSiteWirelessClientSessionsRequest) ClientModel(clientModel string) ApiCountSiteWirelessClientSessionsRequest {
	r.clientModel = &clientModel
	return r
}

// E.g. “Mojave”, “Windows 10”, “Linux”
func (r ApiCountSiteWirelessClientSessionsRequest) ClientOs(clientOs string) ApiCountSiteWirelessClientSessionsRequest {
	r.clientOs = &clientOs
	return r
}

// SSID
func (r ApiCountSiteWirelessClientSessionsRequest) Ssid(ssid string) ApiCountSiteWirelessClientSessionsRequest {
	r.ssid = &ssid
	return r
}

// wlan_id
func (r ApiCountSiteWirelessClientSessionsRequest) WlanId(wlanId string) ApiCountSiteWirelessClientSessionsRequest {
	r.wlanId = &wlanId
	return r
}

func (r ApiCountSiteWirelessClientSessionsRequest) Page(page int32) ApiCountSiteWirelessClientSessionsRequest {
	r.page = &page
	return r
}

func (r ApiCountSiteWirelessClientSessionsRequest) Limit(limit int32) ApiCountSiteWirelessClientSessionsRequest {
	r.limit = &limit
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiCountSiteWirelessClientSessionsRequest) Start(start int32) ApiCountSiteWirelessClientSessionsRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiCountSiteWirelessClientSessionsRequest) End(end int32) ApiCountSiteWirelessClientSessionsRequest {
	r.end = &end
	return r
}

// duration like 7d, 2w
func (r ApiCountSiteWirelessClientSessionsRequest) Duration(duration string) ApiCountSiteWirelessClientSessionsRequest {
	r.duration = &duration
	return r
}

func (r ApiCountSiteWirelessClientSessionsRequest) Execute() (*RepsonseCount, *http.Response, error) {
	return r.ApiService.CountSiteWirelessClientSessionsExecute(r)
}

/*
CountSiteWirelessClientSessions countSiteWirelessClientSessions

Count by Distinct Attributes of Client Sessions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @return ApiCountSiteWirelessClientSessionsRequest
*/
func (a *SitesClientsWirelessAPIService) CountSiteWirelessClientSessions(ctx context.Context, siteId string) ApiCountSiteWirelessClientSessionsRequest {
	return ApiCountSiteWirelessClientSessionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return RepsonseCount
func (a *SitesClientsWirelessAPIService) CountSiteWirelessClientSessionsExecute(r ApiCountSiteWirelessClientSessionsRequest) (*RepsonseCount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RepsonseCount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesClientsWirelessAPIService.CountSiteWirelessClientSessions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/clients/sessions/count"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.distinct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinct", r.distinct, "")
	} else {
		var defaultValue SiteClientSessionsCountDistinct = "mac"
		r.distinct = &defaultValue
	}
	if r.ap != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ap", r.ap, "")
	}
	if r.band != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "band", r.band, "")
	}
	if r.clientFamily != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_family", r.clientFamily, "")
	}
	if r.clientManufacture != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_manufacture", r.clientManufacture, "")
	}
	if r.clientModel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_model", r.clientModel, "")
	}
	if r.clientOs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_os", r.clientOs, "")
	}
	if r.ssid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssid", r.ssid, "")
	}
	if r.wlanId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wlan_id", r.wlanId, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCountSiteWirelessClientsRequest struct {
	ctx context.Context
	ApiService SitesClientsWirelessAPI
	siteId string
	distinct *SiteClientsCountDistinct
	ssid *string
	ap *string
	ipAddress *string
	vlan *string
	hostname *string
	os *string
	model *string
	device *string
	page *int32
	limit *int32
	start *int32
	end *int32
	duration *string
}

func (r ApiCountSiteWirelessClientsRequest) Distinct(distinct SiteClientsCountDistinct) ApiCountSiteWirelessClientsRequest {
	r.distinct = &distinct
	return r
}

func (r ApiCountSiteWirelessClientsRequest) Ssid(ssid string) ApiCountSiteWirelessClientsRequest {
	r.ssid = &ssid
	return r
}

func (r ApiCountSiteWirelessClientsRequest) Ap(ap string) ApiCountSiteWirelessClientsRequest {
	r.ap = &ap
	return r
}

func (r ApiCountSiteWirelessClientsRequest) IpAddress(ipAddress string) ApiCountSiteWirelessClientsRequest {
	r.ipAddress = &ipAddress
	return r
}

func (r ApiCountSiteWirelessClientsRequest) Vlan(vlan string) ApiCountSiteWirelessClientsRequest {
	r.vlan = &vlan
	return r
}

func (r ApiCountSiteWirelessClientsRequest) Hostname(hostname string) ApiCountSiteWirelessClientsRequest {
	r.hostname = &hostname
	return r
}

func (r ApiCountSiteWirelessClientsRequest) Os(os string) ApiCountSiteWirelessClientsRequest {
	r.os = &os
	return r
}

func (r ApiCountSiteWirelessClientsRequest) Model(model string) ApiCountSiteWirelessClientsRequest {
	r.model = &model
	return r
}

func (r ApiCountSiteWirelessClientsRequest) Device(device string) ApiCountSiteWirelessClientsRequest {
	r.device = &device
	return r
}

func (r ApiCountSiteWirelessClientsRequest) Page(page int32) ApiCountSiteWirelessClientsRequest {
	r.page = &page
	return r
}

func (r ApiCountSiteWirelessClientsRequest) Limit(limit int32) ApiCountSiteWirelessClientsRequest {
	r.limit = &limit
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiCountSiteWirelessClientsRequest) Start(start int32) ApiCountSiteWirelessClientsRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiCountSiteWirelessClientsRequest) End(end int32) ApiCountSiteWirelessClientsRequest {
	r.end = &end
	return r
}

// duration like 7d, 2w
func (r ApiCountSiteWirelessClientsRequest) Duration(duration string) ApiCountSiteWirelessClientsRequest {
	r.duration = &duration
	return r
}

func (r ApiCountSiteWirelessClientsRequest) Execute() (*RepsonseCount, *http.Response, error) {
	return r.ApiService.CountSiteWirelessClientsExecute(r)
}

/*
CountSiteWirelessClients countSiteWirelessClients

Count by Distinct Attributes of Clients

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @return ApiCountSiteWirelessClientsRequest
*/
func (a *SitesClientsWirelessAPIService) CountSiteWirelessClients(ctx context.Context, siteId string) ApiCountSiteWirelessClientsRequest {
	return ApiCountSiteWirelessClientsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return RepsonseCount
func (a *SitesClientsWirelessAPIService) CountSiteWirelessClientsExecute(r ApiCountSiteWirelessClientsRequest) (*RepsonseCount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RepsonseCount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesClientsWirelessAPIService.CountSiteWirelessClients")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/clients/count"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.distinct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinct", r.distinct, "")
	} else {
		var defaultValue SiteClientsCountDistinct = "device"
		r.distinct = &defaultValue
	}
	if r.ssid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssid", r.ssid, "")
	}
	if r.ap != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ap", r.ap, "")
	}
	if r.ipAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ip_address", r.ipAddress, "")
	}
	if r.vlan != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vlan", r.vlan, "")
	}
	if r.hostname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hostname", r.hostname, "")
	}
	if r.os != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "os", r.os, "")
	}
	if r.model != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "model", r.model, "")
	}
	if r.device != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "device", r.device, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSiteEventsForClientRequest struct {
	ctx context.Context
	ApiService SitesClientsWirelessAPI
	siteId string
	clientMac string
	type_ *string
	proto *Dot11Proto
	band *Dot11Band
	channel *string
	wlanId *string
	ssid *string
	start *int32
	end *int32
	page *int32
	limit *int32
	duration *string
}

// e.g. MARVIS_EVENT_CLIENT_DHCP_STUCK
func (r ApiGetSiteEventsForClientRequest) Type_(type_ string) ApiGetSiteEventsForClientRequest {
	r.type_ = &type_
	return r
}

// a / b / g / n / ac / ax
func (r ApiGetSiteEventsForClientRequest) Proto(proto Dot11Proto) ApiGetSiteEventsForClientRequest {
	r.proto = &proto
	return r
}

// 802.11 Band
func (r ApiGetSiteEventsForClientRequest) Band(band Dot11Band) ApiGetSiteEventsForClientRequest {
	r.band = &band
	return r
}

func (r ApiGetSiteEventsForClientRequest) Channel(channel string) ApiGetSiteEventsForClientRequest {
	r.channel = &channel
	return r
}

func (r ApiGetSiteEventsForClientRequest) WlanId(wlanId string) ApiGetSiteEventsForClientRequest {
	r.wlanId = &wlanId
	return r
}

func (r ApiGetSiteEventsForClientRequest) Ssid(ssid string) ApiGetSiteEventsForClientRequest {
	r.ssid = &ssid
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiGetSiteEventsForClientRequest) Start(start int32) ApiGetSiteEventsForClientRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiGetSiteEventsForClientRequest) End(end int32) ApiGetSiteEventsForClientRequest {
	r.end = &end
	return r
}

func (r ApiGetSiteEventsForClientRequest) Page(page int32) ApiGetSiteEventsForClientRequest {
	r.page = &page
	return r
}

func (r ApiGetSiteEventsForClientRequest) Limit(limit int32) ApiGetSiteEventsForClientRequest {
	r.limit = &limit
	return r
}

// duration like 7d, 2w
func (r ApiGetSiteEventsForClientRequest) Duration(duration string) ApiGetSiteEventsForClientRequest {
	r.duration = &duration
	return r
}

func (r ApiGetSiteEventsForClientRequest) Execute() (*ResponseClientEventsSearch, *http.Response, error) {
	return r.ApiService.GetSiteEventsForClientExecute(r)
}

/*
GetSiteEventsForClient getSiteEventsForClient

Get the list of events for a specific client

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @param clientMac
 @return ApiGetSiteEventsForClientRequest
*/
func (a *SitesClientsWirelessAPIService) GetSiteEventsForClient(ctx context.Context, siteId string, clientMac string) ApiGetSiteEventsForClientRequest {
	return ApiGetSiteEventsForClientRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		clientMac: clientMac,
	}
}

// Execute executes the request
//  @return ResponseClientEventsSearch
func (a *SitesClientsWirelessAPIService) GetSiteEventsForClientExecute(r ApiGetSiteEventsForClientRequest) (*ResponseClientEventsSearch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseClientEventsSearch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesClientsWirelessAPIService.GetSiteEventsForClient")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/clients/{client_mac}/events"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client_mac"+"}", url.PathEscape(parameterValueToString(r.clientMac, "clientMac")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.proto != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "proto", r.proto, "")
	}
	if r.band != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "band", r.band, "")
	}
	if r.channel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "channel", r.channel, "")
	}
	if r.wlanId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wlan_id", r.wlanId, "")
	}
	if r.ssid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssid", r.ssid, "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSiteWirelessClientStatsRequest struct {
	ctx context.Context
	ApiService SitesClientsWirelessAPI
	siteId string
	clientMac string
	wired *bool
}

func (r ApiGetSiteWirelessClientStatsRequest) Wired(wired bool) ApiGetSiteWirelessClientStatsRequest {
	r.wired = &wired
	return r
}

func (r ApiGetSiteWirelessClientStatsRequest) Execute() ([]ClientStats, *http.Response, error) {
	return r.ApiService.GetSiteWirelessClientStatsExecute(r)
}

/*
GetSiteWirelessClientStats getSiteWirelessClientStats

Get Site Client Stats Details

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @param clientMac
 @return ApiGetSiteWirelessClientStatsRequest
*/
func (a *SitesClientsWirelessAPIService) GetSiteWirelessClientStats(ctx context.Context, siteId string, clientMac string) ApiGetSiteWirelessClientStatsRequest {
	return ApiGetSiteWirelessClientStatsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		clientMac: clientMac,
	}
}

// Execute executes the request
//  @return []ClientStats
func (a *SitesClientsWirelessAPIService) GetSiteWirelessClientStatsExecute(r ApiGetSiteWirelessClientStatsRequest) ([]ClientStats, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ClientStats
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesClientsWirelessAPIService.GetSiteWirelessClientStats")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/stats/clients/{client_mac}"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client_mac"+"}", url.PathEscape(parameterValueToString(r.clientMac, "clientMac")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.wired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wired", r.wired, "")
	} else {
		var defaultValue bool = false
		r.wired = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSiteWirelessClientsStatsByMapRequest struct {
	ctx context.Context
	ApiService SitesClientsWirelessAPI
	siteId string
	mapId string
	page *int32
	limit *int32
	start *int32
	end *int32
	duration *string
}

func (r ApiGetSiteWirelessClientsStatsByMapRequest) Page(page int32) ApiGetSiteWirelessClientsStatsByMapRequest {
	r.page = &page
	return r
}

func (r ApiGetSiteWirelessClientsStatsByMapRequest) Limit(limit int32) ApiGetSiteWirelessClientsStatsByMapRequest {
	r.limit = &limit
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiGetSiteWirelessClientsStatsByMapRequest) Start(start int32) ApiGetSiteWirelessClientsStatsByMapRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiGetSiteWirelessClientsStatsByMapRequest) End(end int32) ApiGetSiteWirelessClientsStatsByMapRequest {
	r.end = &end
	return r
}

// duration like 7d, 2w
func (r ApiGetSiteWirelessClientsStatsByMapRequest) Duration(duration string) ApiGetSiteWirelessClientsStatsByMapRequest {
	r.duration = &duration
	return r
}

func (r ApiGetSiteWirelessClientsStatsByMapRequest) Execute() ([][]ClientWirelessStats, *http.Response, error) {
	return r.ApiService.GetSiteWirelessClientsStatsByMapExecute(r)
}

/*
GetSiteWirelessClientsStatsByMap getSiteWirelessClientsStatsByMap

Get Site Clients Stats By Map

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @param mapId
 @return ApiGetSiteWirelessClientsStatsByMapRequest
*/
func (a *SitesClientsWirelessAPIService) GetSiteWirelessClientsStatsByMap(ctx context.Context, siteId string, mapId string) ApiGetSiteWirelessClientsStatsByMapRequest {
	return ApiGetSiteWirelessClientsStatsByMapRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		mapId: mapId,
	}
}

// Execute executes the request
//  @return [][]ClientWirelessStats
func (a *SitesClientsWirelessAPIService) GetSiteWirelessClientsStatsByMapExecute(r ApiGetSiteWirelessClientsStatsByMapRequest) ([][]ClientWirelessStats, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  [][]ClientWirelessStats
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesClientsWirelessAPIService.GetSiteWirelessClientsStatsByMap")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/stats/maps/{map_id}/clients"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"map_id"+"}", url.PathEscape(parameterValueToString(r.mapId, "mapId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSiteUnconnectedClientStatsRequest struct {
	ctx context.Context
	ApiService SitesClientsWirelessAPI
	siteId string
	mapId string
}

func (r ApiListSiteUnconnectedClientStatsRequest) Execute() ([]UnconnectedClientStat, *http.Response, error) {
	return r.ApiService.ListSiteUnconnectedClientStatsExecute(r)
}

/*
ListSiteUnconnectedClientStats listSiteUnconnectedClientStats

Get List of Site Unconnected Client Location

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @param mapId
 @return ApiListSiteUnconnectedClientStatsRequest
*/
func (a *SitesClientsWirelessAPIService) ListSiteUnconnectedClientStats(ctx context.Context, siteId string, mapId string) ApiListSiteUnconnectedClientStatsRequest {
	return ApiListSiteUnconnectedClientStatsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		mapId: mapId,
	}
}

// Execute executes the request
//  @return []UnconnectedClientStat
func (a *SitesClientsWirelessAPIService) ListSiteUnconnectedClientStatsExecute(r ApiListSiteUnconnectedClientStatsRequest) ([]UnconnectedClientStat, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []UnconnectedClientStat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesClientsWirelessAPIService.ListSiteUnconnectedClientStats")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/stats/maps/{map_id}/unconnected_clients"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"map_id"+"}", url.PathEscape(parameterValueToString(r.mapId, "mapId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSiteWirelessClientsStatsRequest struct {
	ctx context.Context
	ApiService SitesClientsWirelessAPI
	siteId string
	wired *bool
	limit *int32
	start *int32
	end *int32
	duration *string
}

func (r ApiListSiteWirelessClientsStatsRequest) Wired(wired bool) ApiListSiteWirelessClientsStatsRequest {
	r.wired = &wired
	return r
}

func (r ApiListSiteWirelessClientsStatsRequest) Limit(limit int32) ApiListSiteWirelessClientsStatsRequest {
	r.limit = &limit
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiListSiteWirelessClientsStatsRequest) Start(start int32) ApiListSiteWirelessClientsStatsRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiListSiteWirelessClientsStatsRequest) End(end int32) ApiListSiteWirelessClientsStatsRequest {
	r.end = &end
	return r
}

// duration like 7d, 2w
func (r ApiListSiteWirelessClientsStatsRequest) Duration(duration string) ApiListSiteWirelessClientsStatsRequest {
	r.duration = &duration
	return r
}

func (r ApiListSiteWirelessClientsStatsRequest) Execute() ([]ClientStats, *http.Response, error) {
	return r.ApiService.ListSiteWirelessClientsStatsExecute(r)
}

/*
ListSiteWirelessClientsStats listSiteWirelessClientsStats

Get List of Site All Clients Stats Details

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @return ApiListSiteWirelessClientsStatsRequest
*/
func (a *SitesClientsWirelessAPIService) ListSiteWirelessClientsStats(ctx context.Context, siteId string) ApiListSiteWirelessClientsStatsRequest {
	return ApiListSiteWirelessClientsStatsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return []ClientStats
func (a *SitesClientsWirelessAPIService) ListSiteWirelessClientsStatsExecute(r ApiListSiteWirelessClientsStatsRequest) ([]ClientStats, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ClientStats
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesClientsWirelessAPIService.ListSiteWirelessClientsStats")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/stats/clients"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.wired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wired", r.wired, "")
	} else {
		var defaultValue bool = false
		r.wired = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchSiteWirelessClientEventsRequest struct {
	ctx context.Context
	ApiService SitesClientsWirelessAPI
	siteId string
	type_ *string
	reasonCode *int32
	ssid *string
	ap *string
	proto *Dot11Proto
	band *Dot11Band
	wlanId *string
	nacruleId *string
	limit *int32
	start *int32
	end *int32
	duration *string
}

// see [listDeviceEventsDefinitions]($e/Constants%20Events/listDeviceEventsDefinitions)
func (r ApiSearchSiteWirelessClientEventsRequest) Type_(type_ string) ApiSearchSiteWirelessClientEventsRequest {
	r.type_ = &type_
	return r
}

// for assoc/disassoc events
func (r ApiSearchSiteWirelessClientEventsRequest) ReasonCode(reasonCode int32) ApiSearchSiteWirelessClientEventsRequest {
	r.reasonCode = &reasonCode
	return r
}

// SSID Name
func (r ApiSearchSiteWirelessClientEventsRequest) Ssid(ssid string) ApiSearchSiteWirelessClientEventsRequest {
	r.ssid = &ssid
	return r
}

// AP MAC
func (r ApiSearchSiteWirelessClientEventsRequest) Ap(ap string) ApiSearchSiteWirelessClientEventsRequest {
	r.ap = &ap
	return r
}

// a / b / g / n / ac / ax
func (r ApiSearchSiteWirelessClientEventsRequest) Proto(proto Dot11Proto) ApiSearchSiteWirelessClientEventsRequest {
	r.proto = &proto
	return r
}

// 802.11 Band
func (r ApiSearchSiteWirelessClientEventsRequest) Band(band Dot11Band) ApiSearchSiteWirelessClientEventsRequest {
	r.band = &band
	return r
}

// wlan_id
func (r ApiSearchSiteWirelessClientEventsRequest) WlanId(wlanId string) ApiSearchSiteWirelessClientEventsRequest {
	r.wlanId = &wlanId
	return r
}

// nacrule_id
func (r ApiSearchSiteWirelessClientEventsRequest) NacruleId(nacruleId string) ApiSearchSiteWirelessClientEventsRequest {
	r.nacruleId = &nacruleId
	return r
}

func (r ApiSearchSiteWirelessClientEventsRequest) Limit(limit int32) ApiSearchSiteWirelessClientEventsRequest {
	r.limit = &limit
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiSearchSiteWirelessClientEventsRequest) Start(start int32) ApiSearchSiteWirelessClientEventsRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiSearchSiteWirelessClientEventsRequest) End(end int32) ApiSearchSiteWirelessClientEventsRequest {
	r.end = &end
	return r
}

// duration like 7d, 2w
func (r ApiSearchSiteWirelessClientEventsRequest) Duration(duration string) ApiSearchSiteWirelessClientEventsRequest {
	r.duration = &duration
	return r
}

func (r ApiSearchSiteWirelessClientEventsRequest) Execute() (*ResponseEventsSearch, *http.Response, error) {
	return r.ApiService.SearchSiteWirelessClientEventsExecute(r)
}

/*
SearchSiteWirelessClientEvents searchSiteWirelessClientEvents

Get Site Clients Events

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @return ApiSearchSiteWirelessClientEventsRequest
*/
func (a *SitesClientsWirelessAPIService) SearchSiteWirelessClientEvents(ctx context.Context, siteId string) ApiSearchSiteWirelessClientEventsRequest {
	return ApiSearchSiteWirelessClientEventsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return ResponseEventsSearch
func (a *SitesClientsWirelessAPIService) SearchSiteWirelessClientEventsExecute(r ApiSearchSiteWirelessClientEventsRequest) (*ResponseEventsSearch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseEventsSearch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesClientsWirelessAPIService.SearchSiteWirelessClientEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/clients/events/search"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.reasonCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reason_code", r.reasonCode, "")
	}
	if r.ssid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssid", r.ssid, "")
	}
	if r.ap != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ap", r.ap, "")
	}
	if r.proto != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "proto", r.proto, "")
	}
	if r.band != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "band", r.band, "")
	}
	if r.wlanId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wlan_id", r.wlanId, "")
	}
	if r.nacruleId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nacrule_id", r.nacruleId, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchSiteWirelessClientSessionsRequest struct {
	ctx context.Context
	ApiService SitesClientsWirelessAPI
	siteId string
	ap *string
	band *Dot11Band
	clientFamily *string
	clientManufacture *string
	clientModel *string
	clientUsername *string
	clientOs *string
	ssid *string
	wlanId *string
	pskId *string
	pskName *string
	limit *int32
	start *int32
	end *int32
	duration *string
}

// AP MAC
func (r ApiSearchSiteWirelessClientSessionsRequest) Ap(ap string) ApiSearchSiteWirelessClientSessionsRequest {
	r.ap = &ap
	return r
}

// 802.11 Band
func (r ApiSearchSiteWirelessClientSessionsRequest) Band(band Dot11Band) ApiSearchSiteWirelessClientSessionsRequest {
	r.band = &band
	return r
}

// E.g. “Mac”, “iPhone”, “Apple watch”
func (r ApiSearchSiteWirelessClientSessionsRequest) ClientFamily(clientFamily string) ApiSearchSiteWirelessClientSessionsRequest {
	r.clientFamily = &clientFamily
	return r
}

// E.g. “Apple”
func (r ApiSearchSiteWirelessClientSessionsRequest) ClientManufacture(clientManufacture string) ApiSearchSiteWirelessClientSessionsRequest {
	r.clientManufacture = &clientManufacture
	return r
}

// E.g. “8+”, “XS”
func (r ApiSearchSiteWirelessClientSessionsRequest) ClientModel(clientModel string) ApiSearchSiteWirelessClientSessionsRequest {
	r.clientModel = &clientModel
	return r
}

// Username
func (r ApiSearchSiteWirelessClientSessionsRequest) ClientUsername(clientUsername string) ApiSearchSiteWirelessClientSessionsRequest {
	r.clientUsername = &clientUsername
	return r
}

// E.g. “Mojave”, “Windows 10”, “Linux”
func (r ApiSearchSiteWirelessClientSessionsRequest) ClientOs(clientOs string) ApiSearchSiteWirelessClientSessionsRequest {
	r.clientOs = &clientOs
	return r
}

// SSID
func (r ApiSearchSiteWirelessClientSessionsRequest) Ssid(ssid string) ApiSearchSiteWirelessClientSessionsRequest {
	r.ssid = &ssid
	return r
}

// wlan_id
func (r ApiSearchSiteWirelessClientSessionsRequest) WlanId(wlanId string) ApiSearchSiteWirelessClientSessionsRequest {
	r.wlanId = &wlanId
	return r
}

// PSK ID
func (r ApiSearchSiteWirelessClientSessionsRequest) PskId(pskId string) ApiSearchSiteWirelessClientSessionsRequest {
	r.pskId = &pskId
	return r
}

// PSK Name
func (r ApiSearchSiteWirelessClientSessionsRequest) PskName(pskName string) ApiSearchSiteWirelessClientSessionsRequest {
	r.pskName = &pskName
	return r
}

func (r ApiSearchSiteWirelessClientSessionsRequest) Limit(limit int32) ApiSearchSiteWirelessClientSessionsRequest {
	r.limit = &limit
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiSearchSiteWirelessClientSessionsRequest) Start(start int32) ApiSearchSiteWirelessClientSessionsRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiSearchSiteWirelessClientSessionsRequest) End(end int32) ApiSearchSiteWirelessClientSessionsRequest {
	r.end = &end
	return r
}

// duration like 7d, 2w
func (r ApiSearchSiteWirelessClientSessionsRequest) Duration(duration string) ApiSearchSiteWirelessClientSessionsRequest {
	r.duration = &duration
	return r
}

func (r ApiSearchSiteWirelessClientSessionsRequest) Execute() (*ResponseClientSessionsSearch, *http.Response, error) {
	return r.ApiService.SearchSiteWirelessClientSessionsExecute(r)
}

/*
SearchSiteWirelessClientSessions searchSiteWirelessClientSessions

Search Client Sessions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @return ApiSearchSiteWirelessClientSessionsRequest
*/
func (a *SitesClientsWirelessAPIService) SearchSiteWirelessClientSessions(ctx context.Context, siteId string) ApiSearchSiteWirelessClientSessionsRequest {
	return ApiSearchSiteWirelessClientSessionsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return ResponseClientSessionsSearch
func (a *SitesClientsWirelessAPIService) SearchSiteWirelessClientSessionsExecute(r ApiSearchSiteWirelessClientSessionsRequest) (*ResponseClientSessionsSearch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseClientSessionsSearch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesClientsWirelessAPIService.SearchSiteWirelessClientSessions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/clients/sessions/search"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ap != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ap", r.ap, "")
	}
	if r.band != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "band", r.band, "")
	}
	if r.clientFamily != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_family", r.clientFamily, "")
	}
	if r.clientManufacture != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_manufacture", r.clientManufacture, "")
	}
	if r.clientModel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_model", r.clientModel, "")
	}
	if r.clientUsername != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_username", r.clientUsername, "")
	}
	if r.clientOs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_os", r.clientOs, "")
	}
	if r.ssid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssid", r.ssid, "")
	}
	if r.wlanId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wlan_id", r.wlanId, "")
	}
	if r.pskId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "psk_id", r.pskId, "")
	}
	if r.pskName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "psk_name", r.pskName, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchSiteWirelessClientsRequest struct {
	ctx context.Context
	ApiService SitesClientsWirelessAPI
	siteId string
	mac *string
	ipAddress *string
	hostname *string
	device *string
	os *string
	model *string
	ap *string
	ssid *string
	text *string
	nacruleId *string
	limit *int32
	start *int32
	end *int32
	duration *string
}

// partial / full MAC address
func (r ApiSearchSiteWirelessClientsRequest) Mac(mac string) ApiSearchSiteWirelessClientsRequest {
	r.mac = &mac
	return r
}

func (r ApiSearchSiteWirelessClientsRequest) IpAddress(ipAddress string) ApiSearchSiteWirelessClientsRequest {
	r.ipAddress = &ipAddress
	return r
}

// partial / full hostname
func (r ApiSearchSiteWirelessClientsRequest) Hostname(hostname string) ApiSearchSiteWirelessClientsRequest {
	r.hostname = &hostname
	return r
}

// device type, e.g. Mac, Nvidia, iPhone
func (r ApiSearchSiteWirelessClientsRequest) Device(device string) ApiSearchSiteWirelessClientsRequest {
	r.device = &device
	return r
}

// os, e.g. Sierra, Yosemite, Windows 10
func (r ApiSearchSiteWirelessClientsRequest) Os(os string) ApiSearchSiteWirelessClientsRequest {
	r.os = &os
	return r
}

// model, e.g. “MBP 15 late 2013”, 6, 6s, “8+ GSM”
func (r ApiSearchSiteWirelessClientsRequest) Model(model string) ApiSearchSiteWirelessClientsRequest {
	r.model = &model
	return r
}

// AP mac where the client has connected to
func (r ApiSearchSiteWirelessClientsRequest) Ap(ap string) ApiSearchSiteWirelessClientsRequest {
	r.ap = &ap
	return r
}

func (r ApiSearchSiteWirelessClientsRequest) Ssid(ssid string) ApiSearchSiteWirelessClientsRequest {
	r.ssid = &ssid
	return r
}

// partial / full MAC address, hostname, username, psk_name or ip
func (r ApiSearchSiteWirelessClientsRequest) Text(text string) ApiSearchSiteWirelessClientsRequest {
	r.text = &text
	return r
}

// nacrule_id
func (r ApiSearchSiteWirelessClientsRequest) NacruleId(nacruleId string) ApiSearchSiteWirelessClientsRequest {
	r.nacruleId = &nacruleId
	return r
}

func (r ApiSearchSiteWirelessClientsRequest) Limit(limit int32) ApiSearchSiteWirelessClientsRequest {
	r.limit = &limit
	return r
}

// start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
func (r ApiSearchSiteWirelessClientsRequest) Start(start int32) ApiSearchSiteWirelessClientsRequest {
	r.start = &start
	return r
}

// end datetime, can be epoch or relative time like -1d, -2h; now if not specified
func (r ApiSearchSiteWirelessClientsRequest) End(end int32) ApiSearchSiteWirelessClientsRequest {
	r.end = &end
	return r
}

// duration like 7d, 2w
func (r ApiSearchSiteWirelessClientsRequest) Duration(duration string) ApiSearchSiteWirelessClientsRequest {
	r.duration = &duration
	return r
}

func (r ApiSearchSiteWirelessClientsRequest) Execute() (*ResponseClientSearch, *http.Response, error) {
	return r.ApiService.SearchSiteWirelessClientsExecute(r)
}

/*
SearchSiteWirelessClients searchSiteWirelessClients

Search Wireless Clients

**NOTE**: fuzzy logic can be used with ‘*’, supported filters: mac, hostname, device, os, model. E.g. /clients/search?device=Mac*&hostname=jerry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId
 @return ApiSearchSiteWirelessClientsRequest
*/
func (a *SitesClientsWirelessAPIService) SearchSiteWirelessClients(ctx context.Context, siteId string) ApiSearchSiteWirelessClientsRequest {
	return ApiSearchSiteWirelessClientsRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return ResponseClientSearch
func (a *SitesClientsWirelessAPIService) SearchSiteWirelessClientsExecute(r ApiSearchSiteWirelessClientsRequest) (*ResponseClientSearch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseClientSearch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesClientsWirelessAPIService.SearchSiteWirelessClients")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/sites/{site_id}/clients/search"
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.mac != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mac", r.mac, "")
	}
	if r.ipAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ip_address", r.ipAddress, "")
	}
	if r.hostname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hostname", r.hostname, "")
	}
	if r.device != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "device", r.device, "")
	}
	if r.os != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "os", r.os, "")
	}
	if r.model != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "model", r.model, "")
	}
	if r.ap != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ap", r.ap, "")
	}
	if r.ssid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssid", r.ssid, "")
	}
	if r.text != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "text", r.text, "")
	}
	if r.nacruleId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nacrule_id", r.nacruleId, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	} else {
		var defaultValue string = "1d"
		r.duration = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseHttp400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ResponseHttp401
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ResponseHttp403
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ResponseHttp404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ResponseHttp429
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
