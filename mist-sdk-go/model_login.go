/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the Login type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Login{}

// Login struct for Login
type Login struct {
	Email string `json:"email"`
	Password string `json:"password"`
	TwoFactor *string `json:"two_factor,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Login Login

// NewLogin instantiates a new Login object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogin(email string, password string) *Login {
	this := Login{}
	this.Email = email
	this.Password = password
	return &this
}

// NewLoginWithDefaults instantiates a new Login object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoginWithDefaults() *Login {
	this := Login{}
	return &this
}

// GetEmail returns the Email field value
func (o *Login) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *Login) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *Login) SetEmail(v string) {
	o.Email = v
}

// GetPassword returns the Password field value
func (o *Login) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *Login) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *Login) SetPassword(v string) {
	o.Password = v
}

// GetTwoFactor returns the TwoFactor field value if set, zero value otherwise.
func (o *Login) GetTwoFactor() string {
	if o == nil || IsNil(o.TwoFactor) {
		var ret string
		return ret
	}
	return *o.TwoFactor
}

// GetTwoFactorOk returns a tuple with the TwoFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Login) GetTwoFactorOk() (*string, bool) {
	if o == nil || IsNil(o.TwoFactor) {
		return nil, false
	}
	return o.TwoFactor, true
}

// HasTwoFactor returns a boolean if a field has been set.
func (o *Login) HasTwoFactor() bool {
	if o != nil && !IsNil(o.TwoFactor) {
		return true
	}

	return false
}

// SetTwoFactor gets a reference to the given string and assigns it to the TwoFactor field.
func (o *Login) SetTwoFactor(v string) {
	o.TwoFactor = &v
}

func (o Login) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Login) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["password"] = o.Password
	if !IsNil(o.TwoFactor) {
		toSerialize["two_factor"] = o.TwoFactor
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Login) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogin := _Login{}

	err = json.Unmarshal(data, &varLogin)

	if err != nil {
		return err
	}

	*o = Login(varLogin)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "email")
		delete(additionalProperties, "password")
		delete(additionalProperties, "two_factor")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLogin struct {
	value *Login
	isSet bool
}

func (v NullableLogin) Get() *Login {
	return v.value
}

func (v *NullableLogin) Set(val *Login) {
	v.value = val
	v.isSet = true
}

func (v NullableLogin) IsSet() bool {
	return v.isSet
}

func (v *NullableLogin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogin(val *Login) *NullableLogin {
	return &NullableLogin{value: val, isSet: true}
}

func (v NullableLogin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


