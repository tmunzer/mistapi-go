/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the Rrm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Rrm{}

// Rrm RRM
type Rrm struct {
	// proposal on band 2.4G, key is ap_id, value is the proposal
	Band24 map[string]RrmBand `json:"band_24"`
	Band24Metric RrmBandMetric `json:"band_24_metric"`
	// proposal on band 5G, key is ap_id, value is the proposal
	Band5 map[string]RrmBand `json:"band_5"`
	Band5Metric RrmBandMetric `json:"band_5_metric"`
	// proposal on band 6G, key is ap_id, value is the proposal
	Band6 *map[string]RrmBand `json:"band_6,omitempty"`
	Band6Metric *RrmBandMetric `json:"band_6_metric,omitempty"`
	Rftemplate RfTemplate `json:"rftemplate"`
	RftemplateId string `json:"rftemplate_id"`
	RftemplateName string `json:"rftemplate_name"`
	Status RrmStatus `json:"status"`
	// time where the status was updated
	Timestamp float32 `json:"timestamp"`
	AdditionalProperties map[string]interface{}
}

type _Rrm Rrm

// NewRrm instantiates a new Rrm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRrm(band24 map[string]RrmBand, band24Metric RrmBandMetric, band5 map[string]RrmBand, band5Metric RrmBandMetric, rftemplate RfTemplate, rftemplateId string, rftemplateName string, status RrmStatus, timestamp float32) *Rrm {
	this := Rrm{}
	this.Band24 = band24
	this.Band24Metric = band24Metric
	this.Band5 = band5
	this.Band5Metric = band5Metric
	this.Rftemplate = rftemplate
	this.RftemplateId = rftemplateId
	this.RftemplateName = rftemplateName
	this.Status = status
	this.Timestamp = timestamp
	return &this
}

// NewRrmWithDefaults instantiates a new Rrm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRrmWithDefaults() *Rrm {
	this := Rrm{}
	return &this
}

// GetBand24 returns the Band24 field value
func (o *Rrm) GetBand24() map[string]RrmBand {
	if o == nil {
		var ret map[string]RrmBand
		return ret
	}

	return o.Band24
}

// GetBand24Ok returns a tuple with the Band24 field value
// and a boolean to check if the value has been set.
func (o *Rrm) GetBand24Ok() (*map[string]RrmBand, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Band24, true
}

// SetBand24 sets field value
func (o *Rrm) SetBand24(v map[string]RrmBand) {
	o.Band24 = v
}

// GetBand24Metric returns the Band24Metric field value
func (o *Rrm) GetBand24Metric() RrmBandMetric {
	if o == nil {
		var ret RrmBandMetric
		return ret
	}

	return o.Band24Metric
}

// GetBand24MetricOk returns a tuple with the Band24Metric field value
// and a boolean to check if the value has been set.
func (o *Rrm) GetBand24MetricOk() (*RrmBandMetric, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Band24Metric, true
}

// SetBand24Metric sets field value
func (o *Rrm) SetBand24Metric(v RrmBandMetric) {
	o.Band24Metric = v
}

// GetBand5 returns the Band5 field value
func (o *Rrm) GetBand5() map[string]RrmBand {
	if o == nil {
		var ret map[string]RrmBand
		return ret
	}

	return o.Band5
}

// GetBand5Ok returns a tuple with the Band5 field value
// and a boolean to check if the value has been set.
func (o *Rrm) GetBand5Ok() (*map[string]RrmBand, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Band5, true
}

// SetBand5 sets field value
func (o *Rrm) SetBand5(v map[string]RrmBand) {
	o.Band5 = v
}

// GetBand5Metric returns the Band5Metric field value
func (o *Rrm) GetBand5Metric() RrmBandMetric {
	if o == nil {
		var ret RrmBandMetric
		return ret
	}

	return o.Band5Metric
}

// GetBand5MetricOk returns a tuple with the Band5Metric field value
// and a boolean to check if the value has been set.
func (o *Rrm) GetBand5MetricOk() (*RrmBandMetric, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Band5Metric, true
}

// SetBand5Metric sets field value
func (o *Rrm) SetBand5Metric(v RrmBandMetric) {
	o.Band5Metric = v
}

// GetBand6 returns the Band6 field value if set, zero value otherwise.
func (o *Rrm) GetBand6() map[string]RrmBand {
	if o == nil || IsNil(o.Band6) {
		var ret map[string]RrmBand
		return ret
	}
	return *o.Band6
}

// GetBand6Ok returns a tuple with the Band6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rrm) GetBand6Ok() (*map[string]RrmBand, bool) {
	if o == nil || IsNil(o.Band6) {
		return nil, false
	}
	return o.Band6, true
}

// HasBand6 returns a boolean if a field has been set.
func (o *Rrm) HasBand6() bool {
	if o != nil && !IsNil(o.Band6) {
		return true
	}

	return false
}

// SetBand6 gets a reference to the given map[string]RrmBand and assigns it to the Band6 field.
func (o *Rrm) SetBand6(v map[string]RrmBand) {
	o.Band6 = &v
}

// GetBand6Metric returns the Band6Metric field value if set, zero value otherwise.
func (o *Rrm) GetBand6Metric() RrmBandMetric {
	if o == nil || IsNil(o.Band6Metric) {
		var ret RrmBandMetric
		return ret
	}
	return *o.Band6Metric
}

// GetBand6MetricOk returns a tuple with the Band6Metric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rrm) GetBand6MetricOk() (*RrmBandMetric, bool) {
	if o == nil || IsNil(o.Band6Metric) {
		return nil, false
	}
	return o.Band6Metric, true
}

// HasBand6Metric returns a boolean if a field has been set.
func (o *Rrm) HasBand6Metric() bool {
	if o != nil && !IsNil(o.Band6Metric) {
		return true
	}

	return false
}

// SetBand6Metric gets a reference to the given RrmBandMetric and assigns it to the Band6Metric field.
func (o *Rrm) SetBand6Metric(v RrmBandMetric) {
	o.Band6Metric = &v
}

// GetRftemplate returns the Rftemplate field value
func (o *Rrm) GetRftemplate() RfTemplate {
	if o == nil {
		var ret RfTemplate
		return ret
	}

	return o.Rftemplate
}

// GetRftemplateOk returns a tuple with the Rftemplate field value
// and a boolean to check if the value has been set.
func (o *Rrm) GetRftemplateOk() (*RfTemplate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rftemplate, true
}

// SetRftemplate sets field value
func (o *Rrm) SetRftemplate(v RfTemplate) {
	o.Rftemplate = v
}

// GetRftemplateId returns the RftemplateId field value
func (o *Rrm) GetRftemplateId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RftemplateId
}

// GetRftemplateIdOk returns a tuple with the RftemplateId field value
// and a boolean to check if the value has been set.
func (o *Rrm) GetRftemplateIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RftemplateId, true
}

// SetRftemplateId sets field value
func (o *Rrm) SetRftemplateId(v string) {
	o.RftemplateId = v
}

// GetRftemplateName returns the RftemplateName field value
func (o *Rrm) GetRftemplateName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RftemplateName
}

// GetRftemplateNameOk returns a tuple with the RftemplateName field value
// and a boolean to check if the value has been set.
func (o *Rrm) GetRftemplateNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RftemplateName, true
}

// SetRftemplateName sets field value
func (o *Rrm) SetRftemplateName(v string) {
	o.RftemplateName = v
}

// GetStatus returns the Status field value
func (o *Rrm) GetStatus() RrmStatus {
	if o == nil {
		var ret RrmStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Rrm) GetStatusOk() (*RrmStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Rrm) SetStatus(v RrmStatus) {
	o.Status = v
}

// GetTimestamp returns the Timestamp field value
func (o *Rrm) GetTimestamp() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *Rrm) GetTimestampOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *Rrm) SetTimestamp(v float32) {
	o.Timestamp = v
}

func (o Rrm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Rrm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["band_24"] = o.Band24
	toSerialize["band_24_metric"] = o.Band24Metric
	toSerialize["band_5"] = o.Band5
	toSerialize["band_5_metric"] = o.Band5Metric
	if !IsNil(o.Band6) {
		toSerialize["band_6"] = o.Band6
	}
	if !IsNil(o.Band6Metric) {
		toSerialize["band_6_metric"] = o.Band6Metric
	}
	toSerialize["rftemplate"] = o.Rftemplate
	toSerialize["rftemplate_id"] = o.RftemplateId
	toSerialize["rftemplate_name"] = o.RftemplateName
	toSerialize["status"] = o.Status
	toSerialize["timestamp"] = o.Timestamp

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Rrm) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"band_24",
		"band_24_metric",
		"band_5",
		"band_5_metric",
		"rftemplate",
		"rftemplate_id",
		"rftemplate_name",
		"status",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRrm := _Rrm{}

	err = json.Unmarshal(data, &varRrm)

	if err != nil {
		return err
	}

	*o = Rrm(varRrm)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "band_24")
		delete(additionalProperties, "band_24_metric")
		delete(additionalProperties, "band_5")
		delete(additionalProperties, "band_5_metric")
		delete(additionalProperties, "band_6")
		delete(additionalProperties, "band_6_metric")
		delete(additionalProperties, "rftemplate")
		delete(additionalProperties, "rftemplate_id")
		delete(additionalProperties, "rftemplate_name")
		delete(additionalProperties, "status")
		delete(additionalProperties, "timestamp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRrm struct {
	value *Rrm
	isSet bool
}

func (v NullableRrm) Get() *Rrm {
	return v.value
}

func (v *NullableRrm) Set(val *Rrm) {
	v.value = val
	v.isSet = true
}

func (v NullableRrm) IsSet() bool {
	return v.isSet
}

func (v *NullableRrm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRrm(val *Rrm) *NullableRrm {
	return &NullableRrm{value: val, isSet: true}
}

func (v NullableRrm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRrm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


