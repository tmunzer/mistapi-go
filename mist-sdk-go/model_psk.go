/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the Psk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Psk{}

// Psk PSK
type Psk struct {
	// sso id for psk created from psk portal
	AdminSsoId *string `json:"admin_sso_id,omitempty"`
	CreatedTime *float32 `json:"created_time,omitempty"`
	// email to send psk expiring notifications to
	Email *string `json:"email,omitempty"`
	// Expire time for this PSK key (epoch time in seconds). Default `null` (as no expiration)
	ExpireTime NullableInt32 `json:"expire_time,omitempty"`
	// Number of days before psk is expired. Used as to when to start sending reminder notification when the psk is about to expire
	ExpiryNotificationTime *int32 `json:"expiry_notification_time,omitempty"`
	Id *string `json:"id,omitempty"`
	// if `usage`==`single`, the mac that this PSK ties to, empty if `auto-binding`
	Mac *string `json:"mac,omitempty"`
	// if `usage`==`macs`, this list contains N number of client mac addresses or mac patterns(11:22:*) or both. This list is capped at 5000
	Macs []string `json:"macs,omitempty"`
	// For Org PSK Only. Max concurrent users for this PSK key. Default is 0 (unlimited)
	MaxUsage *int32 `json:"max_usage,omitempty"`
	ModifiedTime *float32 `json:"modified_time,omitempty"`
	Name string `json:"name"`
	Note *string `json:"note,omitempty"`
	// If set to true, reminder notification will be sent when psk is about to expire
	NotifyExpiry *bool `json:"notify_expiry,omitempty"`
	// If set to true, notification will be sent when psk is created or edited
	NotifyOnCreateOrEdit *bool `json:"notify_on_create_or_edit,omitempty"`
	// previous passphrase of the PSK if it has been rotated
	OldPassphrase *string `json:"old_passphrase,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	// passphrase of the PSK (8-63 character or 64 in hex)
	Passphrase string `json:"passphrase"`
	Role *string `json:"role,omitempty"`
	SiteId *string `json:"site_id,omitempty"`
	// SSID this PSK should be applicable to
	Ssid string `json:"ssid"`
	Usage *PskUsage `json:"usage,omitempty"`
	// VLAN for this PSK key
	VlanId *int32 `json:"vlan_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Psk Psk

// NewPsk instantiates a new Psk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPsk(name string, passphrase string, ssid string) *Psk {
	this := Psk{}
	var maxUsage int32 = 0
	this.MaxUsage = &maxUsage
	this.Name = name
	var notifyExpiry bool = false
	this.NotifyExpiry = &notifyExpiry
	this.Passphrase = passphrase
	this.Ssid = ssid
	var usage PskUsage = PSKUSAGE_MULTI
	this.Usage = &usage
	return &this
}

// NewPskWithDefaults instantiates a new Psk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPskWithDefaults() *Psk {
	this := Psk{}
	var maxUsage int32 = 0
	this.MaxUsage = &maxUsage
	var notifyExpiry bool = false
	this.NotifyExpiry = &notifyExpiry
	var usage PskUsage = PSKUSAGE_MULTI
	this.Usage = &usage
	return &this
}

// GetAdminSsoId returns the AdminSsoId field value if set, zero value otherwise.
func (o *Psk) GetAdminSsoId() string {
	if o == nil || IsNil(o.AdminSsoId) {
		var ret string
		return ret
	}
	return *o.AdminSsoId
}

// GetAdminSsoIdOk returns a tuple with the AdminSsoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Psk) GetAdminSsoIdOk() (*string, bool) {
	if o == nil || IsNil(o.AdminSsoId) {
		return nil, false
	}
	return o.AdminSsoId, true
}

// HasAdminSsoId returns a boolean if a field has been set.
func (o *Psk) HasAdminSsoId() bool {
	if o != nil && !IsNil(o.AdminSsoId) {
		return true
	}

	return false
}

// SetAdminSsoId gets a reference to the given string and assigns it to the AdminSsoId field.
func (o *Psk) SetAdminSsoId(v string) {
	o.AdminSsoId = &v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *Psk) GetCreatedTime() float32 {
	if o == nil || IsNil(o.CreatedTime) {
		var ret float32
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Psk) GetCreatedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *Psk) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given float32 and assigns it to the CreatedTime field.
func (o *Psk) SetCreatedTime(v float32) {
	o.CreatedTime = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Psk) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Psk) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Psk) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Psk) SetEmail(v string) {
	o.Email = &v
}

// GetExpireTime returns the ExpireTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Psk) GetExpireTime() int32 {
	if o == nil || IsNil(o.ExpireTime.Get()) {
		var ret int32
		return ret
	}
	return *o.ExpireTime.Get()
}

// GetExpireTimeOk returns a tuple with the ExpireTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Psk) GetExpireTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpireTime.Get(), o.ExpireTime.IsSet()
}

// HasExpireTime returns a boolean if a field has been set.
func (o *Psk) HasExpireTime() bool {
	if o != nil && o.ExpireTime.IsSet() {
		return true
	}

	return false
}

// SetExpireTime gets a reference to the given NullableInt32 and assigns it to the ExpireTime field.
func (o *Psk) SetExpireTime(v int32) {
	o.ExpireTime.Set(&v)
}
// SetExpireTimeNil sets the value for ExpireTime to be an explicit nil
func (o *Psk) SetExpireTimeNil() {
	o.ExpireTime.Set(nil)
}

// UnsetExpireTime ensures that no value is present for ExpireTime, not even an explicit nil
func (o *Psk) UnsetExpireTime() {
	o.ExpireTime.Unset()
}

// GetExpiryNotificationTime returns the ExpiryNotificationTime field value if set, zero value otherwise.
func (o *Psk) GetExpiryNotificationTime() int32 {
	if o == nil || IsNil(o.ExpiryNotificationTime) {
		var ret int32
		return ret
	}
	return *o.ExpiryNotificationTime
}

// GetExpiryNotificationTimeOk returns a tuple with the ExpiryNotificationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Psk) GetExpiryNotificationTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiryNotificationTime) {
		return nil, false
	}
	return o.ExpiryNotificationTime, true
}

// HasExpiryNotificationTime returns a boolean if a field has been set.
func (o *Psk) HasExpiryNotificationTime() bool {
	if o != nil && !IsNil(o.ExpiryNotificationTime) {
		return true
	}

	return false
}

// SetExpiryNotificationTime gets a reference to the given int32 and assigns it to the ExpiryNotificationTime field.
func (o *Psk) SetExpiryNotificationTime(v int32) {
	o.ExpiryNotificationTime = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Psk) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Psk) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Psk) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Psk) SetId(v string) {
	o.Id = &v
}

// GetMac returns the Mac field value if set, zero value otherwise.
func (o *Psk) GetMac() string {
	if o == nil || IsNil(o.Mac) {
		var ret string
		return ret
	}
	return *o.Mac
}

// GetMacOk returns a tuple with the Mac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Psk) GetMacOk() (*string, bool) {
	if o == nil || IsNil(o.Mac) {
		return nil, false
	}
	return o.Mac, true
}

// HasMac returns a boolean if a field has been set.
func (o *Psk) HasMac() bool {
	if o != nil && !IsNil(o.Mac) {
		return true
	}

	return false
}

// SetMac gets a reference to the given string and assigns it to the Mac field.
func (o *Psk) SetMac(v string) {
	o.Mac = &v
}

// GetMacs returns the Macs field value if set, zero value otherwise.
func (o *Psk) GetMacs() []string {
	if o == nil || IsNil(o.Macs) {
		var ret []string
		return ret
	}
	return o.Macs
}

// GetMacsOk returns a tuple with the Macs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Psk) GetMacsOk() ([]string, bool) {
	if o == nil || IsNil(o.Macs) {
		return nil, false
	}
	return o.Macs, true
}

// HasMacs returns a boolean if a field has been set.
func (o *Psk) HasMacs() bool {
	if o != nil && !IsNil(o.Macs) {
		return true
	}

	return false
}

// SetMacs gets a reference to the given []string and assigns it to the Macs field.
func (o *Psk) SetMacs(v []string) {
	o.Macs = v
}

// GetMaxUsage returns the MaxUsage field value if set, zero value otherwise.
func (o *Psk) GetMaxUsage() int32 {
	if o == nil || IsNil(o.MaxUsage) {
		var ret int32
		return ret
	}
	return *o.MaxUsage
}

// GetMaxUsageOk returns a tuple with the MaxUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Psk) GetMaxUsageOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxUsage) {
		return nil, false
	}
	return o.MaxUsage, true
}

// HasMaxUsage returns a boolean if a field has been set.
func (o *Psk) HasMaxUsage() bool {
	if o != nil && !IsNil(o.MaxUsage) {
		return true
	}

	return false
}

// SetMaxUsage gets a reference to the given int32 and assigns it to the MaxUsage field.
func (o *Psk) SetMaxUsage(v int32) {
	o.MaxUsage = &v
}

// GetModifiedTime returns the ModifiedTime field value if set, zero value otherwise.
func (o *Psk) GetModifiedTime() float32 {
	if o == nil || IsNil(o.ModifiedTime) {
		var ret float32
		return ret
	}
	return *o.ModifiedTime
}

// GetModifiedTimeOk returns a tuple with the ModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Psk) GetModifiedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.ModifiedTime) {
		return nil, false
	}
	return o.ModifiedTime, true
}

// HasModifiedTime returns a boolean if a field has been set.
func (o *Psk) HasModifiedTime() bool {
	if o != nil && !IsNil(o.ModifiedTime) {
		return true
	}

	return false
}

// SetModifiedTime gets a reference to the given float32 and assigns it to the ModifiedTime field.
func (o *Psk) SetModifiedTime(v float32) {
	o.ModifiedTime = &v
}

// GetName returns the Name field value
func (o *Psk) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Psk) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Psk) SetName(v string) {
	o.Name = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *Psk) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Psk) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *Psk) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *Psk) SetNote(v string) {
	o.Note = &v
}

// GetNotifyExpiry returns the NotifyExpiry field value if set, zero value otherwise.
func (o *Psk) GetNotifyExpiry() bool {
	if o == nil || IsNil(o.NotifyExpiry) {
		var ret bool
		return ret
	}
	return *o.NotifyExpiry
}

// GetNotifyExpiryOk returns a tuple with the NotifyExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Psk) GetNotifyExpiryOk() (*bool, bool) {
	if o == nil || IsNil(o.NotifyExpiry) {
		return nil, false
	}
	return o.NotifyExpiry, true
}

// HasNotifyExpiry returns a boolean if a field has been set.
func (o *Psk) HasNotifyExpiry() bool {
	if o != nil && !IsNil(o.NotifyExpiry) {
		return true
	}

	return false
}

// SetNotifyExpiry gets a reference to the given bool and assigns it to the NotifyExpiry field.
func (o *Psk) SetNotifyExpiry(v bool) {
	o.NotifyExpiry = &v
}

// GetNotifyOnCreateOrEdit returns the NotifyOnCreateOrEdit field value if set, zero value otherwise.
func (o *Psk) GetNotifyOnCreateOrEdit() bool {
	if o == nil || IsNil(o.NotifyOnCreateOrEdit) {
		var ret bool
		return ret
	}
	return *o.NotifyOnCreateOrEdit
}

// GetNotifyOnCreateOrEditOk returns a tuple with the NotifyOnCreateOrEdit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Psk) GetNotifyOnCreateOrEditOk() (*bool, bool) {
	if o == nil || IsNil(o.NotifyOnCreateOrEdit) {
		return nil, false
	}
	return o.NotifyOnCreateOrEdit, true
}

// HasNotifyOnCreateOrEdit returns a boolean if a field has been set.
func (o *Psk) HasNotifyOnCreateOrEdit() bool {
	if o != nil && !IsNil(o.NotifyOnCreateOrEdit) {
		return true
	}

	return false
}

// SetNotifyOnCreateOrEdit gets a reference to the given bool and assigns it to the NotifyOnCreateOrEdit field.
func (o *Psk) SetNotifyOnCreateOrEdit(v bool) {
	o.NotifyOnCreateOrEdit = &v
}

// GetOldPassphrase returns the OldPassphrase field value if set, zero value otherwise.
func (o *Psk) GetOldPassphrase() string {
	if o == nil || IsNil(o.OldPassphrase) {
		var ret string
		return ret
	}
	return *o.OldPassphrase
}

// GetOldPassphraseOk returns a tuple with the OldPassphrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Psk) GetOldPassphraseOk() (*string, bool) {
	if o == nil || IsNil(o.OldPassphrase) {
		return nil, false
	}
	return o.OldPassphrase, true
}

// HasOldPassphrase returns a boolean if a field has been set.
func (o *Psk) HasOldPassphrase() bool {
	if o != nil && !IsNil(o.OldPassphrase) {
		return true
	}

	return false
}

// SetOldPassphrase gets a reference to the given string and assigns it to the OldPassphrase field.
func (o *Psk) SetOldPassphrase(v string) {
	o.OldPassphrase = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *Psk) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Psk) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *Psk) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *Psk) SetOrgId(v string) {
	o.OrgId = &v
}

// GetPassphrase returns the Passphrase field value
func (o *Psk) GetPassphrase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Passphrase
}

// GetPassphraseOk returns a tuple with the Passphrase field value
// and a boolean to check if the value has been set.
func (o *Psk) GetPassphraseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Passphrase, true
}

// SetPassphrase sets field value
func (o *Psk) SetPassphrase(v string) {
	o.Passphrase = v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *Psk) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Psk) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *Psk) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *Psk) SetRole(v string) {
	o.Role = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *Psk) GetSiteId() string {
	if o == nil || IsNil(o.SiteId) {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Psk) GetSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *Psk) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *Psk) SetSiteId(v string) {
	o.SiteId = &v
}

// GetSsid returns the Ssid field value
func (o *Psk) GetSsid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ssid
}

// GetSsidOk returns a tuple with the Ssid field value
// and a boolean to check if the value has been set.
func (o *Psk) GetSsidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ssid, true
}

// SetSsid sets field value
func (o *Psk) SetSsid(v string) {
	o.Ssid = v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *Psk) GetUsage() PskUsage {
	if o == nil || IsNil(o.Usage) {
		var ret PskUsage
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Psk) GetUsageOk() (*PskUsage, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *Psk) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given PskUsage and assigns it to the Usage field.
func (o *Psk) SetUsage(v PskUsage) {
	o.Usage = &v
}

// GetVlanId returns the VlanId field value if set, zero value otherwise.
func (o *Psk) GetVlanId() int32 {
	if o == nil || IsNil(o.VlanId) {
		var ret int32
		return ret
	}
	return *o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Psk) GetVlanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VlanId) {
		return nil, false
	}
	return o.VlanId, true
}

// HasVlanId returns a boolean if a field has been set.
func (o *Psk) HasVlanId() bool {
	if o != nil && !IsNil(o.VlanId) {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given int32 and assigns it to the VlanId field.
func (o *Psk) SetVlanId(v int32) {
	o.VlanId = &v
}

func (o Psk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Psk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdminSsoId) {
		toSerialize["admin_sso_id"] = o.AdminSsoId
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if o.ExpireTime.IsSet() {
		toSerialize["expire_time"] = o.ExpireTime.Get()
	}
	if !IsNil(o.ExpiryNotificationTime) {
		toSerialize["expiry_notification_time"] = o.ExpiryNotificationTime
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Mac) {
		toSerialize["mac"] = o.Mac
	}
	if !IsNil(o.Macs) {
		toSerialize["macs"] = o.Macs
	}
	if !IsNil(o.MaxUsage) {
		toSerialize["max_usage"] = o.MaxUsage
	}
	if !IsNil(o.ModifiedTime) {
		toSerialize["modified_time"] = o.ModifiedTime
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.NotifyExpiry) {
		toSerialize["notify_expiry"] = o.NotifyExpiry
	}
	if !IsNil(o.NotifyOnCreateOrEdit) {
		toSerialize["notify_on_create_or_edit"] = o.NotifyOnCreateOrEdit
	}
	if !IsNil(o.OldPassphrase) {
		toSerialize["old_passphrase"] = o.OldPassphrase
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	toSerialize["passphrase"] = o.Passphrase
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.SiteId) {
		toSerialize["site_id"] = o.SiteId
	}
	toSerialize["ssid"] = o.Ssid
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	if !IsNil(o.VlanId) {
		toSerialize["vlan_id"] = o.VlanId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Psk) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"passphrase",
		"ssid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPsk := _Psk{}

	err = json.Unmarshal(data, &varPsk)

	if err != nil {
		return err
	}

	*o = Psk(varPsk)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "admin_sso_id")
		delete(additionalProperties, "created_time")
		delete(additionalProperties, "email")
		delete(additionalProperties, "expire_time")
		delete(additionalProperties, "expiry_notification_time")
		delete(additionalProperties, "id")
		delete(additionalProperties, "mac")
		delete(additionalProperties, "macs")
		delete(additionalProperties, "max_usage")
		delete(additionalProperties, "modified_time")
		delete(additionalProperties, "name")
		delete(additionalProperties, "note")
		delete(additionalProperties, "notify_expiry")
		delete(additionalProperties, "notify_on_create_or_edit")
		delete(additionalProperties, "old_passphrase")
		delete(additionalProperties, "org_id")
		delete(additionalProperties, "passphrase")
		delete(additionalProperties, "role")
		delete(additionalProperties, "site_id")
		delete(additionalProperties, "ssid")
		delete(additionalProperties, "usage")
		delete(additionalProperties, "vlan_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePsk struct {
	value *Psk
	isSet bool
}

func (v NullablePsk) Get() *Psk {
	return v.value
}

func (v *NullablePsk) Set(val *Psk) {
	v.value = val
	v.isSet = true
}

func (v NullablePsk) IsSet() bool {
	return v.isSet
}

func (v *NullablePsk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePsk(val *Psk) *NullablePsk {
	return &NullablePsk{value: val, isSet: true}
}

func (v NullablePsk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePsk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


