/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
	"fmt"
)

// checks if the ConstEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConstEvent{}

// ConstEvent struct for ConstEvent
type ConstEvent struct {
	Description *string `json:"description,omitempty"`
	Display string `json:"display"`
	Example map[string]interface{} `json:"example,omitempty"`
	Key string `json:"key"`
	AdditionalProperties map[string]interface{}
}

type _ConstEvent ConstEvent

// NewConstEvent instantiates a new ConstEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConstEvent(display string, key string) *ConstEvent {
	this := ConstEvent{}
	this.Display = display
	this.Key = key
	return &this
}

// NewConstEventWithDefaults instantiates a new ConstEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConstEventWithDefaults() *ConstEvent {
	this := ConstEvent{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ConstEvent) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstEvent) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ConstEvent) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ConstEvent) SetDescription(v string) {
	o.Description = &v
}

// GetDisplay returns the Display field value
func (o *ConstEvent) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *ConstEvent) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *ConstEvent) SetDisplay(v string) {
	o.Display = v
}

// GetExample returns the Example field value if set, zero value otherwise.
func (o *ConstEvent) GetExample() map[string]interface{} {
	if o == nil || IsNil(o.Example) {
		var ret map[string]interface{}
		return ret
	}
	return o.Example
}

// GetExampleOk returns a tuple with the Example field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConstEvent) GetExampleOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Example) {
		return map[string]interface{}{}, false
	}
	return o.Example, true
}

// HasExample returns a boolean if a field has been set.
func (o *ConstEvent) HasExample() bool {
	if o != nil && !IsNil(o.Example) {
		return true
	}

	return false
}

// SetExample gets a reference to the given map[string]interface{} and assigns it to the Example field.
func (o *ConstEvent) SetExample(v map[string]interface{}) {
	o.Example = v
}

// GetKey returns the Key field value
func (o *ConstEvent) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ConstEvent) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ConstEvent) SetKey(v string) {
	o.Key = v
}

func (o ConstEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConstEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["display"] = o.Display
	if !IsNil(o.Example) {
		toSerialize["example"] = o.Example
	}
	toSerialize["key"] = o.Key

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConstEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"display",
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConstEvent := _ConstEvent{}

	err = json.Unmarshal(data, &varConstEvent)

	if err != nil {
		return err
	}

	*o = ConstEvent(varConstEvent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "display")
		delete(additionalProperties, "example")
		delete(additionalProperties, "key")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConstEvent struct {
	value *ConstEvent
	isSet bool
}

func (v NullableConstEvent) Get() *ConstEvent {
	return v.value
}

func (v *NullableConstEvent) Set(val *ConstEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableConstEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableConstEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConstEvent(val *ConstEvent) *NullableConstEvent {
	return &NullableConstEvent{value: val, isSet: true}
}

func (v NullableConstEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConstEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


