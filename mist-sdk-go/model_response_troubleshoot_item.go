/*
Mist API

> Version: **2406.1.14** > > Date: **July 3, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.14
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistsdkgo

import (
	"encoding/json"
)

// checks if the ResponseTroubleshootItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseTroubleshootItem{}

// ResponseTroubleshootItem struct for ResponseTroubleshootItem
type ResponseTroubleshootItem struct {
	Category *string `json:"category,omitempty"`
	Reason *string `json:"reason,omitempty"`
	Recommendation *string `json:"recommendation,omitempty"`
	Text *string `json:"text,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ResponseTroubleshootItem ResponseTroubleshootItem

// NewResponseTroubleshootItem instantiates a new ResponseTroubleshootItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseTroubleshootItem() *ResponseTroubleshootItem {
	this := ResponseTroubleshootItem{}
	return &this
}

// NewResponseTroubleshootItemWithDefaults instantiates a new ResponseTroubleshootItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseTroubleshootItemWithDefaults() *ResponseTroubleshootItem {
	this := ResponseTroubleshootItem{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *ResponseTroubleshootItem) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTroubleshootItem) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *ResponseTroubleshootItem) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *ResponseTroubleshootItem) SetCategory(v string) {
	o.Category = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ResponseTroubleshootItem) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTroubleshootItem) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ResponseTroubleshootItem) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ResponseTroubleshootItem) SetReason(v string) {
	o.Reason = &v
}

// GetRecommendation returns the Recommendation field value if set, zero value otherwise.
func (o *ResponseTroubleshootItem) GetRecommendation() string {
	if o == nil || IsNil(o.Recommendation) {
		var ret string
		return ret
	}
	return *o.Recommendation
}

// GetRecommendationOk returns a tuple with the Recommendation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTroubleshootItem) GetRecommendationOk() (*string, bool) {
	if o == nil || IsNil(o.Recommendation) {
		return nil, false
	}
	return o.Recommendation, true
}

// HasRecommendation returns a boolean if a field has been set.
func (o *ResponseTroubleshootItem) HasRecommendation() bool {
	if o != nil && !IsNil(o.Recommendation) {
		return true
	}

	return false
}

// SetRecommendation gets a reference to the given string and assigns it to the Recommendation field.
func (o *ResponseTroubleshootItem) SetRecommendation(v string) {
	o.Recommendation = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ResponseTroubleshootItem) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseTroubleshootItem) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ResponseTroubleshootItem) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *ResponseTroubleshootItem) SetText(v string) {
	o.Text = &v
}

func (o ResponseTroubleshootItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseTroubleshootItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Recommendation) {
		toSerialize["recommendation"] = o.Recommendation
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResponseTroubleshootItem) UnmarshalJSON(data []byte) (err error) {
	varResponseTroubleshootItem := _ResponseTroubleshootItem{}

	err = json.Unmarshal(data, &varResponseTroubleshootItem)

	if err != nil {
		return err
	}

	*o = ResponseTroubleshootItem(varResponseTroubleshootItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "category")
		delete(additionalProperties, "reason")
		delete(additionalProperties, "recommendation")
		delete(additionalProperties, "text")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResponseTroubleshootItem struct {
	value *ResponseTroubleshootItem
	isSet bool
}

func (v NullableResponseTroubleshootItem) Get() *ResponseTroubleshootItem {
	return v.value
}

func (v *NullableResponseTroubleshootItem) Set(val *ResponseTroubleshootItem) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseTroubleshootItem) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseTroubleshootItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseTroubleshootItem(val *ResponseTroubleshootItem) *NullableResponseTroubleshootItem {
	return &NullableResponseTroubleshootItem{value: val, isSet: true}
}

func (v NullableResponseTroubleshootItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseTroubleshootItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


