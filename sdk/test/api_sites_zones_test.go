/*
Mist API

Testing SitesZonesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mistapigo

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/tmunzer/mistapi-go/sdk"
)

func Test_mistapigo_SitesZonesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SitesZonesAPIService CountSiteZoneSessions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var siteId string
		var zoneType string

		resp, httpRes, err := apiClient.SitesZonesAPI.CountSiteZoneSessions(context.Background(), siteId, zoneType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesZonesAPIService CreateSiteZone", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesZonesAPI.CreateSiteZone(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesZonesAPIService DeleteSiteZone", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var siteId string
		var zoneId string

		httpRes, err := apiClient.SitesZonesAPI.DeleteSiteZone(context.Background(), siteId, zoneId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesZonesAPIService GetSiteZone", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var siteId string
		var zoneId string

		resp, httpRes, err := apiClient.SitesZonesAPI.GetSiteZone(context.Background(), siteId, zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesZonesAPIService GetSiteZoneStats", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var siteId string
		var zoneType string
		var zoneId string

		resp, httpRes, err := apiClient.SitesZonesAPI.GetSiteZoneStats(context.Background(), siteId, zoneType, zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesZonesAPIService ListSiteZones", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesZonesAPI.ListSiteZones(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesZonesAPIService ListSiteZonesStats", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesZonesAPI.ListSiteZonesStats(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesZonesAPIService SearchSiteZoneSessions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var siteId string
		var zoneType string

		resp, httpRes, err := apiClient.SitesZonesAPI.SearchSiteZoneSessions(context.Background(), siteId, zoneType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesZonesAPIService UpdateSiteZone", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var siteId string
		var zoneId string

		resp, httpRes, err := apiClient.SitesZonesAPI.UpdateSiteZone(context.Background(), siteId, zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
