/*
Mist API

> Version: **2406.1.17** > > Date: **July 5, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.17
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistapigo

import (
	"encoding/json"
)

// checks if the JunosOtherIpConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JunosOtherIpConfig{}

// JunosOtherIpConfig optional, if it's required to have switch's L3 presense on a network/vlan
type JunosOtherIpConfig struct {
	// for EVPN, if anycast is desired
	EvpnAnycast *bool `json:"evpn_anycast,omitempty"`
	// required if `type`==`static`
	Ip *string `json:"ip,omitempty"`
	// required if `type6`==`static`
	Ip6 *string `json:"ip6,omitempty"`
	// optional, `subnet` from `network` definition will be used if defined
	Netmask *string `json:"netmask,omitempty"`
	// optional, `subnet` from `network` definition will be used if defined
	Netmask6 *string `json:"netmask6,omitempty"`
	Type *IpType `json:"type,omitempty"`
	Type6 *IpType6 `json:"type6,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JunosOtherIpConfig JunosOtherIpConfig

// NewJunosOtherIpConfig instantiates a new JunosOtherIpConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJunosOtherIpConfig() *JunosOtherIpConfig {
	this := JunosOtherIpConfig{}
	var evpnAnycast bool = false
	this.EvpnAnycast = &evpnAnycast
	var type_ IpType = IPTYPE_DHCP
	this.Type = &type_
	var type6 IpType6 = IPTYPE6_DISABLED
	this.Type6 = &type6
	return &this
}

// NewJunosOtherIpConfigWithDefaults instantiates a new JunosOtherIpConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJunosOtherIpConfigWithDefaults() *JunosOtherIpConfig {
	this := JunosOtherIpConfig{}
	var evpnAnycast bool = false
	this.EvpnAnycast = &evpnAnycast
	var type_ IpType = IPTYPE_DHCP
	this.Type = &type_
	var type6 IpType6 = IPTYPE6_DISABLED
	this.Type6 = &type6
	return &this
}

// GetEvpnAnycast returns the EvpnAnycast field value if set, zero value otherwise.
func (o *JunosOtherIpConfig) GetEvpnAnycast() bool {
	if o == nil || IsNil(o.EvpnAnycast) {
		var ret bool
		return ret
	}
	return *o.EvpnAnycast
}

// GetEvpnAnycastOk returns a tuple with the EvpnAnycast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosOtherIpConfig) GetEvpnAnycastOk() (*bool, bool) {
	if o == nil || IsNil(o.EvpnAnycast) {
		return nil, false
	}
	return o.EvpnAnycast, true
}

// HasEvpnAnycast returns a boolean if a field has been set.
func (o *JunosOtherIpConfig) HasEvpnAnycast() bool {
	if o != nil && !IsNil(o.EvpnAnycast) {
		return true
	}

	return false
}

// SetEvpnAnycast gets a reference to the given bool and assigns it to the EvpnAnycast field.
func (o *JunosOtherIpConfig) SetEvpnAnycast(v bool) {
	o.EvpnAnycast = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *JunosOtherIpConfig) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosOtherIpConfig) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *JunosOtherIpConfig) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *JunosOtherIpConfig) SetIp(v string) {
	o.Ip = &v
}

// GetIp6 returns the Ip6 field value if set, zero value otherwise.
func (o *JunosOtherIpConfig) GetIp6() string {
	if o == nil || IsNil(o.Ip6) {
		var ret string
		return ret
	}
	return *o.Ip6
}

// GetIp6Ok returns a tuple with the Ip6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosOtherIpConfig) GetIp6Ok() (*string, bool) {
	if o == nil || IsNil(o.Ip6) {
		return nil, false
	}
	return o.Ip6, true
}

// HasIp6 returns a boolean if a field has been set.
func (o *JunosOtherIpConfig) HasIp6() bool {
	if o != nil && !IsNil(o.Ip6) {
		return true
	}

	return false
}

// SetIp6 gets a reference to the given string and assigns it to the Ip6 field.
func (o *JunosOtherIpConfig) SetIp6(v string) {
	o.Ip6 = &v
}

// GetNetmask returns the Netmask field value if set, zero value otherwise.
func (o *JunosOtherIpConfig) GetNetmask() string {
	if o == nil || IsNil(o.Netmask) {
		var ret string
		return ret
	}
	return *o.Netmask
}

// GetNetmaskOk returns a tuple with the Netmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosOtherIpConfig) GetNetmaskOk() (*string, bool) {
	if o == nil || IsNil(o.Netmask) {
		return nil, false
	}
	return o.Netmask, true
}

// HasNetmask returns a boolean if a field has been set.
func (o *JunosOtherIpConfig) HasNetmask() bool {
	if o != nil && !IsNil(o.Netmask) {
		return true
	}

	return false
}

// SetNetmask gets a reference to the given string and assigns it to the Netmask field.
func (o *JunosOtherIpConfig) SetNetmask(v string) {
	o.Netmask = &v
}

// GetNetmask6 returns the Netmask6 field value if set, zero value otherwise.
func (o *JunosOtherIpConfig) GetNetmask6() string {
	if o == nil || IsNil(o.Netmask6) {
		var ret string
		return ret
	}
	return *o.Netmask6
}

// GetNetmask6Ok returns a tuple with the Netmask6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosOtherIpConfig) GetNetmask6Ok() (*string, bool) {
	if o == nil || IsNil(o.Netmask6) {
		return nil, false
	}
	return o.Netmask6, true
}

// HasNetmask6 returns a boolean if a field has been set.
func (o *JunosOtherIpConfig) HasNetmask6() bool {
	if o != nil && !IsNil(o.Netmask6) {
		return true
	}

	return false
}

// SetNetmask6 gets a reference to the given string and assigns it to the Netmask6 field.
func (o *JunosOtherIpConfig) SetNetmask6(v string) {
	o.Netmask6 = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *JunosOtherIpConfig) GetType() IpType {
	if o == nil || IsNil(o.Type) {
		var ret IpType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosOtherIpConfig) GetTypeOk() (*IpType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *JunosOtherIpConfig) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given IpType and assigns it to the Type field.
func (o *JunosOtherIpConfig) SetType(v IpType) {
	o.Type = &v
}

// GetType6 returns the Type6 field value if set, zero value otherwise.
func (o *JunosOtherIpConfig) GetType6() IpType6 {
	if o == nil || IsNil(o.Type6) {
		var ret IpType6
		return ret
	}
	return *o.Type6
}

// GetType6Ok returns a tuple with the Type6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JunosOtherIpConfig) GetType6Ok() (*IpType6, bool) {
	if o == nil || IsNil(o.Type6) {
		return nil, false
	}
	return o.Type6, true
}

// HasType6 returns a boolean if a field has been set.
func (o *JunosOtherIpConfig) HasType6() bool {
	if o != nil && !IsNil(o.Type6) {
		return true
	}

	return false
}

// SetType6 gets a reference to the given IpType6 and assigns it to the Type6 field.
func (o *JunosOtherIpConfig) SetType6(v IpType6) {
	o.Type6 = &v
}

func (o JunosOtherIpConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JunosOtherIpConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EvpnAnycast) {
		toSerialize["evpn_anycast"] = o.EvpnAnycast
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Ip6) {
		toSerialize["ip6"] = o.Ip6
	}
	if !IsNil(o.Netmask) {
		toSerialize["netmask"] = o.Netmask
	}
	if !IsNil(o.Netmask6) {
		toSerialize["netmask6"] = o.Netmask6
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Type6) {
		toSerialize["type6"] = o.Type6
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JunosOtherIpConfig) UnmarshalJSON(data []byte) (err error) {
	varJunosOtherIpConfig := _JunosOtherIpConfig{}

	err = json.Unmarshal(data, &varJunosOtherIpConfig)

	if err != nil {
		return err
	}

	*o = JunosOtherIpConfig(varJunosOtherIpConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "evpn_anycast")
		delete(additionalProperties, "ip")
		delete(additionalProperties, "ip6")
		delete(additionalProperties, "netmask")
		delete(additionalProperties, "netmask6")
		delete(additionalProperties, "type")
		delete(additionalProperties, "type6")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJunosOtherIpConfig struct {
	value *JunosOtherIpConfig
	isSet bool
}

func (v NullableJunosOtherIpConfig) Get() *JunosOtherIpConfig {
	return v.value
}

func (v *NullableJunosOtherIpConfig) Set(val *JunosOtherIpConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableJunosOtherIpConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableJunosOtherIpConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJunosOtherIpConfig(val *JunosOtherIpConfig) *NullableJunosOtherIpConfig {
	return &NullableJunosOtherIpConfig{value: val, isSet: true}
}

func (v NullableJunosOtherIpConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJunosOtherIpConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


