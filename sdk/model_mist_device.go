/*
Mist API

> Version: **2406.1.17** > > Date: **July 5, 2024**  ---  ### Additional Documentation * [Mist Automation Guide](https://www.juniper.net/documentation/us/en/software/mist/automation-integration/index.html) * [Mist Location SDK](https://www.juniper.net/documentation/us/en/software/mist/location_services/topics/concept/mist-how-get-mist-sdk.html) * [Mist Product Updates](https://www.mist.com/documentation/category/product-updates/)  ---  ### Helpful Resources * [API Sandbox and Exercises](https://api-class.mist.com/) * [Postman Collection, Runners and Webhook Samples](https://www.postman.com/juniper-mist/workspace/mist-systems-s-public-workspace) * [API Demo Apps](https://apps.mist-lab.fr/) * [Juniper Blog](https://blogs.juniper.net/)  --- 

API version: 2406.1.17
Contact: tmunzer@juniper.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistapigo

import (
	"encoding/json"
	"fmt"
)

// MistDevice struct for MistDevice
type MistDevice struct {
	Ap *Ap
	Gateway *Gateway
	ModelSwitch *ModelSwitch
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *MistDevice) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into Ap
	err = json.Unmarshal(data, &dst.Ap);
	if err == nil {
		jsonAp, _ := json.Marshal(dst.Ap)
		if string(jsonAp) == "{}" { // empty struct
			dst.Ap = nil
		} else {
			return nil // data stored in dst.Ap, return on the first match
		}
	} else {
		dst.Ap = nil
	}

	// try to unmarshal JSON data into Gateway
	err = json.Unmarshal(data, &dst.Gateway);
	if err == nil {
		jsonGateway, _ := json.Marshal(dst.Gateway)
		if string(jsonGateway) == "{}" { // empty struct
			dst.Gateway = nil
		} else {
			return nil // data stored in dst.Gateway, return on the first match
		}
	} else {
		dst.Gateway = nil
	}

	// try to unmarshal JSON data into ModelSwitch
	err = json.Unmarshal(data, &dst.ModelSwitch);
	if err == nil {
		jsonModelSwitch, _ := json.Marshal(dst.ModelSwitch)
		if string(jsonModelSwitch) == "{}" { // empty struct
			dst.ModelSwitch = nil
		} else {
			return nil // data stored in dst.ModelSwitch, return on the first match
		}
	} else {
		dst.ModelSwitch = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(MistDevice)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *MistDevice) MarshalJSON() ([]byte, error) {
	if src.Ap != nil {
		return json.Marshal(&src.Ap)
	}

	if src.Gateway != nil {
		return json.Marshal(&src.Gateway)
	}

	if src.ModelSwitch != nil {
		return json.Marshal(&src.ModelSwitch)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableMistDevice struct {
	value *MistDevice
	isSet bool
}

func (v NullableMistDevice) Get() *MistDevice {
	return v.value
}

func (v *NullableMistDevice) Set(val *MistDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableMistDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableMistDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMistDevice(val *MistDevice) *NullableMistDevice {
	return &NullableMistDevice{value: val, isSet: true}
}

func (v NullableMistDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMistDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


